// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"aMN3l":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "23d9892fa2b4c36f";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"6mQMX":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$cf3d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$cf3d.prelude(module);

try {
var _react = require("react");
var _reactDom = require("react-dom");
var _tldraw = require("@tldraw/tldraw");
const App = ()=>{
    return(/*#__PURE__*/ _react.createElement(_tldraw.TLDraw, {
        __source: {
            fileName: "index.tsx",
            lineNumber: 6
        },
        __self: undefined
    }));
};
_reactDom.render(/*#__PURE__*/ _react.createElement(App, {
    __source: {
        fileName: "index.tsx",
        lineNumber: 9
    },
    __self: undefined
}), document.getElementById('root'));

  $parcel$ReactRefreshHelpers$cf3d.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"2vIKB","react-dom":"4iRhS","@tldraw/tldraw":"5fT3M","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"2vIKB":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"caebu"}],"caebu":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"gkVGz"}],"gkVGz":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"4iRhS":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"21NYj"}],"21NYj":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"2vIKB","object-assign":"gkVGz","scheduler":"46aoL","scheduler/tracing":"97KfR"}],"46aoL":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"4Hbz3"}],"4Hbz3":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"97KfR":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"j0vNt"}],"j0vNt":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"5fT3M":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$ad2f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$ad2f.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlignType", ()=>AlignType
);
parcelHelpers.export(exports, "ColorStyle", ()=>ColorStyle
);
parcelHelpers.export(exports, "DashStyle", ()=>DashStyle
);
parcelHelpers.export(exports, "DistributeType", ()=>DistributeType
);
parcelHelpers.export(exports, "FontSize", ()=>FontSize
);
parcelHelpers.export(exports, "MoveType", ()=>MoveType
);
parcelHelpers.export(exports, "SizeStyle", ()=>SizeStyle
);
parcelHelpers.export(exports, "StretchType", ()=>StretchType
);
parcelHelpers.export(exports, "TLDraw", ()=>TLDraw
);
parcelHelpers.export(exports, "TLDrawShapeType", ()=>TLDrawShapeType
);
parcelHelpers.export(exports, "TLDrawShapeUtil", ()=>TLDrawShapeUtil1
);
parcelHelpers.export(exports, "TLDrawState", ()=>TLDrawState
);
parcelHelpers.export(exports, "TLDrawToolType", ()=>TLDrawToolType
);
parcelHelpers.export(exports, "createShape", ()=>createShape
);
parcelHelpers.export(exports, "defaultStyle", ()=>defaultStyle
);
parcelHelpers.export(exports, "fills", ()=>fills
);
parcelHelpers.export(exports, "getFontSize", ()=>getFontSize
);
parcelHelpers.export(exports, "getFontStyle", ()=>getFontStyle
);
parcelHelpers.export(exports, "getPerfectDashProps", ()=>getPerfectDashProps
);
parcelHelpers.export(exports, "getShapeStyle", ()=>getShapeStyle
);
parcelHelpers.export(exports, "getShapeUtils", ()=>getShapeUtils
);
parcelHelpers.export(exports, "getStrokeWidth", ()=>getStrokeWidth
);
parcelHelpers.export(exports, "strokes", ()=>strokes
);
parcelHelpers.export(exports, "tldrawShapeUtils", ()=>tldrawShapeUtils
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactId = require("@radix-ui/react-id");
var _core = require("@tldraw/core");
var _perfectFreehand = require("perfect-freehand");
var _perfectFreehandDefault = parcelHelpers.interopDefault(_perfectFreehand);
var _reactHotkeysHook = require("react-hotkeys-hook");
var _react1 = require("@stitches/react");
var _reactContextMenu = require("@radix-ui/react-context-menu");
var _reactTooltip = require("@radix-ui/react-tooltip");
var _reactDropdownMenu = require("@radix-ui/react-dropdown-menu");
var _reactRadioGroup = require("@radix-ui/react-radio-group");
var _reactIcons = require("@radix-ui/react-icons");
var _reactCheckbox = require("@radix-ui/react-checkbox");
var _zustand = require("zustand");
var _zustandDefault = parcelHelpers.interopDefault(_zustand);
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$();
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var TLDrawToolType;
(function(TLDrawToolType1) {
    TLDrawToolType1["Draw"] = "draw";
    TLDrawToolType1["Bounds"] = "bounds";
    TLDrawToolType1["Point"] = "point";
    TLDrawToolType1["Points"] = "points";
})(TLDrawToolType || (TLDrawToolType = {
}));
var TLDrawShapeType;
(function(TLDrawShapeType1) {
    TLDrawShapeType1["Ellipse"] = "ellipse";
    TLDrawShapeType1["Rectangle"] = "rectangle";
    TLDrawShapeType1["Draw"] = "draw";
})(TLDrawShapeType || (TLDrawShapeType = {
}));
var TLDrawShapeUtil1 = /*#__PURE__*/ function(_TLShapeUtil) {
    _inheritsLoose(TLDrawShapeUtil2, _TLShapeUtil);
    function TLDrawShapeUtil2() {
        return _TLShapeUtil.apply(this, arguments) || this;
    }
    return TLDrawShapeUtil2;
}(_core.TLShapeUtil);
var ColorStyle;
(function(ColorStyle1) {
    ColorStyle1["White"] = "White";
    ColorStyle1["LightGray"] = "LightGray";
    ColorStyle1["Gray"] = "Gray";
    ColorStyle1["Black"] = "Black";
    ColorStyle1["Green"] = "Green";
    ColorStyle1["Cyan"] = "Cyan";
    ColorStyle1["Blue"] = "Blue";
    ColorStyle1["Indigo"] = "Indigo";
    ColorStyle1["Violet"] = "Violet";
    ColorStyle1["Red"] = "Red";
    ColorStyle1["Orange"] = "Orange";
    ColorStyle1["Yellow"] = "Yellow";
})(ColorStyle || (ColorStyle = {
}));
var SizeStyle;
(function(SizeStyle1) {
    SizeStyle1["Small"] = "Small";
    SizeStyle1["Medium"] = "Medium";
    SizeStyle1["Large"] = "Large";
})(SizeStyle || (SizeStyle = {
}));
var DashStyle;
(function(DashStyle1) {
    DashStyle1["Draw"] = "Draw";
    DashStyle1["Solid"] = "Solid";
    DashStyle1["Dashed"] = "Dashed";
    DashStyle1["Dotted"] = "Dotted";
})(DashStyle || (DashStyle = {
}));
var FontSize;
(function(FontSize1) {
    FontSize1["Small"] = "Small";
    FontSize1["Medium"] = "Medium";
    FontSize1["Large"] = "Large";
    FontSize1["ExtraLarge"] = "ExtraLarge";
})(FontSize || (FontSize = {
}));
var _colors, _extends2, _extends3, _strokeWidths, _fontSizes;
var canvasLight = '#fafafa';
var canvasDark = '#343d45';
var colors = (_colors = {
}, _colors[ColorStyle.Black] = '#212528', _colors[ColorStyle.White] = '#f0f1f3', _colors[ColorStyle.LightGray] = '#c6cbd1', _colors[ColorStyle.Gray] = '#788492', _colors[ColorStyle.Green] = '#36b24d', _colors[ColorStyle.Cyan] = '#0e98ad', _colors[ColorStyle.Blue] = '#1c7ed6', _colors[ColorStyle.Indigo] = '#4263eb', _colors[ColorStyle.Violet] = '#7746f1', _colors[ColorStyle.Red] = '#ff2133', _colors[ColorStyle.Orange] = '#ff9433', _colors[ColorStyle.Yellow] = '#ffc936', _colors);
var strokes = {
    light: colors,
    dark: /*#__PURE__*/ _extends({
    }, /*#__PURE__*/ Object.fromEntries(/*#__PURE__*/ Object.entries(colors).map(function(_ref) {
        var k = _ref[0], v = _ref[1];
        return [
            k,
            _core.Utils.lerpColor(v, canvasDark, 0.1)
        ];
    })), (_extends2 = {
    }, _extends2[ColorStyle.White] = '#ffffff', _extends2[ColorStyle.Black] = '#000', _extends2))
};
var fills = {
    light: /*#__PURE__*/ _extends({
    }, /*#__PURE__*/ Object.fromEntries(/*#__PURE__*/ Object.entries(colors).map(function(_ref2) {
        var k = _ref2[0], v = _ref2[1];
        return [
            k,
            _core.Utils.lerpColor(v, canvasLight, 0.82)
        ];
    })), (_extends3 = {
    }, _extends3[ColorStyle.White] = '#ffffff', _extends3[ColorStyle.Black] = '#ffffff', _extends3)),
    dark: /*#__PURE__*/ Object.fromEntries(/*#__PURE__*/ Object.entries(colors).map(function(_ref3) {
        var k = _ref3[0], v = _ref3[1];
        return [
            k,
            _core.Utils.lerpColor(v, canvasDark, 0.618)
        ];
    }))
};
var strokeWidths = (_strokeWidths = {
}, _strokeWidths[SizeStyle.Small] = 2, _strokeWidths[SizeStyle.Medium] = 4, _strokeWidths[SizeStyle.Large] = 8, _strokeWidths);
var fontSizes = (_fontSizes = {
}, _fontSizes[SizeStyle.Small] = 24, _fontSizes[SizeStyle.Medium] = 48, _fontSizes[SizeStyle.Large] = 72, _fontSizes.auto = 'auto', _fontSizes);
function getStrokeWidth(size) {
    return strokeWidths[size];
}
function getFontSize(size) {
    return fontSizes[size];
}
function getFontStyle(scale, style) {
    var fontSize = getFontSize(style.size);
    return fontSize * scale + "px/1.4 Verveine Regular";
}
function getShapeStyle(style, isDarkMode) {
    if (isDarkMode === void 0) isDarkMode = false;
    var color = style.color, size = style.size, isFilled = style.isFilled;
    var strokeWidth = getStrokeWidth(size);
    var theme = isDarkMode ? 'dark' : 'light';
    return {
        stroke: strokes[theme][color],
        fill: isFilled ? fills[theme][color] : 'none',
        strokeWidth: strokeWidth
    };
}
var defaultStyle = {
    color: ColorStyle.Black,
    size: SizeStyle.Medium,
    isFilled: false,
    dash: DashStyle.Draw
};
/**
 * Get balanced dash-strokearray and dash-strokeoffset properties for a path of a given length.
 * @param length The length of the path.
 * @param strokeWidth The shape's stroke-width property.
 * @param style The stroke's style: "dashed" or "dotted" (default "dashed").
 * @param snap An interval for dashes (e.g. 4 will produce arrays with 4, 8, 16, etc dashes).
 */ function getPerfectDashProps(length, strokeWidth, style, snap) {
    if (snap === void 0) snap = 1;
    var dashLength;
    var strokeDashoffset;
    var ratio;
    if (style === DashStyle.Solid || style === DashStyle.Draw) return {
        strokeDasharray: 'none',
        strokeDashoffset: 'none'
    };
    else if (style === DashStyle.Dashed) {
        dashLength = strokeWidth * 2;
        ratio = 1;
        strokeDashoffset = (dashLength / 2).toString();
    } else {
        dashLength = strokeWidth / 100;
        ratio = 100;
        strokeDashoffset = '0';
    }
    var dashes = Math.floor(length / dashLength / (2 * ratio));
    dashes -= dashes % snap;
    if (dashes === 0) dashes = 1;
    var gapLength = (length - dashes * dashLength) / dashes;
    return {
        strokeDasharray: [
            dashLength,
            gapLength
        ].join(' '),
        strokeDashoffset: strokeDashoffset
    };
}
var Rectangle1 = /*#__PURE__*/ function(_TLDrawShapeUtil) {
    _inheritsLoose(Rectangle2, _TLDrawShapeUtil);
    function Rectangle2() {
        var _this;
        _this = _TLDrawShapeUtil.apply(this, arguments) || this;
        _this.type = TLDrawShapeType.Rectangle;
        _this.toolType = TLDrawToolType.Bounds;
        _this.pathCache = new WeakMap([]);
        _this.defaultProps = {
            id: 'id',
            type: TLDrawShapeType.Rectangle,
            name: 'Rectangle',
            parentId: 'page',
            childIndex: 1,
            point: [
                0,
                0
            ],
            size: [
                1,
                1
            ],
            rotation: 0,
            radius: 0,
            style: defaultStyle
        };
        return _this;
    }
    var _proto = Rectangle2.prototype;
    _proto.render = function render(shape, _ref) {
        var isBinding = _ref.isBinding, isHovered = _ref.isHovered, isDarkMode = _ref.isDarkMode;
        var id = shape.id, size = shape.size, style = shape.style;
        var styles = getShapeStyle(style, isDarkMode);
        var strokeWidth = +styles.strokeWidth;
        if (style.dash === DashStyle.Draw) {
            var pathData = _core.Utils.getFromCache(this.pathCache, shape.size, function() {
                return renderPath(shape);
            });
            return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, isBinding && /*#__PURE__*/ _react.createElement("rect", {
                className: "tl-binding-indicator",
                x: strokeWidth / 2 - 32,
                y: strokeWidth / 2 - 32,
                width: Math.max(0, size[0] - strokeWidth / 2) + 64,
                height: Math.max(0, size[1] - strokeWidth / 2) + 64
            }), /*#__PURE__*/ _react.createElement("rect", {
                x: +styles.strokeWidth / 2,
                y: +styles.strokeWidth / 2,
                width: Math.max(0, size[0] - strokeWidth),
                height: Math.max(0, size[1] - strokeWidth),
                fill: style.isFilled ? styles.fill : 'transparent',
                stroke: "none",
                pointerEvents: "all"
            }), /*#__PURE__*/ _react.createElement("path", {
                d: pathData,
                fill: styles.stroke,
                stroke: styles.stroke,
                strokeWidth: styles.strokeWidth,
                filter: isHovered ? 'url(#expand)' : 'none',
                pointerEvents: "all"
            })));
        }
        var sw = strokeWidth * 1.618;
        var w = Math.max(0, size[0] - sw / 2);
        var h = Math.max(0, size[1] - sw / 2);
        var strokes1 = [
            [
                [
                    sw / 2,
                    sw / 2
                ],
                [
                    w,
                    sw / 2
                ],
                w - sw / 2
            ],
            [
                [
                    w,
                    sw / 2
                ],
                [
                    w,
                    h
                ],
                h - sw / 2
            ],
            [
                [
                    w,
                    h
                ],
                [
                    sw / 2,
                    h
                ],
                w - sw / 2
            ],
            [
                [
                    sw / 2,
                    h
                ],
                [
                    sw / 2,
                    sw / 2
                ],
                h - sw / 2
            ]
        ];
        var paths = strokes1.map(function(_ref2, i) {
            var start = _ref2[0], end = _ref2[1], length = _ref2[2];
            var _getPerfectDashProps = getPerfectDashProps(length, sw, shape.style.dash), strokeDasharray = _getPerfectDashProps.strokeDasharray, strokeDashoffset = _getPerfectDashProps.strokeDashoffset;
            return(/*#__PURE__*/ _react.createElement("line", {
                key: id + '_' + i,
                x1: start[0],
                y1: start[1],
                x2: end[0],
                y2: end[1],
                stroke: styles.stroke,
                strokeWidth: sw,
                strokeLinecap: "round",
                strokeDasharray: strokeDasharray,
                strokeDashoffset: strokeDashoffset
            }));
        });
        return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, isBinding && /*#__PURE__*/ _react.createElement("rect", {
            className: "tl-binding-indicator",
            x: sw / 2 - 32,
            y: sw / 2 - 32,
            width: w + 64,
            height: h + 64
        }), /*#__PURE__*/ _react.createElement("rect", {
            x: sw / 2,
            y: sw / 2,
            width: w,
            height: h,
            fill: styles.fill,
            stroke: "transparent",
            strokeWidth: sw,
            pointerEvents: "all"
        }), /*#__PURE__*/ _react.createElement("g", {
            filter: isHovered ? 'url(#expand)' : 'none',
            pointerEvents: "stroke"
        }, paths)));
    };
    _proto.getBounds = function getBounds(shape) {
        var bounds = _core.Utils.getFromCache(this.boundsCache, shape, function() {
            var _shape$size = shape.size, width = _shape$size[0], height = _shape$size[1];
            return {
                minX: 0,
                maxX: width,
                minY: 0,
                maxY: height,
                width: width,
                height: height
            };
        });
        return _core.Utils.translateBounds(bounds, shape.point);
    };
    _proto.getRotatedBounds = function getRotatedBounds(shape) {
        return _core.Utils.getBoundsFromPoints(_core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation));
    };
    _proto.getCenter = function getCenter(shape) {
        return _core.Utils.getBoundsCenter(this.getBounds(shape));
    };
    _proto.hitTest = function hitTest(shape, point) {
        return _core.Utils.pointInBounds(point, this.getBounds(shape));
    };
    _proto.hitTestBounds = function hitTestBounds(shape, bounds) {
        var rotatedCorners = _core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation);
        return rotatedCorners.every(function(point) {
            return _core.Utils.pointInBounds(point, bounds);
        }) || _core.Intersect.polyline.bounds(rotatedCorners, bounds).length > 0;
    };
    _proto.transform = function transform(shape, bounds, _ref3) {
        var initialShape = _ref3.initialShape, transformOrigin = _ref3.transformOrigin, scaleX = _ref3.scaleX, scaleY = _ref3.scaleY;
        if (!shape.rotation && !shape.isAspectRatioLocked) return {
            point: _core.Vec.round([
                bounds.minX,
                bounds.minY
            ]),
            size: _core.Vec.round([
                bounds.width,
                bounds.height
            ])
        };
        else {
            var size = _core.Vec.round(_core.Vec.mul(initialShape.size, Math.min(Math.abs(scaleX), Math.abs(scaleY))));
            var point = _core.Vec.round([
                bounds.minX + (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]),
                bounds.minY + (bounds.height - shape.size[1]) * (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1])
            ]);
            var rotation = scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? initialShape.rotation ? -initialShape.rotation : 0 : initialShape.rotation;
            return {
                size: size,
                point: point,
                rotation: rotation
            };
        }
    };
    _proto.transformSingle = function transformSingle(shape, bounds, info) {
        return {
            size: _core.Vec.round([
                bounds.width,
                bounds.height
            ]),
            point: _core.Vec.round([
                bounds.minX,
                bounds.minY
            ])
        };
    };
    return Rectangle2;
}(TLDrawShapeUtil1);
var rectangle = /*#__PURE__*/ new Rectangle1();
function renderPath(shape) {
    var styles = getShapeStyle(shape.style);
    var getRandom = _core.Utils.rng(shape.id);
    var strokeWidth = +styles.strokeWidth;
    var baseOffset = strokeWidth / 2;
    var offsets = Array.from(Array(4)).map(function() {
        return [
            getRandom() * baseOffset,
            getRandom() * baseOffset
        ];
    });
    var sw = strokeWidth;
    var w = Math.max(0, shape.size[0] - sw / 2);
    var h = Math.max(0, shape.size[1] - sw / 2);
    var tl = _core.Vec.add([
        sw / 2,
        sw / 2
    ], offsets[0]);
    var tr = _core.Vec.add([
        w,
        sw / 2
    ], offsets[1]);
    var br = _core.Vec.add([
        w,
        h
    ], offsets[2]);
    var bl = _core.Vec.add([
        sw / 2,
        h
    ], offsets[3]);
    var lines = _core.Utils.shuffleArr([
        _core.Vec.pointsBetween(tr, br),
        _core.Vec.pointsBetween(br, bl),
        _core.Vec.pointsBetween(bl, tl),
        _core.Vec.pointsBetween(tl, tr)
    ], Math.floor(5 + getRandom() * 4));
    var stroke = _perfectFreehandDefault.default([].concat(lines.flat().slice(2), lines[0], lines[0].slice(4)), {
        size: 1 + +styles.strokeWidth,
        thinning: 0.6,
        easing: function easing(t) {
            return t * t * t * t;
        },
        end: {
            taper: +styles.strokeWidth * 20
        },
        start: {
            taper: +styles.strokeWidth * 20
        },
        simulatePressure: false
    });
    return _core.Utils.getSvgPathFromStroke(stroke);
}
var Ellipse1 = /*#__PURE__*/ function(_TLDrawShapeUtil) {
    _inheritsLoose(Ellipse2, _TLDrawShapeUtil);
    function Ellipse2() {
        var _this;
        _this = _TLDrawShapeUtil.apply(this, arguments) || this;
        _this.type = TLDrawShapeType.Ellipse;
        _this.toolType = TLDrawToolType.Bounds;
        _this.pathCache = new WeakMap([]);
        _this.defaultProps = {
            id: 'id',
            type: TLDrawShapeType.Ellipse,
            name: 'Ellipse',
            parentId: 'page',
            childIndex: 1,
            point: [
                0,
                0
            ],
            radius: [
                1,
                1
            ],
            rotation: 0,
            style: defaultStyle
        };
        return _this;
    }
    var _proto = Ellipse2.prototype;
    _proto.render = function render(shape, _ref) {
        var _this2 = this;
        var isDarkMode = _ref.isDarkMode, isBinding = _ref.isBinding;
        var _shape$radius = shape.radius, radiusX = _shape$radius[0], radiusY = _shape$radius[1], style = shape.style;
        var styles = getShapeStyle(style, isDarkMode);
        var strokeWidth = +styles.strokeWidth;
        var rx = Math.max(0, radiusX - strokeWidth / 2);
        var ry = Math.max(0, radiusY - strokeWidth / 2);
        if (style.dash === DashStyle.Draw) {
            var path = _core.Utils.getFromCache(this.pathCache, shape, function() {
                return renderPath$1(shape, _this2.getCenter(shape));
            });
            return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, isBinding && /*#__PURE__*/ _react.createElement("ellipse", {
                className: "tl-binding-indicator",
                cx: radiusX,
                cy: radiusY,
                rx: rx + 2,
                ry: ry + 2
            }), /*#__PURE__*/ _react.createElement("ellipse", {
                cx: radiusX,
                cy: radiusY,
                rx: rx,
                ry: ry,
                stroke: "none",
                fill: style.isFilled ? styles.fill : 'transparent',
                pointerEvents: "all"
            }), /*#__PURE__*/ _react.createElement("path", {
                d: path,
                fill: styles.stroke,
                stroke: styles.stroke,
                strokeWidth: strokeWidth,
                pointerEvents: "all",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            })));
        }
        var h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
        var perimeter = Math.PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
        var _getPerfectDashProps = getPerfectDashProps(perimeter, strokeWidth * 1.618, shape.style.dash, 4), strokeDasharray = _getPerfectDashProps.strokeDasharray, strokeDashoffset = _getPerfectDashProps.strokeDashoffset;
        var sw = strokeWidth * 1.618;
        return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, isBinding && /*#__PURE__*/ _react.createElement("ellipse", {
            className: "tl-binding-indicator",
            cx: radiusX,
            cy: radiusY,
            rx: rx + 32,
            ry: ry + 32
        }), /*#__PURE__*/ _react.createElement("ellipse", {
            cx: radiusX,
            cy: radiusY,
            rx: rx,
            ry: ry,
            fill: styles.fill,
            stroke: styles.stroke,
            strokeWidth: sw,
            strokeDasharray: strokeDasharray,
            strokeDashoffset: strokeDashoffset,
            pointerEvents: "all",
            strokeLinecap: "round",
            strokeLinejoin: "round"
        })));
    };
    _proto.getBounds = function getBounds(shape) {
        return _core.Utils.getFromCache(this.boundsCache, shape, function() {
            return _core.Utils.getRotatedEllipseBounds(shape.point[0], shape.point[1], shape.radius[0], shape.radius[1], shape.rotation || 0);
        });
    };
    _proto.getRotatedBounds = function getRotatedBounds(shape) {
        return _core.Utils.getBoundsFromPoints(_core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation));
    };
    _proto.getCenter = function getCenter(shape) {
        return _core.Utils.getBoundsCenter(this.getBounds(shape));
    };
    _proto.hitTest = function hitTest(shape, point) {
        return _core.Utils.pointInBounds(point, this.getBounds(shape));
    };
    _proto.hitTestBounds = function hitTestBounds(shape, bounds) {
        var rotatedCorners = _core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation);
        return rotatedCorners.every(function(point) {
            return _core.Utils.pointInBounds(point, bounds);
        }) || _core.Intersect.polyline.bounds(rotatedCorners, bounds).length > 0;
    };
    _proto.transform = function transform(shape, bounds, _ref2) {
        var scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, initialShape = _ref2.initialShape;
        var _initialShape$rotatio = initialShape.rotation, rotation = _initialShape$rotatio === void 0 ? 0 : _initialShape$rotatio;
        return {
            point: [
                bounds.minX,
                bounds.minY
            ],
            radius: [
                bounds.width / 2,
                bounds.height / 2
            ],
            rotation: scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? -(rotation || 0) : rotation || 0
        };
    };
    _proto.transformSingle = function transformSingle(shape, bounds) {
        return {
            point: _core.Vec.round([
                bounds.minX,
                bounds.minY
            ]),
            radius: _core.Vec.div([
                bounds.width,
                bounds.height
            ], 2)
        };
    };
    return Ellipse2;
}(TLDrawShapeUtil1);
var ellipse = /*#__PURE__*/ new Ellipse1();
function renderPath$1(shape, boundsCenter) {
    var style = shape.style, id = shape.id, _shape$radius2 = shape.radius, radiusX = _shape$radius2[0], radiusY = _shape$radius2[1], point = shape.point;
    var getRandom = _core.Utils.rng(id);
    var center = _core.Vec.sub(boundsCenter, point);
    var strokeWidth = +getShapeStyle(style).strokeWidth;
    var rx = radiusX + getRandom() * strokeWidth - strokeWidth / 2;
    var ry = radiusY + getRandom() * strokeWidth - strokeWidth / 2;
    var points = [];
    var start = Math.PI + Math.PI * getRandom();
    var overlap = Math.PI / 12;
    for(var i = 2; i < 8; i++){
        var rads = start + overlap * 2 * (i / 8);
        var x = rx * Math.cos(rads) + center[0];
        var y = ry * Math.sin(rads) + center[1];
        points.push([
            x,
            y
        ]);
    }
    for(var _i = 5; _i < 32; _i++){
        var t = _i / 35;
        var _rads = start + overlap * 2 + Math.PI * 2.5 * (t * t * t);
        var _x = rx * Math.cos(_rads) + center[0];
        var _y = ry * Math.sin(_rads) + center[1];
        points.push([
            _x,
            _y
        ]);
    }
    for(var _i2 = 0; _i2 < 8; _i2++){
        var _rads2 = start + overlap * 2 * (_i2 / 4);
        var _x2 = rx * Math.cos(_rads2) + center[0];
        var _y2 = ry * Math.sin(_rads2) + center[1];
        points.push([
            _x2,
            _y2
        ]);
    }
    var stroke = _perfectFreehandDefault.default(points, {
        size: 1 + strokeWidth,
        thinning: 0.6,
        easing: function easing(t) {
            return t * t * t * t;
        },
        end: {
            taper: strokeWidth * 20
        },
        start: {
            taper: strokeWidth * 20
        },
        simulatePressure: false
    });
    return _core.Utils.getSvgPathFromStroke(stroke);
}
var Draw1 = /*#__PURE__*/ function(_TLDrawShapeUtil) {
    _inheritsLoose(Draw2, _TLDrawShapeUtil);
    function Draw2() {
        var _this;
        _this = _TLDrawShapeUtil.apply(this, arguments) || this;
        _this.type = TLDrawShapeType.Draw;
        _this.toolType = TLDrawToolType.Draw;
        _this.pointsBoundsCache = new WeakMap([]);
        _this.rotatedCache = new WeakMap([]);
        _this.drawPathCache = new WeakMap([]);
        _this.simplePathCache = new WeakMap([]);
        _this.polygonCache = new WeakMap([]);
        _this.defaultProps = {
            id: 'id',
            type: TLDrawShapeType.Draw,
            name: 'Draw',
            parentId: 'page',
            childIndex: 1,
            point: [
                0,
                0
            ],
            points: [
                [
                    0,
                    0,
                    0.5
                ]
            ],
            rotation: 0,
            radius: 0,
            style: defaultStyle
        };
        return _this;
    }
    var _proto = Draw2.prototype;
    _proto.render = function render(shape, _ref) {
        var _DashStyle$Draw$DashS, _DashStyle$Draw$DashS2;
        var isHovered = _ref.isHovered, isDarkMode = _ref.isDarkMode;
        var points = shape.points, style = shape.style;
        var styles = getShapeStyle(style, isDarkMode);
        var strokeWidth = +styles.strokeWidth;
        var shouldFill = style.isFilled && points.length > 3 && _core.Vec.dist(points[0], points[points.length - 1]) < +styles.strokeWidth * 2; // For very short lines, draw a point instead of a line
        if (points.length > 0 && points.length < 3) {
            var _sw = strokeWidth * 0.618;
            return(/*#__PURE__*/ _react.createElement("circle", {
                r: strokeWidth * 0.618,
                fill: styles.stroke,
                stroke: styles.stroke,
                strokeWidth: _sw,
                pointerEvents: "all",
                filter: isHovered ? 'url(#expand)' : 'none'
            }));
        } // For drawn lines, draw a line from the path cache
        if (shape.style.dash === DashStyle.Draw) {
            var polygonPathData = _core.Utils.getFromCache(this.polygonCache, points, function() {
                return getFillPath(shape);
            });
            var drawPathData = _core.Utils.getFromCache(this.drawPathCache, points, function() {
                return getDrawStrokePath(shape);
            });
            return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, shouldFill && /*#__PURE__*/ _react.createElement("path", {
                d: polygonPathData,
                stroke: "none",
                fill: styles.fill,
                strokeLinejoin: "round",
                strokeLinecap: "round",
                pointerEvents: "fill"
            }), /*#__PURE__*/ _react.createElement("path", {
                d: drawPathData,
                fill: styles.stroke,
                stroke: styles.stroke,
                strokeWidth: strokeWidth,
                strokeLinejoin: "round",
                strokeLinecap: "round",
                pointerEvents: "all",
                filter: isHovered ? 'url(#expand)' : 'none'
            })));
        } // For solid, dash and dotted lines, draw a regular stroke path
        var strokeDasharray = (_DashStyle$Draw$DashS = {
        }, _DashStyle$Draw$DashS[DashStyle.Draw] = 'none', _DashStyle$Draw$DashS[DashStyle.Solid] = "none", _DashStyle$Draw$DashS[DashStyle.Dotted] = strokeWidth / 10 + " " + strokeWidth * 3, _DashStyle$Draw$DashS[DashStyle.Dashed] = strokeWidth * 3 + " " + strokeWidth * 3, _DashStyle$Draw$DashS)[style.dash];
        var strokeDashoffset = (_DashStyle$Draw$DashS2 = {
        }, _DashStyle$Draw$DashS2[DashStyle.Draw] = 'none', _DashStyle$Draw$DashS2[DashStyle.Solid] = "none", _DashStyle$Draw$DashS2[DashStyle.Dotted] = "-" + strokeWidth / 20, _DashStyle$Draw$DashS2[DashStyle.Dashed] = "-" + strokeWidth, _DashStyle$Draw$DashS2)[style.dash];
        var path = _core.Utils.getFromCache(this.simplePathCache, points, function() {
            return getSolidStrokePath(shape);
        });
        var sw = strokeWidth * 1.618;
        return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("path", {
            d: path,
            fill: shouldFill ? styles.fill : 'none',
            stroke: "transparent",
            strokeWidth: Math.min(4, strokeWidth * 2),
            strokeLinejoin: "round",
            strokeLinecap: "round",
            pointerEvents: shouldFill ? 'all' : 'stroke'
        }), /*#__PURE__*/ _react.createElement("path", {
            d: path,
            fill: "transparent",
            stroke: styles.stroke,
            strokeWidth: sw,
            strokeDasharray: strokeDasharray,
            strokeDashoffset: strokeDashoffset,
            strokeLinejoin: "round",
            strokeLinecap: "round",
            pointerEvents: "stroke",
            filter: isHovered ? 'url(#expand)' : 'none'
        })));
    };
    _proto.getBounds = function getBounds(shape) {
        return _core.Utils.translateBounds(_core.Utils.getFromCache(this.pointsBoundsCache, shape.points, function() {
            return _core.Utils.getBoundsFromPoints(shape.points);
        }), shape.point);
    };
    _proto.getRotatedBounds = function getRotatedBounds(shape) {
        return _core.Utils.translateBounds(_core.Utils.getBoundsFromPoints(shape.points, shape.rotation), shape.point);
    };
    _proto.getCenter = function getCenter(shape) {
        return _core.Utils.getBoundsCenter(this.getBounds(shape));
    };
    _proto.hitTest = function hitTest(shape, point) {
        return true;
    };
    _proto.hitTestBounds = function hitTestBounds(shape, brushBounds) {
        // Test axis-aligned shape
        if (!shape.rotation) {
            var bounds = this.getBounds(shape);
            return _core.Utils.boundsContain(brushBounds, bounds) || (_core.Utils.boundsContain(bounds, brushBounds) || _core.Intersect.bounds.bounds(bounds, brushBounds).length > 0) && _core.Intersect.polyline.bounds(shape.points, _core.Utils.translateBounds(brushBounds, _core.Vec.neg(shape.point))).length > 0;
        } // Test rotated shape
        var rBounds = this.getRotatedBounds(shape);
        var rotatedBounds = _core.Utils.getFromCache(this.rotatedCache, shape, function() {
            var c = _core.Utils.getBoundsCenter(_core.Utils.getBoundsFromPoints(shape.points));
            return shape.points.map(function(pt) {
                return _core.Vec.rotWith(pt, c, shape.rotation || 0);
            });
        });
        return _core.Utils.boundsContain(brushBounds, rBounds) || _core.Intersect.bounds.polyline(_core.Utils.translateBounds(brushBounds, _core.Vec.neg(shape.point)), rotatedBounds).length > 0;
    };
    _proto.transform = function transform(shape, bounds, _ref2) {
        var initialShape = _ref2.initialShape, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY;
        var initialShapeBounds = _core.Utils.getFromCache(this.boundsCache, initialShape, function() {
            return _core.Utils.getBoundsFromPoints(initialShape.points);
        });
        var points = initialShape.points.map(function(_ref3) {
            var x = _ref3[0], y = _ref3[1], r = _ref3[2];
            return [
                bounds.width * (scaleX < 0 // * sin?
                 ? 1 - x / initialShapeBounds.width : x / initialShapeBounds.width),
                bounds.height * (scaleY < 0 // * cos?
                 ? 1 - y / initialShapeBounds.height : y / initialShapeBounds.height),
                r
            ];
        });
        var newBounds = _core.Utils.getBoundsFromPoints(shape.points);
        var point = _core.Vec.sub([
            bounds.minX,
            bounds.minY
        ], [
            newBounds.minX,
            newBounds.minY
        ]);
        return {
            points: points,
            point: point
        };
    };
    _proto.transformSingle = function transformSingle(shape, bounds, info) {
        return this.transform(shape, bounds, info);
    };
    _proto.onSessionComplete = function onSessionComplete(shape) {
        var bounds = this.getBounds(shape);
        var _Vec$sub = _core.Vec.sub([
            bounds.minX,
            bounds.minY
        ], shape.point), x1 = _Vec$sub[0], y1 = _Vec$sub[1];
        return {
            points: shape.points.map(function(_ref4) {
                var x0 = _ref4[0], y0 = _ref4[1], p = _ref4[2];
                return [
                    x0 - x1,
                    y0 - y1,
                    p
                ];
            }),
            point: _core.Vec.add(shape.point, [
                x1,
                y1
            ])
        };
    };
    return Draw2;
}(TLDrawShapeUtil1);
var draw = /*#__PURE__*/ new Draw1();
var simulatePressureSettings = {
    simulatePressure: true
};
var realPressureSettings = {
    easing: function easing(t) {
        return t * t;
    },
    simulatePressure: false,
    start: {
        taper: 1
    },
    end: {
        taper: 1
    }
};
function getFillPath(shape) {
    var styles = getShapeStyle(shape.style);
    if (shape.points.length < 2) return '';
    return _core.Utils.getSvgPathFromStroke(_perfectFreehand.getStrokePoints(shape.points, {
        size: 1 + +styles.strokeWidth * 2,
        thinning: 0.85,
        end: {
            taper: +styles.strokeWidth * 20
        },
        start: {
            taper: +styles.strokeWidth * 20
        }
    }).map(function(pt) {
        return pt.point;
    }));
}
function getDrawStrokePath(shape) {
    var styles = getShapeStyle(shape.style);
    if (shape.points.length < 2) return '';
    var options = shape.points[1][2] === 0.5 ? simulatePressureSettings : realPressureSettings;
    var stroke = _perfectFreehandDefault.default(shape.points, _extends({
        size: 1 + +styles.strokeWidth * 2,
        thinning: 0.85,
        end: {
            taper: +styles.strokeWidth * 10
        },
        start: {
            taper: +styles.strokeWidth * 10
        }
    }, options));
    return _core.Utils.getSvgPathFromStroke(stroke);
}
function getSolidStrokePath(shape) {
    var points = shape.points;
    var len = points.length;
    if (len === 0) return 'M 0 0 L 0 0';
    if (len < 3) return "M " + points[0][0] + " " + points[0][1];
    points = _perfectFreehand.getStrokePoints(points).map(function(pt) {
        return pt.point;
    });
    len = points.length;
    var d = points.reduce(function(acc, _ref5, i, arr) {
        var x0 = _ref5[0], y0 = _ref5[1];
        if (i === len - 1) {
            acc.push('L', x0, y0);
            return acc;
        }
        var _arr = arr[i + 1], x1 = _arr[0], y1 = _arr[1];
        acc.push(x0.toFixed(2), y0.toFixed(2), ((x0 + x1) / 2).toFixed(2), ((y0 + y1) / 2).toFixed(2));
        return acc;
    }, [
        'M',
        points[0][0],
        points[0][1],
        'Q'
    ]);
    var path = d.join(' ').replaceAll(/(\s[0-9]*\.[0-9]{2})([0-9]*)\b/g, '$1');
    return path;
}
var tldrawShapeUtils = {
    rectangle: rectangle,
    ellipse: ellipse,
    draw: draw
};
function getShapeUtils(shape) {
    return tldrawShapeUtils[shape.type];
}
function createShape(type, props) {
    return tldrawShapeUtils[type].create(props);
}
function useKeyboardShortcuts(tlstate) {
    _s();
    _reactDefault.default.useEffect(function() {
        var handleKeyDown = function handleKeyDown1(e) {
            var info = _core.inputs.keydown(e);
            tlstate.onKeyDown(e.key, info);
        };
        var handleKeyUp = function handleKeyUp1(e) {
            var info = _core.inputs.keyup(e);
            tlstate.onKeyUp(e.key, info);
        };
        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('keyup', handleKeyUp);
        return function() {
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [
        tlstate
    ]);
    _reactHotkeysHook.useHotkeys('command+z', function(e) {
        tlstate.undo();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('ctrl+shift-z,command+shift+z', function(e) {
        tlstate.redo();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('ctrl+d,command+d', function(e) {
        tlstate.duplicate();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('ctrl+s,command+s', function(e) {
        tlstate.save();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('ctrl+=,command+=', function(e) {
        tlstate.zoomIn();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('ctrl+-,command+-', function(e) {
        tlstate.zoomOut();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+1', function(e) {
        tlstate.zoomToFit();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+2', function(e) {
        tlstate.zoomToSelection();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+0', function(e) {
        tlstate.zoomToActual();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('escape', function(e) {
        tlstate.cancel();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('backspace', function(e) {
        tlstate["delete"]();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('command+a,ctrl+a', function(e) {
        tlstate.selectAll();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('up', function(e) {
        tlstate.nudge([
            0,
            -1
        ], false);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('right', function(e) {
        tlstate.nudge([
            1,
            0
        ], false);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('down', function(e) {
        tlstate.nudge([
            0,
            1
        ], false);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('left', function(e) {
        tlstate.nudge([
            -1,
            0
        ], false);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+up', function(e) {
        tlstate.nudge([
            0,
            -1
        ], true);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+right', function(e) {
        tlstate.nudge([
            1,
            0
        ], true);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+down', function(e) {
        tlstate.nudge([
            0,
            1
        ], true);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+left', function(e) {
        tlstate.nudge([
            -1,
            0
        ], true);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('[', function(e) {
        tlstate.moveBackward();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys(']', function(e) {
        tlstate.moveForward();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+[', function(e) {
        tlstate.moveToBack();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('shift+]', function(e) {
        tlstate.moveToFront();
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('v,1', function(e) {
        tlstate.selectTool('select');
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('d,2', function(e) {
        tlstate.selectTool(TLDrawShapeType.Draw);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('r,3', function(e) {
        tlstate.selectTool(TLDrawShapeType.Rectangle);
        e.preventDefault();
    });
    _reactHotkeysHook.useHotkeys('e,4', function(e) {
        tlstate.selectTool(TLDrawShapeType.Ellipse);
        e.preventDefault();
    });
}
_s(useKeyboardShortcuts, "X3HcLerp0Us+HNJL4EbaZ4nJMLQ=", false, function() {
    return [_reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys, _reactHotkeysHook.useHotkeys];
});
var TLDrawContext = /*#__PURE__*/ _react.createContext({
});
function useTLDrawContext() {
    _s1();
    var context = _react.useContext(TLDrawContext);
    return context;
}
_s1(useTLDrawContext, "b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=");
function useTheme() {
    return {
        theme: 'light',
        toggle: function toggle() {
            return null;
        }
    };
}
var _createCss = /*#__PURE__*/ _react1.createCss({
    themeMap: /*#__PURE__*/ _extends({
    }, _react1.defaultThemeMap),
    theme: {
        colors: {
            codeHl: 'rgba(144, 144, 144, .15)',
            brushFill: 'rgba(0,0,0,.05)',
            brushStroke: 'rgba(0,0,0,.25)',
            hint: 'rgba(216, 226, 249, 1.000)',
            selected: 'rgba(66, 133, 244, 1.000)',
            bounds: 'rgba(65, 132, 244, 1.000)',
            boundsBg: 'rgba(65, 132, 244, 0.05)',
            highlight: 'rgba(65, 132, 244, 0.15)',
            overlay: 'rgba(0, 0, 0, 0.15)',
            overlayContrast: 'rgba(255, 255, 255, 0.15)',
            border: '#aaaaaa',
            canvas: '#f8f9fa',
            panel: '#fefefe',
            inactive: '#cccccf',
            hover: '#efefef',
            text: '#333333',
            tooltipBg: '#1d1d1d',
            tooltipText: '#ffffff',
            muted: '#777777',
            input: '#f3f3f3',
            inputBorder: '#dddddd',
            warn: 'rgba(255, 100, 100, 1)',
            lineError: 'rgba(255, 0, 0, .1)'
        },
        shadows: {
            2: '0px 1px 1px rgba(0, 0, 0, 0.14)',
            3: '0px 2px 3px rgba(0, 0, 0, 0.14)',
            4: '0px 4px 5px -1px rgba(0, 0, 0, 0.14)',
            8: '0px 12px 17px rgba(0, 0, 0, 0.14)',
            12: '0px 12px 17px rgba(0, 0, 0, 0.14)',
            24: '0px 24px 38px rgba(0, 0, 0, 0.14)',
            key: '1px 1px rgba(0,0,0,1)'
        },
        space: {
            0: '2px',
            1: '3px',
            2: '4px',
            3: '8px',
            4: '12px',
            5: '16px'
        },
        fontSizes: {
            0: '10px',
            1: '12px',
            2: '13px',
            3: '16px',
            4: '18px'
        },
        fonts: {
            ui: '"Recursive", system-ui, sans-serif',
            body: '"Recursive", system-ui, sans-serif',
            mono: '"Recursive Mono", monospace'
        },
        fontWeights: {
        },
        lineHeights: {
        },
        letterSpacings: {
        },
        sizes: {
        },
        borderWidths: {
            0: '$1'
        },
        borderStyles: {
        },
        radii: {
            0: '2px',
            1: '4px',
            2: '8px'
        },
        zIndices: {
        },
        transitions: {
        }
    },
    media: {
        sm: '(min-width: 640px)',
        md: '(min-width: 768px)'
    },
    utils: {
        zDash: function zDash() {
            return function(value) {
                return {
                    strokeDasharray: "calc(" + value + "px / var(--camera-zoom)) calc(" + value + "px / var(--camera-zoom))"
                };
            };
        },
        zStrokeWidth: function zStrokeWidth() {
            return function(value) {
                if (Array.isArray(value)) return {
                    strokeWidth: "calc(" + value[0] + "px / var(--camera-zoom))"
                };
                return {
                    strokeWidth: "calc(" + value + "px / var(--camera-zoom))"
                };
            };
        }
    }
}), styled = _createCss.styled;
function commandKey() {
    return _core.Utils.isDarwin() ? '⌘' : 'Ctrl';
}
function Kbd(_ref) {
    var variant = _ref.variant, children = _ref.children;
    if (_core.Utils.isMobile()) return null;
    return(/*#__PURE__*/ _react.createElement(StyledKbd, {
        variant: variant
    }, children.replaceAll('#', commandKey()).split('').map(function(k, i) {
        return(/*#__PURE__*/ _react.createElement("span", {
            key: i
        }, k));
    })));
}
_c = Kbd;
var StyledKbd = /*#__PURE__*/ styled('kbd', {
    marginLeft: '$3',
    textShadow: '$2',
    textAlign: 'center',
    fontSize: '$0',
    fontFamily: '$ui',
    fontWeight: 400,
    gap: '$1',
    display: 'flex',
    alignItems: 'center',
    '& > span': {
        padding: '$0',
        borderRadius: '$0',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    },
    variants: {
        variant: {
            tooltip: {
                '& > span': {
                    background: '$overlayContrast',
                    boxShadow: '$key',
                    width: '20px',
                    height: '20px'
                }
            },
            menu: {
            }
        }
    }
});
_c1 = StyledKbd;
function Tooltip(_ref) {
    var children = _ref.children, label = _ref.label, kbd = _ref.kbd, _ref$side = _ref.side, side = _ref$side === void 0 ? 'top' : _ref$side;
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactTooltip.Root, null, /*#__PURE__*/ _reactDefault.default.createElement(_reactTooltip.Trigger, {
        as: "span"
    }, children), /*#__PURE__*/ _reactDefault.default.createElement(StyledContent, {
        side: side,
        sideOffset: 8
    }, label, kbd ? /*#__PURE__*/ _reactDefault.default.createElement(Kbd, {
        variant: "tooltip"
    }, kbd) : null, /*#__PURE__*/ _reactDefault.default.createElement(StyledArrow, null))));
}
_c2 = Tooltip;
var StyledContent = /*#__PURE__*/ styled(_reactTooltip.Content, {
    borderRadius: 3,
    padding: '$3 $3 $3 $3',
    fontSize: '$1',
    backgroundColor: '$tooltipBg',
    color: '$tooltipText',
    boxShadow: '$3',
    display: 'flex',
    alignItems: 'center',
    fontFamily: '$ui'
});
_c3 = StyledContent;
var StyledArrow = /*#__PURE__*/ styled(_reactTooltip.Arrow, {
    fill: '$tooltipBg',
    margin: '0 8px'
});
_c4 = StyledArrow;
var _excluded = [
    "size"
];
var _pageButton;
var breakpoints = {
    '@initial': 'mobile',
    '@sm': 'small'
};
var IconButton = /*#__PURE__*/ styled('button', {
    position: 'relative',
    height: '32px',
    width: '32px',
    backgroundColor: '$panel',
    borderRadius: '4px',
    padding: '0',
    margin: '0',
    display: 'grid',
    alignItems: 'center',
    justifyContent: 'center',
    outline: 'none',
    border: 'none',
    pointerEvents: 'all',
    fontSize: '$0',
    color: '$text',
    cursor: 'pointer',
    '& > *': {
        gridRow: 1,
        gridColumn: 1
    },
    '&:disabled': {
        opacity: '0.5'
    },
    '& > span': {
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center'
    },
    variants: {
        bp: {
            mobile: {
                backgroundColor: 'transparent'
            },
            small: {
                '&:hover:not(:disabled)': {
                    backgroundColor: '$hover'
                }
            }
        },
        size: {
            small: {
                height: 32,
                width: 32,
                '& svg:nth-of-type(1)': {
                    height: '16px',
                    width: '16px'
                }
            },
            medium: {
                height: 44,
                width: 44,
                '& svg:nth-of-type(1)': {
                    height: '18px',
                    width: '18px'
                }
            },
            large: {
                height: 44,
                width: 44,
                '& svg:nth-of-type(1)': {
                    height: '20px',
                    width: '20px'
                }
            }
        },
        isActive: {
            "true": {
                color: '$selected'
            }
        }
    }
});
_c5 = IconButton;
var RowButton = /*#__PURE__*/ styled('button', {
    position: 'relative',
    display: 'flex',
    width: '100%',
    background: 'none',
    height: '32px',
    border: 'none',
    cursor: 'pointer',
    color: '$text',
    outline: 'none',
    alignItems: 'center',
    fontFamily: '$ui',
    fontWeight: 400,
    fontSize: '$1',
    justifyContent: 'space-between',
    padding: '4px 8px 4px 12px',
    borderRadius: 4,
    userSelect: 'none',
    '& label': {
        fontWeight: '$1',
        margin: 0,
        padding: 0
    },
    '& svg': {
        position: 'relative',
        stroke: '$overlay',
        strokeWidth: 1,
        zIndex: 1
    },
    '&[data-disabled]': {
        opacity: 0.3
    },
    '&:disabled': {
        opacity: 0.3
    },
    variants: {
        bp: {
            mobile: {
            },
            small: {
                '& *[data-shy="true"]': {
                    opacity: 0
                },
                '&:hover:not(:disabled)': {
                    backgroundColor: '$hover',
                    '& *[data-shy="true"]': {
                        opacity: 1
                    }
                }
            }
        },
        size: {
            icon: {
                padding: '4px ',
                width: 'auto'
            }
        },
        variant: {
            noIcon: {
                padding: '4px 12px'
            },
            pageButton: (_pageButton = {
                display: 'grid',
                gridTemplateColumns: '24px auto',
                width: '100%',
                paddingLeft: '$1',
                gap: '$3',
                justifyContent: 'flex-start'
            }, _pageButton["& > *[data-state=\"checked\"]"] = {
                gridRow: 1,
                gridColumn: 1
            }, _pageButton['& > span'] = {
                gridRow: 1,
                gridColumn: 2,
                width: '100%'
            }, _pageButton)
        },
        warn: {
            "true": {
                color: '$warn'
            }
        },
        isActive: {
            "true": {
                backgroundColor: '$hover'
            }
        }
    }
});
_c6 = RowButton;
var IconWrapper = /*#__PURE__*/ styled('div', {
    height: '100%',
    borderRadius: '4px',
    marginRight: '1px',
    display: 'grid',
    alignItems: 'center',
    justifyContent: 'center',
    outline: 'none',
    border: 'none',
    pointerEvents: 'all',
    cursor: 'pointer',
    color: '$text',
    '& svg': {
        height: 22,
        width: 22,
        strokeWidth: 1
    },
    '& > *': {
        gridRow: 1,
        gridColumn: 1
    },
    variants: {
        size: {
            small: {
                '& svg': {
                    height: '16px',
                    width: '16px'
                }
            },
            medium: {
                '& svg': {
                    height: '22px',
                    width: '22px'
                }
            }
        }
    }
});
_c7 = IconWrapper;
var ButtonsRow = /*#__PURE__*/ styled('div', {
    position: 'relative',
    display: 'flex',
    width: '100%',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    outline: 'none',
    alignItems: 'center',
    justifyContent: 'flex-start',
    padding: 0
});
_c8 = ButtonsRow;
var FloatingContainer = /*#__PURE__*/ styled('div', {
    backgroundColor: '$panel',
    border: '1px solid $panel',
    borderRadius: '4px',
    boxShadow: '$4',
    display: 'flex',
    height: 'fit-content',
    padding: '$0',
    pointerEvents: 'all',
    position: 'relative',
    userSelect: 'none',
    zIndex: 200,
    variants: {
        direction: {
            row: {
                flexDirection: 'row'
            },
            column: {
                flexDirection: 'column'
            }
        },
        elevation: {
            0: {
                boxShadow: 'none'
            },
            2: {
                boxShadow: '$2'
            },
            3: {
                boxShadow: '$3'
            },
            4: {
                boxShadow: '$4'
            }
        }
    }
});
_c9 = FloatingContainer;
/* -------------------------------------------------- */ /*                        Menus                       */ /* -------------------------------------------------- */ var MenuContent = /*#__PURE__*/ styled('div', {
    position: 'relative',
    overflow: 'hidden',
    userSelect: 'none',
    zIndex: 180,
    minWidth: 180,
    pointerEvents: 'all',
    backgroundColor: '$panel',
    border: '1px solid $panel',
    padding: '$0',
    boxShadow: '$4',
    borderRadius: '4px',
    font: '$ui'
});
_c10 = MenuContent;
var Divider = /*#__PURE__*/ styled('div', {
    backgroundColor: '$hover',
    height: 1,
    marginTop: '$2',
    marginRight: '-$2',
    marginBottom: '$2',
    marginLeft: '-$2'
});
_c11 = Divider;
function DropdownMenuIconTriggerButton(_ref6) {
    var label = _ref6.label, kbd = _ref6.kbd, children = _ref6.children, _ref6$disabled = _ref6.disabled, disabled = _ref6$disabled === void 0 ? false : _ref6$disabled;
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDropdownMenu.Trigger, {
        as: IconButton,
        bp: breakpoints,
        disabled: disabled
    }, /*#__PURE__*/ _reactDefault.default.createElement(Tooltip, {
        label: label,
        kbd: kbd
    }, children)));
}
_c12 = DropdownMenuIconTriggerButton;
/* -------------------------------------------------- */ /*                    Context Menu                   */ /* -------------------------------------------------- */ function ContextMenuRoot(_ref8) {
    var onOpenChange = _ref8.onOpenChange, children = _ref8.children;
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactContextMenu.Root, {
        dir: "ltr",
        onOpenChange: onOpenChange
    }, children));
}
_c13 = ContextMenuRoot;
function ContextMenuSubMenu(_ref9) {
    var children = _ref9.children, label = _ref9.label;
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactContextMenu.Root, {
        dir: "ltr"
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactContextMenu.TriggerItem, {
        as: RowButton,
        bp: breakpoints
    }, /*#__PURE__*/ _reactDefault.default.createElement("span", null, label), /*#__PURE__*/ _reactDefault.default.createElement(IconWrapper, {
        size: "small"
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactIcons.ChevronRightIcon, null))), /*#__PURE__*/ _reactDefault.default.createElement(_reactContextMenu.Content, {
        as: MenuContent,
        sideOffset: 2,
        alignOffset: -2
    }, children, /*#__PURE__*/ _reactDefault.default.createElement(ContextMenuArrow, {
        offset: 13
    }))));
}
_c14 = ContextMenuSubMenu;
var ContextMenuDivider = /*#__PURE__*/ styled(_reactContextMenu.Separator, {
    backgroundColor: '$hover',
    height: 1,
    margin: '$2 -$2'
});
_c15 = ContextMenuDivider;
var ContextMenuArrow = /*#__PURE__*/ styled(_reactContextMenu.Arrow, {
    fill: '$panel'
});
_c16 = ContextMenuArrow;
function ContextMenuButton(_ref10) {
    var onSelect = _ref10.onSelect, children = _ref10.children, _ref10$disabled = _ref10.disabled, disabled = _ref10$disabled === void 0 ? false : _ref10$disabled;
    return(/*#__PURE__*/ _reactDefault.default.createElement(RowButton, {
        as: _reactContextMenu.Item,
        bp: breakpoints,
        disabled: disabled,
        onSelect: onSelect
    }, children));
}
_c17 = ContextMenuButton;
function ContextMenuIconButton(_ref11) {
    var onSelect = _ref11.onSelect, children = _ref11.children, _ref11$disabled = _ref11.disabled, disabled = _ref11$disabled === void 0 ? false : _ref11$disabled;
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactContextMenu.Item, {
        as: IconButton,
        bp: breakpoints,
        disabled: disabled,
        onSelect: onSelect
    }, children));
}
_c18 = ContextMenuIconButton;
function CircleIcon(props) {
    var _props$size = props.size, size = _props$size === void 0 ? 16 : _props$size, rest = _objectWithoutPropertiesLoose(props, _excluded);
    return(/*#__PURE__*/ _reactDefault.default.createElement("svg", Object.assign({
        width: 24,
        height: 24
    }, rest), /*#__PURE__*/ _reactDefault.default.createElement("circle", {
        cx: 12,
        cy: 12,
        r: size / 2
    })));
}
_c19 = CircleIcon;
var MoveType;
(function(MoveType1) {
    MoveType1["Backward"] = "backward";
    MoveType1["Forward"] = "forward";
    MoveType1["ToFront"] = "toFront";
    MoveType1["ToBack"] = "toBack";
})(MoveType || (MoveType = {
}));
var AlignType;
(function(AlignType1) {
    AlignType1["Top"] = "top";
    AlignType1["CenterVertical"] = "centerVertical";
    AlignType1["Bottom"] = "bottom";
    AlignType1["Left"] = "left";
    AlignType1["CenterHorizontal"] = "centerHorizontal";
    AlignType1["Right"] = "right";
})(AlignType || (AlignType = {
}));
var StretchType;
(function(StretchType1) {
    StretchType1["Horizontal"] = "horizontal";
    StretchType1["Vertical"] = "vertical";
})(StretchType || (StretchType = {
}));
var DistributeType;
(function(DistributeType1) {
    DistributeType1["Horizontal"] = "horizontal";
    DistributeType1["Vertical"] = "vertical";
})(DistributeType || (DistributeType = {
}));
var has1SelectedIdsSelector = function has1SelectedIdsSelector1(s) {
    return s.pageState.selectedIds.length > 0;
};
var has2SelectedIdsSelector = function has2SelectedIdsSelector1(s) {
    return s.pageState.selectedIds.length > 1;
};
var has3SelectedIdsSelector = function has3SelectedIdsSelector1(s) {
    return s.pageState.selectedIds.length > 2;
};
var isDebugModeSelector = function isDebugModeSelector1(s) {
    return s.settings.isDebugMode;
};
var hasGroupSelectedSelector = function hasGroupSelectedSelector1(s) {
    return s.pageState.selectedIds.some(function(id) {
        return s.page.shapes[id].children !== undefined;
    });
};
var ContextMenu = /*#__PURE__*/ _react.memo(_s2(function(_ref) {
    _s2();
    var children = _ref.children;
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var hasSelection = useAppState(has1SelectedIdsSelector);
    var hasTwoOrMore = useAppState(has2SelectedIdsSelector);
    var hasThreeOrMore = useAppState(has3SelectedIdsSelector);
    var isDebugMode = useAppState(isDebugModeSelector);
    var hasGroupSelected = useAppState(hasGroupSelectedSelector);
    var rContent = _react.useRef(null);
    var handleDuplicate = _react.useCallback(function() {
        tlstate.duplicate();
    }, [
        tlstate
    ]);
    var handleGroup = _react.useCallback(function() {
        tlstate.group();
    }, [
        tlstate
    ]);
    var handleMoveToBack = _react.useCallback(function() {
        tlstate.moveToBack();
    }, [
        tlstate
    ]);
    var handleMoveBackward = _react.useCallback(function() {
        tlstate.moveBackward();
    }, [
        tlstate
    ]);
    var handleMoveForward = _react.useCallback(function() {
        tlstate.moveForward();
    }, [
        tlstate
    ]);
    var handleMoveToFront = _react.useCallback(function() {
        tlstate.moveToFront();
    }, [
        tlstate
    ]);
    var handleDelete = _react.useCallback(function() {
        tlstate["delete"]();
    }, [
        tlstate
    ]);
    var handleCopyAsJson = _react.useCallback(function() {
        tlstate.copyAsJson();
    }, [
        tlstate
    ]);
    var handleCopyAsSvg = _react.useCallback(function() {
        tlstate.copyAsSvg();
    }, [
        tlstate
    ]);
    var handleUndo = _react.useCallback(function() {
        tlstate.undo();
    }, [
        tlstate
    ]);
    var handleRedo = _react.useCallback(function() {
        tlstate.redo();
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(ContextMenuRoot, null, /*#__PURE__*/ _react.createElement(_reactContextMenu.Trigger, null, children), /*#__PURE__*/ _react.createElement(MenuContent, {
        as: _reactContextMenu.Content,
        ref: rContent
    }, hasSelection ? /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleDuplicate
    }, /*#__PURE__*/ _react.createElement("span", null, "Duplicate"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "#D")), /*#__PURE__*/ _react.createElement(ContextMenuDivider, null), hasGroupSelected || hasTwoOrMore && /*#__PURE__*/ _react.createElement(_react.Fragment, null, hasGroupSelected && /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleGroup
    }, /*#__PURE__*/ _react.createElement("span", null, "Ungroup"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "#\u21E7G")), hasTwoOrMore && /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleGroup
    }, /*#__PURE__*/ _react.createElement("span", null, "Group"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "#G"))), /*#__PURE__*/ _react.createElement(ContextMenuSubMenu, {
        label: "Move"
    }, /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleMoveToFront
    }, /*#__PURE__*/ _react.createElement("span", null, "To Front"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# \u21E7 ]")), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleMoveForward
    }, /*#__PURE__*/ _react.createElement("span", null, "Forward"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# ]")), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleMoveBackward
    }, /*#__PURE__*/ _react.createElement("span", null, "Backward"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# [")), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleMoveToBack
    }, /*#__PURE__*/ _react.createElement("span", null, "To Back"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# \u21E7 ["))), hasTwoOrMore && /*#__PURE__*/ _react.createElement(AlignDistributeSubMenu, {
        hasTwoOrMore: hasTwoOrMore,
        hasThreeOrMore: hasThreeOrMore
    }), isDebugMode && /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleCopyAsJson
    }, /*#__PURE__*/ _react.createElement("span", null, "Copy Data"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# \u21E7 C")), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleCopyAsSvg
    }, /*#__PURE__*/ _react.createElement("span", null, "Copy to SVG"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# \u21E7 C")), /*#__PURE__*/ _react.createElement(ContextMenuDivider, null), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleDelete
    }, /*#__PURE__*/ _react.createElement("span", null, "Delete"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "\u232B"))) : /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleUndo
    }, /*#__PURE__*/ _react.createElement("span", null, "Undo"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# Z")), /*#__PURE__*/ _react.createElement(ContextMenuButton, {
        onSelect: handleRedo
    }, /*#__PURE__*/ _react.createElement("span", null, "Redo"), /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "# \u21E7 Z"))))));
}, "/Px2eLLrgqUaJeMYI/YAAXMvx9c=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c20 = ContextMenu;
function AlignDistributeSubMenu(_ref2) {
    _s3();
    var hasThreeOrMore = _ref2.hasThreeOrMore;
    var _useTLDrawContext2 = useTLDrawContext(), tlstate = _useTLDrawContext2.tlstate;
    var alignTop = _react.useCallback(function() {
        tlstate.align(AlignType.Top);
    }, [
        tlstate
    ]);
    var alignCenterVertical = _react.useCallback(function() {
        tlstate.align(AlignType.CenterVertical);
    }, [
        tlstate
    ]);
    var alignBottom = _react.useCallback(function() {
        tlstate.align(AlignType.Bottom);
    }, [
        tlstate
    ]);
    var stretchVertically = _react.useCallback(function() {
        tlstate.stretch(StretchType.Vertical);
    }, [
        tlstate
    ]);
    var distributeVertically = _react.useCallback(function() {
        tlstate.distribute(DistributeType.Vertical);
    }, [
        tlstate
    ]);
    var alignLeft = _react.useCallback(function() {
        tlstate.align(AlignType.Left);
    }, [
        tlstate
    ]);
    var alignCenterHorizontal = _react.useCallback(function() {
        tlstate.align(AlignType.CenterHorizontal);
    }, [
        tlstate
    ]);
    var alignRight = _react.useCallback(function() {
        tlstate.align(AlignType.Right);
    }, [
        tlstate
    ]);
    var stretchHorizontally = _react.useCallback(function() {
        tlstate.stretch(StretchType.Horizontal);
    }, [
        tlstate
    ]);
    var distributeHorizontally = _react.useCallback(function() {
        tlstate.distribute(DistributeType.Horizontal);
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(ContextMenuRoot, null, /*#__PURE__*/ _react.createElement(_reactContextMenu.TriggerItem, {
        as: RowButton,
        bp: breakpoints
    }, /*#__PURE__*/ _react.createElement("span", null, "Align / Distribute"), /*#__PURE__*/ _react.createElement(IconWrapper, {
        size: "small"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.ChevronRightIcon, null))), /*#__PURE__*/ _react.createElement(StyledGrid, {
        as: _reactContextMenu.Content,
        sideOffset: 2,
        alignOffset: -2,
        selectedStyle: hasThreeOrMore ? 'threeOrMore' : 'twoOrMore'
    }, /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignLeft
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignLeftIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignCenterHorizontal
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignCenterHorizontallyIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignRight
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignRightIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: stretchHorizontally
    }, /*#__PURE__*/ _react.createElement(_reactIcons.StretchHorizontallyIcon, null)), hasThreeOrMore && /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: distributeHorizontally
    }, /*#__PURE__*/ _react.createElement(_reactIcons.SpaceEvenlyHorizontallyIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignTop
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignTopIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignCenterVertical
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignCenterVerticallyIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: alignBottom
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignBottomIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: stretchVertically
    }, /*#__PURE__*/ _react.createElement(_reactIcons.StretchVerticallyIcon, null)), hasThreeOrMore && /*#__PURE__*/ _react.createElement(ContextMenuIconButton, {
        onSelect: distributeVertically
    }, /*#__PURE__*/ _react.createElement(_reactIcons.SpaceEvenlyVerticallyIcon, null)), /*#__PURE__*/ _react.createElement(ContextMenuArrow, {
        offset: 13
    }))));
}
_s3(AlignDistributeSubMenu, "FB/fM7QLi4AHB+nXsp1HfxRjTbg=", false, function() {
    return [
        useTLDrawContext
    ];
});
_c21 = AlignDistributeSubMenu;
var StyledGrid = /*#__PURE__*/ styled(MenuContent, {
    display: 'grid',
    variants: {
        selectedStyle: {
            threeOrMore: {
                gridTemplateColumns: 'repeat(5, auto)'
            },
            twoOrMore: {
                gridTemplateColumns: 'repeat(4, auto)'
            }
        }
    }
}); // function MoveToPageMenu() {
_c22 = StyledGrid;
//   const documentPages = useSelector((s) => s.data.document.pages)
//   const currentPageId = useSelector((s) => s.data.currentPageId)
//   if (!documentPages[currentPageId]) return null
//   const sorted = Object.values(documentPages)
//     .sort((a, b) => a.childIndex - b.childIndex)
//     .filter((a) => a.id !== currentPageId)
//   if (sorted.length === 0) return null
//   return (
//     <ContextMenuRoot>
//       <ContextMenuButton>
//         <span>Move To Page</span>
//         <IconWrapper size="small">
//           <ChevronRightIcon />
//         </IconWrapper>
//       </ContextMenuButton>
//       <MenuContent as={_ContextMenu.Content} sideOffset={2} alignOffset={-2}>
//         {sorted.map(({ id, name }) => (
//           <ContextMenuButton
//             key={id}
//             disabled={id === currentPageId}
//             onSelect={() => state.send('MOVED_TO_PAGE', { id })}
//           >
//             <span>{name}</span>
//           </ContextMenuButton>
//         ))}
//         <ContextMenuArrow offset={13} />
//       </MenuContent>
//     </ContextMenuRoot>
//   )
// }
function SvgRedo(props) {
    return(/*#__PURE__*/ _react.createElement("svg", Object.assign({
        viewBox: "0 0 15 15",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12.5 2.495a.5.5 0 00-.5.5v2.5H9.5a.5.5 0 100 1h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5z"
    }), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M7.697 2.049a5 5 0 104.02 6.613.5.5 0 10-.944-.332 4 4 0 11-.946-4.16l.01.01 2.32 2.18a.5.5 0 00.685-.729l-2.314-2.175A5 5 0 007.697 2.05z"
    })));
}
_c23 = SvgRedo;
function SvgTrash(props) {
    return(/*#__PURE__*/ _react.createElement("svg", Object.assign({
        viewBox: "0 0 15 15",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z"
    }), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z"
    }), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z"
    })));
}
_c24 = SvgTrash;
function SvgUndo(props) {
    return(/*#__PURE__*/ _react.createElement("svg", Object.assign({
        viewBox: "0 0 15 15",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M2.5 2.495a.5.5 0 01.5.5v2.5h2.5a.5.5 0 110 1h-3a.5.5 0 01-.5-.5v-3a.5.5 0 01.5-.5z"
    }), /*#__PURE__*/ _react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M7.303 2.049a5 5 0 11-4.02 6.613.5.5 0 01.944-.332 4 4 0 10.946-4.16l-.01.01-2.32 2.18a.5.5 0 01-.685-.729l2.314-2.175A5 5 0 017.303 2.05z"
    })));
}
_c25 = SvgUndo;
var isAllLockedSelector = function isAllLockedSelector1(s) {
    var selectedIds = s.pageState.selectedIds;
    return selectedIds.every(function(id) {
        return s.page.shapes[id].isLocked;
    });
};
var isAllAspectLockedSelector = function isAllAspectLockedSelector1(s) {
    var selectedIds = s.pageState.selectedIds;
    return selectedIds.every(function(id) {
        return s.page.shapes[id].isAspectRatioLocked;
    });
};
var isAllGroupedSelector = function isAllGroupedSelector1(s) {
    var selectedShapes = s.pageState.selectedIds.map(function(id) {
        return s.page.shapes[id];
    });
    return selectedShapes.every(function(shape) {
        return shape.children !== undefined || shape.parentId === selectedShapes[0].parentId && selectedShapes[0].parentId !== s.appState.currentPageId;
    });
};
var hasSelectionSelector = function hasSelectionSelector1(s) {
    return s.pageState.selectedIds.length > 0;
};
var hasMultipleSelectionSelector = function hasMultipleSelectionSelector1(s) {
    return s.pageState.selectedIds.length > 1;
};
var ShapesFunctions = /*#__PURE__*/ _react.memo(_s4(function() {
    _s4();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var isAllLocked = useAppState(isAllLockedSelector);
    var isAllAspectLocked = useAppState(isAllAspectLockedSelector);
    var isAllGrouped = useAppState(isAllGroupedSelector);
    var hasSelection = useAppState(hasSelectionSelector);
    var hasMultipleSelection = useAppState(hasMultipleSelectionSelector);
    var handleRotate = _react.useCallback(function() {
        tlstate.rotate();
    }, [
        tlstate
    ]);
    var handleDuplicate = _react.useCallback(function() {
        tlstate.duplicate();
    }, [
        tlstate
    ]);
    var handleToggleLocked = _react.useCallback(function() {
        tlstate.toggleLocked();
    }, [
        tlstate
    ]);
    var handleToggleAspectRatio = _react.useCallback(function() {
        tlstate.toggleAspectRatioLocked();
    }, [
        tlstate
    ]);
    var handleGroup = _react.useCallback(function() {
        tlstate.group();
    }, [
        tlstate
    ]);
    var handleMoveToBack = _react.useCallback(function() {
        tlstate.moveToBack();
    }, [
        tlstate
    ]);
    var handleMoveBackward = _react.useCallback(function() {
        tlstate.moveBackward();
    }, [
        tlstate
    ]);
    var handleMoveForward = _react.useCallback(function() {
        tlstate.moveForward();
    }, [
        tlstate
    ]);
    var handleMoveToFront = _react.useCallback(function() {
        tlstate.moveToFront();
    }, [
        tlstate
    ]);
    var handleDelete = _react.useCallback(function() {
        tlstate["delete"]();
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(ButtonsRow, null, /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleDuplicate
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Duplicate",
        kbd: "#D"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.CopyIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        disabled: !hasSelection,
        size: "small",
        onClick: handleRotate
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Rotate"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.RotateCounterClockwiseIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleToggleLocked
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Toogle Locked",
        kbd: "#L"
    }, isAllLocked ? /*#__PURE__*/ _react.createElement(_reactIcons.LockClosedIcon, null) : /*#__PURE__*/ _react.createElement(_reactIcons.LockOpen1Icon, {
        opacity: 0.4
    }))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleToggleAspectRatio
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Toogle Aspect Ratio Lock"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AspectRatioIcon, {
        opacity: isAllAspectLocked ? 1 : 0.4
    }))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !isAllGrouped && !hasMultipleSelection,
        size: "small",
        onClick: handleGroup
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Group",
        kbd: "#G"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.GroupIcon, {
        opacity: isAllGrouped ? 1 : 0.4
    })))), /*#__PURE__*/ _react.createElement(ButtonsRow, null, /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleMoveToBack
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Move to Back",
        kbd: "#\u21E7["
    }, /*#__PURE__*/ _react.createElement(_reactIcons.PinBottomIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleMoveBackward
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Move Backward",
        kbd: "#["
    }, /*#__PURE__*/ _react.createElement(_reactIcons.ArrowDownIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleMoveForward
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Move Forward",
        kbd: "#]"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.ArrowUpIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleMoveToFront
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "More to Front",
        kbd: "#\u21E7]"
    }, /*#__PURE__*/ _react.createElement(_reactIcons.PinTopIcon, null))), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        disabled: !hasSelection,
        size: "small",
        onClick: handleDelete
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Delete",
        kbd: "\u232B"
    }, /*#__PURE__*/ _react.createElement(SvgTrash, null))))));
}, "xbhYtTkUyZbCtpgyLgzzfphwttI=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c26 = ShapesFunctions;
var AlignDistribute = /*#__PURE__*/ _react.memo(_s5(function(_ref) {
    _s5();
    var hasTwoOrMore = _ref.hasTwoOrMore, hasThreeOrMore = _ref.hasThreeOrMore;
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate;
    var alignTop = _react.useCallback(function() {
        tlstate.align(AlignType.Top);
    }, [
        tlstate
    ]);
    var alignCenterVertical = _react.useCallback(function() {
        tlstate.align(AlignType.CenterVertical);
    }, [
        tlstate
    ]);
    var alignBottom = _react.useCallback(function() {
        tlstate.align(AlignType.Bottom);
    }, [
        tlstate
    ]);
    var stretchVertically = _react.useCallback(function() {
        tlstate.stretch(StretchType.Vertical);
    }, [
        tlstate
    ]);
    var distributeVertically = _react.useCallback(function() {
        tlstate.distribute(DistributeType.Vertical);
    }, [
        tlstate
    ]);
    var alignLeft = _react.useCallback(function() {
        tlstate.align(AlignType.Left);
    }, [
        tlstate
    ]);
    var alignCenterHorizontal = _react.useCallback(function() {
        tlstate.align(AlignType.CenterHorizontal);
    }, [
        tlstate
    ]);
    var alignRight = _react.useCallback(function() {
        tlstate.align(AlignType.Right);
    }, [
        tlstate
    ]);
    var stretchHorizontally = _react.useCallback(function() {
        tlstate.stretch(StretchType.Horizontal);
    }, [
        tlstate
    ]);
    var distributeHorizontally = _react.useCallback(function() {
        tlstate.distribute(DistributeType.Horizontal);
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(ButtonsRow, null, /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignLeft
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignLeftIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignCenterHorizontal
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignCenterHorizontallyIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignRight
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignRightIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: stretchHorizontally
    }, /*#__PURE__*/ _react.createElement(_reactIcons.StretchHorizontallyIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasThreeOrMore,
        onClick: distributeHorizontally
    }, /*#__PURE__*/ _react.createElement(_reactIcons.SpaceEvenlyHorizontallyIcon, null))), /*#__PURE__*/ _react.createElement(ButtonsRow, null, /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignTop
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignTopIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignCenterVertical
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignCenterVerticallyIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: alignBottom
    }, /*#__PURE__*/ _react.createElement(_reactIcons.AlignBottomIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasTwoOrMore,
        onClick: stretchVertically
    }, /*#__PURE__*/ _react.createElement(_reactIcons.StretchVerticallyIcon, null)), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        size: "small",
        disabled: !hasThreeOrMore,
        onClick: distributeVertically
    }, /*#__PURE__*/ _react.createElement(_reactIcons.SpaceEvenlyVerticallyIcon, null)))));
}, "P5lt2UVr7fwML96YTcLa9abqQ80=", false, function() {
    return [
        useTLDrawContext
    ];
}));
_c27 = AlignDistribute;
var StyleDropdownContent = /*#__PURE__*/ styled('div', {
    display: 'grid',
    padding: 4,
    gridTemplateColumns: 'repeat(4, 1fr)',
    backgroundColor: '$panel',
    borderRadius: 4,
    border: '1px solid $panel',
    boxShadow: '$4',
    variants: {
        direction: {
            vertical: {
                gridTemplateColumns: '1fr'
            }
        }
    }
});
var StyleDropdownItem = /*#__PURE__*/ styled('button', {
    height: '32px',
    width: '32px',
    backgroundColor: '$panel',
    borderRadius: '4px',
    padding: '0',
    margin: '0',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    outline: 'none',
    border: 'none',
    pointerEvents: 'all',
    cursor: 'pointer',
    '&:focus': {
        backgroundColor: '$hover'
    },
    '&:hover:not(:disabled)': {
        backgroundColor: '$hover'
    },
    '&:disabled': {
        opacity: '0.5'
    },
    variants: {
        isActive: {
            "true": {
                '& svg': {
                    fill: '$text',
                    stroke: '$text'
                }
            },
            "false": {
                '& svg': {
                    fill: '$inactive',
                    stroke: '$inactive'
                }
            }
        }
    }
});
function BoxIcon(_ref) {
    var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? 'none' : _ref$fill, _ref$stroke = _ref.stroke, stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke;
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        stroke: stroke,
        fill: fill,
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("rect", {
        x: "4",
        y: "4",
        width: "16",
        height: "16",
        rx: "2",
        strokeWidth: "2"
    })));
}
_c28 = BoxIcon;
function DashSolidIcon() {
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        stroke: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("circle", {
        cx: 12,
        cy: 12,
        r: 8,
        fill: "none",
        strokeWidth: 2,
        strokeLinecap: "round"
    })));
}
_c29 = DashSolidIcon;
function DashDashedIcon() {
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        stroke: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("circle", {
        cx: 12,
        cy: 12,
        r: 8,
        fill: "none",
        strokeWidth: 2.5,
        strokeLinecap: "round",
        strokeDasharray: 5.026548
    })));
}
_c30 = DashDashedIcon;
var dottedDasharray = "1.256637 5.026548";
function DashDottedIcon() {
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        stroke: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("circle", {
        cx: 12,
        cy: 12,
        r: 8,
        fill: "none",
        strokeWidth: 2.5,
        strokeLinecap: "round",
        strokeDasharray: dottedDasharray
    })));
}
_c31 = DashDottedIcon;
function DashDrawIcon() {
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        viewBox: "1 1.5 21 22",
        fill: "currentColor",
        stroke: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("path", {
        d: "M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z",
        strokeWidth: "2"
    })));
}
_c32 = DashDrawIcon;
function IsFilledFillIcon() {
    return(/*#__PURE__*/ _react.createElement("svg", {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        stroke: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/ _react.createElement("path", {
        d: "M2.6168 11.1303C2.6168 11.1303 2.7023 11.0131 2.8733 10.7788C3.0443 10.5444 3.1298 10.4272 3.1298 10.4272C3.1298 10.4272 3.23333 10.2823 3.4404 9.99236C3.64746 9.70246 3.85889 9.40341 4.0747 9.09521C4.2905 8.78701 4.50606 8.47574 4.72139 8.16141C4.93671 7.84708 5.14338 7.54139 5.3414 7.24432C5.53943 6.94726 5.72068 6.67162 5.88517 6.41742C6.04966 6.16321 6.2116 5.91477 6.37099 5.67211C6.53038 5.42944 6.69528 5.18806 6.86568 4.94796C7.03608 4.70786 7.21694 4.4699 7.40824 4.23409C7.59955 3.99828 7.81063 3.76287 8.0415 3.52787C8.27236 3.29286 8.71114 3.0267 9.35782 2.72937C10.0045 2.43203 10.4713 2.35281 10.7581 2.49169C11.045 2.63057 11.2637 2.84049 11.4141 3.12146C11.5645 3.40243 11.618 3.70079 11.5746 4.01653C11.5312 4.33227 11.4627 4.59891 11.3691 4.81646C11.2756 5.03401 11.0858 5.43918 10.7998 6.03199C10.5139 6.62479 10.2122 7.17617 9.89499 7.68612C9.57773 8.19607 9.25048 8.71529 8.91323 9.24379C8.57598 9.77229 8.24193 10.3038 7.91107 10.8382C7.58021 11.3726 7.2828 11.8729 7.01885 12.339C6.75489 12.8051 6.53711 13.2259 6.36552 13.6014C6.19393 13.977 6.0132 14.3951 5.82332 14.8557C5.63344 15.3163 5.43771 15.617 5.23612 15.7578C5.03453 15.8986 4.80537 15.7993 4.54865 15.4599C4.29193 15.1205 4.11244 14.8722 4.0102 14.7148C3.90796 14.5575 3.97008 14.3802 4.19657 14.183C4.42306 13.9858 4.69016 13.7584 4.99789 13.5009C5.30561 13.2434 5.64245 12.9617 6.00839 12.6559C6.37434 12.35 6.67617 12.0967 6.91389 11.8958C7.15161 11.695 7.39026 11.4926 7.62985 11.2885C7.86944 11.0844 8.15332 10.8467 8.48148 10.5754C8.80965 10.3042 9.23907 9.9577 9.76972 9.53604C10.3004 9.11439 10.867 8.66604 11.4695 8.19102C12.072 7.71599 12.6869 7.22975 13.3142 6.73229C13.9415 6.23483 14.5741 5.73378 15.2121 5.22914C15.85 4.7245 16.4168 4.26953 16.9125 3.86423C17.4081 3.45892 17.7739 3.14715 18.0099 2.92891C18.2459 2.71066 18.5969 2.50912 19.0631 2.32427C19.5292 2.13942 19.8754 2.10947 20.1017 2.23443C20.328 2.35939 20.4959 2.53892 20.6056 2.77302C20.7152 3.00712 20.7455 3.25108 20.6966 3.50489C20.6477 3.75871 20.6108 3.93537 20.5859 4.03487C20.561 4.13437 20.4998 4.32304 20.4023 4.60088C20.3047 4.87872 20.1621 5.17449 19.9745 5.4882C19.7869 5.80191 19.576 6.14669 19.3419 6.52256C19.1078 6.89842 18.9086 7.21331 18.7443 7.46722C18.58 7.72113 18.4142 7.9759 18.2469 8.23153C18.0796 8.48716 17.8836 8.77861 17.6588 9.10588C17.434 9.43316 17.1448 9.84205 16.7912 10.3326C16.4376 10.8231 16.0659 11.342 15.676 11.8893C15.2862 12.4365 14.9001 12.9968 14.5178 13.5701C14.1356 14.1435 13.7682 14.7264 13.4159 15.3191C13.0635 15.9118 12.7579 16.4671 12.4989 16.985C12.24 17.503 12.0533 17.9527 11.9389 18.3342C11.8244 18.7156 11.7224 19.1347 11.6326 19.5912C11.5429 20.0477 11.3788 20.6043 11.1402 21.2609C10.9016 21.9175 10.6425 22.299 10.3629 22.4054C10.0832 22.5118 9.79895 22.5258 9.51015 22.4475C9.22136 22.3692 8.98315 22.2135 8.79554 21.9804C8.60793 21.7473 8.53141 21.5443 8.56597 21.3714C8.60054 21.1985 8.6805 20.9055 8.80586 20.4924C8.93122 20.0794 9.10654 19.7322 9.33182 19.4511C9.55709 19.17 9.8396 18.8347 10.1793 18.4454C10.5191 18.056 10.8588 17.6756 11.1985 17.3041C11.5381 16.9326 11.8676 16.5798 12.1871 16.2457C12.5065 15.9117 12.8481 15.5592 13.2121 15.1882C13.576 14.8173 13.9567 14.4418 14.3542 14.0616C14.7517 13.6814 15.1666 13.3082 15.599 12.9418C16.0313 12.5755 16.437 12.2489 16.8159 11.962C17.1948 11.6752 17.5102 11.4423 17.762 11.2634C18.0138 11.0844 18.3084 10.8902 18.6457 10.6807C18.983 10.4711 19.3744 10.3243 19.82 10.2401C20.2656 10.1559 20.6534 10.2693 20.9834 10.5803C21.3134 10.8913 21.4496 11.2717 21.392 11.7215C21.3344 12.1713 21.1067 12.5051 20.7089 12.7229C20.3112 12.9406 19.9073 12.9526 19.4973 12.7588C19.0873 12.565 18.8402 12.2453 18.7561 11.7997C18.6719 11.3541 18.7853 10.9663 19.0963 10.6363C19.4073 10.3063 19.7877 10.1701 20.2375 10.2277C20.6873 10.2853 21.0211 10.513 21.2388 10.9108C21.4566 11.3086 21.4686 11.7124 21.2748 12.1224C21.081 12.5324 20.8095 12.8344 20.4603 13.0286C20.1111 13.2227 19.8038 13.4005 19.5384 13.5619C19.273 13.7233 18.9732 13.9304 18.6387 14.1834C18.3043 14.4364 17.9499 14.7309 17.5755 15.0671C17.201 15.4032 16.8338 15.7568 16.4739 16.1278C16.114 16.4987 15.762 16.8738 15.418 17.253C15.0741 17.6321 14.7467 17.9939 14.4358 18.3383C14.125 18.6826 13.8006 19.0346 13.4627 19.3941C13.1248 19.7537 12.7843 20.1151 12.4411 20.4784C12.0979 20.8417 11.7811 21.1784 11.4907 21.4885C11.2003 21.7987 11.0097 22.0025 10.9187 22.0998C10.8278 22.1971 10.6425 22.299 10.3629 22.4054C10.0832 22.5118 9.79895 22.5258 9.51015 22.4475C9.22136 22.3692 8.98315 22.2135 8.79554 21.9804C8.60793 21.7473 8.56361 21.2915 8.6626 20.6129C8.76158 19.9344 8.86025 19.4336 8.95861 19.1104C9.05697 18.7873 9.15977 18.4792 9.267 18.186C9.37423 17.8929 9.51059 17.5722 9.67609 17.2241C9.84159 16.8759 10.0617 16.4208 10.3365 15.8586C10.6113 15.2963 10.9173 14.6928 11.2544 14.0481C11.5915 13.4033 11.9371 12.7709 12.2911 12.1509C12.645 11.5309 12.9985 10.928 13.3515 10.3421C13.7045 9.75628 14.043 9.20593 14.3669 8.6911C14.6908 8.17628 14.9637 7.75371 15.1856 7.42339C15.4075 7.09308 15.6064 6.80362 15.7825 6.55501C15.9585 6.3064 16.1337 6.06006 16.3078 5.81598C16.482 5.5719 16.6533 5.33288 16.8217 5.09891C16.9901 4.86494 17.216 4.59736 17.4993 4.29615C17.7826 3.99495 18.1463 3.6271 18.5904 3.1926C19.0345 2.7581 19.3409 2.45855 19.5094 2.29392C19.678 2.1293 19.8754 2.10947 20.1017 2.23443C20.328 2.35939 20.4959 2.53892 20.6056 2.77302C20.7152 3.00712 20.7455 3.25108 20.6966 3.50489C20.6477 3.75871 20.3584 4.05693 19.8288 4.39957C19.2993 4.7422 18.7953 5.11711 18.3168 5.52431C17.8384 5.93151 17.3057 6.40907 16.7189 6.95701C16.1321 7.50495 15.554 8.0585 14.9846 8.61766C14.4151 9.17682 13.8571 9.72936 13.3104 10.2753C12.7637 10.8212 12.2439 11.3334 11.7509 11.8119C11.258 12.2905 10.8516 12.6747 10.5319 12.9645C10.2122 13.2543 9.93102 13.503 9.68844 13.7105C9.44586 13.918 9.20376 14.1242 8.96214 14.329C8.72051 14.5339 8.41222 14.7917 8.03728 15.1027C7.66233 15.4136 7.3052 15.7042 6.96587 15.9744C6.62655 16.2447 6.30615 16.4867 6.00468 16.7005C5.70321 16.9143 5.4028 17.1012 5.10345 17.2611C4.8041 17.421 4.46527 17.4827 4.08697 17.4462C3.70867 17.4098 3.36157 17.209 3.04566 16.8439C2.72975 16.4788 2.5775 16.0785 2.58891 15.6432C2.60033 15.2079 2.70674 14.7684 2.90815 14.3248C3.10956 13.8811 3.29546 13.4939 3.46586 13.163C3.63625 12.832 3.80799 12.5116 3.98107 12.2016C4.15415 11.8916 4.37223 11.4904 4.6353 10.9979C4.89838 10.5055 5.18148 9.97864 5.48461 9.41727C5.78773 8.8559 6.08723 8.30477 6.3831 7.7639C6.67898 7.22302 6.96213 6.69976 7.23257 6.19412C7.50301 5.68847 7.75585 5.24404 7.99109 4.86081C8.22633 4.47759 8.57505 4.04675 9.03725 3.56831C9.49946 3.08987 9.8301 2.7561 10.0292 2.56701C10.2283 2.37791 10.4713 2.35281 10.7581 2.49169C11.045 2.63057 11.2637 2.84049 11.4141 3.12146C11.5645 3.40243 11.618 3.70079 11.5746 4.01653C11.5312 4.33227 11.1439 4.77278 10.4128 5.33807C9.68173 5.90336 9.17886 6.30718 8.90421 6.54953C8.62955 6.79188 8.38273 7.01366 8.16374 7.21485C7.94475 7.41605 7.71551 7.6216 7.47603 7.83151C7.23655 8.04141 6.97229 8.26391 6.68326 8.49901C6.39423 8.7341 6.09233 8.96876 5.77756 9.20297C5.46279 9.43719 5.1469 9.6616 4.8299 9.87622C4.5129 10.0908 4.20211 10.2932 3.89753 10.4834L2.6168 11.1303Z",
        strokeWidth: "0.5",
        strokeLinecap: "round"
    })));
}
_c33 = IsFilledFillIcon;
var selectColor = function selectColor1(data) {
    return data.appState.selectedStyle.color;
};
var QuickColorSelect = /*#__PURE__*/ _react.memo(_s6(function() {
    _s6();
    var _useTheme = useTheme(), theme = _useTheme.theme;
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var color = useAppState(selectColor);
    var handleColorChange = _react.useCallback(function(color1) {
        tlstate.style({
            color: color1
        });
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.Root, {
        dir: "ltr"
    }, /*#__PURE__*/ _react.createElement(DropdownMenuIconTriggerButton, {
        label: "Color"
    }, /*#__PURE__*/ _react.createElement(BoxIcon, {
        fill: strokes[theme][color],
        stroke: strokes[theme][color]
    })), /*#__PURE__*/ _react.createElement(_reactDropdownMenu.Content, {
        sideOffset: 8
    }, /*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioGroup, {
        value: color,
        onValueChange: handleColorChange,
        as: StyleDropdownContent
    }, Object.keys(strokes[theme]).map(function(colorStyle) {
        return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioItem, {
            as: StyleDropdownItem,
            key: colorStyle,
            title: colorStyle,
            value: colorStyle
        }, /*#__PURE__*/ _react.createElement(BoxIcon, {
            fill: strokes[theme][colorStyle],
            stroke: strokes[theme][colorStyle]
        })));
    })))));
}, "JVlzASHhwQPb/TunjnoEGFeQ4lc=", true, function() {
    return [
        useTheme,
        useTLDrawContext
    ];
}));
_c34 = QuickColorSelect;
var _sizes;
var sizes = (_sizes = {
}, _sizes[SizeStyle.Small] = 6, _sizes[SizeStyle.Medium] = 12, _sizes[SizeStyle.Large] = 22, _sizes);
var selectSize = function selectSize1(data) {
    return data.appState.selectedStyle.size;
};
var QuickSizeSelect = /*#__PURE__*/ _react.memo(_s7(function() {
    _s7();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var size = useAppState(selectSize);
    var changeSizeStyle = _react.useCallback(function(size1) {
        tlstate.style({
            size: size1
        });
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.Root, {
        dir: "ltr"
    }, /*#__PURE__*/ _react.createElement(DropdownMenuIconTriggerButton, {
        label: "Size"
    }, /*#__PURE__*/ _react.createElement(CircleIcon, {
        size: sizes[size],
        stroke: "none",
        fill: "currentColor"
    })), /*#__PURE__*/ _react.createElement(_reactDropdownMenu.Content, {
        sideOffset: 8
    }, /*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioGroup, {
        as: StyleDropdownContent,
        direction: "vertical",
        value: size,
        onValueChange: changeSizeStyle
    }, Object.keys(SizeStyle).map(function(sizeStyle) {
        return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioItem, {
            key: sizeStyle,
            as: StyleDropdownItem,
            isActive: size === sizeStyle,
            value: sizeStyle
        }, /*#__PURE__*/ _react.createElement(CircleIcon, {
            size: sizes[sizeStyle]
        })));
    })))));
}, "eD3Drb1aYluD3oo5YJU+EWiUR1U=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c35 = QuickSizeSelect;
var _dashes;
var dashes = (_dashes = {
}, _dashes[DashStyle.Draw] = /*#__PURE__*/ _react.createElement(DashDrawIcon, null), _dashes[DashStyle.Solid] = /*#__PURE__*/ _react.createElement(DashSolidIcon, null), _dashes[DashStyle.Dashed] = /*#__PURE__*/ _react.createElement(DashDashedIcon, null), _dashes[DashStyle.Dotted] = /*#__PURE__*/ _react.createElement(DashDottedIcon, null), _dashes);
var selectDash = function selectDash1(data) {
    return data.appState.selectedStyle.dash;
};
var QuickDashSelect = /*#__PURE__*/ _react.memo(_s8(function() {
    _s8();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var dash = useAppState(selectDash);
    var changeDashStyle = _react.useCallback(function(dash1) {
        tlstate.style({
            dash: dash1
        });
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.Root, {
        dir: "ltr"
    }, /*#__PURE__*/ _react.createElement(DropdownMenuIconTriggerButton, {
        label: "Dash"
    }, dashes[dash]), /*#__PURE__*/ _react.createElement(_reactDropdownMenu.Content, {
        sideOffset: 8
    }, /*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioGroup, {
        as: StyleDropdownContent,
        direction: "vertical",
        value: dash,
        onValueChange: changeDashStyle
    }, Object.keys(DashStyle).map(function(dashStyle) {
        return(/*#__PURE__*/ _react.createElement(_reactDropdownMenu.DropdownMenuRadioItem, {
            as: StyleDropdownItem,
            key: dashStyle,
            isActive: dash === dashStyle,
            value: dashStyle
        }, dashes[dashStyle]));
    })))));
}, "S6/a9/7h1G3YwhfqMZp29rNZtxk=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c36 = QuickDashSelect;
var isFilledSelector = function isFilledSelector1(data) {
    return data.appState.selectedStyle.isFilled;
};
var QuickFillSelect = /*#__PURE__*/ _react.memo(_s9(function() {
    _s9();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var isFilled = useAppState(isFilledSelector);
    var handleIsFilledChange = _react.useCallback(function(isFilled1) {
        tlstate.style({
            isFilled: isFilled1
        });
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(_reactCheckbox.Root, {
        dir: "ltr",
        as: IconButton,
        bp: breakpoints,
        checked: isFilled,
        onCheckedChange: handleIsFilledChange
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: "Fill"
    }, /*#__PURE__*/ _react.createElement(IconWrapper, null, /*#__PURE__*/ _react.createElement(BoxIcon, null), /*#__PURE__*/ _react.createElement(_reactCheckbox.Indicator, null, /*#__PURE__*/ _react.createElement(IsFilledFillIcon, null))))));
}, "85Zu0FD3d8dQYKanDEF1nH6ddPY=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c37 = QuickFillSelect;
var isStyleOpenSelector = function isStyleOpenSelector1(s) {
    return s.appState.isStyleOpen;
};
function StylePanel() {
    _s10();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var isOpen = useAppState(isStyleOpenSelector);
    return(/*#__PURE__*/ _react.createElement(FloatingContainer, {
        direction: "column"
    }, /*#__PURE__*/ _react.createElement(ButtonsRow, null, /*#__PURE__*/ _react.createElement(QuickColorSelect, null), /*#__PURE__*/ _react.createElement(QuickSizeSelect, null), /*#__PURE__*/ _react.createElement(QuickDashSelect, null), /*#__PURE__*/ _react.createElement(QuickFillSelect, null), /*#__PURE__*/ _react.createElement(IconButton, {
        bp: breakpoints,
        title: "Style",
        size: "small",
        onPointerDown: tlstate.toggleStylePanel
    }, /*#__PURE__*/ _react.createElement(Tooltip, {
        label: isOpen ? 'Close' : 'More'
    }, isOpen ? /*#__PURE__*/ _react.createElement(_reactIcons.Cross2Icon, null) : /*#__PURE__*/ _react.createElement(_reactIcons.DotsHorizontalIcon, null)))), isOpen && /*#__PURE__*/ _react.createElement(SelectedShapeContent, null)));
}
_s10(StylePanel, "CgJ7TPatZ3tX2ZXDrGTQ5YblbWg=", true, function() {
    return [
        useTLDrawContext
    ];
});
_c38 = StylePanel;
var showKbds = !/*#__PURE__*/ _core.Utils.isMobile();
var selectedShapesCountSelector = function selectedShapesCountSelector1(s) {
    return s.pageState.selectedIds.length;
};
function SelectedShapeContent() {
    _s11();
    var _useTLDrawContext2 = useTLDrawContext(), tlstate = _useTLDrawContext2.tlstate, useAppState = _useTLDrawContext2.useAppState;
    var selectedShapesCount = useAppState(selectedShapesCountSelector);
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Divider, null), /*#__PURE__*/ _react.createElement(ShapesFunctions, null), /*#__PURE__*/ _react.createElement(Divider, null), /*#__PURE__*/ _react.createElement(AlignDistribute, {
        hasTwoOrMore: selectedShapesCount > 1,
        hasThreeOrMore: selectedShapesCount > 2
    }), /*#__PURE__*/ _react.createElement(Divider, null), /*#__PURE__*/ _react.createElement(RowButton, {
        bp: breakpoints,
        disabled: selectedShapesCount === 0,
        onClick: tlstate.copy
    }, /*#__PURE__*/ _react.createElement("span", null, "Copy"), showKbds && /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "#C")), /*#__PURE__*/ _react.createElement(RowButton, {
        bp: breakpoints,
        onClick: tlstate.paste
    }, /*#__PURE__*/ _react.createElement("span", null, "Paste"), showKbds && /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "#V")), /*#__PURE__*/ _react.createElement(RowButton, {
        bp: breakpoints,
        onClick: tlstate.copyAsSvg
    }, /*#__PURE__*/ _react.createElement("span", null, "Copy to SVG"), showKbds && /*#__PURE__*/ _react.createElement(Kbd, {
        variant: "menu"
    }, "\u21E7#C"))));
}
_s11(SelectedShapeContent, "MdjL80s9OgbJb6fgeLOTIx/RzHg=", true, function() {
    return [
        useTLDrawContext
    ];
});
_c39 = SelectedShapeContent;
var activeToolSelector = function activeToolSelector1(s) {
    return s.appState.activeTool;
};
function StatusBar() {
    _s12();
    var _useTLDrawContext = useTLDrawContext(), useAppState = _useTLDrawContext.useAppState;
    var activeTool = useAppState(activeToolSelector);
    return(/*#__PURE__*/ _react.createElement(StatusBarContainer, {
        size: {
            '@sm': 'small'
        }
    }, /*#__PURE__*/ _react.createElement(Section, null, activeTool)));
}
_s12(StatusBar, "F/8N2rq6x2qWakuNKDcd25ggHtI=", true, function() {
    return [
        useTLDrawContext
    ];
});
_c40 = StatusBar;
var StatusBarContainer = /*#__PURE__*/ styled('div', {
    height: 40,
    userSelect: 'none',
    borderTop: '1px solid $border',
    gridArea: 'status',
    display: 'flex',
    color: '$text',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '$panel',
    gap: 8,
    fontFamily: '$ui',
    fontSize: '$0',
    padding: '0 16px',
    variants: {
        size: {
            small: {
                fontSize: '$1'
            }
        }
    }
});
_c41 = StatusBarContainer;
var Section = /*#__PURE__*/ styled('div', {
    whiteSpace: 'nowrap',
    overflow: 'hidden'
});
_c42 = Section;
var ToolButton = /*#__PURE__*/ styled('button', {
    position: 'relative',
    height: '32px',
    width: '32px',
    color: '$text',
    backgroundColor: '$panel',
    borderRadius: '4px',
    padding: '0',
    margin: '0',
    display: 'grid',
    alignItems: 'center',
    justifyContent: 'center',
    outline: 'none',
    border: 'none',
    pointerEvents: 'all',
    fontSize: '$0',
    cursor: 'pointer',
    '& > *': {
        gridRow: 1,
        gridColumn: 1
    },
    '&:disabled': {
        opacity: '0.5'
    },
    '& > span': {
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center'
    }
});
var PrimaryToolButton = /*#__PURE__*/ styled(ToolButton, {
    variants: {
        bp: {
            mobile: {
                height: 44,
                width: 44,
                '& svg:nth-of-type(1)': {
                    height: '20px',
                    width: '20px'
                }
            },
            small: {
                '&:hover:not(:disabled)': {
                    backgroundColor: '$hover'
                }
            },
            medium: {
            },
            large: {
            }
        },
        isActive: {
            "true": {
                color: '$selected'
            }
        }
    }
});
_c43 = PrimaryToolButton;
var SecondaryToolButton = /*#__PURE__*/ styled(ToolButton, {
    variants: {
        bp: {
            mobile: {
                height: 44,
                width: 44,
                '& svg:nth-of-type(1)': {
                    height: '18px',
                    width: '18px'
                }
            },
            small: {
                '&:hover:not(:disabled)': {
                    backgroundColor: '$hover'
                }
            },
            medium: {
            },
            large: {
            }
        },
        isActive: {
            "true": {
                color: '$selected'
            }
        }
    }
});
_c44 = SecondaryToolButton;
var TertiaryToolButton = /*#__PURE__*/ styled(ToolButton, {
    variants: {
        bp: {
            mobile: {
                height: 32,
                width: 44,
                '& svg:nth-of-type(1)': {
                    height: '16px',
                    width: '16px'
                }
            },
            small: {
                height: 40,
                width: 40,
                '& svg:nth-of-type(1)': {
                    height: '18px',
                    width: '18px'
                },
                '&:hover:not(:disabled)': {
                    backgroundColor: '$hover'
                }
            },
            medium: {
            },
            large: {
            }
        }
    }
});
_c45 = TertiaryToolButton;
function PrimaryButton(_ref) {
    var label = _ref.label, kbd = _ref.kbd, onClick = _ref.onClick, onDoubleClick = _ref.onDoubleClick, isActive = _ref.isActive, children = _ref.children;
    return(/*#__PURE__*/ _react.createElement(Tooltip, {
        label: label[0].toUpperCase() + label.slice(1),
        kbd: kbd
    }, /*#__PURE__*/ _react.createElement(PrimaryToolButton, {
        name: label,
        bp: {
            '@initial': 'mobile',
            '@sm': 'small',
            '@md': 'medium',
            '@lg': 'large'
        },
        onClick: onClick,
        onDoubleClick: onDoubleClick,
        isActive: isActive
    }, children)));
}
_c46 = PrimaryButton;
function SecondaryButton(_ref2) {
    var label = _ref2.label, kbd = _ref2.kbd, onClick = _ref2.onClick, onDoubleClick = _ref2.onDoubleClick, isActive = _ref2.isActive, children = _ref2.children;
    return(/*#__PURE__*/ _react.createElement(Tooltip, {
        label: label[0].toUpperCase() + label.slice(1),
        kbd: kbd
    }, /*#__PURE__*/ _react.createElement(SecondaryToolButton, {
        name: label,
        bp: {
            '@initial': 'mobile',
            '@sm': 'small',
            '@md': 'medium',
            '@lg': 'large'
        },
        onClick: onClick,
        onDoubleClick: onDoubleClick,
        isActive: isActive
    }, children)));
}
_c47 = SecondaryButton;
function TertiaryButton(_ref3) {
    var label = _ref3.label, kbd = _ref3.kbd, onClick = _ref3.onClick, onDoubleClick = _ref3.onDoubleClick, children = _ref3.children;
    return(/*#__PURE__*/ _react.createElement(Tooltip, {
        label: label[0].toUpperCase() + label.slice(1),
        kbd: kbd
    }, /*#__PURE__*/ _react.createElement(TertiaryToolButton, {
        name: label,
        bp: {
            '@initial': 'mobile',
            '@sm': 'small',
            '@md': 'medium',
            '@lg': 'large'
        },
        onClick: onClick,
        onDoubleClick: onDoubleClick
    }, children)));
}
_c48 = TertiaryButton;
var TertiaryButtonsContainer = /*#__PURE__*/ styled(FloatingContainer, {
    boxShadow: '$3',
    variants: {
        bp: {
            mobile: {
                alignItems: 'center',
                flexDirection: 'column'
            },
            small: {
                alignItems: 'center',
                flexDirection: 'row'
            }
        }
    }
});
_c49 = TertiaryButtonsContainer;
var UndoRedo = /*#__PURE__*/ _react.memo(_s13(function() {
    _s13();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate;
    var handleDelete = _react.useCallback(function() {
        tlstate["delete"]();
    }, [
        tlstate
    ]);
    var handleClear = _react.useCallback(function() {
        tlstate.clear();
    }, [
        tlstate
    ]);
    return(/*#__PURE__*/ _react.createElement(TertiaryButtonsContainer, {
        bp: {
            '@initial': 'mobile',
            '@sm': 'small'
        }
    }, /*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Undo",
        kbd: "#Z",
        onClick: tlstate.undo
    }, /*#__PURE__*/ _react.createElement(SvgUndo, null)), /*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Redo",
        kbd: "#\u21E7",
        onClick: tlstate.redo
    }, /*#__PURE__*/ _react.createElement(SvgRedo, null)), /*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Delete",
        kbd: "\u232B",
        onClick: handleDelete,
        onDoubleClick: handleClear
    }, /*#__PURE__*/ _react.createElement(SvgTrash, null))));
}, "TO4wKfGwwQWfQ2gwwPu5VkUMrD4=", false, function() {
    return [
        useTLDrawContext
    ];
}));
_c50 = UndoRedo;
var Zoom = /*#__PURE__*/ _react.memo(_s14(function() {
    _s14();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate;
    return(/*#__PURE__*/ _react.createElement(TertiaryButtonsContainer, {
        bp: {
            '@initial': 'mobile',
            '@sm': 'small'
        }
    }, /*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Zoom Out",
        kbd: "#\u2212",
        onClick: tlstate.zoomOut
    }, /*#__PURE__*/ _react.createElement(_reactIcons.ZoomOutIcon, null)), /*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Zoom In",
        kbd: "#+",
        onClick: tlstate.zoomIn
    }, /*#__PURE__*/ _react.createElement(_reactIcons.ZoomInIcon, null)), /*#__PURE__*/ _react.createElement(ZoomCounter, null)));
}, "vCiZAob2VaQ0pJQ34p2ViyKyBK8=", false, function() {
    return [
        useTLDrawContext
    ];
}));
_c51 = Zoom;
var zoomSelector = function zoomSelector1(s) {
    return s.pageState.camera.zoom;
};
function ZoomCounter() {
    _s15();
    var _useTLDrawContext2 = useTLDrawContext(), tlstate = _useTLDrawContext2.tlstate, useAppState = _useTLDrawContext2.useAppState;
    var zoom = useAppState(zoomSelector);
    return(/*#__PURE__*/ _react.createElement(TertiaryButton, {
        label: "Reset Zoom",
        kbd: "\u21E70",
        onClick: tlstate.zoomToActual,
        onDoubleClick: tlstate.zoomToFit
    }, Math.round(zoom * 100), "%"));
}
_s15(ZoomCounter, "JB77XSAFgPfyc8Ef7PGH5oW4q9w=", true, function() {
    return [
        useTLDrawContext
    ];
});
_c52 = ZoomCounter;
var isEmptyCanvasSelector = function isEmptyCanvasSelector1(s) {
    return Object.keys(s.page.shapes).length > 0 && s.appState.isEmptyCanvas;
};
var BackToContent = /*#__PURE__*/ _react.memo(_s16(function() {
    _s16();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var isEmptyCanvas = useAppState(isEmptyCanvasSelector);
    if (!isEmptyCanvas) return null;
    return(/*#__PURE__*/ _react.createElement(BackToContentButton, null, /*#__PURE__*/ _react.createElement(RowButton, {
        onClick: tlstate.zoomToContent
    }, "Back to content")));
}, "VmFlwiODYixRJEyxlN6IqBWdPtE=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c53 = BackToContent;
var BackToContentButton = /*#__PURE__*/ styled(FloatingContainer, {
    pointerEvents: 'all',
    width: 'fit-content',
    gridRow: 1,
    flexGrow: 2,
    display: 'block'
});
_c54 = BackToContentButton;
var activeToolSelector$1 = function activeToolSelector2(s) {
    return s.appState.activeTool;
};
var isToolLockedSelector = function isToolLockedSelector1(s) {
    return s.appState.isToolLocked;
};
var isDebugModeSelector$1 = function isDebugModeSelector2(s) {
    return s.settings.isDebugMode;
};
var ToolsPanel = /*#__PURE__*/ _react.memo(_s17(function() {
    _s17();
    var _useTLDrawContext = useTLDrawContext(), tlstate = _useTLDrawContext.tlstate, useAppState = _useTLDrawContext.useAppState;
    var activeTool = useAppState(activeToolSelector$1);
    var isToolLocked = useAppState(isToolLockedSelector);
    var isDebugMode = useAppState(isDebugModeSelector$1);
    var selectSelectTool = _react.useCallback(function() {
        tlstate.selectTool('select');
    }, [
        tlstate
    ]);
    var selectDrawTool = _react.useCallback(function() {
        tlstate.selectTool(TLDrawShapeType.Draw);
    }, [
        tlstate
    ]);
    var selectRectangleTool = _react.useCallback(function() {
        tlstate.selectTool(TLDrawShapeType.Rectangle);
    }, [
        tlstate
    ]);
    var selectEllipseTool = _react.useCallback(function() {
        tlstate.selectTool(TLDrawShapeType.Ellipse);
    }, [
        tlstate
    ]); // const selectArrowTool = React.useCallback(() => {
    //   tlstate.selectTool(TLDrawShapeType.Ellipse)
    // }, [tlstate])
    // const selectTextTool = React.useCallback(() => {
    //   tlstate.selectTool(TLDrawShapeType.Ellipse)
    // }, [tlstate])
    return(/*#__PURE__*/ _react.createElement(ToolsPanelContainer, null, /*#__PURE__*/ _react.createElement(LeftWrap, {
        size: {
            '@initial': 'mobile',
            '@sm': 'small'
        }
    }, /*#__PURE__*/ _react.createElement(Zoom, null), /*#__PURE__*/ _react.createElement(FloatingContainer, null, /*#__PURE__*/ _react.createElement(SecondaryButton, {
        label: 'Select',
        kbd: '1',
        onClick: selectSelectTool,
        isActive: activeTool === 'select'
    }, /*#__PURE__*/ _react.createElement(_reactIcons.CursorArrowIcon, null)))), /*#__PURE__*/ _react.createElement(CenterWrap, null, /*#__PURE__*/ _react.createElement(BackToContent, null), /*#__PURE__*/ _react.createElement(FloatingContainer, null, /*#__PURE__*/ _react.createElement(PrimaryButton, {
        kbd: '2',
        label: TLDrawShapeType.Draw,
        onClick: selectDrawTool,
        isActive: activeTool === TLDrawShapeType.Draw
    }, /*#__PURE__*/ _react.createElement(_reactIcons.Pencil1Icon, null)), /*#__PURE__*/ _react.createElement(PrimaryButton, {
        kbd: '3',
        label: TLDrawShapeType.Rectangle,
        onClick: selectRectangleTool,
        isActive: activeTool === TLDrawShapeType.Rectangle
    }, /*#__PURE__*/ _react.createElement(_reactIcons.SquareIcon, null)), /*#__PURE__*/ _react.createElement(PrimaryButton, {
        kbd: '4',
        label: TLDrawShapeType.Draw,
        onClick: selectEllipseTool,
        isActive: activeTool === TLDrawShapeType.Ellipse
    }, /*#__PURE__*/ _react.createElement(_reactIcons.CircleIcon, null)))), /*#__PURE__*/ _react.createElement(RightWrap, {
        size: {
            '@initial': 'mobile',
            '@sm': 'small'
        }
    }, /*#__PURE__*/ _react.createElement(FloatingContainer, null, /*#__PURE__*/ _react.createElement(SecondaryButton, {
        kbd: '7',
        label: 'Lock Tool',
        onClick: tlstate.toggleToolLock,
        isActive: isToolLocked
    }, isToolLocked ? /*#__PURE__*/ _react.createElement(_reactIcons.LockClosedIcon, null) : /*#__PURE__*/ _react.createElement(_reactIcons.LockOpen1Icon, null))), /*#__PURE__*/ _react.createElement(UndoRedo, null)), /*#__PURE__*/ _react.createElement(StatusWrap, null, isDebugMode && /*#__PURE__*/ _react.createElement(StatusBar, null))));
}, "cMXlU6JQ2s6ZtgPi8QV1QOucC8s=", true, function() {
    return [
        useTLDrawContext
    ];
}));
_c55 = ToolsPanel;
var ToolsPanelContainer = /*#__PURE__*/ styled('div', {
    position: 'fixed',
    bottom: 0,
    left: 0,
    right: 0,
    width: '100%',
    minWidth: 0,
    maxWidth: '100%',
    display: 'grid',
    gridTemplateColumns: '1fr auto 1fr',
    padding: '0',
    alignItems: 'flex-end',
    zIndex: 200,
    gridGap: '$4',
    gridRowGap: '$4',
    pointerEvents: 'none',
    '& > div > *': {
        pointerEvents: 'all'
    }
});
_c56 = ToolsPanelContainer;
var CenterWrap = /*#__PURE__*/ styled('div', {
    gridRow: 1,
    gridColumn: 2,
    display: 'flex',
    width: 'fit-content',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column',
    gap: 12
});
_c57 = CenterWrap;
var LeftWrap = /*#__PURE__*/ styled('div', {
    gridRow: 1,
    gridColumn: 1,
    display: 'flex',
    paddingLeft: '$3',
    variants: {
        size: {
            mobile: {
                flexDirection: 'column',
                justifyContent: 'flex-end',
                alignItems: 'flex-start',
                '& > *:nth-of-type(1)': {
                    marginBottom: '8px'
                }
            },
            small: {
                flexDirection: 'row',
                alignItems: 'flex-end',
                justifyContent: 'space-between',
                '& > *:nth-of-type(1)': {
                    marginBottom: '0px'
                }
            }
        }
    }
});
_c58 = LeftWrap;
var RightWrap = /*#__PURE__*/ styled('div', {
    gridRow: 1,
    gridColumn: 3,
    display: 'flex',
    paddingRight: '$3',
    variants: {
        size: {
            mobile: {
                flexDirection: 'column-reverse',
                justifyContent: 'flex-end',
                alignItems: 'flex-end',
                '& > *:nth-of-type(2)': {
                    marginBottom: '8px'
                }
            },
            small: {
                flexDirection: 'row',
                alignItems: 'flex-end',
                justifyContent: 'space-between',
                '& > *:nth-of-type(2)': {
                    marginBottom: '0px'
                }
            }
        }
    }
});
_c59 = RightWrap;
var StatusWrap = /*#__PURE__*/ styled('div', {
    gridRow: 2,
    gridColumn: '1 / span 3'
});
_c60 = StatusWrap;
var TLDR = /*#__PURE__*/ function() {
    function TLDR1() {
    }
    TLDR1.getShapeUtils = function getShapeUtils$1(shape) {
        return getShapeUtils(shape);
    };
    TLDR1.getSelectedShapes = function getSelectedShapes(data) {
        return data.pageState.selectedIds.map(function(id) {
            return data.page.shapes[id];
        });
    };
    TLDR1.screenToWorld = function screenToWorld(data, point) {
        var camera = data.pageState.camera;
        return _core.Vec.sub(_core.Vec.div(point, camera.zoom), camera.point);
    };
    TLDR1.getViewport = function getViewport(data) {
        var _this$screenToWorld = this.screenToWorld(data, [
            0,
            0
        ]), minX = _this$screenToWorld[0], minY = _this$screenToWorld[1];
        var _this$screenToWorld2 = this.screenToWorld(data, [
            window.innerWidth,
            window.innerHeight
        ]), maxX = _this$screenToWorld2[0], maxY = _this$screenToWorld2[1];
        return {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            height: maxX - minX,
            width: maxY - minY
        };
    };
    TLDR1.getCameraZoom = function getCameraZoom(zoom) {
        return _core.Utils.clamp(zoom, 0.1, 5);
    };
    TLDR1.getCurrentCamera = function getCurrentCamera(data) {
        return data.pageState.camera;
    };
    TLDR1.getPage = function getPage(data) {
        return data.page;
    };
    TLDR1.getPageState = function getPageState(data) {
        return data.pageState;
    };
    TLDR1.getSelectedIds = function getSelectedIds(data) {
        return data.pageState.selectedIds;
    };
    TLDR1.getShapes = function getShapes(data) {
        return Object.values(data.page.shapes);
    };
    TLDR1.getCamera = function getCamera(data) {
        return data.pageState.camera;
    };
    TLDR1.getShape = function getShape(data, shapeId) {
        return data.page.shapes[shapeId];
    };
    TLDR1.getBounds = function getBounds(shape) {
        return getShapeUtils(shape).getBounds(shape);
    };
    TLDR1.getRotatedBounds = function getRotatedBounds(shape) {
        return getShapeUtils(shape).getRotatedBounds(shape);
    };
    TLDR1.getSelectedBounds = function getSelectedBounds(data) {
        return _core.Utils.getCommonBounds(this.getSelectedShapes(data).map(function(shape) {
            return getShapeUtils(shape).getBounds(shape);
        }));
    };
    TLDR1.getParentId = function getParentId(data, id) {
        var shape = data.page.shapes[id];
        return shape.parentId;
    };
    TLDR1.getPointedId = function getPointedId(data, id) {
        var shape = data.page.shapes[id];
        if (!shape) return id;
        return shape.parentId === data.pageState.currentParentId || shape.parentId === data.page.id ? id : this.getPointedId(data, shape.parentId);
    };
    TLDR1.getDrilledPointedId = function getDrilledPointedId(data, id) {
        var shape = data.page.shapes[id];
        var _data$pageState = data.pageState, currentParentId = _data$pageState.currentParentId, pointedId = _data$pageState.pointedId;
        return shape.parentId === data.page.id || shape.parentId === pointedId || shape.parentId === currentParentId ? id : this.getDrilledPointedId(data, shape.parentId);
    };
    TLDR1.getTopParentId = function getTopParentId(data, id) {
        var shape = data.page.shapes[id];
        if (shape.parentId === shape.id) throw Error("Shape has the same id as its parent! " + shape.id);
        return shape.parentId === data.page.id || shape.parentId === data.pageState.currentParentId ? id : this.getTopParentId(data, shape.parentId);
    } // Get an array of a shape id and its descendant shapes' ids
    ;
    TLDR1.getDocumentBranch = function getDocumentBranch(data, id) {
        var _this = this;
        var shape = data.page.shapes[id];
        if (shape.children === undefined) return [
            id
        ];
        return [
            id
        ].concat(shape.children.flatMap(function(childId) {
            return _this.getDocumentBranch(data, childId);
        }));
    };
    TLDR1.getSelectedBranchSnapshot = function getSelectedBranchSnapshot(data, fn) {
        var _this2 = this;
        var page = this.getPage(data);
        var copies = this.getSelectedIds(data).flatMap(function(id) {
            return _this2.getDocumentBranch(data, id).map(function(id1) {
                return page.shapes[id1];
            });
        }).filter(function(shape) {
            return !shape.isLocked;
        }).map(_core.Utils.deepClone);
        if (fn !== undefined) return copies.map(function(shape) {
            return _extends({
                id: shape.id
            }, fn(shape));
        });
        return copies;
    };
    TLDR1.getSelectedShapeSnapshot = function getSelectedShapeSnapshot(data, fn) {
        var copies = this.getSelectedShapes(data).filter(function(shape) {
            return !shape.isLocked;
        }).map(_core.Utils.deepClone);
        if (fn !== undefined) return copies.map(function(shape) {
            return _extends({
                id: shape.id
            }, fn(shape));
        });
        return copies;
    } // For a given array of shape ids, an array of all other shapes that may be affected by a mutation to it.
    ;
    TLDR1.getAllEffectedShapeIds = function getAllEffectedShapeIds(data, ids) {
        var visited = new Set(ids);
        ids.forEach(function(id) {
            var shape = data.page.shapes[id]; // Add descendant shapes
            function collectDescendants(shape1) {
                if (shape1.children === undefined) return;
                shape1.children.filter(function(childId) {
                    return !visited.has(childId);
                }).forEach(function(childId) {
                    visited.add(childId);
                    collectDescendants(data.page.shapes[childId]);
                });
            }
            collectDescendants(shape); // Add asecendant shapes
            function collectAscendants(shape1) {
                var parentId = shape1.parentId;
                if (parentId === data.page.id) return;
                if (visited.has(parentId)) return;
                visited.add(parentId);
                collectAscendants(data.page.shapes[parentId]);
            }
            collectAscendants(shape); // Add bindings that are to or from any of the visited shapes (this does not have to be recursive)
            visited.forEach(function(id1) {
                Object.values(data.page.bindings).filter(function(binding) {
                    return binding.fromId === id1 || binding.toId === id1;
                }).forEach(function(binding) {
                    return visited.add(binding.fromId === id1 ? binding.toId : binding.fromId);
                });
            });
        }); // Return the unique array of visited shapes
        return Array.from(visited.values());
    };
    TLDR1.recursivelyUpdateChildren = function recursivelyUpdateChildren(data, id, beforeShapes, afterShapes) {
        var _this3 = this;
        if (beforeShapes === void 0) beforeShapes = {
        };
        if (afterShapes === void 0) afterShapes = {
        };
        var shape = data.page.shapes[id];
        if (shape.children !== undefined) {
            var deltas = this.getShapeUtils(shape).updateChildren(shape, shape.children.map(function(childId) {
                return data.page.shapes[childId];
            }));
            if (deltas) return deltas.reduce(function(cData, delta) {
                var deltaShape = cData.page.shapes[delta.id];
                if (!beforeShapes[deltaShape.id]) beforeShapes[deltaShape.id] = deltaShape;
                cData.page.shapes[deltaShape.id] = _this3.getShapeUtils(deltaShape).mutate(deltaShape, delta);
                afterShapes[deltaShape.id] = cData.page.shapes[deltaShape.id];
                if (deltaShape.children !== undefined) _this3.recursivelyUpdateChildren(cData, deltaShape.id, beforeShapes, afterShapes);
                return cData;
            }, data);
        }
        return data;
    };
    TLDR1.recursivelyUpdateParents = function recursivelyUpdateParents(data, id, beforeShapes, afterShapes) {
        if (beforeShapes === void 0) beforeShapes = {
        };
        if (afterShapes === void 0) afterShapes = {
        };
        var shape = data.page.shapes[id];
        if (shape.parentId !== data.page.id) {
            var parent = data.page.shapes[shape.parentId];
            var delta = this.getShapeUtils(shape).onChildrenChange(parent, parent.children.map(function(childId) {
                return data.page.shapes[childId];
            }));
            if (delta) {
                if (!beforeShapes[parent.id]) beforeShapes[parent.id] = parent;
                data.page.shapes[parent.id] = this.getShapeUtils(parent).mutate(parent, delta);
                afterShapes[parent.id] = data.page.shapes[parent.id];
            }
            if (parent.parentId !== data.page.id) return this.recursivelyUpdateParents(data, parent.parentId, beforeShapes, afterShapes);
        }
        return data;
    };
    TLDR1.updateBindings = function updateBindings(data, id, beforeShapes, afterShapes) {
        var _this4 = this;
        if (beforeShapes === void 0) beforeShapes = {
        };
        if (afterShapes === void 0) afterShapes = {
        };
        return Object.values(data.page.bindings).filter(function(binding) {
            return binding.fromId === id || binding.toId === id;
        }).reduce(function(cData, binding) {
            if (!beforeShapes[binding.id]) beforeShapes[binding.fromId] = _core.Utils.deepClone(cData.page.shapes[binding.fromId]);
            if (!beforeShapes[binding.toId]) beforeShapes[binding.toId] = _core.Utils.deepClone(cData.page.shapes[binding.toId]);
            _this4.onBindingChange(cData, cData.page.shapes[binding.fromId], binding, cData.page.shapes[binding.toId]);
            afterShapes[binding.fromId] = _core.Utils.deepClone(cData.page.shapes[binding.fromId]);
            afterShapes[binding.toId] = _core.Utils.deepClone(cData.page.shapes[binding.toId]);
            return cData;
        }, data);
    };
    TLDR1.getChildIndexAbove = function getChildIndexAbove(data, id) {
        var page = this.getPage(data);
        var shape = page.shapes[id];
        var siblings = Object.values(page.shapes).filter(function(_ref) {
            var parentId = _ref.parentId;
            return parentId === shape.parentId;
        }).sort(function(a, b) {
            return a.childIndex - b.childIndex;
        });
        var index = siblings.indexOf(shape);
        var nextSibling = siblings[index + 1];
        if (!nextSibling) return shape.childIndex + 1;
        return (shape.childIndex + nextSibling.childIndex) / 2;
    };
    TLDR1.setSelectedIds = function setSelectedIds(data, ids) {
        data.pageState.selectedIds = ids;
    };
    TLDR1.deselectAll = function deselectAll(data) {
        this.setSelectedIds(data, []);
    };
    TLDR1.mutateShapes = function mutateShapes(data, ids, fn) {
        var _this5 = this;
        var beforeShapes = {
        };
        var afterShapes = {
        };
        ids.forEach(function(id, i) {
            var shape = data.page.shapes[id];
            var change = fn(shape, i);
            beforeShapes[id] = Object.fromEntries(Object.keys(change).map(function(key) {
                return [
                    key,
                    shape[key]
                ];
            }));
            afterShapes[id] = change;
            data.page.shapes[id] = _this5.getShapeUtils(shape).mutate(shape, change);
        });
        var dataWithChildrenChanges = ids.reduce(function(cData, id) {
            return _this5.recursivelyUpdateChildren(cData, id, beforeShapes, afterShapes);
        }, data);
        var dataWithParentChanges = ids.reduce(function(cData, id) {
            return _this5.recursivelyUpdateParents(cData, id, beforeShapes, afterShapes);
        }, dataWithChildrenChanges);
        var dataWithBindingChanges = ids.reduce(function(cData, id) {
            return _this5.updateBindings(cData, id, beforeShapes, afterShapes);
        }, dataWithParentChanges);
        return {
            before: beforeShapes,
            after: afterShapes,
            data: dataWithBindingChanges
        };
    };
    TLDR1.createShapes = function createShapes(data, shapes) {
        var _this6 = this;
        var page = this.getPage(data);
        var shapeIds = shapes.map(function(shape) {
            return shape.id;
        }); // Update selected ids
        this.setSelectedIds(data, shapeIds); // Restore deleted shapes
        shapes.forEach(function(shape) {
            var newShape = _extends({
            }, shape);
            page.shapes[shape.id] = newShape;
        }); // Update parents
        shapes.forEach(function(shape) {
            if (shape.parentId === data.page.id) return;
            var parent = page.shapes[shape.parentId];
            _this6.mutate(data, parent, {
                children: parent.children.includes(shape.id) ? parent.children : [].concat(parent.children, [
                    shape.id
                ])
            });
        });
    };
    TLDR1.onSessionComplete = function onSessionComplete(data, shape) {
        var delta = getShapeUtils(shape).onSessionComplete(shape);
        if (!delta) return shape;
        return this.mutate(data, shape, delta);
    };
    TLDR1.onChildrenChange = function onChildrenChange(data, shape) {
        var delta = getShapeUtils(shape).onChildrenChange(shape, shape.children.map(function(id) {
            return data.page.shapes[id];
        }));
        if (!delta) return shape;
        return this.mutate(data, shape, delta);
    };
    TLDR1.onBindingChange = function onBindingChange(data, shape, binding, otherShape) {
        var delta = getShapeUtils(shape).onBindingChange(shape, binding, otherShape, getShapeUtils(otherShape).getBounds(otherShape));
        if (!delta) return shape;
        return this.mutate(data, shape, delta);
    };
    TLDR1.transform = function transform(data, shape, bounds, info) {
        return this.mutate(data, shape, getShapeUtils(shape).transform(shape, bounds, info));
    };
    TLDR1.transformSingle = function transformSingle(data, shape, bounds, info) {
        return this.mutate(data, shape, getShapeUtils(shape).transformSingle(shape, bounds, info));
    };
    TLDR1.mutate = function mutate(data, shape, props) {
        var next = getShapeUtils(shape).mutate(shape, props);
        if ('children' in props) next = this.onChildrenChange(data, next);
        data.page.shapes[next.id] = next;
        return next;
    };
    TLDR1.updateParents = function updateParents(data, changedShapeIds) {
        if (changedShapeIds.length === 0) return;
        var _this$getPage = this.getPage(data), shapes = _this$getPage.shapes;
        var parentToUpdateIds = Array.from(new Set(changedShapeIds.map(function(id) {
            return shapes[id].parentId;
        }).values())).filter(function(id) {
            return id !== data.page.id;
        });
        for(var _iterator = _createForOfIteratorHelperLoose(parentToUpdateIds), _step; !(_step = _iterator()).done;){
            var parentId = _step.value;
            var parent = shapes[parentId];
            if (!parent.children) throw Error('A shape is parented to a shape without a children array.');
            this.onChildrenChange(data, parent);
        }
        this.updateParents(data, parentToUpdateIds);
    };
    TLDR1.getSelectedStyle = function getSelectedStyle(data) {
        var page = data.page, pageState = data.pageState, currentStyle = data.appState.currentStyle;
        if (pageState.selectedIds.length === 0) return currentStyle;
        var shapeStyles = data.pageState.selectedIds.map(function(id) {
            return page.shapes[id].style;
        });
        var commonStyle = {
        };
        var overrides = new Set([]);
        var _loop = function _loop1() {
            var shapeStyle = _step2.value;
            Object.keys(currentStyle).forEach(function(key) {
                if (overrides.has(key)) return;
                if (commonStyle[key] === undefined) // @ts-ignore
                commonStyle[key] = shapeStyle[key];
                else {
                    if (commonStyle[key] === shapeStyle[key]) return; // @ts-ignore
                    commonStyle[key] = currentStyle[key];
                    overrides.add(key);
                }
            });
        };
        for(var _iterator2 = _createForOfIteratorHelperLoose(shapeStyles), _step2; !(_step2 = _iterator2()).done;)_loop();
        return commonStyle;
    };
    TLDR1.getBinding = function getBinding(data, id) {
        return this.getPage(data).bindings[id];
    };
    TLDR1.getBindings = function getBindings(data) {
        var page = this.getPage(data);
        return Object.values(page.bindings);
    };
    TLDR1.getBindingsWithShapeIds = function getBindingsWithShapeIds(data, ids) {
        return Array.from(new Set(this.getBindings(data).filter(function(binding) {
            return ids.includes(binding.toId) || ids.includes(binding.fromId);
        })).values());
    };
    TLDR1.createBindings = function createBindings(data, bindings) {
        var page = this.getPage(data);
        bindings.forEach(function(binding) {
            return page.bindings[binding.id] = binding;
        });
    };
    TLDR1.deleteBindings = function deleteBindings(data, ids) {
        if (ids.length === 0) return;
        var page = this.getPage(data);
        ids.forEach(function(id) {
            return delete page.bindings[id];
        });
    };
    return TLDR1;
}();
function align(data, ids, type) {
    var initialShapes = ids.map(function(id) {
        return TLDR.getShape(data, id);
    });
    var boundsForShapes = initialShapes.map(function(shape) {
        return {
            id: shape.id,
            point: [].concat(shape.point),
            bounds: TLDR.getShapeUtils(shape).getBounds(shape)
        };
    });
    var commonBounds = _core.Utils.getCommonBounds(boundsForShapes.map(function(_ref) {
        var bounds = _ref.bounds;
        return bounds;
    }));
    var midX = commonBounds.minX + commonBounds.width / 2;
    var midY = commonBounds.minY + commonBounds.height / 2;
    var deltaMap = Object.fromEntries(boundsForShapes.map(function(_ref2) {
        var _AlignType$CenterVert;
        var id = _ref2.id, point = _ref2.point, bounds = _ref2.bounds;
        return [
            id,
            {
                prev: point,
                next: (_AlignType$CenterVert = {
                }, _AlignType$CenterVert[AlignType.CenterVertical] = [
                    point[0],
                    midY - bounds.height / 2
                ], _AlignType$CenterVert[AlignType.CenterHorizontal] = [
                    midX - bounds.width / 2,
                    point[1]
                ], _AlignType$CenterVert[AlignType.Top] = [
                    point[0],
                    commonBounds.minY
                ], _AlignType$CenterVert[AlignType.Bottom] = [
                    point[0],
                    commonBounds.maxY - bounds.height
                ], _AlignType$CenterVert[AlignType.Left] = [
                    commonBounds.minX,
                    point[1]
                ], _AlignType$CenterVert[AlignType.Right] = [
                    commonBounds.maxX - bounds.width,
                    point[1]
                ], _AlignType$CenterVert)[type]
            }
        ];
    }));
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        if (!deltaMap[shape.id]) return shape;
        return {
            point: deltaMap[shape.id].next
        };
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'align_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            }
        }
    };
}
function distribute(data, ids, type) {
    var initialShapes = ids.map(function(id) {
        return data.page.shapes[id];
    });
    var deltaMap = Object.fromEntries(getDistributions(initialShapes, type).map(function(d) {
        return [
            d.id,
            d
        ];
    }));
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        if (!deltaMap[shape.id]) return shape;
        return {
            point: deltaMap[shape.id].next
        };
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'distribute_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            }
        }
    };
}
function getDistributions(initialShapes, type) {
    var entries = initialShapes.map(function(shape) {
        var utils = TLDR.getShapeUtils(shape);
        return {
            id: shape.id,
            point: [].concat(shape.point),
            bounds: utils.getBounds(shape),
            center: utils.getCenter(shape)
        };
    });
    var len = entries.length;
    var commonBounds = _core.Utils.getCommonBounds(entries.map(function(_ref) {
        var bounds = _ref.bounds;
        return bounds;
    }));
    var results = [];
    switch(type){
        case DistributeType.Horizontal:
            var span = entries.reduce(function(a, c) {
                return a + c.bounds.width;
            }, 0);
            if (span > commonBounds.width) {
                var left = entries.sort(function(a, b) {
                    return a.bounds.minX - b.bounds.minX;
                })[0];
                var right = entries.sort(function(a, b) {
                    return b.bounds.maxX - a.bounds.maxX;
                })[0];
                var entriesToMove = entries.filter(function(a) {
                    return a !== left && a !== right;
                }).sort(function(a, b) {
                    return a.center[0] - b.center[0];
                });
                var step = (right.center[0] - left.center[0]) / (len - 1);
                var x = left.center[0] + step;
                entriesToMove.forEach(function(_ref2, i) {
                    var id = _ref2.id, point = _ref2.point, bounds = _ref2.bounds;
                    results.push({
                        id: id,
                        prev: point,
                        next: [
                            x + step * i - bounds.width / 2,
                            bounds.minY
                        ]
                    });
                });
            } else {
                var _entriesToMove = entries.sort(function(a, b) {
                    return a.center[0] - b.center[0];
                });
                var _x = commonBounds.minX;
                var _step = (commonBounds.width - span) / (len - 1);
                _entriesToMove.forEach(function(_ref3, i) {
                    var id = _ref3.id, point = _ref3.point, bounds = _ref3.bounds;
                    results.push({
                        id: id,
                        prev: point,
                        next: [
                            _x,
                            bounds.minY
                        ]
                    });
                    _x += bounds.width + _step;
                });
            }
            break;
        case DistributeType.Vertical:
            var _span = entries.reduce(function(a, c) {
                return a + c.bounds.height;
            }, 0);
            if (_span > commonBounds.height) {
                var top = entries.sort(function(a, b) {
                    return a.bounds.minY - b.bounds.minY;
                })[0];
                var bottom = entries.sort(function(a, b) {
                    return b.bounds.maxY - a.bounds.maxY;
                })[0];
                var _entriesToMove2 = entries.filter(function(a) {
                    return a !== top && a !== bottom;
                }).sort(function(a, b) {
                    return a.center[1] - b.center[1];
                });
                var _step2 = (bottom.center[1] - top.center[1]) / (len - 1);
                var y = top.center[1] + _step2;
                _entriesToMove2.forEach(function(_ref4, i) {
                    var id = _ref4.id, point = _ref4.point, bounds = _ref4.bounds;
                    results.push({
                        id: id,
                        prev: point,
                        next: [
                            bounds.minX,
                            y + _step2 * i - bounds.height / 2
                        ]
                    });
                });
            } else {
                var _entriesToMove3 = entries.sort(function(a, b) {
                    return a.center[1] - b.center[1];
                });
                var _y = commonBounds.minY;
                var _step3 = (commonBounds.height - _span) / (len - 1);
                _entriesToMove3.forEach(function(_ref5, i) {
                    var id = _ref5.id, point = _ref5.point, bounds = _ref5.bounds;
                    results.push({
                        id: id,
                        prev: point,
                        next: [
                            bounds.minX,
                            _y
                        ]
                    });
                    _y += bounds.height + _step3;
                });
            }
            break;
    }
    return results;
}
function style(data, ids, changes) {
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        return {
            style: _extends({
            }, shape.style, changes)
        };
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'style_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            },
            appState: {
                currentStyle: _extends({
                }, data.appState.currentStyle)
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            },
            appState: {
                currentStyle: _extends({
                }, data.appState.currentStyle, changes)
            }
        }
    };
}
function duplicate(data, ids) {
    var delta = _core.Vec.div([
        16,
        16
    ], data.pageState.camera.zoom);
    var after = Object.fromEntries(TLDR.getSelectedIds(data).map(function(id) {
        return data.page.shapes[id];
    }).map(function(shape) {
        var id = _core.Utils.uniqueId();
        return [
            id,
            _extends({
            }, _core.Utils.deepClone(shape), {
                id: id,
                point: _core.Vec.add(shape.point, delta)
            })
        ];
    }));
    var before = Object.fromEntries(Object.keys(after).map(function(id) {
        return [
            id,
            undefined
        ];
    }));
    return {
        id: 'duplicate',
        before: {
            page: {
                shapes: _extends({
                }, before)
            },
            pageState: _extends({
            }, data.pageState, {
                selectedIds: ids
            })
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            },
            pageState: _extends({
            }, data.pageState, {
                selectedIds: Object.keys(after)
            })
        }
    };
}
function move(data, ids, type) {
    var _result, _result2;
    // Get the unique parent ids for the selected elements
    var parentIds = new Set(ids.map(function(id) {
        return data.page.shapes[id].parentId;
    }));
    var result = {
        before: {
        },
        after: {
        }
    };
    var startIndex;
    var startChildIndex;
    var step; // Collect shapes with common parents into a table under their parent id
    Array.from(parentIds.values()).forEach(function(parentId) {
        var sortedChildren = parentId === data.page.id ? Object.values(data.page.shapes).sort(function(a, b) {
            return a.childIndex - b.childIndex;
        }) : data.page.shapes[parentId].children.map(function(childId) {
            return data.page.shapes[childId];
        }).sort(function(a, b) {
            return a.childIndex - b.childIndex;
        });
        var sortedChildIds = sortedChildren.map(function(shape) {
            return shape.id;
        });
        var sortedIndicesToMove = ids.filter(function(id) {
            return sortedChildIds.includes(id);
        }).map(function(id) {
            return sortedChildIds.indexOf(id);
        }).sort(function(a, b) {
            return a - b;
        });
        if (sortedIndicesToMove.length === sortedChildIds.length) return;
        switch(type){
            case MoveType.ToBack:
                //               a       b  c
                // Initial   1   2    3  4  5  6  7
                // Final   .25  .5  .75  1  3  6  7
                //           a   b    c
                // Find the lowest "open" index
                for(var i = 0; i < sortedChildIds.length; i++){
                    if (sortedIndicesToMove.includes(i)) continue;
                    startIndex = i;
                    break;
                } // Find the lowest child index that isn't in sortedIndicesToMove
                startChildIndex = sortedChildren[startIndex].childIndex; // Find the step for each additional child
                step = startChildIndex / (sortedIndicesToMove.length + 1); // Get the results of moving the selected shapes below the first open index's shape
                result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function(i1) {
                    return sortedChildren[i1].id;
                }).reverse(), function(_shape, i1) {
                    return {
                        childIndex: startChildIndex - (i1 + 1) * step
                    };
                });
                break;
            case MoveType.ToFront:
                //              a     b  c
                // Initial   1  2  3  4  5  6   7
                // Final     1  3  6  7  8  9  10
                //                       a  b   c
                // Find the highest "open" index
                for(var _i = sortedChildIds.length - 1; _i >= 0; _i--){
                    if (sortedIndicesToMove.includes(_i)) continue;
                    startIndex = _i;
                    break;
                } // Find the lowest child index that isn't in sortedIndicesToMove
                startChildIndex = sortedChildren[startIndex].childIndex; // Find the step for each additional child
                step = 1; // Get the results of moving the selected shapes below the first open index's shape
                result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function(i1) {
                    return sortedChildren[i1].id;
                }), function(_shape, i1) {
                    return {
                        childIndex: startChildIndex + (i1 + 1)
                    };
                });
                break;
            case MoveType.Backward:
                //               a           b  c
                // Initial    1  2     3     4  5  6  7
                // Final     .5  1  1.66  2.33  3  6  7
                //           a         b     c
                var indexMap = {
                }; // Starting from the top...
                for(var _i2 = sortedChildIds.length - 1; _i2 >= 0; _i2--)// If we found a moving index...
                if (sortedIndicesToMove.includes(_i2)) {
                    for(var j = _i2; j >= 0; j--)// iterate downward until we find an open spot
                    if (!sortedIndicesToMove.includes(j)) {
                        // i = the index of the first closed spot
                        // j = the index of the first open spot
                        startChildIndex = j === 0 ? sortedChildren[j].childIndex / 2 : sortedChildren[j - 1].childIndex;
                        var _step = (sortedChildren[j].childIndex - startChildIndex) / (_i2 - j + 1);
                        for(var k = 0; k < _i2 - j; k++)indexMap[sortedChildren[j + k + 1].id] = startChildIndex + _step * (k + 1);
                        break;
                    }
                }
                if (Object.values(indexMap).length > 0) // Get the results of moving the selected shapes below the first open index's shape
                result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function(i1) {
                    return sortedChildren[i1].id;
                }), function(shape) {
                    return {
                        childIndex: indexMap[shape.id]
                    };
                });
                break;
            case MoveType.Forward:
                //             a     b c
                // Initial   1 2   3 4 5 6 7
                // Final     1 3 3.5 6 7 8 9
                //                 a     b c
                var _indexMap = {
                }; // Starting from the top...
                for(var _i3 = 0; _i3 < sortedChildIds.length; _i3++)// If we found a moving index...
                if (sortedIndicesToMove.includes(_i3)) {
                    // Search for the first open spot above this one
                    for(var _j = _i3; _j < sortedChildIds.length; _j++)if (!sortedIndicesToMove.includes(_j)) {
                        // i = the low index of the first closed spot
                        // j = the high index of the first open spot
                        startChildIndex = sortedChildren[_j].childIndex;
                        var _step2 = _j === sortedChildIds.length - 1 ? 1 : (sortedChildren[_j + 1].childIndex - startChildIndex) / (_j - _i3 + 1);
                        for(var _k = 0; _k < _j - _i3; _k++)_indexMap[sortedChildren[_i3 + _k].id] = startChildIndex + _step2 * (_k + 1);
                        break;
                    }
                }
                if (Object.values(_indexMap).length > 0) // Get the results of moving the selected shapes below the first open index's shape
                result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function(i1) {
                    return sortedChildren[i1].id;
                }), function(shape) {
                    return {
                        childIndex: _indexMap[shape.id]
                    };
                });
                break;
        }
    });
    return {
        id: 'move_shapes',
        before: {
            page: _extends({
            }, data.page, {
                shapes: ((_result = result) == null ? void 0 : _result.before) || {
                }
            })
        },
        after: {
            page: _extends({
            }, data.page, {
                shapes: ((_result2 = result) == null ? void 0 : _result2.after) || {
                }
            })
        }
    };
}
function translate(data, ids, delta) {
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        return {
            point: _core.Vec.add(shape.point, delta)
        };
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'translate_shapes',
        before: {
            page: _extends({
            }, data.page, {
                shapes: _extends({
                }, before)
            })
        },
        after: {
            page: _extends({
            }, data.page, {
                shapes: _extends({
                }, after)
            })
        }
    };
}
function toggle(data, ids, prop) {
    var initialShapes = ids.map(function(id) {
        return data.page.shapes[id];
    });
    var isAllToggled = initialShapes.every(function(shape) {
        return shape[prop];
    });
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, TLDR.getSelectedIds(data), function() {
        var _ref;
        return _ref = {
        }, _ref[prop] = !isAllToggled, _ref;
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'toggle_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            }
        }
    };
}
function deleteShapes(data, ids) {
    return {
        id: 'toggle_shapes',
        before: {
            page: {
                shapes: Object.fromEntries(ids.map(function(id) {
                    return [
                        id,
                        data.page.shapes[id]
                    ];
                }))
            },
            pageState: {
                selectedIds: [].concat(data.pageState.selectedIds)
            }
        },
        after: {
            page: {
                shapes: Object.fromEntries(ids.map(function(id) {
                    return [
                        id,
                        undefined
                    ];
                }))
            },
            pageState: {
                selectedIds: []
            }
        }
    };
}
var PI2 = Math.PI * 2;
function rotate(data, ids, delta) {
    if (delta === void 0) delta = -PI2 / 4;
    var initialShapes = ids.map(function(id) {
        return data.page.shapes[id];
    });
    var boundsForShapes = initialShapes.map(function(shape) {
        var utils = TLDR.getShapeUtils(shape);
        return {
            id: shape.id,
            point: [].concat(shape.point),
            bounds: utils.getBounds(shape),
            center: utils.getCenter(shape),
            rotation: shape.rotation
        };
    });
    var commonBounds = _core.Utils.getCommonBounds(boundsForShapes.map(function(_ref) {
        var bounds = _ref.bounds;
        return bounds;
    }));
    var commonBoundsCenter = _core.Utils.getBoundsCenter(commonBounds);
    var rotations = Object.fromEntries(boundsForShapes.map(function(_ref2) {
        var id = _ref2.id, point = _ref2.point, center = _ref2.center, rotation = _ref2.rotation;
        var offset = _core.Vec.sub(center, point);
        var nextPoint = _core.Vec.sub(_core.Vec.rotWith(center, commonBoundsCenter, -(PI2 / 4)), offset);
        var nextRotation = (PI2 + ((rotation || 0) + delta)) % PI2;
        return [
            id,
            {
                point: nextPoint,
                rotation: nextRotation
            }
        ];
    }));
    var prevBoundsRotation = data.pageState.boundsRotation;
    var nextBoundsRotation = (PI2 + ((data.pageState.boundsRotation || 0) + delta)) % PI2;
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        return rotations[shape.id];
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'toggle_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            },
            pageState: {
                boundsRotation: prevBoundsRotation
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            },
            pageState: {
                boundsRotation: nextBoundsRotation
            }
        }
    };
}
function stretch(data, ids, type) {
    var initialShapes = ids.map(function(id) {
        return data.page.shapes[id];
    });
    var boundsForShapes = initialShapes.map(function(shape) {
        return TLDR.getBounds(shape);
    });
    var commonBounds = _core.Utils.getCommonBounds(boundsForShapes);
    var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function(shape) {
        var bounds = TLDR.getBounds(shape);
        switch(type){
            case StretchType.Horizontal:
                var newBounds = _extends({
                }, bounds, {
                    minX: commonBounds.minX,
                    maxX: commonBounds.maxX,
                    width: commonBounds.width
                });
                return TLDR.getShapeUtils(shape).transformSingle(shape, newBounds, {
                    type: _core.TLBoundsCorner.TopLeft,
                    scaleX: newBounds.width / bounds.width,
                    scaleY: 1,
                    initialShape: shape,
                    transformOrigin: [
                        0.5,
                        0.5
                    ]
                });
            case StretchType.Vertical:
                var _newBounds = _extends({
                }, bounds, {
                    minY: commonBounds.minY,
                    maxY: commonBounds.maxY,
                    height: commonBounds.height
                });
                return TLDR.getShapeUtils(shape).transformSingle(shape, _newBounds, {
                    type: _core.TLBoundsCorner.TopLeft,
                    scaleX: 1,
                    scaleY: _newBounds.height / bounds.height,
                    initialShape: shape,
                    transformOrigin: [
                        0.5,
                        0.5
                    ]
                });
        }
    }), before = _TLDR$mutateShapes.before, after = _TLDR$mutateShapes.after;
    return {
        id: 'stretch_shapes',
        before: {
            page: {
                shapes: _extends({
                }, before)
            }
        },
        after: {
            page: {
                shapes: _extends({
                }, after)
            }
        }
    };
}
function create(data, shapes) {
    return {
        id: 'toggle_shapes',
        before: {
            page: {
                shapes: Object.fromEntries(shapes.map(function(shape) {
                    return [
                        shape.id,
                        undefined
                    ];
                }))
            }
        },
        after: {
            page: {
                shapes: Object.fromEntries(shapes.map(function(shape) {
                    return [
                        shape.id,
                        shape
                    ];
                }))
            }
        }
    };
}
var BrushSession = /*#__PURE__*/ function() {
    function BrushSession1(data, point) {
        var _this = this;
        this.id = 'brush';
        this.start = function(data1) {
            return data1;
        };
        this.update = function(data1, point1, containMode) {
            if (containMode === void 0) containMode = false;
            var snapshot = _this.snapshot, origin = _this.origin; // Create a bounding box between the origin and the new point
            var brush = _core.Utils.getBoundsFromPoints([
                origin,
                point1
            ]);
            _core.brushUpdater.set(brush); // Find ids of brushed shapes
            var hits = new Set();
            var selectedIds = new Set(snapshot.selectedIds);
            snapshot.shapesToTest.forEach(function(_ref) {
                var id = _ref.id, util = _ref.util, selectId = _ref.selectId;
                if (selectedIds.has(id)) return;
                var shape = data1.page.shapes[id];
                if (!hits.has(selectId)) {
                    if (containMode ? _core.Utils.boundsContain(brush, util.getBounds(shape)) : util.hitTestBounds(shape, brush)) {
                        hits.add(selectId); // When brushing a shape, select its top group parent.
                        if (!selectedIds.has(selectId)) selectedIds.add(selectId);
                    } else if (selectedIds.has(selectId)) selectedIds["delete"](selectId);
                }
            });
            if (selectedIds.size === data1.pageState.selectedIds.length && data1.pageState.selectedIds.every(function(id) {
                return selectedIds.has(id);
            })) return data1;
            return _extends({
            }, data1, {
                pageState: _extends({
                }, data1.pageState, {
                    selectedIds: Array.from(selectedIds.values())
                })
            });
        };
        this.origin = _core.Vec.round(point);
        this.snapshot = getBrushSnapshot(data);
    }
    var _proto = BrushSession1.prototype;
    _proto.cancel = function cancel(data) {
        return _extends({
        }, data, {
            pageState: _extends({
            }, data.pageState, {
                selectedIds: this.snapshot.selectedIds
            })
        });
    };
    _proto.complete = function complete(data) {
        return _extends({
        }, data, {
            pageState: _extends({
            }, data.pageState, {
                selectedIds: [].concat(data.pageState.selectedIds)
            })
        });
    };
    return BrushSession1;
}();
/**
 * Get a snapshot of the current selected ids, for each shape that is
 * not already selected, the shape's id and a test to see whether the
 * brush will intersect that shape. For tests, start broad -> fine.
 */ function getBrushSnapshot(data) {
    var selectedIds = [].concat(data.pageState.selectedIds);
    var shapesToTest = TLDR.getShapes(data).filter(function(shape) {
        return !(shape.isHidden || shape.children !== undefined || selectedIds.includes(shape.id) || selectedIds.includes(shape.parentId));
    }).map(function(shape) {
        return {
            id: shape.id,
            util: getShapeUtils(shape),
            bounds: getShapeUtils(shape).getBounds(shape),
            selectId: TLDR.getTopParentId(data, shape.id)
        };
    });
    return {
        selectedIds: selectedIds,
        shapesToTest: shapesToTest
    };
}
var TranslateSession = /*#__PURE__*/ function() {
    function TranslateSession1(data, point) {
        var _this = this;
        this.id = 'translate';
        this.delta = [
            0,
            0
        ];
        this.prev = [
            0,
            0
        ];
        this.isCloning = false;
        this.start = function(data1) {
            return data1;
        };
        this.update = function(data1, point1, isAligned, isCloning) {
            if (isAligned === void 0) isAligned = false;
            if (isCloning === void 0) isCloning = false;
            var _this$snapshot = _this.snapshot, clones = _this$snapshot.clones, initialShapes = _this$snapshot.initialShapes;
            var next = _extends({
            }, data1, {
                page: _extends({
                }, data1.page),
                shapes: _extends({
                }, data1.page.shapes),
                pageState: _extends({
                }, data1.pageState)
            });
            var delta = _core.Vec.sub(point1, _this.origin);
            if (isAligned) {
                if (Math.abs(delta[0]) < Math.abs(delta[1])) delta[0] = 0;
                else delta[1] = 0;
            }
            var trueDelta = _core.Vec.sub(delta, _this.prev);
            _this.delta = delta;
            _this.prev = delta; // If cloning...
            if (isCloning) {
                // Not Cloning -> Cloning
                if (!_this.isCloning) {
                    _this.isCloning = true; // Move original shapes back to start
                    next.page.shapes = _extends({
                    }, next.page.shapes, Object.fromEntries(initialShapes.map(function(shape) {
                        return [
                            shape.id,
                            _extends({
                            }, next.page.shapes[shape.id], {
                                point: shape.point
                            })
                        ];
                    })));
                    next.page.shapes = _extends({
                    }, next.page.shapes, Object.fromEntries(clones.map(function(clone) {
                        return [
                            clone.id,
                            _extends({
                            }, clone, {
                                point: _core.Vec.add(clone.point, delta)
                            })
                        ];
                    })));
                    next.pageState.selectedIds = clones.map(function(c) {
                        return c.id;
                    });
                } // Either way, move the clones
                next.page.shapes = _extends({
                }, next.page.shapes, Object.fromEntries(clones.map(function(clone) {
                    return [
                        clone.id,
                        _extends({
                        }, clone, {
                            point: _core.Vec.add(next.page.shapes[clone.id].point, trueDelta)
                        })
                    ];
                })));
                return next;
            } // If not cloning...
            // Cloning -> Not Cloning
            if (_this.isCloning) {
                _this.isCloning = false; // Delete the clones
                clones.forEach(function(clone) {
                    return delete next.page.shapes[clone.id];
                }); // Move the original shapes back to the cursor position
                next.page.shapes = _extends({
                }, next.page.shapes, Object.fromEntries(initialShapes.map(function(shape) {
                    return [
                        shape.id,
                        _extends({
                        }, next.page.shapes[shape.id], {
                            point: _core.Vec.add(shape.point, delta)
                        })
                    ];
                }))); // Set selected ids
                next.pageState.selectedIds = initialShapes.map(function(c) {
                    return c.id;
                });
            } // Move the shapes by the delta
            next.page.shapes = _extends({
            }, next.page.shapes, Object.fromEntries(initialShapes.map(function(shape) {
                return [
                    shape.id,
                    _extends({
                    }, next.page.shapes[shape.id], {
                        point: _core.Vec.add(next.page.shapes[shape.id].point, trueDelta)
                    })
                ];
            })));
            return next;
        };
        this.cancel = function(data1) {
            return _extends({
            }, data1, {
                page: _extends({
                }, data1.page, {
                    // @ts-ignore - We need to set deleted shapes to undefined in order to correctly deep merge them away.
                    shapes: _extends({
                    }, data1.page.shapes, Object.fromEntries(_this.snapshot.clones.map(function(clone) {
                        return [
                            clone.id,
                            undefined
                        ];
                    })), Object.fromEntries(_this.snapshot.initialShapes.map(function(shape) {
                        return [
                            shape.id,
                            _extends({
                            }, data1.page.shapes[shape.id], {
                                point: shape.point
                            })
                        ];
                    })))
                }),
                pageState: _extends({
                }, data1.pageState, {
                    selectedIds: _this.snapshot.selectedIds
                })
            });
        };
        this.origin = point;
        this.snapshot = getTranslateSnapshot(data);
    }
    var _proto = TranslateSession1.prototype;
    _proto.complete = function complete(data) {
        return {
            id: 'translate',
            before: _extends({
            }, data, {
                page: _extends({
                }, data.page, {
                    shapes: _extends({
                    }, data.page.shapes, Object.fromEntries(this.snapshot.clones.map(function(clone) {
                        return [
                            clone.id,
                            undefined
                        ];
                    })), Object.fromEntries(this.snapshot.initialShapes.map(function(shape) {
                        return [
                            shape.id,
                            {
                                point: shape.point
                            }
                        ];
                    })))
                }),
                pageState: _extends({
                }, data.pageState, {
                    selectedIds: this.snapshot.selectedIds
                })
            }),
            after: _extends({
            }, data, {
                page: _extends({
                }, data.page, {
                    shapes: _extends({
                    }, data.page.shapes, Object.fromEntries(this.snapshot.clones.map(function(clone) {
                        return [
                            clone.id,
                            data.page.shapes[clone.id]
                        ];
                    })), Object.fromEntries(this.snapshot.initialShapes.map(function(shape) {
                        return [
                            shape.id,
                            {
                                point: data.page.shapes[shape.id].point
                            }
                        ];
                    })))
                }),
                pageState: _extends({
                }, data.pageState, {
                    selectedIds: [].concat(data.pageState.selectedIds)
                })
            })
        };
    };
    return TranslateSession1;
}(); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function getTranslateSnapshot(data) {
    var selectedShapes = TLDR.getSelectedShapeSnapshot(data);
    var hasUnlockedShapes = selectedShapes.length > 0;
    var initialParents = Array.from(new Set(selectedShapes.map(function(s) {
        return s.parentId;
    })).values()).filter(function(id) {
        return id !== data.page.id;
    }).map(function(id) {
        var shape = TLDR.getShape(data, id);
        return {
            id: id,
            children: shape.children
        };
    });
    return {
        selectedIds: TLDR.getSelectedIds(data),
        hasUnlockedShapes: hasUnlockedShapes,
        initialParents: initialParents,
        initialShapes: selectedShapes.map(function(_ref) {
            var id = _ref.id, point = _ref.point, parentId = _ref.parentId;
            return {
                id: id,
                point: point,
                parentId: parentId
            };
        }),
        clones: selectedShapes.filter(function(shape) {
            return shape.children === undefined;
        }).flatMap(function(shape) {
            var clone = _extends({
            }, shape, {
                id: _core.Utils.uniqueId(),
                parentId: shape.parentId,
                childIndex: TLDR.getChildIndexAbove(data, shape.id)
            });
            return clone;
        })
    };
}
var TransformSingleSession = /*#__PURE__*/ function() {
    function TransformSingleSession1(data, point, transformType) {
        var _this = this;
        if (transformType === void 0) transformType = _core.TLBoundsCorner.BottomRight;
        this.id = 'transform_single';
        this.scaleX = 1;
        this.scaleY = 1;
        this.start = function(data1) {
            return data1;
        };
        this.update = function(data1, point1, isAspectRatioLocked) {
            var _extends21;
            if (isAspectRatioLocked === void 0) isAspectRatioLocked = false;
            var transformType1 = _this.transformType;
            var _this$snapshot = _this.snapshot, initialShapeBounds = _this$snapshot.initialShapeBounds, initialShape = _this$snapshot.initialShape, id = _this$snapshot.id;
            var shape = data1.page.shapes[id];
            var utils = TLDR.getShapeUtils(shape);
            var newBounds = _core.Utils.getTransformedBoundingBox(initialShapeBounds, transformType1, _core.Vec.sub(point1, _this.origin), shape.rotation, isAspectRatioLocked || shape.isAspectRatioLocked || utils.isAspectRatioLocked);
            return _extends({
            }, data1, {
                page: _extends({
                }, data1.page, {
                    shapes: _extends({
                    }, data1.page.shapes, (_extends21 = {
                    }, _extends21[shape.id] = _extends({
                    }, initialShape, TLDR.getShapeUtils(shape).transformSingle(shape, newBounds, {
                        initialShape: initialShape,
                        type: _this.transformType,
                        scaleX: newBounds.scaleX,
                        scaleY: newBounds.scaleY,
                        transformOrigin: [
                            0.5,
                            0.5
                        ]
                    })), _extends21))
                })
            });
        };
        this.cancel = function(data1) {
            var _extends31;
            var _this$snapshot2 = _this.snapshot, id = _this$snapshot2.id, initialShape = _this$snapshot2.initialShape;
            data1.page.shapes[id] = initialShape;
            return _extends({
            }, data1, {
                page: _extends({
                }, data1.page, {
                    shapes: _extends({
                    }, data1.page.shapes, (_extends31 = {
                    }, _extends31[id] = initialShape, _extends31))
                })
            });
        };
        this.origin = point;
        this.transformType = transformType;
        this.snapshot = getTransformSingleSnapshot(data, transformType);
    }
    var _proto = TransformSingleSession1.prototype;
    _proto.complete = function complete(data) {
        var _shapes, _shapes2;
        if (!this.snapshot.hasUnlockedShape) return data;
        return {
            id: 'transform_single',
            before: {
                page: {
                    shapes: (_shapes = {
                    }, _shapes[this.snapshot.id] = this.snapshot.initialShape, _shapes)
                }
            },
            after: {
                page: {
                    shapes: (_shapes2 = {
                    }, _shapes2[this.snapshot.id] = data.page.shapes[this.snapshot.id], _shapes2)
                }
            }
        };
    };
    return TransformSingleSession1;
}();
function getTransformSingleSnapshot(data, transformType) {
    var shape = data.page.shapes[data.pageState.selectedIds[0]];
    if (!shape) throw Error('You must have one shape selected.');
    var bounds = TLDR.getBounds(shape);
    return {
        id: shape.id,
        hasUnlockedShape: !shape.isLocked,
        type: transformType,
        initialShape: _core.Utils.deepClone(shape),
        initialShapeBounds: bounds
    };
}
var TransformSession = /*#__PURE__*/ function() {
    function TransformSession1(data, point, transformType) {
        var _this = this;
        if (transformType === void 0) transformType = _core.TLBoundsCorner.BottomRight;
        this.id = 'transform';
        this.scaleX = 1;
        this.scaleY = 1;
        this.start = function(data1) {
            return data1;
        };
        this.update = function(data1, point1, isAspectRatioLocked, _altKey) {
            if (isAspectRatioLocked === void 0) isAspectRatioLocked = false;
            var transformType1 = _this.transformType, _this$snapshot = _this.snapshot, shapeBounds = _this$snapshot.shapeBounds, initialBounds = _this$snapshot.initialBounds, isAllAspectRatioLocked = _this$snapshot.isAllAspectRatioLocked;
            var next = _extends({
            }, data1, {
                page: _extends({
                }, data1.page)
            });
            var shapes = next.page.shapes;
            var newBoundingBox = _core.Utils.getTransformedBoundingBox(initialBounds, transformType1, _core.Vec.vec(_this.origin, point1), data1.pageState.boundsRotation, isAspectRatioLocked || isAllAspectRatioLocked); // Now work backward to calculate a new bounding box for each of the shapes.
            _this.scaleX = newBoundingBox.scaleX;
            _this.scaleY = newBoundingBox.scaleY;
            next.page.shapes = _extends({
            }, next.page.shapes, Object.fromEntries(Object.entries(shapeBounds).map(function(_ref) {
                var id = _ref[0], _ref$ = _ref[1], initialShape = _ref$.initialShape, initialShapeBounds = _ref$.initialShapeBounds, transformOrigin = _ref$.transformOrigin;
                var newShapeBounds = _core.Utils.getRelativeTransformedBoundingBox(newBoundingBox, initialBounds, initialShapeBounds, _this.scaleX < 0, _this.scaleY < 0);
                var shape = shapes[id];
                return [
                    id,
                    _extends({
                    }, initialShape, TLDR.transform(next, shape, newShapeBounds, {
                        type: _this.transformType,
                        initialShape: initialShape,
                        scaleX: _this.scaleX,
                        scaleY: _this.scaleY,
                        transformOrigin: transformOrigin
                    }))
                ];
            })));
            return next;
        };
        this.cancel = function(data1) {
            var shapeBounds = _this.snapshot.shapeBounds;
            return _extends({
            }, data1, {
                page: _extends({
                }, data1.page, {
                    shapes: _extends({
                    }, data1.page.shapes, Object.fromEntries(Object.entries(shapeBounds).map(function(_ref2) {
                        var id = _ref2[0], initialShape = _ref2[1].initialShape;
                        return [
                            id,
                            initialShape
                        ];
                    })))
                })
            });
        };
        this.origin = point;
        this.transformType = transformType;
        this.snapshot = getTransformSnapshot(data, transformType);
    }
    var _proto = TransformSession1.prototype;
    _proto.complete = function complete(data) {
        var _this$snapshot2 = this.snapshot, hasUnlockedShapes = _this$snapshot2.hasUnlockedShapes, shapeBounds = _this$snapshot2.shapeBounds;
        if (!hasUnlockedShapes) return data;
        return {
            id: 'transform',
            before: {
                page: {
                    shapes: Object.fromEntries(Object.entries(shapeBounds).map(function(_ref3) {
                        var id = _ref3[0], initialShape = _ref3[1].initialShape;
                        return [
                            id,
                            initialShape
                        ];
                    }))
                }
            },
            after: {
                page: {
                    shapes: Object.fromEntries(this.snapshot.initialShapes.map(function(shape) {
                        return [
                            shape.id,
                            data.page.shapes[shape.id]
                        ];
                    }))
                }
            }
        };
    };
    return TransformSession1;
}();
function getTransformSnapshot(data, transformType) {
    var initialShapes = TLDR.getSelectedBranchSnapshot(data);
    var hasUnlockedShapes = initialShapes.length > 0;
    var isAllAspectRatioLocked = initialShapes.every(function(shape) {
        return shape.isAspectRatioLocked || TLDR.getShapeUtils(shape).isAspectRatioLocked;
    });
    var shapesBounds = Object.fromEntries(initialShapes.map(function(shape) {
        return [
            shape.id,
            TLDR.getBounds(shape)
        ];
    }));
    var boundsArr = Object.values(shapesBounds);
    var commonBounds = _core.Utils.getCommonBounds(boundsArr);
    var initialInnerBounds = _core.Utils.getBoundsFromPoints(boundsArr.map(_core.Utils.getBoundsCenter)); // Return a mapping of shapes to bounds together with the relative
    // positions of the shape's bounds within the common bounds shape.
    return {
        type: transformType,
        hasUnlockedShapes: hasUnlockedShapes,
        isAllAspectRatioLocked: isAllAspectRatioLocked,
        initialShapes: initialShapes,
        initialBounds: commonBounds,
        shapeBounds: Object.fromEntries(initialShapes.map(function(shape) {
            var initialShapeBounds = shapesBounds[shape.id];
            var ic = _core.Utils.getBoundsCenter(initialShapeBounds);
            var ix = (ic[0] - initialInnerBounds.minX) / initialInnerBounds.width;
            var iy = (ic[1] - initialInnerBounds.minY) / initialInnerBounds.height;
            return [
                shape.id,
                {
                    initialShape: shape,
                    initialShapeBounds: initialShapeBounds,
                    transformOrigin: [
                        ix,
                        iy
                    ]
                }
            ];
        }))
    };
}
var DrawSession = function DrawSession1(data, id, point) {
    var _this = this;
    this.id = 'draw';
    this.start = function(data1) {
        return data1;
    };
    this.update = function(data1, point1, pressure, isLocked) {
        var _extends21;
        if (isLocked === void 0) isLocked = false;
        var snapshot = _this.snapshot; // Drawing while holding shift will "lock" the pen to either the
        // x or y axis, depending on which direction has the greater
        // delta. Pressing shift will also add more points to "return"
        // the pen to the axis.
        if (isLocked) {
            if (!_this.isLocked && _this.points.length > 1) {
                var bounds = _core.Utils.getBoundsFromPoints(_this.points);
                if (bounds.width > 8 || bounds.height > 8) {
                    _this.isLocked = true;
                    var returning = [].concat(_this.previous);
                    var isVertical = bounds.height > 8;
                    if (isVertical) {
                        _this.lockedDirection = 'vertical';
                        returning[0] = _this.origin[0];
                    } else {
                        _this.lockedDirection = 'horizontal';
                        returning[1] = _this.origin[1];
                    }
                    _this.previous = returning;
                    _this.points.push(_core.Vec.sub(returning, _this.origin));
                }
            }
        } else if (_this.isLocked) _this.isLocked = false;
        if (_this.isLocked) {
            if (_this.lockedDirection === 'vertical') point1[0] = _this.origin[0];
            else point1[1] = _this.origin[1];
        } // Low pass the current input point against the previous one
        var nextPrev = _core.Vec.med(_this.previous, point1);
        _this.previous = nextPrev; // Don't add duplicate points. It's important to test against the
        // adjusted (low-passed) point rather than the input point.
        var newPoint = _core.Vec.round([].concat(_core.Vec.sub(_this.previous, _this.origin), [
            pressure
        ]));
        if (_core.Vec.isEqual(_this.last, newPoint)) return data1;
        _this.last = newPoint;
        _this.points.push(newPoint); // We draw a dot when the number of points is 1 or 2, so this guard
        // prevents a "flash" of a dot when a user begins drawing a line.
        if (_this.points.length <= 2) return data1;
        return _extends({
        }, data1, {
            page: _extends({
            }, data1.page, {
                shapes: _extends({
                }, data1.page.shapes, (_extends21 = {
                }, _extends21[snapshot.id] = _extends({
                }, data1.page.shapes[snapshot.id], {
                    points: [].concat(_this.points)
                }), _extends21))
            }),
            pageState: _extends({
            }, data1.pageState, {
                selectedIds: [
                    snapshot.id
                ]
            })
        });
    };
    this.cancel = function(data1) {
        var _extends31;
        var snapshot = _this.snapshot;
        return _extends({
        }, data1, {
            page: _extends({
            }, data1.page, {
                // @ts-ignore
                shapes: _extends({
                }, data1.page.shapes, (_extends31 = {
                }, _extends31[snapshot.id] = undefined, _extends31))
            }),
            pageState: _extends({
            }, data1.pageState, {
                selectedIds: []
            })
        });
    };
    this.complete = function(data1) {
        var _shapes, _shapes2;
        var snapshot = _this.snapshot;
        return {
            id: 'created_draw_shape',
            before: {
                page: {
                    shapes: (_shapes = {
                    }, _shapes[snapshot.id] = undefined, _shapes)
                },
                pageState: {
                    selectedIds: []
                }
            },
            after: {
                page: {
                    shapes: (_shapes2 = {
                    }, _shapes2[snapshot.id] = data1.page.shapes[snapshot.id], _shapes2)
                },
                pageState: {
                    selectedIds: []
                }
            }
        };
    };
    this.origin = point;
    this.previous = point;
    this.last = point;
    this.snapshot = getDrawSnapshot(data, id); // Add a first point but don't update the shape yet. We'll update
    // when the draw session ends; if the user hasn't added additional
    // points, this single point will be interpreted as a "dot" shape.
    this.points = [
        [
            0,
            0,
            0.5
        ]
    ];
}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
_c61 = DrawSession;
function getDrawSnapshot(data, shapeId) {
    var page = data.page;
    var _Utils$deepClone = _core.Utils.deepClone(page.shapes[shapeId]), points = _Utils$deepClone.points, point = _Utils$deepClone.point;
    return {
        id: shapeId,
        point: point,
        points: points
    };
}
var PI2$1 = Math.PI * 2;
var RotateSession = /*#__PURE__*/ function() {
    function RotateSession1(data, point) {
        var _this = this;
        this.id = 'rotate';
        this.delta = [
            0,
            0
        ];
        this.prev = 0;
        this.start = function(data1) {
            return data1;
        };
        this.update = function(data1, point1, isLocked) {
            if (isLocked === void 0) isLocked = false;
            var _this$snapshot = _this.snapshot, commonBoundsCenter = _this$snapshot.commonBoundsCenter, initialShapes = _this$snapshot.initialShapes;
            var next = _extends({
            }, data1, {
                page: _extends({
                }, data1.page),
                pageState: _extends({
                }, data1.pageState)
            });
            var page = next.page, pageState = next.pageState;
            var a1 = _core.Vec.angle(commonBoundsCenter, _this.origin);
            var a2 = _core.Vec.angle(commonBoundsCenter, point1);
            var rot = a2 - a1;
            _this.prev = rot;
            if (isLocked) rot = _core.Utils.clampToRotationToSegments(rot, 24);
            pageState.boundsRotation = (PI2$1 + (_this.snapshot.boundsRotation + rot)) % PI2$1;
            next.page.shapes = _extends({
            }, next.page.shapes, Object.fromEntries(initialShapes.map(function(_ref) {
                var id = _ref.id, center = _ref.center, offset = _ref.offset, _ref$shape$rotation = _ref.shape.rotation, rotation = _ref$shape$rotation === void 0 ? 0 : _ref$shape$rotation;
                var shape = page.shapes[id];
                var nextRotation = isLocked ? _core.Utils.clampToRotationToSegments(rotation + rot, 24) : rotation + rot;
                var nextPoint = _core.Vec.sub(_core.Vec.rotWith(center, commonBoundsCenter, rot), offset);
                return [
                    id,
                    _extends({
                    }, next.page.shapes[id], TLDR.mutate(data1, shape, {
                        point: nextPoint,
                        rotation: (PI2$1 + nextRotation) % PI2$1
                    }))
                ];
            })));
            return next;
        };
        this.cancel = function(data1) {
            var initialShapes = _this.snapshot.initialShapes;
            for(var _iterator = _createForOfIteratorHelperLoose(initialShapes), _step; !(_step = _iterator()).done;){
                var _step$value = _step.value, id = _step$value.id, shape = _step$value.shape;
                data1.page.shapes[id] = _extends({
                }, shape);
            }
            return _extends({
            }, data1, {
                page: _extends({
                }, data1.page, {
                    shapes: _extends({
                    }, data1.page.shapes, Object.fromEntries(initialShapes.map(function(_ref2) {
                        var id = _ref2.id, shape = _ref2.shape;
                        return [
                            id,
                            shape
                        ];
                    })))
                })
            });
        };
        this.origin = point;
        this.snapshot = getRotateSnapshot(data);
    }
    var _proto = RotateSession1.prototype;
    _proto.complete = function complete(data) {
        var _this$snapshot2 = this.snapshot, hasUnlockedShapes = _this$snapshot2.hasUnlockedShapes, initialShapes = _this$snapshot2.initialShapes;
        if (!hasUnlockedShapes) return data;
        return {
            id: 'rotate',
            before: {
                page: {
                    shapes: Object.fromEntries(initialShapes.map(function(_ref3) {
                        var _ref3$shape = _ref3.shape, id = _ref3$shape.id, point = _ref3$shape.point, _ref3$shape$rotation = _ref3$shape.rotation, rotation = _ref3$shape$rotation === void 0 ? undefined : _ref3$shape$rotation;
                        return [
                            id,
                            {
                                point: point,
                                rotation: rotation
                            }
                        ];
                    }))
                }
            },
            after: {
                page: {
                    shapes: Object.fromEntries(this.snapshot.initialShapes.map(function(_ref4) {
                        var shape = _ref4.shape;
                        var _data$page$shapes$sha = data.page.shapes[shape.id], point = _data$page$shapes$sha.point, rotation = _data$page$shapes$sha.rotation;
                        return [
                            shape.id,
                            {
                                point: point,
                                rotation: rotation
                            }
                        ];
                    }))
                }
            }
        };
    };
    return RotateSession1;
}(); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function getRotateSnapshot(data) {
    var initialShapes = TLDR.getSelectedBranchSnapshot(data);
    if (initialShapes.length === 0) throw Error('No selected shapes!');
    var hasUnlockedShapes = initialShapes.length > 0;
    var shapesBounds = Object.fromEntries(initialShapes.map(function(shape) {
        return [
            shape.id,
            TLDR.getBounds(shape)
        ];
    }));
    var rotatedBounds = Object.fromEntries(initialShapes.map(function(shape) {
        return [
            shape.id,
            TLDR.getRotatedBounds(shape)
        ];
    }));
    var bounds = _core.Utils.getCommonBounds(Object.values(shapesBounds));
    var commonBoundsCenter = _core.Utils.getBoundsCenter(bounds);
    return {
        hasUnlockedShapes: hasUnlockedShapes,
        boundsRotation: data.pageState.boundsRotation || 0,
        commonBoundsCenter: commonBoundsCenter,
        initialShapes: initialShapes.filter(function(shape) {
            return shape.children === undefined;
        }).map(function(shape) {
            var bounds1 = TLDR.getBounds(shape);
            var center = _core.Utils.getBoundsCenter(bounds1);
            var offset = _core.Vec.sub(center, shape.point);
            var rotationOffset = _core.Vec.sub(center, _core.Utils.getBoundsCenter(rotatedBounds[shape.id]));
            return {
                id: shape.id,
                shape: _core.Utils.deepClone(shape),
                offset: offset,
                rotationOffset: rotationOffset,
                center: center
            };
        })
    };
}
var initialData = {
    settings: {
        isPenMode: false,
        isDarkMode: false,
        isDebugMode: true,
        isReadonlyMode: false,
        nudgeDistanceLarge: 10,
        nudgeDistanceSmall: 1
    },
    appState: {
        activeToolType: undefined,
        activeTool: 'select',
        hoveredId: undefined,
        currentPageId: 'page',
        pages: [
            {
                id: 'page'
            }
        ],
        currentStyle: defaultStyle,
        selectedStyle: defaultStyle,
        isToolLocked: false,
        isStyleOpen: false,
        isEmptyCanvas: false
    },
    page: {
        id: 'page',
        childIndex: 1,
        shapes: {
            rect1: {
                id: 'rect1',
                parentId: 'page',
                name: 'Rectangle',
                childIndex: 1,
                type: TLDrawShapeType.Rectangle,
                point: [
                    32,
                    32
                ],
                size: [
                    100,
                    100
                ],
                style: defaultStyle
            }
        },
        bindings: {
        }
    },
    pageState: {
        id: 'page',
        selectedIds: [],
        camera: {
            point: [
                0,
                0
            ],
            zoom: 1
        }
    }
};
var TLDrawState = /*#__PURE__*/ function() {
    function TLDrawState1() {
        var _this = this;
        this.store = _zustandDefault.default(function() {
            return initialData;
        });
        this.history = {
            stack: [],
            pointer: -1
        };
        this.status = {
            current: 'idle',
            previous: 'idle'
        };
        this.currentDocumentId = 'doc';
        this.currentPageId = 'page';
        this.pages = {
            page: initialData.page
        };
        this.pageStates = {
            page: initialData.pageState
        }; // Low API
        this.getState = this.store.getState;
        this.setState = function(data) {
            var current = _this.getState(); // Apply incoming change
            var result = typeof data === 'function' ? data(current) : data;
            var next = _extends({
            }, current, result);
            if ('page' in result) next.page = _extends({
            }, next.page, {
                shapes: Object.fromEntries(Object.entries(next.page.shapes).filter(function(_ref) {
                    var shape = _ref[1];
                    return shape && (shape.parentId === next.page.id || next.page.shapes[shape.parentId]);
                }))
            });
             // Apply selected style change, if any
            var newSelectedStyle = TLDR.getSelectedStyle(next);
            if (newSelectedStyle) next = _extends({
            }, next, {
                appState: _extends({
                }, current.appState, next.appState, {
                    selectedStyle: newSelectedStyle
                })
            });
            _this.store.setState(next);
            _this.pages[next.page.id] = next.page;
            _this.pageStates[next.page.id] = next.pageState;
            return _this;
        };
        this.getShape = function(id) {
            return _this.getState().page.shapes[id];
        };
        this.getPage = function(id) {
            if (id === void 0) id = _this.currentPageId;
            return _this.pages[id];
        };
        this.getPageState = function(id) {
            if (id === void 0) id = _this.currentPageId;
            return _this.pageStates[id];
        };
        this.getAppState = function(id) {
            return _this.getState().appState;
        };
        this.getPagePoint = function(point) {
            var _this$getPageState = _this.getPageState(), camera = _this$getPageState.camera;
            return _core.Vec.sub(_core.Vec.div(point, camera.zoom), camera.point);
        };
        /* ----------------------- UI ----------------------- */ this.toggleStylePanel = function() {
            _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        isStyleOpen: !data.appState.isStyleOpen
                    })
                };
            });
            return _this;
        };
        this.copy = function() {
            // TODO
            return _this;
        };
        this.paste = function() {
            // TODO
            return _this;
        };
        this.copyAsSvg = function() {
            // TODO
            return '<svg/>';
        };
        this.copyAsJson = function() {
            // TODO
            return {
            };
        };
        /* -------------------- Settings -------------------- */ this.togglePenMode = function() {
            _this.setState(function(data) {
                return {
                    settings: _extends({
                    }, data.settings, {
                        isPenMode: !data.settings.isPenMode
                    })
                };
            });
            return _this;
        };
        this.toggleDarkMode = function() {
            _this.setState(function(data) {
                return {
                    settings: _extends({
                    }, data.settings, {
                        isDarkMode: !data.settings.isDarkMode
                    })
                };
            });
            return _this;
        };
        /* -------------------- App State ------------------- */ this.reset = function() {
            _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, initialData.appState),
                    settings: _extends({
                    }, data.appState, initialData.settings)
                };
            });
            return _this;
        };
        this.selectTool = function(tool) {
            _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        activeTool: tool,
                        activeToolType: tool === 'select' ? 'select' : TLDR.getShapeUtils({
                            type: tool
                        }).toolType
                    })
                };
            });
            return _this;
        };
        this.toggleToolLock = function() {
            _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        isToolLocked: true
                    })
                };
            });
            return _this;
        };
        /* --------------------- Camera --------------------- */ this.zoomIn = function() {
            var i = Math.round(_this.store.getState().pageState.camera.zoom * 100 / 25);
            var nextZoom = TLDR.getCameraZoom((i + 1) * 0.25);
            _this.zoomTo(nextZoom);
            return _this;
        };
        this.zoomOut = function() {
            var i = Math.round(_this.store.getState().pageState.camera.zoom * 100 / 25);
            var nextZoom = TLDR.getCameraZoom((i - 1) * 0.25);
            _this.zoomTo(nextZoom);
            return _this;
        };
        this.zoomToFit = function() {
            _this.setState(function(data) {
                var shapes = Object.values(data.page.shapes);
                if (shapes.length === 0) return {
                    pageState: data.pageState
                };
                var bounds = _core.Utils.getCommonBounds(Object.values(shapes).map(TLDR.getBounds));
                var zoom = TLDR.getCameraZoom(bounds.width > bounds.height ? (window.innerWidth - 128) / bounds.width : (window.innerHeight - 128) / bounds.height);
                var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;
                var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;
                return {
                    pageState: _extends({
                    }, data.pageState, {
                        camera: _extends({
                        }, data.pageState.camera, {
                            point: _core.Vec.add([
                                -bounds.minX,
                                -bounds.minY
                            ], [
                                mx,
                                my
                            ]),
                            zoom: zoom
                        })
                    })
                };
            });
            return _this;
        };
        this.zoomToSelection = function() {
            _this.setState(function(data) {
                if (TLDR.getSelectedIds(data).length === 0) return {
                    pageState: data.pageState
                };
                var bounds = TLDR.getSelectedBounds(data);
                var zoom = TLDR.getCameraZoom(bounds.width > bounds.height ? (window.innerWidth - 128) / bounds.width : (window.innerHeight - 128) / bounds.height);
                var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;
                var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;
                return {
                    pageState: _extends({
                    }, data.pageState, {
                        camera: _extends({
                        }, data.pageState.camera, {
                            point: _core.Vec.add([
                                -bounds.minX,
                                -bounds.minY
                            ], [
                                mx,
                                my
                            ]),
                            zoom: zoom
                        })
                    })
                };
            });
            return _this;
        };
        this.resetCamera = function() {
            _this.setState(function(data) {
                return {
                    pageState: _extends({
                    }, data.pageState, {
                        camera: {
                            zoom: 1,
                            point: [
                                window.innerWidth / 2,
                                window.innerHeight / 2
                            ]
                        }
                    })
                };
            });
            return _this;
        };
        this.zoomToContent = function() {
            _this.setState(function(data) {
                var shapes = Object.values(data.page.shapes);
                if (shapes.length === 0) return {
                    pageState: data.pageState
                };
                var bounds = _core.Utils.getCommonBounds(Object.values(shapes).map(TLDR.getBounds));
                var zoom = data.pageState.camera.zoom;
                var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;
                var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;
                return {
                    pageState: _extends({
                    }, data.pageState, {
                        camera: _extends({
                        }, data.pageState.camera, {
                            point: _core.Vec.add([
                                -bounds.minX,
                                -bounds.minY
                            ], [
                                mx,
                                my
                            ])
                        })
                    })
                };
            });
            return _this;
        };
        this.zoomToActual = function() {
            _this.zoomTo(1);
            return _this;
        };
        /* ---------------------- Document --------------------- */ this.loadDocument = function(document) {
            _this.currentDocumentId = document.id;
            _this.pages = _core.Utils.deepClone(document.pages);
            _this.pageStates = _core.Utils.deepClone(document.pageStates);
            _this.currentPageId = Object.values(_this.pages)[0].id;
            _this.setState(function(data) {
                return {
                    page: _this.pages[_this.currentPageId],
                    pageState: _this.pageStates[_this.currentPageId],
                    appState: _extends({
                    }, data.appState, {
                        pageIds: Object.values(_this.pages).sort(function(a, b) {
                            return (a.childIndex || 0) - (b.childIndex || 0);
                        }).map(function(page) {
                            return page.id;
                        })
                    })
                };
            });
            return _this;
        };
        this.undo = function() {
            var history = _this.history;
            if (history.pointer <= -1) return _this;
            _this.setState(function(data) {
                return _core.Utils.deepMerge(data, history.stack[history.pointer].before);
            });
            history.pointer--;
            return _this;
        };
        this.redo = function() {
            var history = _this.history;
            if (history.pointer >= history.stack.length - 1) return _this;
            history.pointer++;
            _this.setState(function(data) {
                return _core.Utils.deepMerge(data, history.stack[history.pointer].after);
            });
            return _this;
        };
        this.select = function() {
            for(var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++)ids[_key] = arguments[_key];
            _this.setSelectedIds(ids);
            return _this;
        };
        this.selectAll = function() {
            _this.setSelectedIds(Object.keys(_this.getState().page.shapes));
            return _this;
        };
        this.deselectAll = function() {
            _this.setSelectedIds([]);
            return _this;
        };
        /* ----------------- Shape Functions ---------------- */ this.style = function(style$1, ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](style(data, idsToMutate, style$1));
            return _this;
        };
        this.align = function(type, ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](align(data, idsToMutate, type));
            return _this;
        };
        this.distribute = function(type, ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](distribute(data, idsToMutate, type));
            return _this;
        };
        this.stretch = function(type, ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](stretch(data, idsToMutate, type));
            return _this;
        };
        this.moveToBack = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](move(data, idsToMutate, MoveType.ToBack));
            return _this;
        };
        this.moveBackward = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](move(data, idsToMutate, MoveType.Backward));
            return _this;
        };
        this.moveForward = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](move(data, idsToMutate, MoveType.Forward));
            return _this;
        };
        this.moveToFront = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](move(data, idsToMutate, MoveType.ToFront));
            return _this;
        };
        this.nudge = function(delta, isMajor, ids) {
            if (isMajor === void 0) isMajor = false;
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](translate(data, idsToMutate, _core.Vec.mul(delta, isMajor ? 10 : 1)));
            return _this;
        };
        this.duplicate = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](duplicate(data, idsToMutate));
            return _this;
        };
        this.toggleHidden = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](toggle(data, idsToMutate, 'isHidden'));
            return _this;
        };
        this.toggleLocked = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](toggle(data, idsToMutate, 'isLocked'));
            return _this;
        };
        this.toggleAspectRatioLocked = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](toggle(data, idsToMutate, 'isAspectRatioLocked'));
            return _this;
        };
        this.rotate = function(delta, ids) {
            if (delta === void 0) delta = Math.PI * -0.5;
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            _this["do"](rotate(data, idsToMutate, delta));
            return _this;
        };
        this.group = function(ids) {
            // TODO
            // const data = this.store.getState()
            // const idsToMutate = ids ? ids : data.pageState.selectedIds
            // this.do(commands.toggle(data, idsToMutate, 'isAspectRatioLocked'))
            return _this;
        };
        this.create = function() {
            var data = _this.store.getState();
            for(var _len2 = arguments.length, shapes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)shapes[_key2] = arguments[_key2];
            _this["do"](create(data, shapes));
            return _this;
        };
        this["delete"] = function(ids) {
            var data = _this.store.getState();
            var idsToMutate = ids ? ids : data.pageState.selectedIds;
            if (idsToMutate.length === 0) return _this;
            _this["do"](deleteShapes(data, idsToMutate));
            return _this;
        };
        this.clear = function() {
            _this.selectAll();
            _this["delete"]();
            return _this;
        };
        this.cancel = function() {
            switch(_this.status.current){
                case 'idle':
                    _this.deselectAll();
                    _this.selectTool('select');
                    break;
                case 'brushing':
                    _this.cancelSession();
                    _core.brushUpdater.clear();
                    break;
                case 'translating':
                    _this.cancelSession();
                    break;
                case 'transforming':
                    _this.cancelSession();
                    break;
                case 'rotating':
                    _this.cancelSession();
                    break;
                case 'creating':
                    _this.cancelSession();
                    _this["delete"]();
                    break;
            }
            return _this;
        };
        this.save = function() {
            // TODO
            return _this;
        };
        /* -------------------- Sessions -------------------- */ this.startBrushSession = function(point) {
            _this.setStatus('brushing');
            _this.startSession(new BrushSession(_this.store.getState(), point));
            return _this;
        };
        this.updateBrushSession = function(point, metaKey) {
            if (metaKey === void 0) metaKey = false;
            _this.updateSession(point, metaKey);
            return _this;
        };
        this.startTranslateSession = function(point) {
            _this.setStatus('translating');
            _this.startSession(new TranslateSession(_this.store.getState(), point));
            return _this;
        };
        this.updateTranslateSession = function(point, shiftKey, altKey) {
            if (shiftKey === void 0) shiftKey = false;
            if (altKey === void 0) altKey = false;
            _this.updateSession(point, shiftKey, altKey);
            return _this;
        };
        this.startTransformSession = function(point, handle) {
            var selectedIds = _this.selectedIds;
            if (selectedIds.length === 0) return _this;
            _this.setStatus('transforming');
            _this.pointedBoundsHandle = handle;
            if (_this.pointedBoundsHandle === 'rotate') _this.startSession(new RotateSession(_this.store.getState(), point));
            else if (_this.selectedIds.length === 1) _this.startSession(new TransformSingleSession(_this.store.getState(), point, _this.pointedBoundsHandle));
            else _this.startSession(new TransformSession(_this.store.getState(), point, _this.pointedBoundsHandle));
            return _this;
        };
        this.updateTransformSession = function(point, shiftKey, altKey) {
            if (shiftKey === void 0) shiftKey = false;
            if (altKey === void 0) altKey = false;
            _this.updateSession(point, shiftKey, altKey);
            return _this;
        };
        this.startDrawSession = function(id, point) {
            _this.setStatus('creating');
            _this.startSession(new DrawSession(_this.store.getState(), id, point));
            return _this;
        };
        this.updateDrawSession = function(point, pressure, shiftKey) {
            if (shiftKey === void 0) shiftKey = false;
            _this.updateSession(point, pressure, shiftKey);
            return _this;
        };
        this.updateSessionsOnPointerMove = function(info) {
            switch(_this.status.current){
                case 'pointingBoundsHandle':
                    if (_core.Vec.dist(info.origin, info.point) > 4) {
                        _this.setStatus('transforming');
                        _this.startTransformSession(_this.getPagePoint(info.origin), _this.pointedBoundsHandle);
                    }
                    break;
                case 'pointingBounds':
                    if (_core.Vec.dist(info.origin, info.point) > 4) {
                        _this.setStatus('translating');
                        _this.startTranslateSession(_this.getPagePoint(info.origin));
                    }
                    break;
                case 'brushing':
                    _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);
                    break;
                case 'translating':
                    _this.updateTranslateSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
                case 'transforming':
                    _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
                case 'creating':
                    switch(_this.appState.activeToolType){
                        case 'draw':
                            _this.updateDrawSession(_this.getPagePoint(info.point), info.pressure, info.shiftKey);
                            break;
                        case 'bounds':
                            _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey);
                            break;
                    }
                    break;
            }
        };
        /* --------------------- Events --------------------- */ this.onKeyDown = function(key, info) {
            if (key === 'Escape') {
                _this.cancel();
                return;
            }
            switch(_this.status.current){
                case 'idle':
                    break;
                case 'brushing':
                    if (key === 'Meta' || key === 'Control') {
                        _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);
                        return;
                    }
                    break;
                case 'translating':
                    if (key === 'Escape') _this.cancelSession(_this.getPagePoint(info.point));
                    if (key === 'Shift' || key === 'Alt') _this.updateTranslateSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
                case 'transforming':
                    if (key === 'Escape') _this.cancelSession(_this.getPagePoint(info.point));
                    if (key === 'Shift' || key === 'Alt') _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
            }
        };
        this.onKeyUp = function(key, info) {
            switch(_this.status.current){
                case 'brushing':
                    if (key === 'Meta' || key === 'Control') _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);
                    break;
                case 'transforming':
                    if (key === 'Shift' || key === 'Alt') _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
                case 'translating':
                    if (key === 'Shift' || key === 'Alt') _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);
                    break;
            }
        };
        /* ------------- Renderer Event Handlers ------------ */ this.onPinchStart = function(info) {
            _this.setStatus('pinching');
        };
        this.onPinchEnd = function() {
            _this.setStatus(_this.status.previous);
        };
        this.onPinch = function(info, e) {
            if (_this.status.current !== 'pinching') return;
            _this.pinchZoom(info.origin, info.delta, info.delta[2] / 350);
            _this.updateSessionsOnPointerMove(info, e);
        };
        this.onPan = function(info, e) {
            var delta = _core.Vec.div(info.delta, _this.getPageState().camera.zoom);
            var prev = _this.getPageState().camera.point;
            var next = _core.Vec.sub(prev, delta);
            if (_core.Vec.isEqual(next, prev)) return;
            _this.pan(delta);
            _this.updateSessionsOnPointerMove(info, e);
        };
        this.onZoom = function(info, e) {
            _this.zoom(info.delta[2] / 100);
            _this.updateSessionsOnPointerMove(info, e);
        }; // Pointer Events
        this.onPointerDown = function(info) {
            switch(_this.status.current){
                case 'idle':
                    switch(_this.appState.activeTool){
                        case 'draw':
                            _this.setStatus('creating');
                            _this.createActiveToolShape(info.point);
                            break;
                        case 'rectangle':
                            _this.setStatus('creating');
                            _this.createActiveToolShape(info.point);
                            break;
                        case 'ellipse':
                            _this.setStatus('creating');
                            _this.createActiveToolShape(info.point);
                            break;
                    }
            }
        };
        this.onPointerMove = function(info, e) {
            _this.updateSessionsOnPointerMove(info, e);
        };
        this.onPointerUp = function(info) {
            var data = _this.getState();
            switch(_this.status.current){
                case 'pointingBoundsHandle':
                    _this.setStatus('idle');
                    _this.pointedBoundsHandle = undefined;
                    break;
                case 'pointingBounds':
                    if (info.target === 'bounds') // If we just clicked the selecting bounds's background, clear the selection
                    _this.deselectAll();
                    else if (data.pageState.selectedIds.includes(info.target)) {
                        // If we're holding shift...
                        if (info.shiftKey) // Unless we just shift-selected the shape, remove it from the selected shapes
                        {
                            if (_this.pointedId !== info.target) _this.setSelectedIds(data.pageState.selectedIds.filter(function(id) {
                                return id !== info.target;
                            }));
                        }
                    }
                    _this.setStatus('idle');
                    _this.pointedId = undefined;
                    break;
                case 'brushing':
                    _this.completeSession();
                    _core.brushUpdater.clear();
                    break;
                case 'translating':
                    _this.completeSession(_this.getPagePoint(info.point));
                    _this.pointedId = undefined;
                    break;
                case 'transforming':
                    _this.completeSession(_this.getPagePoint(info.point));
                    _this.pointedBoundsHandle = undefined;
                    break;
                case 'creating':
                    _this.completeSession(_this.getPagePoint(info.point));
            }
        }; // Canvas (background)
        this.onPointCanvas = function(info) {
            switch(_this.status.current){
                case 'idle':
                    switch(_this.appState.activeTool){
                        case 'select':
                            // Unless the user is holding shift or meta, clear the current selection
                            if (!(info.shiftKey || info.metaKey)) _this.deselectAll();
                             // Start a brush session
                            _this.startBrushSession(_this.getPagePoint(info.point));
                            break;
                    }
            }
        };
        this.onDoubleClickCanvas = function() {
        };
        this.onRightPointCanvas = function() {
        };
        this.onDragCanvas = function() {
        };
        this.onReleaseCanvas = function() {
        }; // Shape
        this.onPointShape = function(info) {
            var data = _this.getState();
            switch(_this.status.current){
                case 'idle':
                    switch(_this.appState.activeTool){
                        case 'select':
                            if (info.metaKey) // While holding command key, allow event to pass through to canvas
                            return;
                            if (!data.pageState.selectedIds.includes(info.target)) {
                                // Set the pointed ID to the shape that was clicked.
                                _this.pointedId = info.target; // If the shape is not selected; then if the user is pressing shift,
                                // add the shape to the current selection; otherwise, set the shape as
                                // the only selected shape.
                                _this.setSelectedIds([
                                    info.target
                                ], info.shiftKey);
                            }
                            _this.setStatus('pointingBounds');
                            break;
                    }
            }
        };
        this.onReleaseShape = function(info) {
        // switch (this.status.current) {
        //   case 'pointingBounds': {
        //     if (info.metaKey) {
        //       // While holding command key, allow event to pass through to canvas
        //       return
        //     }
        //     // If the shape is selected...
        //     if (
        //       data.pageState.selectedIds.includes(info.target) &&
        //       this.pointedId !== info.target &&
        //       info.shiftKey
        //     ) {
        //       // If the shape is not selected; then if the user is pressing shift,
        //       // add the shape to the current selection; otherwise, set the shape as
        //       // the only selected shape.
        //       this.setSelectedIds(data.pageState.selectedIds.filter((id) => id !== info.target))
        //     }
        //     this.setStatus('pointingBounds')
        //     break
        //   }
        // }
        };
        this.onDoubleClickShape = function(info) {
            if (_this.selectedIds.includes(info.target)) _this.setSelectedIds([
                info.target
            ]);
        };
        this.onRightPointShape = function() {
        };
        this.onDragShape = function(info) {
        };
        this.onHoverShape = function(info) {
            _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        hoveredId: info.target
                    })
                };
            });
        };
        this.onUnhoverShape = function(info) {
            setTimeout(function() {
                if (_this.getState().appState.hoveredId === info.target) _this.setState(function(data) {
                    return {
                        appState: _extends({
                        }, data.appState, {
                            hoveredId: undefined
                        })
                    };
                });
            }, 10);
        }; // Bounds (bounding box background)
        this.onPointBounds = function(info) {
            _this.setStatus('pointingBounds');
        };
        this.onDoubleClickBounds = function() {
        };
        this.onRightPointBounds = function() {
        };
        this.onDragBounds = function(info) {
        };
        this.onHoverBounds = function() {
        };
        this.onUnhoverBounds = function() {
        };
        this.onReleaseBounds = function(info) {
            switch(_this.status.current){
                case 'translating':
                    _this.completeSession(_this.getPagePoint(info.point));
                    break;
                case 'brushing':
                    _this.completeSession();
                    _core.brushUpdater.clear();
                    break;
            }
        }; // Bounds handles (corners, edges)
        this.onPointBoundsHandle = function(info) {
            _this.pointedBoundsHandle = info.target;
            _this.setStatus('pointingBoundsHandle');
        };
        this.onDoubleClickBoundsHandle = function() {
        };
        this.onRightPointBoundsHandle = function() {
        };
        this.onDragBoundsHandle = function() {
        };
        this.onHoverBoundsHandle = function() {
        };
        this.onUnhoverBoundsHandle = function() {
        };
        this.onReleaseBoundsHandle = function() {
        }; // Handles (ie the handles of a selected arrow)
        this.onPointHandle = function() {
        };
        this.onDoubleClickHandle = function() {
        };
        this.onRightPointHandle = function() {
        };
        this.onDragHandle = function() {
        };
        this.onHoverHandle = function() {
        };
        this.onUnhoverHandle = function() {
        };
        this.onReleaseHandle = function() {
        };
        this.onChange = function(ids) {
            var appState = _this.getAppState();
            if (appState.isEmptyCanvas && ids.length > 0) _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        isEmptyCanvas: false
                    })
                };
            });
            else if (!appState.isEmptyCanvas && ids.length <= 0) _this.setState(function(data) {
                return {
                    appState: _extends({
                    }, data.appState, {
                        isEmptyCanvas: true
                    })
                };
            });
        };
        this.onError = function(error) {
        };
        this.onBlurEditingShape = function() {
        };
    }
    /* --------------------- Status --------------------- */ var _proto = TLDrawState1.prototype;
    _proto.setStatus = function setStatus(status) {
        this.status.previous = this.status.current;
        this.status.current = status;
        return this; // console.log(this.status.previous, ' -> ', this.status.current)
    };
    _proto.pinchZoom = function pinchZoom(point, delta, zoomDelta) {
        this.setState(function(data) {
            var camera = data.pageState.camera;
            var nextPoint = _core.Vec.add(camera.point, _core.Vec.div(delta, camera.zoom));
            var nextZoom = TLDR.getCameraZoom(camera.zoom - zoomDelta * camera.zoom);
            var p0 = _core.Vec.sub(_core.Vec.div(point, camera.zoom), nextPoint);
            var p1 = _core.Vec.sub(_core.Vec.div(point, nextZoom), nextPoint);
            return {
                pageState: _extends({
                }, data.pageState, {
                    camera: _extends({
                    }, data.pageState.camera, {
                        point: _core.Vec.add(nextPoint, _core.Vec.sub(p1, p0)),
                        zoom: nextZoom
                    })
                })
            };
        });
        return this;
    };
    _proto.zoomTo = function zoomTo(next) {
        this.setState(function(data) {
            var _TLDR$getCurrentCamer = TLDR.getCurrentCamera(data), zoom = _TLDR$getCurrentCamer.zoom, point = _TLDR$getCurrentCamer.point;
            var center = [
                window.innerWidth / 2,
                window.innerHeight / 2
            ];
            var p0 = _core.Vec.sub(_core.Vec.div(center, zoom), point);
            var p1 = _core.Vec.sub(_core.Vec.div(center, next), point);
            return {
                pageState: _extends({
                }, data.pageState, {
                    camera: _extends({
                    }, data.pageState.camera, {
                        point: _core.Vec.add(point, _core.Vec.sub(p1, p0)),
                        zoom: next
                    })
                })
            };
        });
        return this;
    };
    _proto.zoom = function zoom(delta) {
        var zoom = this.store.getState().pageState.camera.zoom;
        var nextZoom = TLDR.getCameraZoom(zoom - delta * zoom);
        this.zoomTo(nextZoom);
        return this;
    };
    _proto.pan = function pan(delta) {
        this.setState(function(data) {
            var _TLDR$getCurrentCamer2 = TLDR.getCurrentCamera(data), point = _TLDR$getCurrentCamer2.point;
            return {
                pageState: _extends({
                }, data.pageState, {
                    camera: _extends({
                    }, data.pageState.camera, {
                        point: _core.Vec.sub(point, delta)
                    })
                })
            };
        });
        return this;
    };
    _proto.setCurrentPageId = function setCurrentPageId(pageId) {
        if (pageId === this.currentPageId) return this;
        this.currentPageId = pageId;
        this.setState({
            page: this.pages[pageId],
            pageState: this.pageStates[pageId]
        });
        return this;
    };
    _proto.startSession = function startSession(session) {
        var _this2 = this;
        for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
        this.session = session;
        this.setState(function(data) {
            var _this2$session;
            if (!_this2.session) return data;
            return (_this2$session = _this2.session).start.apply(_this2$session, [
                data
            ].concat(args));
        });
        return this;
    };
    _proto.updateSession = function updateSession() {
        var _this3 = this;
        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
        this.setState(function(data) {
            var _this3$session;
            if (!_this3.session) return data;
            return (_this3$session = _this3.session).update.apply(_this3$session, [
                data
            ].concat(args));
        });
        return this;
    };
    _proto.cancelSession = function cancelSession() {
        var _this4 = this;
        for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)args[_key5] = arguments[_key5];
        this.setState(function(data) {
            var _this4$session;
            if (!_this4.session) return data;
            return (_this4$session = _this4.session).cancel.apply(_this4$session, [
                data
            ].concat(args));
        });
        this.setStatus('idle');
        this.session = undefined;
        return this;
    };
    _proto.completeSession = function completeSession() {
        var _this$session;
        if (!this.session) return this;
        this.setStatus('idle');
        for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
        var result = (_this$session = this.session).complete.apply(_this$session, [
            this.store.getState()
        ].concat(args));
        if ('after' in result) this["do"](result);
        else this.setState(function(data) {
            return _core.Utils.deepMerge(data, result);
        });
        var _this$appState = this.appState, isToolLocked = _this$appState.isToolLocked, activeTool = _this$appState.activeTool;
        if (!isToolLocked && activeTool !== 'draw') this.selectTool('select');
        this.session = undefined;
        return this;
    };
    _proto["do"] = function _do(command) {
        var history = this.history;
        if (history.pointer !== history.stack.length - 1) history.stack = history.stack.slice(0, history.pointer + 1);
        history.stack.push(command);
        history.pointer = history.stack.length - 1;
        this.setState(function(data) {
            return _core.Utils.deepMerge(data, history.stack[history.pointer].after);
        });
        return this;
    };
    _proto.setSelectedIds = function setSelectedIds(ids, push) {
        if (push === void 0) push = false;
        this.setState(function(data) {
            return {
                pageState: _extends({
                }, data.pageState, {
                    selectedIds: push ? [].concat(data.pageState.selectedIds, ids) : [].concat(ids)
                })
            };
        });
        return this;
    };
    _proto.createActiveToolShape = function createActiveToolShape(point) {
        var id = _core.Utils.uniqueId();
        var pagePoint = _core.Vec.round(this.getPagePoint(point));
        this.setState(function(data) {
            var _extends21;
            var _data$appState = data.appState, activeTool = _data$appState.activeTool, activeToolType = _data$appState.activeToolType;
            if (activeTool === 'select') return data;
            if (!activeToolType) throw Error;
            var utils = TLDR.getShapeUtils({
                type: activeTool
            });
            var shapes = Object.values(data.page.shapes);
            var childIndex = shapes.length === 0 ? 1 : shapes.sort(function(a, b) {
                return b.childIndex - a.childIndex;
            })[0].childIndex + 1;
            return {
                page: _extends({
                }, data.page, {
                    shapes: _extends({
                    }, data.page.shapes, (_extends21 = {
                    }, _extends21[id] = utils.create({
                        id: id,
                        parentId: data.page.id,
                        childIndex: childIndex,
                        point: pagePoint,
                        style: _extends({
                        }, data.appState.currentStyle)
                    }), _extends21))
                }),
                pageState: _extends({
                }, data.pageState, {
                    selectedIds: [
                        id
                    ]
                })
            };
        });
        switch(this.appState.activeToolType){
            case 'draw':
                this.startDrawSession(id, pagePoint);
                break;
            case 'bounds':
                this.startTransformSession(pagePoint, _core.TLBoundsCorner.BottomRight);
                break;
        }
    };
    _createClass(TLDrawState1, [
        {
            key: "data",
            get: function get() {
                return this.getState();
            }
        },
        {
            key: "selectedIds",
            get: function get() {
                return this.pageState.selectedIds;
            }
        },
        {
            key: "page",
            get: function get() {
                return this.pages[this.currentPageId];
            }
        },
        {
            key: "pageState",
            get: function get() {
                return this.pageStates[this.currentPageId];
            }
        },
        {
            key: "appState",
            get: function get() {
                return this.data.appState;
            }
        }
    ]);
    return TLDrawState1;
}();
var hideBoundsSelector = function hideBoundsSelector1(s) {
    return s.appState.activeTool !== 'select';
};
var pageSelector = function pageSelector1(s) {
    return s.page;
};
var pageStateSelector = function pageStateSelector1(s) {
    return s.pageState;
};
function TLDraw(_ref) {
    _s18();
    var document = _ref.document, currentPageId = _ref.currentPageId, onMount = _ref.onMount, _onChange = _ref.onChange;
    var _React$useState = _react.useState(function() {
        return new TLDrawState();
    }), tlstate = _React$useState[0];
    var _React$useState2 = _react.useState(function() {
        return {
            tlstate: tlstate,
            useAppState: tlstate.store
        };
    }), context = _React$useState2[0];
    useKeyboardShortcuts(tlstate);
    var hideBounds = context.useAppState(hideBoundsSelector);
    var page = context.useAppState(pageSelector);
    var pageState = context.useAppState(pageStateSelector);
    _react.useEffect(function() {
        _onChange == null || _onChange(tlstate);
    });
    _react.useEffect(function() {
        if (!document) return;
        tlstate.loadDocument(document);
    }, [
        document,
        tlstate
    ]);
    _react.useEffect(function() {
        if (!currentPageId) return;
        tlstate.setCurrentPageId(currentPageId);
    }, [
        currentPageId,
        tlstate
    ]);
    _react.useEffect(function() {
        onMount == null || onMount(tlstate); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return(/*#__PURE__*/ _react.createElement(TLDrawContext.Provider, {
        value: context
    }, /*#__PURE__*/ _react.createElement(_reactId.IdProvider, null, /*#__PURE__*/ _react.createElement(Layout, null, /*#__PURE__*/ _react.createElement(ContextMenu, null, /*#__PURE__*/ _react.createElement(_core.Renderer, {
        page: page,
        pageState: pageState,
        shapeUtils: tldrawShapeUtils,
        hideBounds: hideBounds,
        onPinchStart: tlstate.onPinchStart,
        onPinchEnd: tlstate.onPinchEnd,
        onPinch: tlstate.onPinch,
        onPan: tlstate.onPan,
        onZoom: tlstate.onZoom,
        onPointerDown: tlstate.onPointerDown,
        onPointerMove: tlstate.onPointerMove,
        onPointerUp: tlstate.onPointerUp,
        onPointCanvas: tlstate.onPointCanvas,
        onDoubleClickCanvas: tlstate.onDoubleClickCanvas,
        onRightPointCanvas: tlstate.onRightPointCanvas,
        onDragCanvas: tlstate.onDragCanvas,
        onReleaseCanvas: tlstate.onReleaseCanvas,
        onPointShape: tlstate.onPointShape,
        onDoubleClickShape: tlstate.onDoubleClickShape,
        onRightPointShape: tlstate.onRightPointShape,
        onDragShape: tlstate.onDragShape,
        onHoverShape: tlstate.onHoverShape,
        onUnhoverShape: tlstate.onUnhoverShape,
        onReleaseShape: tlstate.onReleaseShape,
        onPointBounds: tlstate.onPointBounds,
        onDoubleClickBounds: tlstate.onDoubleClickBounds,
        onRightPointBounds: tlstate.onRightPointBounds,
        onDragBounds: tlstate.onDragBounds,
        onHoverBounds: tlstate.onHoverBounds,
        onUnhoverBounds: tlstate.onUnhoverBounds,
        onReleaseBounds: tlstate.onReleaseBounds,
        onPointBoundsHandle: tlstate.onPointBoundsHandle,
        onDoubleClickBoundsHandle: tlstate.onDoubleClickBoundsHandle,
        onRightPointBoundsHandle: tlstate.onRightPointBoundsHandle,
        onDragBoundsHandle: tlstate.onDragBoundsHandle,
        onHoverBoundsHandle: tlstate.onHoverBoundsHandle,
        onUnhoverBoundsHandle: tlstate.onUnhoverBoundsHandle,
        onReleaseBoundsHandle: tlstate.onReleaseBoundsHandle,
        onPointHandle: tlstate.onPointHandle,
        onDoubleClickHandle: tlstate.onDoubleClickHandle,
        onRightPointHandle: tlstate.onRightPointHandle,
        onDragHandle: tlstate.onDragHandle,
        onHoverHandle: tlstate.onHoverHandle,
        onUnhoverHandle: tlstate.onUnhoverHandle,
        onReleaseHandle: tlstate.onReleaseHandle,
        onChange: tlstate.onChange,
        onError: tlstate.onError,
        onBlurEditingShape: tlstate.onBlurEditingShape
    })), /*#__PURE__*/ _react.createElement(Spacer, null), /*#__PURE__*/ _react.createElement(StylePanel, null), /*#__PURE__*/ _react.createElement(ToolsPanel, null)))));
}
_s18(TLDraw, "8X3hyUPt7vgYJJyhZYYLJo51D4w=", true, function() {
    return [
        useKeyboardShortcuts
    ];
});
_c62 = TLDraw;
var Spacer = /*#__PURE__*/ styled('div', {
    flexGrow: 2
}); // const MenuButtons = styled('div', {
_c63 = Spacer;
//   display: 'flex',
//   gap: 8,
// })
var Layout = /*#__PURE__*/ styled('main', {
    position: 'fixed',
    overflow: 'hidden',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    height: '100%',
    width: '100%',
    padding: '8px 8px 0 8px',
    zIndex: 200,
    display: 'flex',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
    boxSizing: 'border-box',
    outline: 'none',
    pointerEvents: 'none',
    '& > *': {
        pointerEvents: 'all'
    },
    '& .tl-container': {
        position: 'absolute',
        top: 0,
        left: 0
    }
});
_c64 = Layout;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64;
$RefreshReg$(_c, "Kbd");
$RefreshReg$(_c1, "StyledKbd");
$RefreshReg$(_c2, "Tooltip");
$RefreshReg$(_c3, "StyledContent");
$RefreshReg$(_c4, "StyledArrow");
$RefreshReg$(_c5, "IconButton");
$RefreshReg$(_c6, "RowButton");
$RefreshReg$(_c7, "IconWrapper");
$RefreshReg$(_c8, "ButtonsRow");
$RefreshReg$(_c9, "FloatingContainer");
$RefreshReg$(_c10, "MenuContent");
$RefreshReg$(_c11, "Divider");
$RefreshReg$(_c12, "DropdownMenuIconTriggerButton");
$RefreshReg$(_c13, "ContextMenuRoot");
$RefreshReg$(_c14, "ContextMenuSubMenu");
$RefreshReg$(_c15, "ContextMenuDivider");
$RefreshReg$(_c16, "ContextMenuArrow");
$RefreshReg$(_c17, "ContextMenuButton");
$RefreshReg$(_c18, "ContextMenuIconButton");
$RefreshReg$(_c19, "CircleIcon");
$RefreshReg$(_c20, "ContextMenu");
$RefreshReg$(_c21, "AlignDistributeSubMenu");
$RefreshReg$(_c22, "StyledGrid");
$RefreshReg$(_c23, "SvgRedo");
$RefreshReg$(_c24, "SvgTrash");
$RefreshReg$(_c25, "SvgUndo");
$RefreshReg$(_c26, "ShapesFunctions");
$RefreshReg$(_c27, "AlignDistribute");
$RefreshReg$(_c28, "BoxIcon");
$RefreshReg$(_c29, "DashSolidIcon");
$RefreshReg$(_c30, "DashDashedIcon");
$RefreshReg$(_c31, "DashDottedIcon");
$RefreshReg$(_c32, "DashDrawIcon");
$RefreshReg$(_c33, "IsFilledFillIcon");
$RefreshReg$(_c34, "QuickColorSelect");
$RefreshReg$(_c35, "QuickSizeSelect");
$RefreshReg$(_c36, "QuickDashSelect");
$RefreshReg$(_c37, "QuickFillSelect");
$RefreshReg$(_c38, "StylePanel");
$RefreshReg$(_c39, "SelectedShapeContent");
$RefreshReg$(_c40, "StatusBar");
$RefreshReg$(_c41, "StatusBarContainer");
$RefreshReg$(_c42, "Section");
$RefreshReg$(_c43, "PrimaryToolButton");
$RefreshReg$(_c44, "SecondaryToolButton");
$RefreshReg$(_c45, "TertiaryToolButton");
$RefreshReg$(_c46, "PrimaryButton");
$RefreshReg$(_c47, "SecondaryButton");
$RefreshReg$(_c48, "TertiaryButton");
$RefreshReg$(_c49, "TertiaryButtonsContainer");
$RefreshReg$(_c50, "UndoRedo");
$RefreshReg$(_c51, "Zoom");
$RefreshReg$(_c52, "ZoomCounter");
$RefreshReg$(_c53, "BackToContent");
$RefreshReg$(_c54, "BackToContentButton");
$RefreshReg$(_c55, "ToolsPanel");
$RefreshReg$(_c56, "ToolsPanelContainer");
$RefreshReg$(_c57, "CenterWrap");
$RefreshReg$(_c58, "LeftWrap");
$RefreshReg$(_c59, "RightWrap");
$RefreshReg$(_c60, "StatusWrap");
$RefreshReg$(_c61, "DrawSession");
$RefreshReg$(_c62, "TLDraw");
$RefreshReg$(_c63, "Spacer");
$RefreshReg$(_c64, "Layout");

  $parcel$ReactRefreshHelpers$ad2f.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"2vIKB","@radix-ui/react-id":"jzxjA","@tldraw/core":"l7Mc3","perfect-freehand":"gkgZb","react-hotkeys-hook":"eEtwz","@stitches/react":"AVCpM","@radix-ui/react-context-menu":"lplMf","@radix-ui/react-tooltip":"1vrpd","@radix-ui/react-dropdown-menu":"gmoPt","@radix-ui/react-radio-group":"ajnk9","@radix-ui/react-icons":"24vEr","@radix-ui/react-checkbox":"gOjDB","zustand":"ln5YW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"jzxjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IdProvider", ()=>IdProvider
);
parcelHelpers.export(exports, "useId", ()=>useId
);
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const t = {
    prefix: Math.round(10000000000 * Math.random()),
    current: 0
}, n = /*#__PURE__*/ _react.createContext(t);
const IdProvider = (o)=>{
    const i = _react.useContext(n), s = i === t, a = _react.useMemo(()=>({
            prefix: s ? 0 : ++i.prefix,
            current: 0
        })
    , [
        s,
        i
    ]); /*#__PURE__*/ 
    return _react.createElement(n.Provider, _extendsDefault.default({
        value: a
    }, o));
};
function useId(r) {
    const o = _react.useContext(n);
    return Boolean(null === globalThis || (void 0) === globalThis ? void 0 : globalThis.document) || o !== t || console.warn("When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server."), _react.useMemo(()=>r || `radix-id-${o.prefix}-${++o.current}`
    , [
        r
    ]);
}

},{"react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cF5UA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"l7Mc3":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$9a48 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$9a48.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Intersect", ()=>Intersect
);
parcelHelpers.export(exports, "Renderer", ()=>Renderer
);
parcelHelpers.export(exports, "Svg", ()=>Svg
);
parcelHelpers.export(exports, "TLBoundsCorner", ()=>TLBoundsCorner
);
parcelHelpers.export(exports, "TLBoundsEdge", ()=>TLBoundsEdge
);
parcelHelpers.export(exports, "TLShapeUtil", ()=>TLShapeUtil
);
parcelHelpers.export(exports, "Utils", ()=>Utils
);
parcelHelpers.export(exports, "Vec", ()=>Vec
);
parcelHelpers.export(exports, "brushUpdater", ()=>brushUpdater
);
parcelHelpers.export(exports, "inputs", ()=>inputs
);
var _react = require("react");
var _reactErrorBoundary = require("react-error-boundary");
var _deepmerge = require("deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _reactUseGesture = require("react-use-gesture");
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$();
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var TLContext = /*#__PURE__*/ _react.createContext({
});
function useTLContext() {
    _s();
    var context = _react.useContext(TLContext);
    return context;
}
_s(useTLContext, "b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=");
/* --------------------- Primary -------------------- */ var TLBoundsEdge;
(function(TLBoundsEdge1) {
    TLBoundsEdge1["Top"] = "top_edge";
    TLBoundsEdge1["Right"] = "right_edge";
    TLBoundsEdge1["Bottom"] = "bottom_edge";
    TLBoundsEdge1["Left"] = "left_edge";
})(TLBoundsEdge || (TLBoundsEdge = {
}));
var TLBoundsCorner;
(function(TLBoundsCorner1) {
    TLBoundsCorner1["TopLeft"] = "top_left_corner";
    TLBoundsCorner1["TopRight"] = "top_right_corner";
    TLBoundsCorner1["BottomRight"] = "bottom_right_corner";
    TLBoundsCorner1["BottomLeft"] = "bottom_left_corner";
})(TLBoundsCorner || (TLBoundsCorner = {
}));
/* -------------------------------------------------- */ /*                   Shape Utility                    */ /* -------------------------------------------------- */ var TLShapeUtil = /*#__PURE__*/ function() {
    function TLShapeUtil1() {
        this.boundsCache = new WeakMap();
        this.isEditableText = false;
        this.isAspectRatioLocked = false;
        this.canEdit = false;
    }
    var _proto = TLShapeUtil1.prototype;
    _proto.shouldRender = function shouldRender(_prev, _next) {
        return true;
    };
    _proto.shouldDelete = function shouldDelete(_shape) {
        return false;
    };
    _proto.getCenter = function getCenter(shape) {
        var bounds = this.getBounds(shape);
        return [
            bounds.width / 2,
            bounds.height / 2
        ];
    };
    _proto.create = function create(props) {
        return _extends({
        }, this.defaultProps, props);
    };
    _proto.mutate = function mutate(shape, props) {
        return _extends({
        }, shape, props);
    };
    _proto.updateChildren = function updateChildren(_shape, _children) {
        return;
    };
    _proto.onChildrenChange = function onChildrenChange(_shape, _children) {
        return;
    };
    _proto.onBindingChange = function onBindingChange(_shape, _binding, _target, _targetBounds) {
        return;
    };
    _proto.onHandleChange = function onHandleChange(_shape, _handle, _info) {
        return;
    };
    _proto.onRightPointHandle = function onRightPointHandle(_shape, _handle, _info) {
        return;
    };
    _proto.onDoubleClickHandle = function onDoubleClickHandle(_shape, _handle, _info) {
        return;
    };
    _proto.onSessionComplete = function onSessionComplete(_shape) {
        return;
    };
    _proto.onBoundsReset = function onBoundsReset(_shape) {
        return;
    };
    return TLShapeUtil1;
}();
// A big collection of vector utilities. Collected into a class to improve logging / packaging.
/* ----------------- Start Copy Here ---------------- */ var Vec = /*#__PURE__*/ function() {
    function Vec1() {
    }
    Vec1.clamp = function clamp(n, min, max) {
        return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n);
    };
    return Vec1;
}();
/**
 * Negate a vector.
 * @param A
 */ Vec.neg = function(A) {
    return [
        -A[0],
        -A[1]
    ];
};
/**
 * Add vectors.
 * @param A
 * @param B
 */ Vec.add = function(A, B) {
    return [
        A[0] + B[0],
        A[1] + B[1]
    ];
};
/**
 * Add scalar to vector.
 * @param A
 * @param B
 */ Vec.addScalar = function(A, n) {
    return [
        A[0] + n,
        A[1] + n
    ];
};
/**
 * Subtract vectors.
 * @param A
 * @param B
 */ Vec.sub = function(A, B) {
    return [
        A[0] - B[0],
        A[1] - B[1]
    ];
};
/**
 * Subtract scalar from vector.
 * @param A
 * @param B
 */ Vec.subScalar = function(A, n) {
    return [
        A[0] - n,
        A[1] - n
    ];
};
/**
 * Get the vector from vectors A to B.
 * @param A
 * @param B
 */ Vec.vec = function(A, B) {
    // A, B as vectors get the vector from A to B
    return [
        B[0] - A[0],
        B[1] - A[1]
    ];
};
/**
 * Vector multiplication by scalar
 * @param A
 * @param n
 */ Vec.mul = function(A, n) {
    return [
        A[0] * n,
        A[1] * n
    ];
};
Vec.mulV = function(A, B) {
    return [
        A[0] * B[0],
        A[1] * B[1]
    ];
};
/**
 * Vector division by scalar.
 * @param A
 * @param n
 */ Vec.div = function(A, n) {
    return [
        A[0] / n,
        A[1] / n
    ];
};
/**
 * Vector division by vector.
 * @param A
 * @param n
 */ Vec.divV = function(A, B) {
    return [
        A[0] / B[0],
        A[1] / B[1]
    ];
};
/**
 * Perpendicular rotation of a vector A
 * @param A
 */ Vec.per = function(A) {
    return [
        A[1],
        -A[0]
    ];
};
/**
 * Dot product
 * @param A
 * @param B
 */ Vec.dpr = function(A, B) {
    return A[0] * B[0] + A[1] * B[1];
};
/**
 * Cross product (outer product) | A X B |
 * @param A
 * @param B
 */ Vec.cpr = function(A, B) {
    return A[0] * B[1] - B[0] * A[1];
};
/**
 * Length of the vector squared
 * @param A
 */ Vec.len2 = function(A) {
    return A[0] * A[0] + A[1] * A[1];
};
/**
 * Length of the vector
 * @param A
 */ Vec.len = function(A) {
    return Math.hypot(A[0], A[1]);
};
/**
 * Project A over B
 * @param A
 * @param B
 */ Vec.pry = function(A, B) {
    return Vec.dpr(A, B) / Vec.len(B);
};
/**
 * Get normalized / unit vector.
 * @param A
 */ Vec.uni = function(A) {
    return Vec.div(A, Vec.len(A));
};
/**
 * Get normalized / unit vector.
 * @param A
 */ Vec.normalize = function(A) {
    return Vec.uni(A);
};
/**
 * Get the tangent between two vectors.
 * @param A
 * @param B
 * @returns
 */ Vec.tangent = function(A, B) {
    return Vec.normalize(Vec.sub(A, B));
};
/**
 * Dist length from A to B squared.
 * @param A
 * @param B
 */ Vec.dist2 = function(A, B) {
    return Vec.len2(Vec.sub(A, B));
};
/**
 * Dist length from A to B
 * @param A
 * @param B
 */ Vec.dist = function(A, B) {
    return Math.hypot(A[1] - B[1], A[0] - B[0]);
};
/**
 * A faster, though less accurate method for testing distances. Maybe faster?
 * @param A
 * @param B
 * @returns
 */ Vec.fastDist = function(A, B) {
    var V = [
        B[0] - A[0],
        B[1] - A[1]
    ];
    var aV = [
        Math.abs(V[0]),
        Math.abs(V[1])
    ];
    var r = 1 / Math.max(aV[0], aV[1]);
    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289);
    return [
        V[0] * r,
        V[1] * r
    ];
};
/**
 * Angle between vector A and vector B in radians
 * @param A
 * @param B
 */ Vec.ang = function(A, B) {
    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B));
};
/**
 * Angle between vector A and vector B in radians
 * @param A
 * @param B
 */ Vec.angle = function(A, B) {
    return Math.atan2(B[1] - A[1], B[0] - A[0]);
};
/**
 * Mean between two vectors or mid vector between two vectors
 * @param A
 * @param B
 */ Vec.med = function(A, B) {
    return Vec.mul(Vec.add(A, B), 0.5);
};
/**
 * Vector rotation by r (radians)
 * @param A
 * @param r rotation in radians
 */ Vec.rot = function(A, r) {
    return [
        A[0] * Math.cos(r) - A[1] * Math.sin(r),
        A[0] * Math.sin(r) + A[1] * Math.cos(r)
    ];
};
/**
 * Rotate a vector around another vector by r (radians)
 * @param A vector
 * @param C center
 * @param r rotation in radians
 */ Vec.rotWith = function(A, C, r) {
    if (r === 0) return A;
    var s = Math.sin(r);
    var c = Math.cos(r);
    var px = A[0] - C[0];
    var py = A[1] - C[1];
    var nx = px * c - py * s;
    var ny = px * s + py * c;
    return [
        nx + C[0],
        ny + C[1]
    ];
};
/**
 * Check of two vectors are identical.
 * @param A
 * @param B
 */ Vec.isEqual = function(A, B) {
    return A[0] === B[0] && A[1] === B[1];
};
/**
 * Interpolate vector A to B with a scalar t
 * @param A
 * @param B
 * @param t scalar
 */ Vec.lrp = function(A, B, t) {
    return Vec.add(A, Vec.mul(Vec.vec(A, B), t));
};
/**
 * Interpolate from A to B when curVAL goes fromVAL: number[] => to
 * @param A
 * @param B
 * @param from Starting value
 * @param to Ending value
 * @param s Strength
 */ Vec["int"] = function(A, B, from, to, s) {
    if (s === void 0) s = 1;
    var t = (Vec.clamp(from, to) - from) / (to - from);
    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s));
};
/**
 * Get the angle between the three vectors A, B, and C.
 * @param p1
 * @param pc
 * @param p2
 */ Vec.ang3 = function(p1, pc, p2) {
    // this,
    var v1 = Vec.vec(pc, p1);
    var v2 = Vec.vec(pc, p2);
    return Vec.ang(v1, v2);
};
/**
 * Absolute value of a vector.
 * @param A
 * @returns
 */ Vec.abs = function(A) {
    return [
        Math.abs(A[0]),
        Math.abs(A[1])
    ];
};
Vec.rescale = function(a, n) {
    var l = Vec.len(a);
    return [
        n * a[0] / l,
        n * a[1] / l
    ];
};
/**
 * Get whether p1 is left of p2, relative to pc.
 * @param p1
 * @param pc
 * @param p2
 */ Vec.isLeft = function(p1, pc, p2) {
    //  isLeft: >0 for counterclockwise
    //          =0 for none (degenerate)
    //          <0 for clockwise
    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1]);
};
Vec.clockwise = function(p1, pc, p2) {
    return Vec.isLeft(p1, pc, p2) > 0;
};
Vec.round = function(a, d) {
    if (d === void 0) d = 5;
    return a.map(function(v) {
        return +v.toPrecision(d);
    });
};
/**
 * Get the minimum distance from a point P to a line with a segment AB.
 * @param A The start of the line.
 * @param B The end of the line.
 * @param P A point.
 * @returns
 */ // static distanceToLine(A: number[], B: number[], P: number[]) {
//   const delta = sub(B, A)
//   const angle = Math.atan2(delta[1], delta[0])
//   const dir = rot(sub(P, A), -angle)
//   return dir[1]
// }
/**
 * Get the nearest point on a line segment AB.
 * @param A The start of the line.
 * @param B The end of the line.
 * @param P A point.
 * @param clamp Whether to clamp the resulting point to the segment.
 * @returns
 */ // static nearestPointOnLine(
//   A: number[],
//   B: number[],
//   P: number[],
//   clamp = true
// ) {
//   const delta = sub(B, A)
//   const length = len(delta)
//   const angle = Math.atan2(delta[1], delta[0])
//   const dir = rot(sub(P, A), -angle)
//   if (clamp) {
//     if (dir[0] < 0) return A
//     if (dir[0] > length) return B
//   }
//   return add(A, div(mul(delta, dir[0]), length))
// }
/**
 * Get the nearest point on a line with a known unit vector that passes through point A
 * @param A Any point on the line
 * @param u The unit vector for the line.
 * @param P A point not on the line to test.
 * @returns
 */ Vec.nearestPointOnLineThroughPoint = function(A, u, P) {
    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));
};
/**
 * Distance between a point and a line with a known unit vector that passes through a point.
 * @param A Any point on the line
 * @param u The unit vector for the line.
 * @param P A point not on the line to test.
 * @returns
 */ Vec.distanceToLineThroughPoint = function(A, u, P) {
    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P));
};
/**
 * Get the nearest point on a line segment between A and B
 * @param A The start of the line segment
 * @param B The end of the line segment
 * @param P The off-line point
 * @param clamp Whether to clamp the point between A and B.
 * @returns
 */ Vec.nearestPointOnLineSegment = function(A, B, P, clamp) {
    if (clamp === void 0) clamp = true;
    var delta = Vec.sub(B, A);
    var length = Vec.len(delta);
    var u = Vec.div(delta, length);
    var pt = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));
    if (clamp) {
        var da = Vec.dist(A, pt);
        var db = Vec.dist(B, pt);
        if (db < da && da > length) return B;
        if (da < db && db > length) return A;
    }
    return pt;
};
/**
 * Distance between a point and the nearest point on a line segment between A and B
 * @param A The start of the line segment
 * @param B The end of the line segment
 * @param P The off-line point
 * @param clamp Whether to clamp the point between A and B.
 * @returns
 */ Vec.distanceToLineSegment = function(A, B, P, clamp) {
    if (clamp === void 0) clamp = true;
    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp));
};
/**
 * Push a point A towards point B by a given distance.
 * @param A
 * @param B
 * @param d
 * @returns
 */ Vec.nudge = function(A, B, d) {
    return Vec.add(A, Vec.mul(Vec.uni(Vec.vec(A, B)), d));
};
/**
 * Push a point in a given angle by a given distance.
 * @param A
 * @param B
 * @param d
 */ Vec.nudgeAtAngle = function(A, a, d) {
    return [
        Math.cos(a) * d + A[0],
        Math.sin(a) * d + A[1]
    ];
};
/**
 * Round a vector to a precision length.
 * @param a
 * @param n
 */ Vec.toPrecision = function(a, n) {
    if (n === void 0) n = 4;
    return [
        +a[0].toPrecision(n),
        +a[1].toPrecision(n)
    ];
};
/**
 * Get a number of points between two points.
 * @param a
 * @param b
 * @param steps
 */ Vec.pointsBetween = function(a, b, steps) {
    if (steps === void 0) steps = 6;
    return Array.from(Array(steps)).map(function(_, i) {
        var t = i / steps;
        return t * t * t;
    }).map(function(t) {
        return Vec.round([].concat(Vec.lrp(a, b, t), [
            (1 - t) / 2
        ]));
    });
};
/* eslint-disable @typescript-eslint/ban-ts-comment */ /* eslint-disable no-extend-native */ /**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */ if (!String.prototype.replaceAll) // @ts-ignore
String.prototype.replaceAll = function(str, newStr) {
    // If a regex pattern
    if (Object.prototype.toString.call(str).toLowerCase() === '[object regexp]') return this.replace(str, newStr);
     // If a string
    return this.replace(new RegExp(str, 'g'), newStr);
};
var Utils = /*#__PURE__*/ function() {
    function Utils1() {
    }
    /* -------------------------------------------------- */ /*                    Math & Geometry                 */ /* -------------------------------------------------- */ Utils1.filterObject = function filterObject(obj, fn) {
        return Object.fromEntries(Object.entries(obj).filter(fn));
    };
    Utils1.deepMerge = function deepMerge(a, b) {
        return _deepmergeDefault.default(a, b, {
            arrayMerge: function arrayMerge(_a, b1) {
                return b1;
            }
        });
    };
    Utils1.lerp = function lerp(y1, y2, mu) {
        mu = Utils1.clamp(mu, 0, 1);
        return y1 * (1 - mu) + y2 * mu;
    };
    Utils1.lerpColor = function lerpColor(color1, color2, factor) {
        if (factor === void 0) factor = 0.5;
        function h2r(hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? [
                parseInt(result[1], 16),
                parseInt(result[2], 16),
                parseInt(result[3], 16)
            ] : null;
        }
        function r2h(rgb) {
            return '#' + (16777216 + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);
        }
        var c1 = h2r(color1);
        var c2 = h2r(color2);
        if (!(c1 && c2)) return;
        var result = c1.slice();
        for(var i = 0; i < 3; i++)result[i] = Math.round(result[i] + factor * (c2[i] - c1[i]));
        return r2h(result);
    };
    Utils1.modulate = function modulate(value, rangeA, rangeB, clamp) {
        if (clamp === void 0) clamp = false;
        var fromLow = rangeA[0], fromHigh = rangeA[1];
        var v0 = rangeB[0], v1 = rangeB[1];
        var result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
        return clamp ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
    };
    Utils1.clamp = function clamp(n, min, max) {
        return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n);
    } // TODO: replace with a string compression algorithm
    ;
    Utils1.compress = function compress(s) {
        return s;
    } // TODO: replace with a string decompression algorithm
    ;
    Utils1.decompress = function decompress(s) {
        return s;
    };
    Utils1.deepClone = function deepClone(obj) {
        if (obj === null) return obj;
        if (Array.isArray(obj)) return [].concat(obj);
        if (typeof obj === 'object') {
            var clone = _extends({
            }, obj);
            Object.keys(clone).forEach(function(key) {
                return clone[key] = typeof obj[key] === 'object' ? Utils1.deepClone(obj[key]) : obj[key];
            });
            return clone;
        }
        return obj;
    };
    Utils1.rng = function rng(seed) {
        if (seed === void 0) seed = '';
        var x = 0;
        var y = 0;
        var z = 0;
        var w = 0;
        function next() {
            var t = x ^ x << 11;
            x = y;
            y = z;
            z = w;
            w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;
            return w / 4294967296;
        }
        for(var k = 0; k < seed.length + 64; k++){
            x ^= seed.charCodeAt(k) | 0;
            next();
        }
        return next;
    };
    Utils1.getRectangleSides = function getRectangleSides(point, size) {
        var tl = point;
        var tr = Vec.add(point, [
            size[0],
            0
        ]);
        var br = Vec.add(point, size);
        var bl = Vec.add(point, [
            0,
            size[1]
        ]);
        return [
            [
                'top',
                [
                    tl,
                    tr
                ]
            ],
            [
                'right',
                [
                    tr,
                    br
                ]
            ],
            [
                'bottom',
                [
                    br,
                    bl
                ]
            ],
            [
                'left',
                [
                    bl,
                    tl
                ]
            ]
        ];
    };
    Utils1.getBoundsSides = function getBoundsSides(bounds) {
        return this.getRectangleSides([
            bounds.minX,
            bounds.minY
        ], [
            bounds.width,
            bounds.height
        ]);
    };
    Utils1.shallowEqual = function shallowEqual(objA, objB) {
        if (objA === objB) return true;
        if (!objA || !objB) return false;
        var aKeys = Object.keys(objA);
        var bKeys = Object.keys(objB);
        var len = aKeys.length;
        if (bKeys.length !== len) return false;
        for(var i = 0; i < len; i++){
            var key = aKeys[i];
            if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) return false;
        }
        return true;
    };
    Utils1.getCircleTangentToPoint = function getCircleTangentToPoint(C, r, P, side) {
        var B = Vec.lrp(C, P, 0.5);
        var r1 = Vec.dist(C, B);
        var delta = Vec.sub(B, C);
        var d = Vec.len(delta);
        if (!(d <= r + r1 && d >= Math.abs(r - r1))) return null;
        var a = (r * r - r1 * r1 + d * d) / (2 * d);
        var n = 1 / d;
        var p = Vec.add(C, Vec.mul(delta, a * n));
        var h = Math.sqrt(r * r - a * a);
        var k = Vec.mul(Vec.per(delta), h * n);
        return side === 0 ? Vec.add(p, k) : Vec.sub(p, k);
    };
    Utils1.getOuterTangentsOfCircles = function getOuterTangentsOfCircles(C0, r0, C1, r1) {
        var a0 = Vec.angle(C0, C1);
        var d = Vec.dist(C0, C1); // Circles are overlapping, no tangents
        if (d < Math.abs(r1 - r0)) return null;
        var a1 = Math.acos((r0 - r1) / d);
        var t0 = a0 + a1;
        var t1 = a0 - a1;
        return [
            [
                C0[0] + r0 * Math.cos(t1),
                C0[1] + r0 * Math.sin(t1)
            ],
            [
                C1[0] + r1 * Math.cos(t1),
                C1[1] + r1 * Math.sin(t1)
            ],
            [
                C0[0] + r0 * Math.cos(t0),
                C0[1] + r0 * Math.sin(t0)
            ],
            [
                C1[0] + r1 * Math.cos(t0),
                C1[1] + r1 * Math.sin(t0)
            ]
        ];
    };
    Utils1.getClosestPointOnCircle = function getClosestPointOnCircle(C, r, P) {
        var v = Vec.sub(C, P);
        return Vec.sub(C, Vec.mul(Vec.div(v, Vec.len(v)), r));
    };
    Utils1.circleFromThreePoints = function circleFromThreePoints(A, B, C) {
        var x1 = A[0], y1 = A[1];
        var x2 = B[0], y2 = B[1];
        var x3 = C[0], y3 = C[1];
        var a = x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - x3 * y2;
        var b = (x1 * x1 + y1 * y1) * (y3 - y2) + (x2 * x2 + y2 * y2) * (y1 - y3) + (x3 * x3 + y3 * y3) * (y2 - y1);
        var c = (x1 * x1 + y1 * y1) * (x2 - x3) + (x2 * x2 + y2 * y2) * (x3 - x1) + (x3 * x3 + y3 * y3) * (x1 - x2);
        var x = -b / (2 * a);
        var y = -c / (2 * a);
        return [
            x,
            y,
            Math.hypot(x - x1, y - y1)
        ];
    };
    Utils1.perimeterOfEllipse = function perimeterOfEllipse(rx, ry) {
        var h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
        var p = Math.PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
        return p;
    };
    Utils1.shortAngleDist = function shortAngleDist(a0, a1) {
        var max = Math.PI * 2;
        var da = (a1 - a0) % max;
        return 2 * da % max - da;
    };
    Utils1.longAngleDist = function longAngleDist(a0, a1) {
        return Math.PI * 2 - Utils1.shortAngleDist(a0, a1);
    };
    Utils1.lerpAngles = function lerpAngles(a0, a1, t) {
        return a0 + Utils1.shortAngleDist(a0, a1) * t;
    };
    Utils1.angleDelta = function angleDelta(a0, a1) {
        return Utils1.shortAngleDist(a0, a1);
    };
    Utils1.getSweep = function getSweep(C, A, B) {
        return Utils1.angleDelta(Vec.angle(C, A), Vec.angle(C, B));
    };
    Utils1.rotatePoint = function rotatePoint(A, B, angle) {
        var s = Math.sin(angle);
        var c = Math.cos(angle);
        var px = A[0] - B[0];
        var py = A[1] - B[1];
        var nx = px * c - py * s;
        var ny = px * s + py * c;
        return [
            nx + B[0],
            ny + B[1]
        ];
    };
    Utils1.clampRadians = function clampRadians(r) {
        return (Math.PI * 2 + r) % (Math.PI * 2);
    };
    Utils1.clampToRotationToSegments = function clampToRotationToSegments(r, segments) {
        var seg = Math.PI * 2 / segments;
        return Math.floor((Utils1.clampRadians(r) + seg / 2) / seg) * seg;
    };
    Utils1.isAngleBetween = function isAngleBetween(a, b, c) {
        if (c === a || c === b) return true;
        var PI2 = Math.PI * 2;
        var AB = (b - a + PI2) % PI2;
        var AC = (c - a + PI2) % PI2;
        return AB <= Math.PI !== AC > AB;
    };
    Utils1.degreesToRadians = function degreesToRadians(d) {
        return d * Math.PI / 180;
    };
    Utils1.radiansToDegrees = function radiansToDegrees(r) {
        return r * 180 / Math.PI;
    };
    Utils1.getArcLength = function getArcLength(C, r, A, B) {
        var sweep = Utils1.getSweep(C, A, B);
        return r * (2 * Math.PI) * (sweep / (2 * Math.PI));
    };
    Utils1.getArcDashOffset = function getArcDashOffset(C, r, A, B, step) {
        var del0 = Utils1.getSweep(C, A, B);
        var len0 = Utils1.getArcLength(C, r, A, B);
        var off0 = del0 < 0 ? len0 : 2 * Math.PI * C[2] - len0;
        return -off0 / 2 + step;
    };
    Utils1.getEllipseDashOffset = function getEllipseDashOffset(A, step) {
        var c = 2 * Math.PI * A[2];
        return -c / 2 + -step;
    };
    Utils1.getTLBezierCurveSegments = function getTLBezierCurveSegments(points, tension) {
        if (tension === void 0) tension = 0.4;
        var len = points.length;
        var cpoints = [].concat(points);
        if (len < 2) throw Error('Curve must have at least two points.');
        for(var i = 1; i < len - 1; i++){
            var p0 = points[i - 1];
            var p1 = points[i];
            var p2 = points[i + 1];
            var pdx = p2[0] - p0[0];
            var pdy = p2[1] - p0[1];
            var pd = Math.hypot(pdx, pdy);
            var nx = pdx / pd; // normalized x
            var ny = pdy / pd; // normalized y
            var dp = Math.hypot(p1[0] - p0[0], p1[1] - p0[1]); // Distance to previous
            var dn = Math.hypot(p1[0] - p2[0], p1[1] - p2[1]); // Distance to next
            cpoints[i] = [
                p1[0] - nx * dp * tension,
                p1[1] - ny * dp * tension,
                p1[0] + nx * dn * tension,
                p1[1] + ny * dn * tension,
                nx,
                ny
            ];
        } // TODO: Reflect the nearest control points, not average them
        var d0 = Math.hypot(points[0][0] + cpoints[1][0]);
        cpoints[0][2] = (points[0][0] + cpoints[1][0]) / 2;
        cpoints[0][3] = (points[0][1] + cpoints[1][1]) / 2;
        cpoints[0][4] = (cpoints[1][0] - points[0][0]) / d0;
        cpoints[0][5] = (cpoints[1][1] - points[0][1]) / d0;
        var d1 = Math.hypot(points[len - 1][1] + cpoints[len - 1][1]);
        cpoints[len - 1][0] = (points[len - 1][0] + cpoints[len - 2][2]) / 2;
        cpoints[len - 1][1] = (points[len - 1][1] + cpoints[len - 2][3]) / 2;
        cpoints[len - 1][4] = (cpoints[len - 2][2] - points[len - 1][0]) / -d1;
        cpoints[len - 1][5] = (cpoints[len - 2][3] - points[len - 1][1]) / -d1;
        var results = [];
        for(var _i = 1; _i < cpoints.length; _i++)results.push({
            start: points[_i - 1].slice(0, 2),
            tangentStart: cpoints[_i - 1].slice(2, 4),
            normalStart: cpoints[_i - 1].slice(4, 6),
            pressureStart: 2 + ((_i - 1) % 2 === 0 ? 1.5 : 0),
            end: points[_i].slice(0, 2),
            tangentEnd: cpoints[_i].slice(0, 2),
            normalEnd: cpoints[_i].slice(4, 6),
            pressureEnd: 2 + (_i % 2 === 0 ? 1.5 : 0)
        });
        return results;
    };
    Utils1.computePointOnCurve = function computePointOnCurve(t, points) {
        // shortcuts
        if (t === 0) return points[0];
        var order = points.length - 1;
        if (t === 1) return points[order];
        var mt = 1 - t;
        var p = points; // constant?
        if (order === 0) return points[0];
         // linear?
        if (order === 1) return [
            mt * p[0][0] + t * p[1][0],
            mt * p[0][1] + t * p[1][1]
        ];
         // quadratic/cubic curve?
        // if (order < 4) {
        var mt2 = mt * mt;
        var t2 = t * t;
        var a;
        var b;
        var c;
        var d = 0;
        if (order === 2) {
            p = [
                p[0],
                p[1],
                p[2],
                [
                    0,
                    0
                ]
            ];
            a = mt2;
            b = mt * t * 2;
            c = t2; // } else if (order === 3) {
        } else {
            a = mt2 * mt;
            b = mt2 * t * 3;
            c = mt * t2 * 3;
            d = t * t2;
        }
        return [
            a * p[0][0] + b * p[1][0] + c * p[2][0] + d * p[3][0],
            a * p[0][1] + b * p[1][1] + c * p[2][1] + d * p[3][1]
        ]; // } // higher order curves: use de Casteljau's computation
    };
    Utils1.cubicBezier = function cubicBezier(tx, x1, y1, x2, y2) {
        // Inspired by Don Lancaster's two articles
        // http://www.tinaja.com/glib/cubemath.pdf
        // http://www.tinaja.com/text/bezmath.html
        // Set start and end point
        var x0 = 0;
        var y0 = 0;
        var x3 = 1;
        var y3 = 1; // Convert the coordinates to equation space
        var A = x3 - 3 * x2 + 3 * x1 - x0;
        var B = 3 * x2 - 6 * x1 + 3 * x0;
        var C = 3 * x1 - 3 * x0;
        var D = x0;
        var E = y3 - 3 * y2 + 3 * y1 - y0;
        var F = 3 * y2 - 6 * y1 + 3 * y0;
        var G = 3 * y1 - 3 * y0;
        var H = y0; // Variables for the loop below
        var iterations = 5;
        var i;
        var slope;
        var x;
        var t = tx; // Loop through a few times to get a more accurate time value, according to the Newton-Raphson method
        // http://en.wikipedia.org/wiki/Newton's_method
        for(i = 0; i < iterations; i++){
            // The curve's x equation for the current time value
            x = A * t * t * t + B * t * t + C * t + D; // The slope we want is the inverse of the derivate of x
            slope = 1 / (3 * A * t * t + 2 * B * t + C); // Get the next estimated time value, which will be more accurate than the one before
            t -= (x - tx) * slope;
            t = t > 1 ? 1 : t < 0 ? 0 : t;
        } // Find the y value through the curve's y equation, with the now more accurate time value
        return Math.abs(E * t * t * t + F * t * t + G * t * H);
    };
    Utils1.getSpline = function getSpline(pts, k) {
        if (k === void 0) k = 0.5;
        var p0;
        var p1 = pts[0], p2 = pts[1], p3 = pts[2];
        var results = [];
        for(var i = 1, len = pts.length; i < len; i++){
            p0 = p1;
            p1 = p2;
            p2 = p3;
            p3 = pts[i + 2] ? pts[i + 2] : p2;
            results.push({
                cp1x: p1[0] + (p2[0] - p0[0]) / 6 * k,
                cp1y: p1[1] + (p2[1] - p0[1]) / 6 * k,
                cp2x: p2[0] - (p3[0] - p1[0]) / 6 * k,
                cp2y: p2[1] - (p3[1] - p1[1]) / 6 * k,
                px: pts[i][0],
                py: pts[i][1]
            });
        }
        return results;
    };
    Utils1.getCurvePoints = function getCurvePoints(pts, tension, isClosed, numOfSegments) {
        if (tension === void 0) tension = 0.5;
        if (isClosed === void 0) isClosed = false;
        if (numOfSegments === void 0) numOfSegments = 3;
        var _pts = [].concat(pts);
        var len = pts.length;
        var res = []; // results
        var t1x, t2x, t1y, t2y, c1, c2, c3, c4, st, st2, st3; // The algorithm require a previous and next point to the actual point array.
        // Check if we will draw closed or open curve.
        // If closed, copy end points to beginning and first points to end
        // If open, duplicate first points to befinning, end points to end
        if (isClosed) {
            _pts.unshift(_pts[len - 1]);
            _pts.push(_pts[0]);
        } else {
            // copy 1. point and insert at beginning
            _pts.unshift(_pts[0]);
            _pts.push(_pts[len - 1]); // _pts.push(_pts[len - 1])
        } // For each point, calculate a segment
        for(var i = 1; i < _pts.length - 2; i++)// Calculate points along segment and add to results
        for(var t = 0; t <= numOfSegments; t++){
            // Step
            st = t / numOfSegments;
            st2 = Math.pow(st, 2);
            st3 = Math.pow(st, 3); // Cardinals
            c1 = 2 * st3 - 3 * st2 + 1;
            c2 = -(2 * st3) + 3 * st2;
            c3 = st3 - 2 * st2 + st;
            c4 = st3 - st2; // Tension
            t1x = (_pts[i + 1][0] - _pts[i - 1][0]) * tension;
            t2x = (_pts[i + 2][0] - _pts[i][0]) * tension;
            t1y = (_pts[i + 1][1] - _pts[i - 1][1]) * tension;
            t2y = (_pts[i + 2][1] - _pts[i][1]) * tension; // Control points
            res.push([
                c1 * _pts[i][0] + c2 * _pts[i + 1][0] + c3 * t1x + c4 * t2x,
                c1 * _pts[i][1] + c2 * _pts[i + 1][1] + c3 * t1y + c4 * t2y
            ]);
        }
        res.push(pts[pts.length - 1]);
        return res;
    };
    Utils1.simplify = function simplify(points, tolerance) {
        if (tolerance === void 0) tolerance = 1;
        var len = points.length;
        var a = points[0];
        var b = points[len - 1];
        var x1 = a[0], y1 = a[1];
        var x2 = b[0], y2 = b[1];
        if (len > 2) {
            var distance = 0;
            var index = 0;
            var max = Math.hypot(y2 - y1, x2 - x1);
            for(var i = 1; i < len - 1; i++){
                var _points$i = points[i], x0 = _points$i[0], y0 = _points$i[1];
                var d = Math.abs((y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1) / max;
                if (distance > d) continue;
                distance = d;
                index = i;
            }
            if (distance > tolerance) {
                var l0 = Utils1.simplify(points.slice(0, index + 1), tolerance);
                var l1 = Utils1.simplify(points.slice(index + 1), tolerance);
                return l0.concat(l1.slice(1));
            }
        }
        return [
            a,
            b
        ];
    };
    Utils1.pointInCircle = function pointInCircle(A, C, r) {
        return Vec.dist(A, C) <= r;
    };
    Utils1.pointInEllipse = function pointInEllipse(A, C, rx, ry, rotation) {
        if (rotation === void 0) rotation = 0;
        rotation = rotation || 0;
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        var delta = Vec.sub(A, C);
        var tdx = cos * delta[0] + sin * delta[1];
        var tdy = sin * delta[0] - cos * delta[1];
        return tdx * tdx / (rx * rx) + tdy * tdy / (ry * ry) <= 1;
    };
    Utils1.pointInRect = function pointInRect(point, size) {
        return !(point[0] < size[0] || point[0] > point[0] + size[0] || point[1] < size[1] || point[1] > point[1] + size[1]);
    };
    Utils1.expandBounds = function expandBounds(bounds, delta) {
        return {
            minX: bounds.minX - delta,
            minY: bounds.minY - delta,
            maxX: bounds.maxX + delta,
            maxY: bounds.maxY + delta,
            width: bounds.width + delta * 2,
            height: bounds.height + delta * 2
        };
    };
    Utils1.pointInBounds = function pointInBounds(A, b) {
        return !(A[0] < b.minX || A[0] > b.maxX || A[1] < b.minY || A[1] > b.maxY);
    };
    Utils1.boundsCollide = function boundsCollide(a, b) {
        return !(a.maxX < b.minX || a.minX > b.maxX || a.maxY < b.minY || a.minY > b.maxY);
    };
    Utils1.boundsContain = function boundsContain(a, b) {
        return a.minX < b.minX && a.minY < b.minY && a.maxY > b.maxY && a.maxX > b.maxX;
    };
    Utils1.boundsContained = function boundsContained(a, b) {
        return Utils1.boundsContain(b, a);
    };
    Utils1.boundsAreEqual = function boundsAreEqual(a, b) {
        return !(b.maxX !== a.maxX || b.minX !== a.minX || b.maxY !== a.maxY || b.minY !== a.minY);
    };
    Utils1.getBoundsFromPoints = function getBoundsFromPoints(points, rotation) {
        if (rotation === void 0) rotation = 0;
        var minX = Infinity;
        var minY = Infinity;
        var maxX = -Infinity;
        var maxY = -Infinity;
        if (points.length < 2) {
            minX = 0;
            minY = 0;
            maxX = 1;
            maxY = 1;
        } else for(var _iterator = _createForOfIteratorHelperLoose(points), _step; !(_step = _iterator()).done;){
            var _step$value = _step.value, x = _step$value[0], y = _step$value[1];
            minX = Math.min(x, minX);
            minY = Math.min(y, minY);
            maxX = Math.max(x, maxX);
            maxY = Math.max(y, maxY);
        }
        if (rotation !== 0) return Utils1.getBoundsFromPoints(points.map(function(pt) {
            return Vec.rotWith(pt, [
                (minX + maxX) / 2,
                (minY + maxY) / 2
            ], rotation);
        }));
        return {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: Math.max(1, maxX - minX),
            height: Math.max(1, maxY - minY)
        };
    };
    Utils1.translateBounds = function translateBounds(bounds, delta) {
        return {
            minX: bounds.minX + delta[0],
            minY: bounds.minY + delta[1],
            maxX: bounds.maxX + delta[0],
            maxY: bounds.maxY + delta[1],
            width: bounds.width,
            height: bounds.height
        };
    };
    Utils1.rotateBounds = function rotateBounds(bounds, center, rotation) {
        var _vec$rotWith = Vec.rotWith([
            bounds.minX,
            bounds.minY
        ], center, rotation), minX = _vec$rotWith[0], minY = _vec$rotWith[1];
        var _vec$rotWith2 = Vec.rotWith([
            bounds.maxX,
            bounds.maxY
        ], center, rotation), maxX = _vec$rotWith2[0], maxY = _vec$rotWith2[1];
        return {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: bounds.width,
            height: bounds.height
        };
    };
    Utils1.getRotatedEllipseBounds = function getRotatedEllipseBounds(x, y, rx, ry, rotation) {
        var c = Math.cos(rotation);
        var s = Math.sin(rotation);
        var w = Math.hypot(rx * c, ry * s);
        var h = Math.hypot(rx * s, ry * c);
        return {
            minX: x + rx - w,
            minY: y + ry - h,
            maxX: x + rx + w,
            maxY: y + ry + h,
            width: w * 2,
            height: h * 2
        };
    };
    Utils1.getExpandedBounds = function getExpandedBounds(a, b) {
        var minX = Math.min(a.minX, b.minX);
        var minY = Math.min(a.minY, b.minY);
        var maxX = Math.max(a.maxX, b.maxX);
        var maxY = Math.max(a.maxY, b.maxY);
        var width = Math.abs(maxX - minX);
        var height = Math.abs(maxY - minY);
        return {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: width,
            height: height
        };
    };
    Utils1.getCommonBounds = function getCommonBounds(bounds) {
        if (bounds.length < 2) return bounds[0];
        var result = bounds[0];
        for(var i = 1; i < bounds.length; i++)result = Utils1.getExpandedBounds(result, bounds[i]);
        return result;
    };
    Utils1.getRotatedCorners = function getRotatedCorners(b, rotation) {
        if (rotation === void 0) rotation = 0;
        var center = [
            b.minX + b.width / 2,
            b.minY + b.height / 2
        ];
        return [
            [
                b.minX,
                b.minY
            ],
            [
                b.maxX,
                b.minY
            ],
            [
                b.maxX,
                b.maxY
            ],
            [
                b.minX,
                b.maxY
            ]
        ].map(function(point) {
            return Vec.rotWith(point, center, rotation);
        });
    };
    Utils1.getTransformedBoundingBox = function getTransformedBoundingBox(bounds, handle, delta, rotation, isAspectRatioLocked) {
        if (rotation === void 0) rotation = 0;
        if (isAspectRatioLocked === void 0) isAspectRatioLocked = false;
        // Create top left and bottom right corners.
        var _ref = [
            bounds.minX,
            bounds.minY
        ], ax0 = _ref[0], ay0 = _ref[1];
        var _ref2 = [
            bounds.maxX,
            bounds.maxY
        ], ax1 = _ref2[0], ay1 = _ref2[1]; // Create a second set of corners for the new box.
        var _ref3 = [
            bounds.minX,
            bounds.minY
        ], bx0 = _ref3[0], by0 = _ref3[1];
        var _ref4 = [
            bounds.maxX,
            bounds.maxY
        ], bx1 = _ref4[0], by1 = _ref4[1]; // If the drag is on the center, just translate the bounds.
        if (handle === 'center') return {
            minX: bx0 + delta[0],
            minY: by0 + delta[1],
            maxX: bx1 + delta[0],
            maxY: by1 + delta[1],
            width: bx1 - bx0,
            height: by1 - by0,
            scaleX: 1,
            scaleY: 1
        };
         // Counter rotate the delta. This lets us make changes as if
        // the (possibly rotated) boxes were axis aligned.
        var _vec$rot = Vec.rot(delta, -rotation), dx = _vec$rot[0], dy = _vec$rot[1];
        /*
    1. Delta
     Use the delta to adjust the new box by changing its corners.
    The dragging handle (corner or edge) will determine which
    corners should change.
    */ switch(handle){
            case TLBoundsEdge.Top:
            case TLBoundsCorner.TopLeft:
            case TLBoundsCorner.TopRight:
                by0 += dy;
                break;
            case TLBoundsEdge.Bottom:
            case TLBoundsCorner.BottomLeft:
            case TLBoundsCorner.BottomRight:
                by1 += dy;
                break;
        }
        switch(handle){
            case TLBoundsEdge.Left:
            case TLBoundsCorner.TopLeft:
            case TLBoundsCorner.BottomLeft:
                bx0 += dx;
                break;
            case TLBoundsEdge.Right:
            case TLBoundsCorner.TopRight:
            case TLBoundsCorner.BottomRight:
                bx1 += dx;
                break;
        }
        var aw = ax1 - ax0;
        var ah = ay1 - ay0;
        var scaleX = (bx1 - bx0) / aw;
        var scaleY = (by1 - by0) / ah;
        var flipX = scaleX < 0;
        var flipY = scaleY < 0;
        var bw = Math.abs(bx1 - bx0);
        var bh = Math.abs(by1 - by0);
        /*
    2. Aspect ratio
     If the aspect ratio is locked, adjust the corners so that the
    new box's aspect ratio matches the original aspect ratio.
    */ if (isAspectRatioLocked) {
            var ar = aw / ah;
            var isTall = ar < bw / bh;
            var tw = bw * (scaleY < 0 ? 1 : -1) * (1 / ar);
            var th = bh * (scaleX < 0 ? 1 : -1) * ar;
            switch(handle){
                case TLBoundsCorner.TopLeft:
                    if (isTall) by0 = by1 + tw;
                    else bx0 = bx1 + th;
                    break;
                case TLBoundsCorner.TopRight:
                    if (isTall) by0 = by1 + tw;
                    else bx1 = bx0 - th;
                    break;
                case TLBoundsCorner.BottomRight:
                    if (isTall) by1 = by0 - tw;
                    else bx1 = bx0 - th;
                    break;
                case TLBoundsCorner.BottomLeft:
                    if (isTall) by1 = by0 - tw;
                    else bx0 = bx1 + th;
                    break;
                case TLBoundsEdge.Bottom:
                case TLBoundsEdge.Top:
                    var m = (bx0 + bx1) / 2;
                    var w = bh * ar;
                    bx0 = m - w / 2;
                    bx1 = m + w / 2;
                    break;
                case TLBoundsEdge.Left:
                case TLBoundsEdge.Right:
                    var _m = (by0 + by1) / 2;
                    var h = bw / ar;
                    by0 = _m - h / 2;
                    by1 = _m + h / 2;
                    break;
            }
        }
        /*
    3. Rotation
     If the bounds are rotated, get a vector from the rotated anchor
    corner in the inital bounds to the rotated anchor corner in the
    result's bounds. Subtract this vector from the result's corners,
    so that the two anchor points (initial and result) will be equal.
    */ if (rotation % (Math.PI * 2) !== 0) {
            var cv = [
                0,
                0
            ];
            var c0 = Vec.med([
                ax0,
                ay0
            ], [
                ax1,
                ay1
            ]);
            var c1 = Vec.med([
                bx0,
                by0
            ], [
                bx1,
                by1
            ]);
            switch(handle){
                case TLBoundsCorner.TopLeft:
                    cv = Vec.sub(Vec.rotWith([
                        bx1,
                        by1
                    ], c1, rotation), Vec.rotWith([
                        ax1,
                        ay1
                    ], c0, rotation));
                    break;
                case TLBoundsCorner.TopRight:
                    cv = Vec.sub(Vec.rotWith([
                        bx0,
                        by1
                    ], c1, rotation), Vec.rotWith([
                        ax0,
                        ay1
                    ], c0, rotation));
                    break;
                case TLBoundsCorner.BottomRight:
                    cv = Vec.sub(Vec.rotWith([
                        bx0,
                        by0
                    ], c1, rotation), Vec.rotWith([
                        ax0,
                        ay0
                    ], c0, rotation));
                    break;
                case TLBoundsCorner.BottomLeft:
                    cv = Vec.sub(Vec.rotWith([
                        bx1,
                        by0
                    ], c1, rotation), Vec.rotWith([
                        ax1,
                        ay0
                    ], c0, rotation));
                    break;
                case TLBoundsEdge.Top:
                    cv = Vec.sub(Vec.rotWith(Vec.med([
                        bx0,
                        by1
                    ], [
                        bx1,
                        by1
                    ]), c1, rotation), Vec.rotWith(Vec.med([
                        ax0,
                        ay1
                    ], [
                        ax1,
                        ay1
                    ]), c0, rotation));
                    break;
                case TLBoundsEdge.Left:
                    cv = Vec.sub(Vec.rotWith(Vec.med([
                        bx1,
                        by0
                    ], [
                        bx1,
                        by1
                    ]), c1, rotation), Vec.rotWith(Vec.med([
                        ax1,
                        ay0
                    ], [
                        ax1,
                        ay1
                    ]), c0, rotation));
                    break;
                case TLBoundsEdge.Bottom:
                    cv = Vec.sub(Vec.rotWith(Vec.med([
                        bx0,
                        by0
                    ], [
                        bx1,
                        by0
                    ]), c1, rotation), Vec.rotWith(Vec.med([
                        ax0,
                        ay0
                    ], [
                        ax1,
                        ay0
                    ]), c0, rotation));
                    break;
                case TLBoundsEdge.Right:
                    cv = Vec.sub(Vec.rotWith(Vec.med([
                        bx0,
                        by0
                    ], [
                        bx0,
                        by1
                    ]), c1, rotation), Vec.rotWith(Vec.med([
                        ax0,
                        ay0
                    ], [
                        ax0,
                        ay1
                    ]), c0, rotation));
                    break;
            }
            var _vec$sub = Vec.sub([
                bx0,
                by0
            ], cv);
            bx0 = _vec$sub[0];
            by0 = _vec$sub[1];
            var _vec$sub2 = Vec.sub([
                bx1,
                by1
            ], cv);
            bx1 = _vec$sub2[0];
            by1 = _vec$sub2[1];
        }
        /*
    4. Flips
     If the axes are flipped (e.g. if the right edge has been dragged
    left past the initial left edge) then swap points on that axis.
    */ if (bx1 < bx0) {
            var _ref5 = [
                bx0,
                bx1
            ];
            bx1 = _ref5[0];
            bx0 = _ref5[1];
        }
        if (by1 < by0) {
            var _ref6 = [
                by0,
                by1
            ];
            by1 = _ref6[0];
            by0 = _ref6[1];
        }
        return {
            minX: bx0,
            minY: by0,
            maxX: bx1,
            maxY: by1,
            width: bx1 - bx0,
            height: by1 - by0,
            scaleX: (bx1 - bx0) / (ax1 - ax0 || 1) * (flipX ? -1 : 1),
            scaleY: (by1 - by0) / (ay1 - ay0 || 1) * (flipY ? -1 : 1)
        };
    };
    Utils1.getTransformAnchor = function getTransformAnchor(type, isFlippedX, isFlippedY) {
        var anchor = type; // Change corner anchors if flipped
        switch(type){
            case TLBoundsCorner.TopLeft:
                if (isFlippedX && isFlippedY) anchor = TLBoundsCorner.BottomRight;
                else if (isFlippedX) anchor = TLBoundsCorner.TopRight;
                else if (isFlippedY) anchor = TLBoundsCorner.BottomLeft;
                else anchor = TLBoundsCorner.BottomRight;
                break;
            case TLBoundsCorner.TopRight:
                if (isFlippedX && isFlippedY) anchor = TLBoundsCorner.BottomLeft;
                else if (isFlippedX) anchor = TLBoundsCorner.TopLeft;
                else if (isFlippedY) anchor = TLBoundsCorner.BottomRight;
                else anchor = TLBoundsCorner.BottomLeft;
                break;
            case TLBoundsCorner.BottomRight:
                if (isFlippedX && isFlippedY) anchor = TLBoundsCorner.TopLeft;
                else if (isFlippedX) anchor = TLBoundsCorner.BottomLeft;
                else if (isFlippedY) anchor = TLBoundsCorner.TopRight;
                else anchor = TLBoundsCorner.TopLeft;
                break;
            case TLBoundsCorner.BottomLeft:
                if (isFlippedX && isFlippedY) anchor = TLBoundsCorner.TopRight;
                else if (isFlippedX) anchor = TLBoundsCorner.BottomRight;
                else if (isFlippedY) anchor = TLBoundsCorner.TopLeft;
                else anchor = TLBoundsCorner.TopRight;
                break;
        }
        return anchor;
    };
    Utils1.getRelativeTransformedBoundingBox = function getRelativeTransformedBoundingBox(bounds, initialBounds, initialShapeBounds, isFlippedX, isFlippedY) {
        var nx = (isFlippedX ? initialBounds.maxX - initialShapeBounds.maxX : initialShapeBounds.minX - initialBounds.minX) / initialBounds.width;
        var ny = (isFlippedY ? initialBounds.maxY - initialShapeBounds.maxY : initialShapeBounds.minY - initialBounds.minY) / initialBounds.height;
        var nw = initialShapeBounds.width / initialBounds.width;
        var nh = initialShapeBounds.height / initialBounds.height;
        var minX = bounds.minX + bounds.width * nx;
        var minY = bounds.minY + bounds.height * ny;
        var width = bounds.width * nw;
        var height = bounds.height * nh;
        return {
            minX: minX,
            minY: minY,
            maxX: minX + width,
            maxY: minY + height,
            width: width,
            height: height
        };
    };
    Utils1.getRotatedSize = function getRotatedSize(size, rotation) {
        var center = Vec.div(size, 2);
        var points = [
            [
                0,
                0
            ],
            [
                size[0],
                0
            ],
            size,
            [
                0,
                size[1]
            ]
        ].map(function(point) {
            return Vec.rotWith(point, center, rotation);
        });
        var bounds = Utils1.getBoundsFromPoints(points);
        return [
            bounds.width,
            bounds.height
        ];
    };
    Utils1.getBoundsCenter = function getBoundsCenter(bounds) {
        return [
            bounds.minX + bounds.width / 2,
            bounds.minY + bounds.height / 2
        ];
    };
    Utils1.removeDuplicatePoints = function removeDuplicatePoints(points) {
        return points.reduce(function(acc, pt, i) {
            if (i === 0 || !Vec.isEqual(pt, acc[i - 1])) acc.push(pt);
            return acc;
        }, []);
    };
    Utils1.getFromCache = function getFromCache(cache, item, getNext) {
        var value = cache.get(item);
        if (value === undefined) {
            cache.set(item, getNext());
            value = cache.get(item);
            if (value === undefined) throw Error('Cache did not include item!');
        }
        return value;
    };
    Utils1.uniqueId = function uniqueId(a) {
        if (a === void 0) a = '';
        return a ? /* eslint-disable no-bitwise */ ((Number(a) ^ Math.random() * 16) >> Number(a) / 4).toString(16) : "10000000-1000-4000-8000-100000000000".replace(/[018]/g, Utils1.uniqueId);
    };
    Utils1.shuffleArr = function shuffleArr(arr, offset) {
        return arr.map(function(_, i) {
            return arr[(i + offset) % arr.length];
        });
    };
    Utils1.deepCompareArrays = function deepCompareArrays(a, b) {
        if ((a == null ? void 0 : a.length) !== (b == null ? void 0 : b.length)) return false;
        return Utils1.deepCompare(a, b);
    };
    Utils1.deepCompare = function deepCompare(a, b) {
        return a === b || JSON.stringify(a) === JSON.stringify(b);
    };
    Utils1.arrsIntersect = function arrsIntersect(a, b, fn) {
        return a.some(function(item) {
            return b.includes(fn ? fn(item) : item);
        });
    };
    Utils1.uniqueArray = function uniqueArray() {
        for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++)items[_key] = arguments[_key];
        return Array.from(new Set(items).values());
    };
    Utils1.setToArray = function setToArray(set) {
        return Array.from(set.values());
    };
    Utils1.debounce = function debounce(fn, ms) {
        if (ms === void 0) ms = 0;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var timeoutId;
        return function() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function() {
                return fn.apply(args);
            }, ms);
        };
    };
    Utils1.getSvgPathFromStroke = function getSvgPathFromStroke(stroke) {
        if (!stroke.length) return '';
        var d = stroke.reduce(function(acc, _ref7, i, arr) {
            var x0 = _ref7[0], y0 = _ref7[1];
            var _arr = arr[(i + 1) % arr.length], x1 = _arr[0], y1 = _arr[1];
            acc.push(" " + x0 + "," + y0 + " " + (x0 + x1) / 2 + "," + (y0 + y1) / 2);
            return acc;
        }, [
            'M ',
            stroke[0][0] + "," + stroke[0][1],
            ' Q'
        ]);
        d.push(' Z');
        return d.join('').replaceAll(/(\s?[A-Z]?,?-?[0-9]*\.[0-9]{0,2})(([0-9]|e|-)*)/g, '$1');
    };
    Utils1.isTouchDisplay = function isTouchDisplay() {
        return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    };
    Utils1.isDarwin = function isDarwin() {
        return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
    };
    Utils1.isMobile = function isMobile() {
        return false; // _isMobile().any
    };
    Utils1.metaKey = function metaKey(e) {
        return Utils1.isDarwin() ? e.metaKey : e.ctrlKey;
    };
    Utils1.getClosestPointOnSVGPath = function getClosestPointOnSVGPath(pathNode, point) {
        function distance2(p, point1) {
            var dx = p.x - point1[0];
            var dy = p.y - point1[1];
            return dx * dx + dy * dy;
        }
        var pathLen = pathNode.getTotalLength();
        var p = 8;
        var best = {
        };
        var bestLen = Infinity;
        var bestDist = Infinity;
        var bl = 0;
        var al = 0; // linear scan for coarse approximation
        for(var scan, scanLen = 0, scanDist; scanLen <= pathLen; scanLen += p)if ((scanDist = distance2(scan = pathNode.getPointAtLength(scanLen), point)) < bestDist) {
            best = scan;
            bestLen = scanLen;
            bestDist = scanDist;
        }
         // binary search for precise estimate
        p /= 2;
        while(p > 0.5){
            var before = void 0, after = void 0, bd = void 0, ad = void 0;
            if ((bl = bestLen - p) >= 0 && (bd = distance2(before = pathNode.getPointAtLength(bl), point)) < bestDist) {
                best = before;
                bestLen = bl;
                bestDist = bd;
            } else if ((al = bestLen + p) <= pathLen && (ad = distance2(after = pathNode.getPointAtLength(al), point)) < bestDist) {
                best = after;
                bestLen = al;
                bestDist = ad;
            } else p /= 2;
        }
        return {
            point: [
                best.x,
                best.y
            ],
            distance: bestDist,
            length: (bl + al) / 2,
            t: (bl + al) / 2 / pathLen
        };
    };
    return Utils1;
}();
/* ----------------- Start Copy Here ---------------- */ function getIntersection(message) {
    for(var _len = arguments.length, points = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)points[_key - 1] = arguments[_key];
    var didIntersect = points.length > 0;
    return {
        didIntersect: didIntersect,
        message: message,
        points: points
    };
}
var Intersect = function Intersect1() {
};
_c = Intersect;
Intersect.ray = {
    // Intersect a ray with a ray.
    ray: function ray(p0, n0, p1, n1) {
        var dx = p1[0] - p0[0];
        var dy = p1[1] - p0[1];
        var det = n1[0] * n0[1] - n1[1] * n0[0];
        var u = (dy * n1[0] - dx * n1[1]) / det;
        var v = (dy * n0[0] - dx * n0[1]) / det;
        if (u < 0 || v < 0) return getIntersection('miss');
        var m0 = n0[1] / n0[0];
        var m1 = n1[1] / n1[0];
        var b0 = p0[1] - m0 * p0[0];
        var b1 = p1[1] - m1 * p1[0];
        var x = (b1 - b0) / (m0 - m1);
        var y = m0 * x + b0;
        return Number.isFinite(x) ? getIntersection('intersection', [
            x,
            y
        ]) : getIntersection('parallel');
    },
    // Interseg a ray with a line segment.
    lineSegment: function lineSegment(origin, direction, a1, a2) {
        var x = origin[0], y = origin[1];
        var dx = direction[0], dy = direction[1];
        var x1 = a1[0], y1 = a1[1];
        var x2 = a2[0], y2 = a2[1];
        if (dy / dx !== (y2 - y1) / (x2 - x1)) {
            var d = dx * (y2 - y1) - dy * (x2 - x1);
            if (d !== 0) {
                var r = ((y - y1) * (x2 - x1) - (x - x1) * (y2 - y1)) / d;
                var s = ((y - y1) * dx - (x - x1) * dy) / d;
                if (r >= 0 && s >= 0 && s <= 1) return getIntersection('intersection', [
                    x + r * dx,
                    y + r * dy
                ]);
            }
        }
        return getIntersection('no intersection');
    },
    // Intersect a ray with a rectangle.
    rectangle: function rectangle(origin, direction, point, size) {
        return Intersect.rectangle.ray(point, size, origin, direction);
    },
    // Intersect a ray with an ellipse.
    ellipse: function ellipse(origin, direction, center, rx, ry, rotation) {
        var a1 = origin;
        var a2 = Vec.mul(direction, 999999999);
        return Intersect.lineSegment.ellipse(a1, a2, center, rx, ry, rotation);
    },
    // Intersect a ray with a bounding box.
    bounds: function bounds(origin, direction, _bounds) {
        var minX = _bounds.minX, minY = _bounds.minY, width = _bounds.width, height = _bounds.height;
        return Intersect.ray.rectangle(origin, direction, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    }
};
Intersect.lineSegment = {
    // Intersect a line segment with a ray.
    ray: function ray(a1, a2, origin, direction) {
        return Intersect.ray.lineSegment(origin, direction, a1, a2);
    },
    // Intersect a line segment with a line segment.
    lineSegment: function lineSegment(a1, a2, b1, b2) {
        var AB = Vec.sub(a1, b1);
        var BV = Vec.sub(b2, b1);
        var AV = Vec.sub(a2, a1);
        var ua_t = BV[0] * AB[1] - BV[1] * AB[0];
        var ub_t = AV[0] * AB[1] - AV[1] * AB[0];
        var u_b = BV[1] * AV[0] - BV[0] * AV[1];
        if (ua_t === 0 || ub_t === 0) return getIntersection('coincident');
        if (u_b === 0) return getIntersection('parallel');
        if (u_b !== 0) {
            var ua = ua_t / u_b;
            var ub = ub_t / u_b;
            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) return getIntersection('intersection', Vec.add(a1, Vec.mul(AV, ua)));
        }
        return getIntersection('no intersection');
    },
    // Intersect a line segment with a rectangle
    rectangle: function rectangle(a1, a2, point, size) {
        return Intersect.rectangle.lineSegment(point, size, a1, a2);
    },
    // Intersect a line segment with an arc.
    arc: function arc(a1, a2, center, radius, start, end) {
        var sa = Vec.angle(center, start);
        var ea = Vec.angle(center, end);
        var ellipseTest = Intersect.ellipse.lineSegment(center, radius, radius, 0, a1, a2);
        if (!ellipseTest.didIntersect) return getIntersection('No intersection');
        var points = ellipseTest.points.filter(function(point) {
            return Utils.isAngleBetween(sa, ea, Vec.angle(center, point));
        });
        if (points.length === 0) return getIntersection('No intersection');
        return getIntersection.apply(void 0, [
            'intersection'
        ].concat(points));
    },
    // Intersect a line segment with a circle.
    circle: function circle(a1, a2, c, r) {
        var a = (a2[0] - a1[0]) * (a2[0] - a1[0]) + (a2[1] - a1[1]) * (a2[1] - a1[1]);
        var b = 2 * ((a2[0] - a1[0]) * (a1[0] - c[0]) + (a2[1] - a1[1]) * (a1[1] - c[1]));
        var cc = c[0] * c[0] + c[1] * c[1] + a1[0] * a1[0] + a1[1] * a1[1] - 2 * (c[0] * a1[0] + c[1] * a1[1]) - r * r;
        var deter = b * b - 4 * a * cc;
        if (deter < 0) return getIntersection('outside');
        if (deter === 0) return getIntersection('tangent');
        var e = Math.sqrt(deter);
        var u1 = (-b + e) / (2 * a);
        var u2 = (-b - e) / (2 * a);
        if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {
            if (u1 < 0 && u2 < 0 || u1 > 1 && u2 > 1) return getIntersection('outside');
            else return getIntersection('inside');
        }
        var results = [];
        if (0 <= u1 && u1 <= 1) results.push(Vec.lrp(a1, a2, u1));
        if (0 <= u2 && u2 <= 1) results.push(Vec.lrp(a1, a2, u2));
        return getIntersection.apply(void 0, [
            'intersection'
        ].concat(results));
    },
    // Intersect a line segment with an ellipse.
    ellipse: function ellipse(a1, a2, center, rx, ry, rotation) {
        if (rotation === void 0) rotation = 0;
        // If the ellipse or line segment are empty, return no tValues.
        if (rx === 0 || ry === 0 || Vec.isEqual(a1, a2)) return getIntersection('No intersection');
         // Get the semimajor and semiminor axes.
        rx = rx < 0 ? rx : -rx;
        ry = ry < 0 ? ry : -ry; // Rotate points and translate so the ellipse is centered at the origin.
        a1 = Vec.sub(Vec.rotWith(a1, center, -rotation), center);
        a2 = Vec.sub(Vec.rotWith(a2, center, -rotation), center); // Calculate the quadratic parameters.
        var diff = Vec.sub(a2, a1);
        var A = diff[0] * diff[0] / rx / rx + diff[1] * diff[1] / ry / ry;
        var B = 2 * a1[0] * diff[0] / rx / rx + 2 * a1[1] * diff[1] / ry / ry;
        var C = a1[0] * a1[0] / rx / rx + a1[1] * a1[1] / ry / ry - 1; // Make a list of t values (normalized points on the line where intersections occur).
        var tValues = []; // Calculate the discriminant.
        var discriminant = B * B - 4 * A * C;
        if (discriminant === 0) // One real solution.
        tValues.push(-B / 2 / A);
        else if (discriminant > 0) {
            var root = Math.sqrt(discriminant); // Two real solutions.
            tValues.push((-B + root) / 2 / A);
            tValues.push((-B - root) / 2 / A);
        } // Filter to only points that are on the segment.
        // Solve for points, then counter-rotate points.
        var points = tValues.filter(function(t) {
            return t >= 0 && t <= 1;
        }).map(function(t) {
            return Vec.add(center, Vec.add(a1, Vec.mul(Vec.sub(a2, a1), t)));
        }).map(function(p) {
            return Vec.rotWith(p, center, rotation);
        });
        return getIntersection.apply(void 0, [
            'intersection'
        ].concat(points));
    },
    // Intersect a line segment with a bounding box.
    bounds: function bounds(a1, a2, _bounds2) {
        return Intersect.bounds.lineSegment(_bounds2, a1, a2);
    },
    // Intersect a line segment with a polyline
    polyline: function polyline(a1, a2, points) {
        var intersections = [];
        for(var i = 1; i < points.length + 1; i++){
            var _int = Intersect.lineSegment.lineSegment(a1, a2, points[i - 1], points[i % points.length]);
            if (_int) intersections.push(_int);
        }
        return intersections;
    }
};
Intersect.rectangle = {
    // Intersect a rectangle with a ray.
    ray: function ray(point, size, origin, direction) {
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref) {
            var message = _ref[0], _ref$ = _ref[1], a1 = _ref$[0], a2 = _ref$[1];
            var intersection = Intersect.ray.lineSegment(origin, direction, a1, a2);
            if (intersection) acc.push(getIntersection.apply(void 0, [
                message
            ].concat(intersection.points)));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int2) {
            return _int2.didIntersect;
        });
    },
    // Intersect a rectangle with a line segment.
    lineSegment: function lineSegment(point, size, a1, a2) {
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref2) {
            var message = _ref2[0], _ref2$ = _ref2[1], b1 = _ref2$[0], b2 = _ref2$[1];
            var intersection = Intersect.lineSegment.lineSegment(a1, a2, b1, b2);
            if (intersection) acc.push(getIntersection.apply(void 0, [
                message
            ].concat(intersection.points)));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int3) {
            return _int3.didIntersect;
        });
    },
    // Intersect a rectangle with a rectangle.
    rectangle: function rectangle(point1, size1, point2, size2) {
        var sideIntersections = Utils.getRectangleSides(point1, size1).reduce(function(acc, _ref3) {
            var message = _ref3[0], _ref3$ = _ref3[1], a1 = _ref3$[0], a2 = _ref3$[1];
            var intersections = Intersect.rectangle.lineSegment(point2, size2, a1, a2);
            acc.push.apply(acc, intersections.map(function(_int4) {
                return getIntersection.apply(void 0, [
                    message + " " + _int4.message
                ].concat(_int4.points));
            }));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int5) {
            return _int5.didIntersect;
        });
    },
    // Intersect a rectangle with an arc.
    arc: function arc(point, size, center, radius, start, end) {
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref4) {
            var message = _ref4[0], _ref4$ = _ref4[1], a1 = _ref4$[0], a2 = _ref4$[1];
            var intersection = Intersect.arc.lineSegment(center, radius, start, end, a1, a2);
            if (intersection) acc.push(_extends({
            }, intersection, {
                message: message
            }));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int6) {
            return _int6.didIntersect;
        });
    },
    // Intersect a rectangle with a circle.
    circle: function circle(point, size, c, r) {
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref5) {
            var message = _ref5[0], _ref5$ = _ref5[1], a1 = _ref5$[0], a2 = _ref5$[1];
            var intersection = Intersect.lineSegment.circle(a1, a2, c, r);
            if (intersection) acc.push(_extends({
            }, intersection, {
                message: message
            }));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int7) {
            return _int7.didIntersect;
        });
    },
    // Intersect a rectangle with an ellipse.
    ellipse: function ellipse(point, size, c, rx, ry, rotation) {
        if (rotation === void 0) rotation = 0;
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref6) {
            var message = _ref6[0], _ref6$ = _ref6[1], a1 = _ref6$[0], a2 = _ref6$[1];
            var intersection = Intersect.lineSegment.ellipse(a1, a2, c, rx, ry, rotation);
            if (intersection) acc.push(_extends({
            }, intersection, {
                message: message
            }));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int8) {
            return _int8.didIntersect;
        });
    },
    // Intersect a rectangle with a bounding box.
    bounds: function bounds(point, size, _bounds3) {
        var minX = _bounds3.minX, minY = _bounds3.minY, width = _bounds3.width, height = _bounds3.height;
        return Intersect.rectangle.rectangle(point, size, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    // Intersect a rectangle with a polyline
    polyline: function polyline(point, size, points) {
        var sideIntersections = Utils.getRectangleSides(point, size).reduce(function(acc, _ref7) {
            var message = _ref7[0], _ref7$ = _ref7[1], a1 = _ref7$[0], a2 = _ref7$[1];
            var intersections = Intersect.lineSegment.polyline(a1, a2, points);
            if (intersections.length > 0) acc.push(getIntersection.apply(void 0, [
                message
            ].concat(intersections.flatMap(function(i) {
                return i.points;
            }))));
            return acc;
        }, []);
        return sideIntersections.filter(function(_int9) {
            return _int9.didIntersect;
        });
    }
};
Intersect.arc = {
    // Intersect an arc with a line segment.
    lineSegment: function lineSegment(center, radius, start, end, a1, a2) {
        return Intersect.lineSegment.arc(a1, a2, center, radius, start, end);
    },
    // Intersect an arc with a rectangle.
    rectangle: function rectangle(center, radius, start, end, point, size) {
        return Intersect.rectangle.arc(point, size, center, radius, start, end);
    },
    // Intersect an arc with a bounding box.
    bounds: function bounds(center, radius, start, end, _bounds4) {
        var minX = _bounds4.minX, minY = _bounds4.minY, width = _bounds4.width, height = _bounds4.height;
        return Intersect.arc.rectangle(center, radius, start, end, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    }
};
Intersect.circle = {
    // Intersect a circle with a line segment.
    lineSegment: function lineSegment(c, r, a1, a2) {
        return Intersect.lineSegment.circle(a1, a2, c, r);
    },
    // Intersect a circle with a circle.
    circle: function circle(c1, r1, c2, r2) {
        var dx = c2[0] - c1[0], dy = c2[1] - c1[1];
        var d = Math.sqrt(dx * dx + dy * dy), x = (d * d - r2 * r2 + r1 * r1) / (2 * d), y = Math.sqrt(r1 * r1 - x * x);
        dx /= d;
        dy /= d;
        return getIntersection('intersection', [
            c1[0] + dx * x - dy * y,
            c1[1] + dy * x + dx * y
        ], [
            c1[0] + dx * x + dy * y,
            c1[1] + dy * x - dx * y
        ]);
    },
    // Intersect a circle with a rectangle.
    rectangle: function rectangle(c, r, point, size) {
        return Intersect.rectangle.circle(point, size, c, r);
    },
    // Intersect a circle with a bounding box.
    bounds: function bounds(c, r, _bounds5) {
        var minX = _bounds5.minX, minY = _bounds5.minY, width = _bounds5.width, height = _bounds5.height;
        return Intersect.circle.rectangle(c, r, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    }
};
Intersect.ellipse = {
    // Intersect an ellipse with a ray.
    ray: function ray(center, rx, ry, rotation, point, direction) {
        return Intersect.ray.ellipse(point, direction, center, rx, ry, rotation);
    },
    // Intersect an ellipse with a line segment.
    lineSegment: function lineSegment(center, rx, ry, rotation, a1, a2) {
        if (rotation === void 0) rotation = 0;
        if (rx === ry) return Intersect.lineSegment.circle(a1, a2, center, rx);
        return Intersect.lineSegment.ellipse(a1, a2, center, rx, ry, rotation);
    },
    // Intersect an ellipse with a rectangle.
    rectangle: function rectangle(center, rx, ry, rotation, point, size) {
        if (rotation === void 0) rotation = 0;
        if (rx === ry) return Intersect.rectangle.circle(point, size, center, rx);
        return Intersect.rectangle.ellipse(point, size, center, rx, ry, rotation);
    },
    // Get an intersection between an ellipse and a second ellipse.
    // Adapted from https://gist.github.com/drawable/92792f59b6ff8869d8b1
    ellipse: function ellipse(_c1, _rx1, _ry1, _r1, _c2, _rx2, _ry2, _r2) {
        // TODO
        return getIntersection('no intersection');
    },
    circle: function circle(c, rx, ry, rotation, c2, r2) {
        return Intersect.ellipse.ellipse(c, rx, ry, rotation, c2, r2, r2, 0);
    },
    // Intersect an ellipse with a bounding box.
    bounds: function bounds(c, rx, ry, rotation, _bounds6) {
        var minX = _bounds6.minX, minY = _bounds6.minY, width = _bounds6.width, height = _bounds6.height;
        return Intersect.ellipse.rectangle(c, rx, ry, rotation, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    }
};
Intersect.bounds = {
    ray: function ray(bounds, origin, direction) {
        var minX = bounds.minX, minY = bounds.minY, width = bounds.width, height = bounds.height;
        return Intersect.ray.rectangle(origin, direction, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    lineSegment: function lineSegment(bounds, a1, a2) {
        var minX = bounds.minX, minY = bounds.minY, width = bounds.width, height = bounds.height;
        return Intersect.lineSegment.rectangle(a1, a2, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    rectangle: function rectangle(bounds, point, size) {
        var minX = bounds.minX, minY = bounds.minY, width = bounds.width, height = bounds.height;
        return Intersect.rectangle.rectangle(point, size, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    bounds: function bounds(bounds1, bounds2) {
        return Intersect.rectangle.rectangle([
            bounds1.minX,
            bounds1.minY
        ], [
            bounds1.width,
            bounds1.height
        ], [
            bounds2.minX,
            bounds2.minY
        ], [
            bounds2.width,
            bounds2.height
        ]);
    },
    arc: function arc(bounds1, center, radius, start, end) {
        var minX = bounds1.minX, minY = bounds1.minY, width = bounds1.width, height = bounds1.height;
        return Intersect.arc.rectangle(center, radius, start, end, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    circle: function circle(bounds1, c, r) {
        var minX = bounds1.minX, minY = bounds1.minY, width = bounds1.width, height = bounds1.height;
        return Intersect.circle.rectangle(c, r, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    ellipse: function ellipse(bounds1, c, rx, ry, rotation) {
        if (rotation === void 0) rotation = 0;
        var minX = bounds1.minX, minY = bounds1.minY, width = bounds1.width, height = bounds1.height;
        return Intersect.ellipse.rectangle(c, rx, ry, rotation, [
            minX,
            minY
        ], [
            width,
            height
        ]);
    },
    polyline: function polyline(bounds1, points) {
        return Intersect.polyline.bounds(points, bounds1);
    }
};
Intersect.polyline = {
    // Intersect a polyline with a line segment.
    lineSegment: function lineSegment(points, a1, a2) {
        return Intersect.lineSegment.polyline(a1, a2, points);
    },
    // Interesct a polyline with a rectangle.
    rectangle: function rectangle(points, point, size) {
        return Intersect.rectangle.polyline(point, size, points);
    },
    // Intersect a polyline with a bounding box.
    bounds: function bounds(points, _bounds7) {
        return Intersect.rectangle.polyline([
            _bounds7.minX,
            _bounds7.minY
        ], [
            _bounds7.width,
            _bounds7.height
        ], points);
    }
};
var Svg = function Svg1() {
};
_c1 = Svg;
Svg.ellipse = function(A, r) {
    return "M " + (A[0] - r) + "," + A[1] + "\n      a " + r + "," + r + " 0 1,0 " + r * 2 + ",0\n      a " + r + "," + r + " 0 1,0 -" + r * 2 + ",0 ";
};
Svg.moveTo = function(v) {
    return "M " + v[0] + "," + v[1] + " ";
};
Svg.lineTo = function(v) {
    return "L " + v[0] + "," + v[1] + " ";
};
Svg.line = function(a) {
    for(var _len = arguments.length, pts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)pts[_key - 1] = arguments[_key];
    return Svg.moveTo(a) + pts.map(function(p) {
        return Svg.lineTo(p);
    }).join();
};
Svg.hLineTo = function(v) {
    return "H " + v[0] + "," + v[1] + " ";
};
Svg.vLineTo = function(v) {
    return "V " + v[0] + "," + v[1] + " ";
};
Svg.bezierTo = function(A, B, C) {
    return "C " + A[0] + "," + A[1] + " " + B[0] + "," + B[1] + " " + C[0] + "," + C[1] + " ";
};
Svg.arcTo = function(C, r, A, B) {
    return [
        Svg.moveTo(A),
        'A',
        r,
        r,
        0,
        Utils.getSweep(C, A, B) > 0 ? '1' : '0',
        0,
        B[0],
        B[1]
    ].join(' ');
};
Svg.closePath = function() {
    return 'Z';
};
Svg.rectTo = function(A) {
    return [
        'R',
        A[0],
        A[1]
    ].join(' ');
};
Svg.getPointAtLength = function(path, length) {
    var point = path.getPointAtLength(length);
    return [
        point.x,
        point.y
    ];
};
var DOUBLE_CLICK_DURATION = 250;
var Inputs = /*#__PURE__*/ function() {
    function Inputs1() {
        var _this = this;
        this.keys = {
        };
        this.pointerUpTime = 0;
        this.panStart = function(e) {
            var _this$pointer, _this$pointer2;
            var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
            var info = {
                target: 'wheel',
                pointerId: ((_this$pointer = _this.pointer) == null ? void 0 : _this$pointer.pointerId) || 0,
                origin: ((_this$pointer2 = _this.pointer) == null ? void 0 : _this$pointer2.origin) || [
                    0,
                    0
                ],
                delta: [
                    0,
                    0
                ],
                pressure: 0.5,
                point: Inputs1.getPoint(e),
                shiftKey: shiftKey,
                ctrlKey: ctrlKey,
                metaKey: metaKey,
                altKey: altKey
            };
            _this.pointer = info;
            return info;
        };
        this.pan = function(delta, e) {
            if (!_this.pointer || _this.pointer.target !== 'wheel') return _this.panStart(e);
            var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
            var prev = _this.pointer;
            var point = Inputs1.getPoint(e);
            var info = _extends({
            }, prev, {
                target: 'wheel',
                delta: delta,
                point: Vec.sub(point, delta),
                shiftKey: shiftKey,
                ctrlKey: ctrlKey,
                metaKey: metaKey,
                altKey: altKey
            });
            _this.pointer = info;
            return info;
        };
        this.canAccept = function(_pointerId) {
            return true; //   return (
        //     this.activePointerId === undefined || this.activePointerId === pointerId
        //   )
        };
        this.keydown = function(e) {
            var _this$pointer3, _this$pointer4;
            var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
            _this.keys[e.key] = true;
            return {
                point: ((_this$pointer3 = _this.pointer) == null ? void 0 : _this$pointer3.point) || [
                    0,
                    0
                ],
                origin: ((_this$pointer4 = _this.pointer) == null ? void 0 : _this$pointer4.origin) || [
                    0,
                    0
                ],
                key: e.key,
                keys: Object.keys(_this.keys),
                shiftKey: shiftKey,
                ctrlKey: ctrlKey,
                metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
                altKey: altKey
            };
        };
        this.keyup = function(e) {
            var _this$pointer5, _this$pointer6;
            var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
            delete _this.keys[e.key];
            return {
                point: ((_this$pointer5 = _this.pointer) == null ? void 0 : _this$pointer5.point) || [
                    0,
                    0
                ],
                origin: ((_this$pointer6 = _this.pointer) == null ? void 0 : _this$pointer6.origin) || [
                    0,
                    0
                ],
                key: e.key,
                keys: Object.keys(_this.keys),
                shiftKey: shiftKey,
                ctrlKey: ctrlKey,
                metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
                altKey: altKey
            };
        };
    }
    var _proto = Inputs1.prototype;
    _proto.touchStart = function touchStart(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        e.preventDefault();
        var touch = e.changedTouches[0];
        var info = {
            target: target,
            pointerId: touch.identifier,
            origin: Inputs1.getPoint(touch),
            delta: [
                0,
                0
            ],
            point: Inputs1.getPoint(touch),
            pressure: Inputs1.getPressure(touch),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        };
        this.pointer = info;
        return info;
    };
    _proto.touchMove = function touchMove(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        e.preventDefault();
        var touch = e.changedTouches[0];
        var prev = this.pointer;
        var point = Inputs1.getPoint(touch);
        var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [
            0,
            0
        ];
        var info = _extends({
            origin: point
        }, prev, {
            target: target,
            pointerId: touch.identifier,
            point: point,
            delta: delta,
            pressure: Inputs1.getPressure(touch),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        });
        this.pointer = info;
        return info;
    };
    _proto.pointerDown = function pointerDown(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        var point = Inputs1.getPoint(e);
        var info = {
            target: target,
            pointerId: e.pointerId,
            origin: point,
            point: point,
            delta: [
                0,
                0
            ],
            pressure: Inputs1.getPressure(e),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        };
        this.pointer = info;
        return info;
    };
    _proto.pointerEnter = function pointerEnter(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        var point = Inputs1.getPoint(e);
        var info = {
            target: target,
            pointerId: e.pointerId,
            origin: point,
            delta: [
                0,
                0
            ],
            point: point,
            pressure: Inputs1.getPressure(e),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        };
        this.pointer = info;
        return info;
    };
    _proto.pointerMove = function pointerMove(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        var prev = this.pointer;
        var point = Inputs1.getPoint(e);
        var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [
            0,
            0
        ];
        var info = _extends({
            origin: point
        }, prev, {
            target: target,
            pointerId: e.pointerId,
            point: point,
            delta: delta,
            pressure: Inputs1.getPressure(e),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        });
        this.pointer = info;
        return info;
    };
    _proto.pointerUp = function pointerUp(e, target) {
        var shiftKey = e.shiftKey, ctrlKey = e.ctrlKey, metaKey = e.metaKey, altKey = e.altKey;
        var prev = this.pointer;
        var point = Inputs1.getPoint(e);
        var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [
            0,
            0
        ];
        var info = _extends({
            origin: point
        }, prev, {
            target: target,
            pointerId: e.pointerId,
            point: point,
            delta: delta,
            pressure: Inputs1.getPressure(e),
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        });
        this.pointer = info;
        this.pointerUpTime = Date.now();
        return info;
    };
    _proto.isDoubleClick = function isDoubleClick() {
        if (!this.pointer) return;
        var _this$pointer7 = this.pointer, origin = _this$pointer7.origin, point = _this$pointer7.point;
        return Date.now() - this.pointerUpTime < DOUBLE_CLICK_DURATION && Vec.dist(origin, point) < 4;
    };
    _proto.clear = function clear() {
        this.pointer = undefined;
    };
    _proto.resetDoubleClick = function resetDoubleClick() {
        this.pointerUpTime = 0;
    };
    _proto.pinch = function pinch(point, origin) {
        var _this$keys = this.keys, shiftKey = _this$keys.shiftKey, ctrlKey = _this$keys.ctrlKey, metaKey = _this$keys.metaKey, altKey = _this$keys.altKey;
        var prev = this.pointer;
        var delta = Vec.sub(origin, point);
        var info = {
            pointerId: 0,
            target: 'pinch',
            origin: (prev == null ? void 0 : prev.origin) || Vec.round(point),
            delta: delta,
            point: Vec.round(point),
            pressure: 0.5,
            shiftKey: shiftKey,
            ctrlKey: ctrlKey,
            metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
            altKey: altKey
        };
        this.pointer = info;
        return info;
    };
    _proto.reset = function reset() {
        this.pointerUpTime = 0;
        this.pointer = undefined;
        this.keyboard = undefined;
        this.keys = {
        };
    };
    Inputs1.getPoint = function getPoint(e) {
        return [
            Number(e.clientX.toPrecision(5)),
            Number(e.clientY.toPrecision(5))
        ];
    };
    Inputs1.getPressure = function getPressure(e) {
        return 'pressure' in e ? Number(e.pressure.toPrecision(5)) || 0.5 : 0.5;
    };
    Inputs1.commandKey = function commandKey() {
        return Utils.isDarwin() ? '⌘' : 'Ctrl';
    };
    return Inputs1;
}();
var inputs = /*#__PURE__*/ new Inputs();
function useZoomEvents() {
    _s1();
    var rPinchDa = _react.useRef(undefined);
    var rPinchPoint = _react.useRef(undefined);
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    _reactUseGesture.useGesture({
        onWheel: function onWheel(_ref) {
            var e = _ref.event, delta = _ref.delta;
            var info = inputs.pan(delta, e);
            if (e.ctrlKey) {
                callbacks.onZoom == null || callbacks.onZoom(info, e);
                return;
            } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            callbacks.onPan == null || callbacks.onPan(info, e);
        },
        onPinch: function onPinch(_ref2) {
            var pinching = _ref2.pinching, da = _ref2.da, origin = _ref2.origin, e = _ref2.event;
            if (!pinching) {
                var _info = inputs.pinch(origin, origin);
                callbacks.onPinchEnd == null || callbacks.onPinchEnd(_info, e);
                rPinchDa.current = undefined;
                rPinchPoint.current = undefined;
                return;
            }
            if (rPinchPoint.current === undefined) {
                var _info2 = inputs.pinch(origin, origin);
                callbacks.onPinchStart == null || callbacks.onPinchStart(_info2, e);
                rPinchDa.current = da;
                rPinchPoint.current = origin;
            } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var _Vec$sub = Vec.sub(rPinchDa.current, da), distanceDelta = _Vec$sub[0];
            var info = inputs.pinch(rPinchPoint.current, origin); // Naming things is hard
            callbacks.onPinch == null || callbacks.onPinch(_extends({
            }, info, {
                point: origin,
                origin: rPinchPoint.current,
                delta: [].concat(info.delta, [
                    distanceDelta
                ])
            }), e);
            rPinchDa.current = da;
            rPinchPoint.current = origin;
        }
    }, {
        domTarget: typeof document === 'undefined' ? undefined : document.body,
        eventOptions: {
            passive: false
        }
    });
}
_s1(useZoomEvents, "CP8CMZ0L+U/yvk3Vb6XSVtU+yr0=", false, function() {
    return [
        useTLContext, _reactUseGesture.useGesture];
});
function useSafariFocusOutFix() {
    _s2();
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    _react.useEffect(function() {
        function handleFocusOut() {
            callbacks.onBlurEditingShape == null || callbacks.onBlurEditingShape();
        }
        if (!Utils.isMobile()) return;
        document.addEventListener('focusout', handleFocusOut);
        return function() {
            return document.removeEventListener('focusout', handleFocusOut);
        };
    }, [
        callbacks
    ]);
}
_s2(useSafariFocusOutFix, "RfZ4EYGtW09iu9vDCQr0F9SO0oE=", false, function() {
    return [
        useTLContext
    ];
});
function useCanvasEvents() {
    _s3();
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    var onPointerDown = _react.useCallback(function(e) {
        e.currentTarget.setPointerCapture(e.pointerId);
        if (e.button === 0) {
            var info = inputs.pointerDown(e, 'canvas');
            callbacks.onPointCanvas == null || callbacks.onPointCanvas(info, e);
            callbacks.onPointerDown == null || callbacks.onPointerDown(info, e);
        }
    }, [
        callbacks
    ]);
    var onPointerMove = _react.useCallback(function(e) {
        e.stopPropagation();
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _info = inputs.pointerMove(e, 'canvas');
            callbacks.onDragCanvas == null || callbacks.onDragCanvas(_info, e);
        }
        var info = inputs.pointerMove(e, 'canvas');
        callbacks.onPointerMove == null || callbacks.onPointerMove(info, e);
    }, [
        callbacks
    ]);
    var onPointerUp = _react.useCallback(function(e) {
        e.stopPropagation();
        var isDoubleClick = inputs.isDoubleClick();
        var info = inputs.pointerUp(e, 'canvas');
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _e$currentTarget;
            (_e$currentTarget = e.currentTarget) == null || _e$currentTarget.releasePointerCapture(e.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) callbacks.onDoubleClickCanvas == null || callbacks.onDoubleClickCanvas(info, e);
        callbacks.onReleaseCanvas == null || callbacks.onReleaseCanvas(info, e);
        callbacks.onPointerUp == null || callbacks.onPointerUp(info, e);
    }, [
        callbacks
    ]);
    return {
        onPointerDown: onPointerDown,
        onPointerMove: onPointerMove,
        onPointerUp: onPointerUp
    };
}
_s3(useCanvasEvents, "M0X5X7DNl9rrYAX83r9dCaElIxo=", false, function() {
    return [
        useTLContext
    ];
});
function useShapeEvents(id, disable) {
    _s4();
    if (disable === void 0) disable = false;
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    var onPointerDown = _react.useCallback(function(e) {
        var _e$currentTarget;
        if (disable) return;
        e.stopPropagation();
        (_e$currentTarget = e.currentTarget) == null || _e$currentTarget.setPointerCapture(e.pointerId);
        var info = inputs.pointerDown(e, id);
        callbacks.onPointShape == null || callbacks.onPointShape(info, e);
        callbacks.onPointerDown == null || callbacks.onPointerDown(info, e);
    }, [
        callbacks,
        id,
        disable
    ]);
    var onPointerUp = _react.useCallback(function(e) {
        if (disable) return;
        e.stopPropagation();
        var isDoubleClick = inputs.isDoubleClick();
        var info = inputs.pointerUp(e, id);
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _e$currentTarget2;
            (_e$currentTarget2 = e.currentTarget) == null || _e$currentTarget2.releasePointerCapture(e.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) callbacks.onDoubleClickShape == null || callbacks.onDoubleClickShape(info, e);
        callbacks.onReleaseShape == null || callbacks.onReleaseShape(info, e);
        callbacks.onPointerUp == null || callbacks.onPointerUp(info, e);
    }, [
        callbacks,
        id,
        disable
    ]);
    var onPointerMove = _react.useCallback(function(e) {
        if (disable) return;
        e.stopPropagation();
        if (inputs.pointer && e.pointerId !== inputs.pointer.pointerId) return;
        var info = inputs.pointerMove(e, id);
        if (e.currentTarget.hasPointerCapture(e.pointerId)) callbacks.onDragShape == null || callbacks.onDragShape(info, e);
        callbacks.onPointerMove == null || callbacks.onPointerMove(info, e);
    }, [
        callbacks,
        id,
        disable
    ]);
    var onPointerEnter = _react.useCallback(function(e) {
        if (disable) return;
        var info = inputs.pointerEnter(e, id);
        callbacks.onHoverShape == null || callbacks.onHoverShape(info, e);
    }, [
        callbacks,
        id,
        disable
    ]);
    var onPointerLeave = _react.useCallback(function(e) {
        if (disable) return;
        var info = inputs.pointerEnter(e, id);
        callbacks.onUnhoverShape == null || callbacks.onUnhoverShape(info, e);
    }, [
        callbacks,
        id,
        disable
    ]);
    var onTouchStart = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    var onTouchEnd = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    return {
        onPointerDown: onPointerDown,
        onPointerUp: onPointerUp,
        onPointerEnter: onPointerEnter,
        onPointerMove: onPointerMove,
        onPointerLeave: onPointerLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd
    };
}
_s4(useShapeEvents, "LZRePA/OV1ZY+2/UC21OvLbYyvs=", false, function() {
    return [
        useTLContext
    ];
});
function addToShapeTree(shape, branch, shapes, selectedIds, info) {
    var node = {
        shape: shape,
        isHovered: info.hoveredId === shape.id,
        isCurrentParent: info.currentParentId === shape.id,
        isEditing: info.editingId === shape.id,
        isBinding: info.bindingId === shape.id,
        isDarkMode: info.isDarkMode || false,
        isSelected: selectedIds.includes(shape.id)
    };
    branch.push(node);
    if (shape.children) {
        node.children = [];
        shape.children.map(function(id) {
            return shapes[id];
        }).sort(function(a, b) {
            return a.childIndex - b.childIndex;
        }).forEach(function(childShape) {
            return addToShapeTree(childShape, node.children, shapes, selectedIds, info);
        });
    }
}
function useShapeTree(page, pageState, shapeUtils, info, onChange) {
    _s5();
    if (info === void 0) info = {
    };
    var rPreviousCount = _react.useRef(0);
    if (typeof window === 'undefined') return [];
    var selectedIds = pageState.selectedIds, camera = pageState.camera; // Find viewport
    var _Vec$sub = Vec.sub(Vec.div([
        0,
        0
    ], camera.zoom), camera.point), minX = _Vec$sub[0], minY = _Vec$sub[1];
    var _Vec$sub2 = Vec.sub(Vec.div([
        window.innerWidth,
        window.innerHeight
    ], camera.zoom), camera.point), maxX = _Vec$sub2[0], maxY = _Vec$sub2[1];
    var viewport = {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY,
        height: maxX - minX,
        width: maxY - minY
    }; // Filter shapes that are in view
    var shapesToRender = Object.values(page.shapes).filter(function(shape) {
        if (shape.parentId !== page.id) return false; // Don't hide selected shapes (this breaks certain drag interactions)
        if (pageState.selectedIds.includes(shape.id)) return true;
        var shapeBounds = shapeUtils[shape.type].getBounds(shape);
        return Utils.boundsContain(viewport, shapeBounds) || Utils.boundsCollide(viewport, shapeBounds);
    }); // Call onChange callback when number of rendering shapes changes
    if (shapesToRender.length !== rPreviousCount.current) {
        setTimeout(function() {
            return onChange == null ? void 0 : onChange(shapesToRender.map(function(shape) {
                return shape.id;
            }));
        }, 0);
        rPreviousCount.current = shapesToRender.length;
    } // Populate the shape tree
    var tree = [];
    shapesToRender.sort(function(a, b) {
        return a.childIndex - b.childIndex;
    }).forEach(function(shape) {
        return addToShapeTree(shape, tree, page.shapes, selectedIds, info);
    });
    return tree;
}
_s5(useShapeTree, "+4qkwau4gYV6heh71/v7W8Kv3Xs=");
var _templateObject;
var styles = /*#__PURE__*/ new Map();
function makeCssTheme(prefix, theme) {
    return Object.keys(theme).reduce(function(acc, key) {
        var value = theme[key];
        if (value) return acc + ("--" + prefix + "-" + key + ": " + value + ";\n");
        return acc;
    }, '');
}
function useTheme(prefix, theme, selector) {
    _s6();
    if (selector === void 0) selector = ':root';
    _react.useLayoutEffect(function() {
        var style = document.createElement('style');
        var cssTheme = makeCssTheme(prefix, theme);
        style.setAttribute('id', prefix + "-theme");
        style.setAttribute('data-selector', selector);
        style.innerHTML = "\n        " + selector + " {\n          " + cssTheme + "\n        }\n      ";
        document.head.appendChild(style);
        return function() {
            if (style && document.head.contains(style)) document.head.removeChild(style);
        };
    }, [
        prefix,
        theme,
        selector
    ]);
}
_s6(useTheme, "n7/vCynhJvM+pLkyL2DMQUF0odM=");
function useStyle(uid, rules) {
    _s7();
    _react.useLayoutEffect(function() {
        if (styles.get(uid)) return;
        var style = document.createElement('style');
        style.innerHTML = rules;
        style.setAttribute('id', uid);
        document.head.appendChild(style);
        styles.set(uid, style);
        return function() {
            if (style && document.head.contains(style)) {
                document.head.removeChild(style);
                styles["delete"](uid);
            }
        };
    }, [
        uid,
        rules
    ]);
}
_s7(useStyle, "n7/vCynhJvM+pLkyL2DMQUF0odM=");
var css = function css1(strings) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return strings.reduce(function(acc, string, index) {
        return acc + string + (index < args.length ? args[index] : '');
    }, '');
};
var defaultTheme = {
    brushFill: 'rgba(0,0,0,.05)',
    brushStroke: 'rgba(0,0,0,.25)',
    selectStroke: 'rgb(66, 133, 244)',
    selectFill: 'rgba(65, 132, 244, 0.05)',
    background: 'rgb(248, 249, 250)',
    foreground: 'rgb(51, 51, 51)'
};
var tlcss = /*#__PURE__*/ css(_templateObject || (_templateObject = /*#__PURE__*/ _taggedTemplateLiteralLoose([
    "\n  :root {\n    --tl-zoom: 1;\n    --tl-scale: calc(1 / var(--tl-zoom));\n  }\n\n  .tl-counter-scaled {\n    transform: scale(var(--tl-scale));\n  }\n\n  .tl-dashed {\n    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));\n  }\n\n  .tl-transparent {\n    fill: transparent;\n    stroke: transparent;\n  }\n\n  .tl-cursor-ns {\n    cursor: ns-resize;\n  }\n\n  .tl-cursor-ew {\n    cursor: ew-resize;\n  }\n\n  .tl-cursor-nesw {\n    cursor: nesw-resize;\n  }\n\n  .tl-cursor-nwse {\n    cursor: nwse-resize;\n  }\n\n  .tl-corner-handle {\n    stroke: var(--tl-selectStroke);\n    fill: var(--tl-background);\n    stroke-width: calc(1.5px * var(--tl-scale));\n  }\n\n  .tl-rotate-handle {\n    stroke: var(--tl-selectStroke);\n    fill: var(--tl-background);\n    stroke-width: calc(1.5px * var(--tl-scale));\n    cursor: grab;\n  }\n\n  .tl-handle {\n    transform: scale(var(--tl-scale));\n    fill: var(--tl-background);\n    stroke: var(--tl-stroke);\n    stroke-width: calc(2px * var(--tl-scale));\n    pointer-events: all;\n  }\n\n  .tl-binding {\n    fill: var(--tl-selectFill);\n    stroke: var(--tl-selectStroke);\n    stroke-width: calc(1px * var(--tl-scale));\n    pointer-events: none;\n  }\n\n  .tl-bounds-center {\n    fill: transparent;\n    stroke: var(--tl-selectStroke);\n    stroke-width: calc(1.5px * var(--tl-scale));\n  }\n\n  .tl-bounds-bg {\n    stroke: none;\n    fill: var(--tl-selectFill);\n    pointer-events: all;\n  }\n\n  .tl-brush {\n    fill: var(--tl-brushFill);\n    stroke: var(--tl-brushStroke);\n    stroke-width: calc(1px * var(--tl-scale));\n    pointer-events: none;\n  }\n\n  .tl-canvas {\n    position: fixed;\n    overflow: hidden;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    touch-action: none;\n    z-index: 100;\n    pointer-events: all;\n  }\n\n  .tl-container {\n    position: relative;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    padding: 0px;\n    margin: 0px;\n    overscroll-behavior: none;\n    overscroll-behavior-x: none;\n    background-color: var(--tl-background);\n  }\n\n  .tl-container * {\n    user-select: none;\n  }\n\n  .tl-dot {\n    fill: var(--tl-background);\n    stroke: var(--tl-foreground);\n    stroke-width: 2px;\n  }\n\n  .tl-handle {\n    fill: var(--tl-background);\n    stroke: var(--tl-selectStroke);\n    stroke-width: calc(1.5px * var(--tl-scale));\n  }\n\n  .tl-handle-bg {\n    fill: transparent;\n    stroke: none;\n    opacity: 0.2;\n    pointer-events: all;\n  }\n\n  .tl-handle-bg:hover {\n    fill: var(--tl-selected-fill);\n  }\n\n  .tl-handle-bg:hover > * {\n    stroke: var(--tl-selected-fill);\n  }\n\n  .tl-handle-bg:active {\n    fill: var(--tl-selected-fill);\n    stroke: var(--tl-selected-fill);\n  }\n\n  .tl-binding-indicator {\n    stroke-width: calc(3px * var(--tl-scale));\n    fill: none;\n    stroke: var(--tl-selected);\n  }\n\n  .tl-shape-group {\n    outline: none;\n  }\n\n  .tl-shape-group > *[data-shy='true'] {\n    opacity: 0;\n  }\n\n  .tl-shape-group:hover > *[data-shy='true'] {\n    opacity: 1;\n  }\n\n  .tl-current-parent > *[data-shy='true'] {\n    opacity: 1;\n  }\n"
])));
function useTLTheme(theme) {
    _s8();
    var _React$useState = _react.useState(function() {
        return _extends({
        }, defaultTheme, theme);
    }), tltheme = _React$useState[0];
    useTheme('tl', tltheme);
    useStyle('tl-canvas', tlcss);
}
_s8(useTLTheme, "CeNXHbLec3rvBHFJPdx6qX2A2os=", false, function() {
    return [
        useTheme,
        useStyle
    ];
});
function useBoundsHandleEvents(id) {
    _s9();
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    var onPointerDown = _react.useCallback(function(e) {
        var _e$currentTarget;
        e.stopPropagation();
        (_e$currentTarget = e.currentTarget) == null || _e$currentTarget.setPointerCapture(e.pointerId);
        var info = inputs.pointerDown(e, id);
        callbacks.onPointBoundsHandle == null || callbacks.onPointBoundsHandle(info, e);
        callbacks.onPointerDown == null || callbacks.onPointerDown(info, e);
    }, [
        callbacks,
        id
    ]);
    var onPointerUp = _react.useCallback(function(e) {
        e.stopPropagation();
        var isDoubleClick = inputs.isDoubleClick();
        var info = inputs.pointerUp(e, id);
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _e$currentTarget2;
            (_e$currentTarget2 = e.currentTarget) == null || _e$currentTarget2.releasePointerCapture(e.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) callbacks.onDoubleClickBoundsHandle == null || callbacks.onDoubleClickBoundsHandle(info, e);
        callbacks.onReleaseBoundsHandle == null || callbacks.onReleaseBoundsHandle(info, e);
        callbacks.onPointerUp == null || callbacks.onPointerUp(info, e);
    }, [
        callbacks,
        id
    ]);
    var onPointerMove = _react.useCallback(function(e) {
        // e.stopPropagation()
        if (e.currentTarget.hasPointerCapture(e.pointerId)) callbacks.onDragBoundsHandle == null || callbacks.onDragBoundsHandle(inputs.pointerMove(e, id), e);
        var info = inputs.pointerMove(e, id);
        callbacks.onPointerMove == null || callbacks.onPointerMove(info, e);
        e.stopPropagation();
    }, [
        callbacks,
        id
    ]);
    var onPointerEnter = _react.useCallback(function(e) {
        callbacks.onHoverBoundsHandle == null || callbacks.onHoverBoundsHandle(inputs.pointerEnter(e, id), e);
    }, [
        callbacks,
        id
    ]);
    var onPointerLeave = _react.useCallback(function(e) {
        callbacks.onUnhoverBoundsHandle == null || callbacks.onUnhoverBoundsHandle(inputs.pointerEnter(e, id), e);
    }, [
        callbacks,
        id
    ]);
    var onTouchStart = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    var onTouchEnd = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    return {
        onPointerDown: onPointerDown,
        onPointerUp: onPointerUp,
        onPointerEnter: onPointerEnter,
        onPointerMove: onPointerMove,
        onPointerLeave: onPointerLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd
    };
}
_s9(useBoundsHandleEvents, "LZRePA/OV1ZY+2/UC21OvLbYyvs=", false, function() {
    return [
        useTLContext
    ];
});
function useCameraCss(pageState) {
    _s10();
    var rGroup = _react.useRef(null); // Update the tl-zoom CSS variable when the zoom changes
    _react.useEffect(function() {
        document.documentElement.style.setProperty('--tl-zoom', pageState.camera.zoom.toString());
    }, [
        pageState.camera.zoom
    ]); // Update the group's position when the camera moves or zooms
    _react.useEffect(function() {
        var _rGroup$current;
        var _pageState$camera = pageState.camera, zoom = _pageState$camera.zoom, point = _pageState$camera.point;
        (_rGroup$current = rGroup.current) == null || _rGroup$current.setAttribute('transform', "scale(" + zoom + ") translate(" + point[0] + " " + point[1] + ")");
    }, [
        pageState.camera
    ]);
    return rGroup;
}
_s10(useCameraCss, "DUFtzjGMwKB1g8ERurLcBGhDJ+8=");
function useRenderOnResize() {
    _s11();
    var _React$useReducer = _react.useReducer(function(x) {
        return x + 1;
    }, 0), forceUpdate = _React$useReducer[1];
    _react.useEffect(function() {
        var debouncedUpdate = Utils.debounce(forceUpdate, 96);
        window.addEventListener('resize', debouncedUpdate);
        return function() {
            window.removeEventListener('resize', debouncedUpdate);
        };
    }, []);
}
_s11(useRenderOnResize, "h0wqI8i5kWJ9eBu76BXW7Wnvwsc=");
function useSelection(page, pageState, shapeUtils) {
    var selectedIds = pageState.selectedIds;
    var bounds = undefined;
    var rotation = 0;
    var isLocked = false;
    if (selectedIds.length === 1) {
        var id = selectedIds[0];
        var shape = page.shapes[id];
        rotation = shape.rotation || 0;
        isLocked = shape.isLocked || false;
        bounds = shapeUtils[shape.type].getBounds(shape);
    } else if (selectedIds.length > 1) {
        var selectedShapes = selectedIds.map(function(id) {
            return page.shapes[id];
        });
        rotation = 0;
        isLocked = selectedShapes.every(function(shape) {
            return shape.isLocked;
        });
        bounds = selectedShapes.reduce(function(acc, shape, i) {
            if (i === 0) return shapeUtils[shape.type].getRotatedBounds(shape);
            return Utils.getExpandedBounds(acc, shapeUtils[shape.type].getRotatedBounds(shape));
        }, {
        });
    }
    return {
        bounds: bounds,
        rotation: rotation,
        isLocked: isLocked
    };
}
function useHandleEvents(id) {
    _s12();
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    var onPointerDown = _react.useCallback(function(e) {
        var _e$currentTarget;
        e.stopPropagation();
        (_e$currentTarget = e.currentTarget) == null || _e$currentTarget.setPointerCapture(e.pointerId);
        var info = inputs.pointerDown(e, id);
        callbacks.onPointHandle == null || callbacks.onPointHandle(info, e);
        callbacks.onPointerDown == null || callbacks.onPointerDown(info, e);
    }, [
        callbacks,
        id
    ]);
    var onPointerUp = _react.useCallback(function(e) {
        e.stopPropagation();
        var isDoubleClick = inputs.isDoubleClick();
        var info = inputs.pointerUp(e, 'bounds');
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _e$currentTarget2;
            (_e$currentTarget2 = e.currentTarget) == null || _e$currentTarget2.releasePointerCapture(e.pointerId);
            if (isDoubleClick && !(info.altKey || info.metaKey)) callbacks.onDoubleClickHandle == null || callbacks.onDoubleClickHandle(info, e);
            callbacks.onReleaseHandle == null || callbacks.onReleaseHandle(info, e);
        }
        callbacks.onPointerUp == null || callbacks.onPointerUp(info, e);
    }, [
        callbacks
    ]);
    var onPointerMove = _react.useCallback(function(e) {
        // e.stopPropagation()
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _info = inputs.pointerMove(e, id);
            callbacks.onDragHandle == null || callbacks.onDragHandle(_info, e);
        }
        var info = inputs.pointerMove(e, id);
        callbacks.onPointerMove == null || callbacks.onPointerMove(info, e);
        e.stopPropagation();
    }, [
        callbacks,
        id
    ]);
    var onPointerEnter = _react.useCallback(function(e) {
        var info = inputs.pointerEnter(e, id);
        callbacks.onHoverHandle == null || callbacks.onHoverHandle(info, e);
    }, [
        callbacks,
        id
    ]);
    var onPointerLeave = _react.useCallback(function(e) {
        var info = inputs.pointerEnter(e, id);
        callbacks.onUnhoverHandle == null || callbacks.onUnhoverHandle(info, e);
    }, [
        callbacks,
        id
    ]);
    var onTouchStart = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    var onTouchEnd = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    return {
        onPointerDown: onPointerDown,
        onPointerUp: onPointerUp,
        onPointerEnter: onPointerEnter,
        onPointerMove: onPointerMove,
        onPointerLeave: onPointerLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd
    };
}
_s12(useHandleEvents, "LZRePA/OV1ZY+2/UC21OvLbYyvs=", false, function() {
    return [
        useTLContext
    ];
});
function useHandles(page, pageState) {
    var selectedIds = pageState.selectedIds;
    var shapeWithHandles = undefined;
    if (selectedIds.length === 1) {
        var id = selectedIds[0];
        var shape = page.shapes[id];
        if (shape.handles !== undefined) shapeWithHandles = shape;
    }
    return {
        shapeWithHandles: shapeWithHandles
    };
}
var ErrorFallback = /*#__PURE__*/ _s13(_react.memo(_c2 = _s13(function(_ref) {
    _s13();
    var error = _ref.error, resetErrorBoundary = _ref.resetErrorBoundary;
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    _react.useEffect(function() {
        callbacks.onError == null || callbacks.onError(error);
        console.error(error);
    }, [
        error,
        resetErrorBoundary,
        callbacks
    ]);
    return null;
}, "RfZ4EYGtW09iu9vDCQr0F9SO0oE=", false, function() {
    return [
        useTLContext
    ];
})), "RfZ4EYGtW09iu9vDCQr0F9SO0oE=", false, function() {
    return [
        useTLContext
    ];
});
_c3 = ErrorFallback;
var BrushUpdater = /*#__PURE__*/ function() {
    function BrushUpdater1() {
        this.ref = /*#__PURE__*/ _react.createRef();
        this.isControlled = false;
    }
    var _proto = BrushUpdater1.prototype;
    _proto.set = function set(bounds) {
        var _this$ref;
        if (!this.isControlled) this.isControlled = true;
        if (!bounds) {
            this.clear();
            return;
        }
        var elm = (_this$ref = this.ref) == null ? void 0 : _this$ref.current;
        if (!elm) return;
        elm.setAttribute('opacity', '1');
        elm.setAttribute('x', bounds.minX.toString());
        elm.setAttribute('y', bounds.minY.toString());
        elm.setAttribute('width', bounds.width.toString());
        elm.setAttribute('height', bounds.height.toString());
    };
    _proto.clear = function clear() {
        var _this$ref2;
        var elm = (_this$ref2 = this.ref) == null ? void 0 : _this$ref2.current;
        if (!elm) return;
        elm.setAttribute('opacity', '0');
        elm.setAttribute('width', '0');
        elm.setAttribute('height', '0');
    };
    return BrushUpdater1;
}();
var brushUpdater = /*#__PURE__*/ new BrushUpdater();
var Brush = /*#__PURE__*/ _react.memo(function(_ref) {
    return(/*#__PURE__*/ _react.createElement("rect", {
        ref: brushUpdater.ref,
        className: "tl-brush",
        x: 0,
        y: 0,
        width: 0,
        height: 0
    }));
}, function(prev, next) {
    return true;
});
_c4 = Brush;
function Defs(_ref) {
    var zoom = _ref.zoom;
    return(/*#__PURE__*/ _react.createElement("defs", null, /*#__PURE__*/ _react.createElement("circle", {
        id: "dot",
        className: "tl-counter-scaled tl-dot",
        r: 4
    }), /*#__PURE__*/ _react.createElement("circle", {
        id: "handle",
        className: "tl-counter-scaled tl-handle",
        r: 4
    }), /*#__PURE__*/ _react.createElement("g", {
        id: "cross",
        className: "tl-binding-indicator"
    }, /*#__PURE__*/ _react.createElement("line", {
        x1: -6,
        y1: -6,
        x2: 6,
        y2: 6
    }), /*#__PURE__*/ _react.createElement("line", {
        x1: 6,
        y1: -6,
        x2: -6,
        y2: 6
    })), /*#__PURE__*/ _react.createElement("filter", {
        id: "expand"
    }, /*#__PURE__*/ _react.createElement("feMorphology", {
        operator: "dilate",
        radius: 0.5 / zoom
    }))));
}
_c5 = Defs;
var RenderedShape = /*#__PURE__*/ _react.memo(function RenderedShape1(_ref) {
    var shape = _ref.shape, utils = _ref.utils, isEditing = _ref.isEditing, isHovered = _ref.isHovered, isBinding = _ref.isBinding, isSelected = _ref.isSelected, isDarkMode = _ref.isDarkMode, isCurrentParent = _ref.isCurrentParent;
    return utils.render(shape, {
        isEditing: isEditing,
        isHovered: isHovered,
        isSelected: isSelected,
        isBinding: isBinding,
        isDarkMode: isDarkMode,
        isCurrentParent: isCurrentParent
    });
}, function(prev, next) {
    if (prev.isEditing !== next.isEditing || prev.isHovered !== next.isHovered || prev.isSelected !== next.isSelected || prev.isDarkMode !== next.isDarkMode || prev.isBinding !== next.isBinding || prev.isCurrentParent !== next.isCurrentParent) return false;
    if (next.shape !== prev.shape) return !next.utils.shouldRender(next.shape, prev.shape);
    return true;
});
_c6 = RenderedShape;
function EditingTextShape(_ref) {
    _s14();
    var shape = _ref.shape, utils = _ref.utils, isEditing = _ref.isEditing, isHovered = _ref.isHovered, isBinding = _ref.isBinding, isSelected = _ref.isSelected, isDarkMode = _ref.isDarkMode, isCurrentParent = _ref.isCurrentParent;
    var ref = _react.useRef(null);
    return utils.render(shape, {
        ref: ref,
        isEditing: isEditing,
        isHovered: isHovered,
        isSelected: isSelected,
        isCurrentParent: isCurrentParent,
        isBinding: isBinding,
        isDarkMode: isDarkMode
    });
}
_s14(EditingTextShape, "QMBuJFIdzLIeqBcFwhMf246mjOM=");
_c7 = EditingTextShape;
var Shape = /*#__PURE__*/ _react.memo(_s15(function(_ref) {
    _s15();
    var shape = _ref.shape, isEditing = _ref.isEditing, isHovered = _ref.isHovered, isSelected = _ref.isSelected, isBinding = _ref.isBinding, isDarkMode = _ref.isDarkMode, isCurrentParent = _ref.isCurrentParent;
    var _useTLContext = useTLContext(), shapeUtils = _useTLContext.shapeUtils;
    var events = useShapeEvents(shape.id, isCurrentParent);
    var utils = shapeUtils[shape.type];
    var center = utils.getCenter(shape);
    var rotation = (shape.rotation || 0) * (180 / Math.PI);
    var transform = "rotate(" + rotation + ", " + center + ") translate(" + shape.point + ")";
    return(/*#__PURE__*/ _react.createElement("g", Object.assign({
        className: isCurrentParent ? 'tl-shape-group tl-current-parent' : 'tl-shape-group',
        id: shape.id,
        transform: transform,
        filter: isHovered ? 'url(#expand)' : 'none'
    }, events), isEditing && utils.isEditableText ? /*#__PURE__*/ _react.createElement(EditingTextShape, {
        shape: shape,
        isBinding: false,
        isCurrentParent: false,
        isDarkMode: isDarkMode,
        isEditing: true,
        isHovered: false,
        isSelected: false,
        utils: utils
    }) : /*#__PURE__*/ _react.createElement(RenderedShape, {
        shape: shape,
        utils: utils,
        isBinding: isBinding,
        isCurrentParent: isCurrentParent,
        isDarkMode: isDarkMode,
        isEditing: isEditing,
        isHovered: isHovered,
        isSelected: isSelected
    })));
}, "oYynpEchU05gizb4DqJC/2uVH6U=", false, function() {
    return [
        useTLContext,
        useShapeEvents
    ];
}));
_c8 = Shape;
var CenterHandle = /*#__PURE__*/ _react.memo(function(_ref) {
    var bounds = _ref.bounds, isLocked = _ref.isLocked;
    return(/*#__PURE__*/ _react.createElement("rect", {
        className: isLocked ? 'tl-bounds-center tl-dashed' : 'tl-bounds-center',
        x: -1,
        y: -1,
        width: bounds.width + 2,
        height: bounds.height + 2,
        pointerEvents: "none"
    }));
});
_c9 = CenterHandle;
var RotateHandle = /*#__PURE__*/ _react.memo(_s16(function(_ref) {
    _s16();
    var bounds = _ref.bounds, size = _ref.size;
    var events = useBoundsHandleEvents('rotate');
    return(/*#__PURE__*/ _react.createElement("g", {
        cursor: "grab"
    }, /*#__PURE__*/ _react.createElement("circle", Object.assign({
        cx: bounds.width / 2,
        cy: size * -2,
        r: size * 2,
        fill: "transparent",
        stroke: "none",
        pointerEvents: "all"
    }, events)), /*#__PURE__*/ _react.createElement("circle", {
        className: "tl-rotate-handle",
        cx: bounds.width / 2,
        cy: size * -2,
        r: size / 2,
        pointerEvents: "none"
    })));
}, "ifiZBx4bIQg+pgReGWthtOaZRx0=", false, function() {
    return [
        useBoundsHandleEvents
    ];
}));
_c10 = RotateHandle;
var _cornerBgClassnames;
var cornerBgClassnames = (_cornerBgClassnames = {
}, _cornerBgClassnames[TLBoundsCorner.TopLeft] = 'tl-transparent tl-cursor-nwse', _cornerBgClassnames[TLBoundsCorner.TopRight] = 'tl-transparent tl-cursor-nesw', _cornerBgClassnames[TLBoundsCorner.BottomRight] = 'tl-transparent tl-cursor-nwse', _cornerBgClassnames[TLBoundsCorner.BottomLeft] = 'tl-transparent tl-cursor-nesw', _cornerBgClassnames);
var CornerHandle = /*#__PURE__*/ _react.memo(_s17(function(_ref) {
    _s17();
    var size = _ref.size, corner = _ref.corner, bounds = _ref.bounds;
    var events = useBoundsHandleEvents(corner);
    var isTop = corner === TLBoundsCorner.TopLeft || corner === TLBoundsCorner.TopRight;
    var isLeft = corner === TLBoundsCorner.TopLeft || corner === TLBoundsCorner.BottomLeft;
    return(/*#__PURE__*/ _react.createElement("g", null, /*#__PURE__*/ _react.createElement("rect", Object.assign({
        className: cornerBgClassnames[corner],
        x: (isLeft ? -1 : bounds.width + 1) - size,
        y: (isTop ? -1 : bounds.height + 1) - size,
        width: size * 2,
        height: size * 2,
        pointerEvents: "all"
    }, events)), /*#__PURE__*/ _react.createElement("rect", {
        className: "tl-corner-handle",
        x: (isLeft ? -1 : bounds.width + 1) - size / 2,
        y: (isTop ? -1 : bounds.height + 1) - size / 2,
        width: size,
        height: size,
        pointerEvents: "none"
    })));
}, "ifiZBx4bIQg+pgReGWthtOaZRx0=", false, function() {
    return [
        useBoundsHandleEvents
    ];
}));
_c11 = CornerHandle;
var _edgeClassnames;
var edgeClassnames = (_edgeClassnames = {
}, _edgeClassnames[TLBoundsEdge.Top] = 'tl-transparent tl-cursor-ns', _edgeClassnames[TLBoundsEdge.Right] = 'tl-transparent tl-cursor-ew', _edgeClassnames[TLBoundsEdge.Bottom] = 'tl-transparent tl-cursor-ns', _edgeClassnames[TLBoundsEdge.Left] = 'tl-transparent tl-cursor-ew', _edgeClassnames);
var EdgeHandle = /*#__PURE__*/ _react.memo(_s18(function(_ref) {
    _s18();
    var size = _ref.size, bounds = _ref.bounds, edge = _ref.edge;
    var events = useBoundsHandleEvents(edge);
    var isHorizontal = edge === TLBoundsEdge.Top || edge === TLBoundsEdge.Bottom;
    var isFarEdge = edge === TLBoundsEdge.Right || edge === TLBoundsEdge.Bottom;
    var height = bounds.height, width = bounds.width;
    return(/*#__PURE__*/ _react.createElement("rect", Object.assign({
        className: edgeClassnames[edge],
        x: isHorizontal ? size / 2 : (isFarEdge ? width + 1 : -1) - size / 2,
        y: isHorizontal ? (isFarEdge ? height + 1 : -1) - size / 2 : size / 2,
        width: isHorizontal ? Math.max(0, width + 1 - size) : size,
        height: isHorizontal ? size : Math.max(0, height + 1 - size)
    }, events)));
}, "ifiZBx4bIQg+pgReGWthtOaZRx0=", false, function() {
    return [
        useBoundsHandleEvents
    ];
}));
_c12 = EdgeHandle;
function Bounds(_ref) {
    var zoom = _ref.zoom, bounds = _ref.bounds, rotation = _ref.rotation, isLocked = _ref.isLocked;
    var size = (Utils.isMobile() ? 10 : 8) / zoom; // Touch target size
    var center = Utils.getBoundsCenter(bounds);
    return(/*#__PURE__*/ _react.createElement("g", {
        pointerEvents: "all",
        transform: "\n        rotate(" + rotation * (180 / Math.PI) + "," + center + ")\n        translate(" + bounds.minX + "," + bounds.minY + ")\n        rotate(" + (bounds.rotation || 0) * (180 / Math.PI) + ", 0, 0)"
    }, /*#__PURE__*/ _react.createElement(CenterHandle, {
        bounds: bounds,
        isLocked: isLocked
    }), !isLocked && /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(EdgeHandle, {
        size: size,
        bounds: bounds,
        edge: TLBoundsEdge.Top
    }), /*#__PURE__*/ _react.createElement(EdgeHandle, {
        size: size,
        bounds: bounds,
        edge: TLBoundsEdge.Right
    }), /*#__PURE__*/ _react.createElement(EdgeHandle, {
        size: size,
        bounds: bounds,
        edge: TLBoundsEdge.Bottom
    }), /*#__PURE__*/ _react.createElement(EdgeHandle, {
        size: size,
        bounds: bounds,
        edge: TLBoundsEdge.Left
    }), /*#__PURE__*/ _react.createElement(CornerHandle, {
        size: size,
        bounds: bounds,
        corner: TLBoundsCorner.TopLeft
    }), /*#__PURE__*/ _react.createElement(CornerHandle, {
        size: size,
        bounds: bounds,
        corner: TLBoundsCorner.TopRight
    }), /*#__PURE__*/ _react.createElement(CornerHandle, {
        size: size,
        bounds: bounds,
        corner: TLBoundsCorner.BottomRight
    }), /*#__PURE__*/ _react.createElement(CornerHandle, {
        size: size,
        bounds: bounds,
        corner: TLBoundsCorner.BottomLeft
    }), /*#__PURE__*/ _react.createElement(RotateHandle, {
        size: size,
        bounds: bounds
    }))));
}
_c13 = Bounds;
function useBoundsEvents() {
    _s19();
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks;
    var onPointerDown = _react.useCallback(function(e) {
        var _e$currentTarget;
        e.stopPropagation();
        (_e$currentTarget = e.currentTarget) == null || _e$currentTarget.setPointerCapture(e.pointerId);
        var info = inputs.pointerDown(e, 'bounds');
        callbacks.onPointBounds == null || callbacks.onPointBounds(info, e);
        callbacks.onPointerDown == null || callbacks.onPointerDown(info, e);
    }, [
        callbacks
    ]);
    var onPointerUp = _react.useCallback(function(e) {
        e.stopPropagation();
        var isDoubleClick = inputs.isDoubleClick();
        var info = inputs.pointerUp(e, 'bounds');
        if (e.currentTarget.hasPointerCapture(e.pointerId)) {
            var _e$currentTarget2;
            (_e$currentTarget2 = e.currentTarget) == null || _e$currentTarget2.releasePointerCapture(e.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) callbacks.onDoubleClickBounds == null || callbacks.onDoubleClickBounds(info, e);
        callbacks.onReleaseBounds == null || callbacks.onReleaseBounds(info, e);
        callbacks.onPointerUp == null || callbacks.onPointerUp(info, e);
    }, [
        callbacks
    ]);
    var onPointerMove = _react.useCallback(function(e) {
        e.stopPropagation();
        if (inputs.pointer && e.pointerId !== inputs.pointer.pointerId) return;
        if (e.currentTarget.hasPointerCapture(e.pointerId)) callbacks.onDragBounds == null || callbacks.onDragBounds(inputs.pointerMove(e, 'bounds'), e);
        var info = inputs.pointerMove(e, 'bounds');
        callbacks.onPointerMove == null || callbacks.onPointerMove(info, e);
    }, [
        callbacks
    ]);
    var onPointerEnter = _react.useCallback(function(e) {
        callbacks.onHoverBounds == null || callbacks.onHoverBounds(inputs.pointerEnter(e, 'bounds'), e);
    }, [
        callbacks
    ]);
    var onPointerLeave = _react.useCallback(function(e) {
        callbacks.onUnhoverBounds == null || callbacks.onUnhoverBounds(inputs.pointerEnter(e, 'bounds'), e);
    }, [
        callbacks
    ]);
    var onTouchStart = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    var onTouchEnd = _react.useCallback(function(e) {
        e.preventDefault();
    }, []);
    return {
        onPointerDown: onPointerDown,
        onPointerUp: onPointerUp,
        onPointerEnter: onPointerEnter,
        onPointerMove: onPointerMove,
        onPointerLeave: onPointerLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd
    };
}
_s19(useBoundsEvents, "LZRePA/OV1ZY+2/UC21OvLbYyvs=", false, function() {
    return [
        useTLContext
    ];
});
function BoundsBg(_ref) {
    _s20();
    var bounds = _ref.bounds, rotation = _ref.rotation;
    var events = useBoundsEvents();
    var width = bounds.width, height = bounds.height;
    var center = Utils.getBoundsCenter(bounds);
    return(/*#__PURE__*/ _react.createElement("rect", Object.assign({
        className: "tl-bounds-bg",
        width: Math.max(1, width),
        height: Math.max(1, height),
        transform: "\n        rotate(" + rotation * (180 / Math.PI) + "," + center + ")\n        translate(" + bounds.minX + "," + bounds.minY + ")\n        rotate(" + (bounds.rotation || 0) * (180 / Math.PI) + ", 0, 0)"
    }, events)));
}
_s20(BoundsBg, "oR5HYXEi6ySWXONrNJTDv9Knel4=", false, function() {
    return [
        useBoundsEvents
    ];
});
_c14 = BoundsBg;
var Handle = /*#__PURE__*/ _react.memo(_s21(function(_ref) {
    _s21();
    var id = _ref.id, point = _ref.point;
    var events = useHandleEvents(id);
    return(/*#__PURE__*/ _react.createElement("g", Object.assign({
        key: id,
        className: "handles",
        pointerEvents: "all",
        transform: "translate(" + point + ")"
    }, events), /*#__PURE__*/ _react.createElement("circle", {
        className: "tl-handle-bg",
        r: 12
    }), /*#__PURE__*/ _react.createElement("use", {
        href: "#handle",
        pointerEvents: "none"
    })));
}, "kLNB25QcmdrQhm4H6iMlib+N5Lw=", false, function() {
    return [
        useHandleEvents
    ];
}));
_c15 = Handle;
var toAngle = 180 / Math.PI;
var Handles = /*#__PURE__*/ _react.memo(_s22(function(_ref) {
    _s22();
    var shape = _ref.shape;
    var _useTLContext = useTLContext(), shapeUtils = _useTLContext.shapeUtils;
    var center = shapeUtils[shape.type].getCenter(shape);
    if (shape.handles === undefined) return null;
    return(/*#__PURE__*/ _react.createElement("g", {
        transform: "rotate(" + (shape.rotation || 0) * toAngle + "," + center + ")"
    }, Object.values(shape.handles).map(function(handle) {
        return(/*#__PURE__*/ _react.createElement(Handle, {
            key: handle.id,
            id: handle.id,
            point: Vec.add(handle.point, shape.point)
        }));
    })));
}, "5B3UfnXuaW5Uo7g2uf+r6pwkHRM=", false, function() {
    return [
        useTLContext
    ];
}));
_c16 = Handles;
function Page(_ref) {
    _s23();
    var page = _ref.page, pageState = _ref.pageState, hideBounds = _ref.hideBounds;
    var _useTLContext = useTLContext(), callbacks = _useTLContext.callbacks, shapeUtils = _useTLContext.shapeUtils;
    useRenderOnResize();
    var shapeTree = useShapeTree(page, pageState, shapeUtils, pageState, callbacks.onChange);
    var _useHandles = useHandles(page, pageState), shapeWithHandles = _useHandles.shapeWithHandles;
    var _useSelection = useSelection(page, pageState, shapeUtils), bounds = _useSelection.bounds, isLocked = _useSelection.isLocked, rotation = _useSelection.rotation;
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, bounds && !hideBounds && /*#__PURE__*/ _react.createElement(BoundsBg, {
        bounds: bounds,
        rotation: rotation
    }), shapeTree.map(function(node) {
        return(/*#__PURE__*/ _react.createElement(ShapeNode, Object.assign({
            key: node.shape.id,
            allowHovers: true
        }, node)));
    }), bounds && !hideBounds && /*#__PURE__*/ _react.createElement(Bounds, {
        zoom: pageState.camera.zoom,
        bounds: bounds,
        isLocked: isLocked,
        rotation: rotation
    }), shapeWithHandles && /*#__PURE__*/ _react.createElement(Handles, {
        shape: shapeWithHandles
    })));
}
_s23(Page, "AhQyPuDyjjOqfm1CFXNH/21OZm8=", false, function() {
    return [
        useTLContext,
        useRenderOnResize,
        useShapeTree,
        useHandles,
        useSelection
    ];
});
_c17 = Page;
var ShapeNode = /*#__PURE__*/ _react.memo(function(_ref2) {
    var shape = _ref2.shape, children = _ref2.children, isEditing = _ref2.isEditing, isHovered = _ref2.isHovered, isDarkMode = _ref2.isDarkMode, isSelected = _ref2.isSelected, isBinding = _ref2.isBinding, isCurrentParent = _ref2.isCurrentParent, allowHovers = _ref2.allowHovers;
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Shape, {
        shape: shape,
        isEditing: isEditing,
        isHovered: allowHovers && isHovered,
        isSelected: isSelected,
        isDarkMode: isDarkMode,
        isBinding: isBinding,
        isCurrentParent: isCurrentParent
    }), children && children.map(function(childNode) {
        return(/*#__PURE__*/ _react.createElement(ShapeNode, Object.assign({
            key: childNode.shape.id,
            allowHovers: allowHovers
        }, childNode)));
    })));
});
_c18 = ShapeNode;
/* eslint-disable @typescript-eslint/ban-ts-comment */ function usePreventNavigation(rCanvas) {
    _s24();
    _react.useEffect(function() {
        var preventGestureNavigation = function preventGestureNavigation1(event) {
            event.preventDefault();
        };
        var preventNavigation = function preventNavigation1(event) {
            // Center point of the touch area
            var touchXPosition = event.touches[0].pageX; // Size of the touch area
            var touchXRadius = event.touches[0].radiusX || 0; // We set a threshold (10px) on both sizes of the screen,
            // if the touch area overlaps with the screen edges
            // it's likely to trigger the navigation. We prevent the
            // touchstart event in that case.
            if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > window.innerWidth - 10) event.preventDefault();
        };
        var elm = rCanvas.current;
        if (!elm) return;
        elm.addEventListener('touchstart', preventGestureNavigation); // @ts-ignore
        elm.addEventListener('gestureend', preventGestureNavigation); // @ts-ignore
        elm.addEventListener('gesturechange', preventGestureNavigation); // @ts-ignore
        elm.addEventListener('gesturestart', preventGestureNavigation); // @ts-ignore
        elm.addEventListener('touchstart', preventNavigation);
        return function() {
            if (elm) {
                elm.removeEventListener('touchstart', preventGestureNavigation); // @ts-ignore
                elm.removeEventListener('gestureend', preventGestureNavigation); // @ts-ignore
                elm.removeEventListener('gesturechange', preventGestureNavigation); // @ts-ignore
                elm.removeEventListener('gesturestart', preventGestureNavigation); // @ts-ignore
                elm.removeEventListener('touchstart', preventNavigation);
            }
        };
    }, [
        rCanvas
    ]);
}
_s24(usePreventNavigation, "OD7bBpZva5O2jO+Puf00hKivP7c=");
function resetError() {
}
var Canvas = /*#__PURE__*/ _react.memo(_s25(function Canvas1(_ref) {
    _s25();
    var page = _ref.page, pageState = _ref.pageState, _ref$hideBounds = _ref.hideBounds, hideBounds = _ref$hideBounds === void 0 ? false : _ref$hideBounds;
    var rCanvas = _react.useRef(null);
    var rGroup = useCameraCss(pageState);
    useZoomEvents();
    useSafariFocusOutFix();
    usePreventNavigation(rCanvas);
    var events = useCanvasEvents();
    return(/*#__PURE__*/ _react.createElement("div", {
        className: "tl-container"
    }, /*#__PURE__*/ _react.createElement("svg", Object.assign({
        id: "canvas",
        className: "tl-canvas",
        ref: rCanvas
    }, events), /*#__PURE__*/ _react.createElement(_reactErrorBoundary.ErrorBoundary, {
        FallbackComponent: ErrorFallback,
        onReset: resetError
    }, /*#__PURE__*/ _react.createElement(Defs, {
        zoom: pageState.camera.zoom
    }), /*#__PURE__*/ _react.createElement("g", {
        ref: rGroup,
        id: "tl-shapes"
    }, /*#__PURE__*/ _react.createElement(Page, {
        page: page,
        pageState: pageState,
        hideBounds: hideBounds
    }), /*#__PURE__*/ _react.createElement(Brush, null))))));
}, "XHwc0GGHa2BsKxvsy9UWZhkhpGA=", false, function() {
    return [
        useCameraCss,
        useZoomEvents,
        useSafariFocusOutFix,
        usePreventNavigation,
        useCanvasEvents
    ];
}));
_c19 = Canvas;
var _excluded = [
    "shapeUtils",
    "page",
    "pageState",
    "theme",
    "hideBounds",
    "isDarkMode",
    "isDebugMode",
    "isPenMode"
];
function Renderer(_ref) {
    _s26();
    var shapeUtils = _ref.shapeUtils, page = _ref.page, pageState = _ref.pageState, theme = _ref.theme, _ref$hideBounds = _ref.hideBounds, hideBounds = _ref$hideBounds === void 0 ? false : _ref$hideBounds, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
    useTLTheme(theme);
    var _React$useState = _react.useState(function() {
        return {
            callbacks: rest,
            shapeUtils: shapeUtils
        };
    }), context = _React$useState[0];
    return(/*#__PURE__*/ _react.createElement(TLContext.Provider, {
        value: context
    }, /*#__PURE__*/ _react.createElement(Canvas, {
        page: page,
        pageState: pageState,
        hideBounds: hideBounds
    })));
}
_s26(Renderer, "iD2Uu1SuPGf3ohS42tAgg1/UW9o=", false, function() {
    return [
        useTLTheme
    ];
});
_c20 = Renderer;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;
$RefreshReg$(_c, "Intersect");
$RefreshReg$(_c1, "Svg");
$RefreshReg$(_c2, "ErrorFallback$memo");
$RefreshReg$(_c3, "ErrorFallback");
$RefreshReg$(_c4, "Brush");
$RefreshReg$(_c5, "Defs");
$RefreshReg$(_c6, "RenderedShape");
$RefreshReg$(_c7, "EditingTextShape");
$RefreshReg$(_c8, "Shape");
$RefreshReg$(_c9, "CenterHandle");
$RefreshReg$(_c10, "RotateHandle");
$RefreshReg$(_c11, "CornerHandle");
$RefreshReg$(_c12, "EdgeHandle");
$RefreshReg$(_c13, "Bounds");
$RefreshReg$(_c14, "BoundsBg");
$RefreshReg$(_c15, "Handle");
$RefreshReg$(_c16, "Handles");
$RefreshReg$(_c17, "Page");
$RefreshReg$(_c18, "ShapeNode");
$RefreshReg$(_c19, "Canvas");
$RefreshReg$(_c20, "Renderer");

  $parcel$ReactRefreshHelpers$9a48.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"2vIKB","react-error-boundary":"6TEkz","deepmerge":"5cwNS","react-use-gesture":"jIiFL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"6TEkz":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define([
        'exports',
        'react'
    ], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactErrorBoundary = {
    }, global.React));
})(this, function(exports, React) {
    'use strict';
    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) Object.keys(e).forEach(function(k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
        n['default'] = e;
        return Object.freeze(n);
    }
    var React__namespace = /*#__PURE__*/ _interopNamespace(React);
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
            o1.__proto__ = p1;
            return o1;
        };
        return _setPrototypeOf(o, p);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
    }
    var changedArray = function changedArray1(a, b) {
        if (a === void 0) a = [];
        if (b === void 0) b = [];
        return a.length !== b.length || a.some(function(item, index) {
            return !Object.is(item, b[index]);
        });
    };
    var initialState = {
        error: null
    };
    var ErrorBoundary1 = /*#__PURE__*/ function(_React$Component) {
        _inheritsLoose(ErrorBoundary2, _React$Component);
        function ErrorBoundary2() {
            var _this;
            for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++)_args[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [
                this
            ].concat(_args)) || this;
            _this.state = initialState;
            _this.updatedWithError = false;
            _this.resetErrorBoundary = function() {
                var _this$props;
                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                _this.props.onReset == null || (_this$props = _this.props).onReset.apply(_this$props, args);
                _this.reset();
            };
            return _this;
        }
        ErrorBoundary2.getDerivedStateFromError = function getDerivedStateFromError(error) {
            return {
                error: error
            };
        };
        var _proto = ErrorBoundary2.prototype;
        _proto.reset = function reset() {
            this.updatedWithError = false;
            this.setState(initialState);
        };
        _proto.componentDidCatch = function componentDidCatch(error, info) {
            var _this$props$onError, _this$props2;
            (_this$props$onError = (_this$props2 = this.props).onError) == null || _this$props$onError.call(_this$props2, error, info);
        };
        _proto.componentDidMount = function componentDidMount() {
            var error = this.state.error;
            if (error !== null) this.updatedWithError = true;
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
            var error = this.state.error;
            var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error
            // happens to *also* be in the resetKeys array, we'd end up resetting
            // the error boundary immediately. This would likely trigger a second
            // error to be thrown.
            // So we make sure that we don't check the resetKeys on the first call
            // of cDU after the error is set
            if (error !== null && !this.updatedWithError) {
                this.updatedWithError = true;
                return;
            }
            if (error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
                var _this$props$onResetKe, _this$props3;
                (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null || _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
                this.reset();
            }
        };
        _proto.render = function render() {
            var error = this.state.error;
            var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
            if (error !== null) {
                var _props = {
                    error: error,
                    resetErrorBoundary: this.resetErrorBoundary
                };
                if (/*#__PURE__*/ React__namespace.isValidElement(fallback)) return fallback;
                else if (typeof fallbackRender === 'function') return fallbackRender(_props);
                else if (FallbackComponent) return(/*#__PURE__*/ React__namespace.createElement(FallbackComponent, _props));
                else throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');
            }
            return this.props.children;
        };
        return ErrorBoundary2;
    }(React__namespace.Component);
    function withErrorBoundary(Component, errorBoundaryProps) {
        var Wrapped = function Wrapped1(props) {
            return(/*#__PURE__*/ React__namespace.createElement(ErrorBoundary1, errorBoundaryProps, /*#__PURE__*/ React__namespace.createElement(Component, props)));
        }; // Format for display in DevTools
        var name = Component.displayName || Component.name || 'Unknown';
        Wrapped.displayName = "withErrorBoundary(" + name + ")";
        return Wrapped;
    }
    function useErrorHandler(givenError) {
        var _React$useState = React__namespace.useState(null), error = _React$useState[0], setError = _React$useState[1];
        if (givenError != null) throw givenError;
        if (error != null) throw error;
        return setError;
    }
    /*
  eslint
    @typescript-eslint/no-throw-literal: "off",
    @typescript-eslint/prefer-nullish-coalescing: "off"
  */ exports.ErrorBoundary = ErrorBoundary1;
    exports.useErrorHandler = useErrorHandler;
    exports.withErrorBoundary = withErrorBoundary;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{"react":"2vIKB"}],"5cwNS":[function(require,module,exports) {
'use strict';
var isMergeableObject = function isMergeableObject1(value) {
    return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
    return !!value && typeof value === 'object';
}
function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 60103;
function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {
    };
}
function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
    });
}
function getMergeFunction(key, options) {
    if (!options.customMerge) return deepmerge;
    var customMerge = options.customMerge(key);
    return typeof customMerge === 'function' ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
    }) : [];
}
function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
    try {
        return property in object;
    } catch (_) {
        return false;
    }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
     && Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    ;
}
function mergeObject(target, source, options) {
    var destination = {
    };
    if (options.isMergeableObject(target)) getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
    getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) return;
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        else destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    });
    return destination;
}
function deepmerge(target, source, options) {
    options = options || {
    };
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    // implementations can use it. The caller may not replace it.
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
    else if (sourceIsArray) return options.arrayMerge(target, source, options);
    else return mergeObject(target, source, options);
}
deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) throw new Error('first argument should be an array');
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
    }, {
    });
};
var deepmerge_1 = deepmerge;
module.exports = deepmerge_1;

},{}],"jIiFL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addV", ()=>addV
);
parcelHelpers.export(exports, "rubberbandIfOutOfBounds", ()=>rubberbandIfOutOfBounds
);
parcelHelpers.export(exports, "subV", ()=>subV
);
parcelHelpers.export(exports, "useDrag", ()=>useDrag
);
parcelHelpers.export(exports, "useGesture", ()=>useGesture
);
parcelHelpers.export(exports, "useHover", ()=>useHover
);
parcelHelpers.export(exports, "useMove", ()=>useMove
);
parcelHelpers.export(exports, "usePinch", ()=>usePinch
);
parcelHelpers.export(exports, "useScroll", ()=>useScroll
);
parcelHelpers.export(exports, "useWheel", ()=>useWheel
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
// vector add
function addV(v1, v2) {
    return v1.map(function(v, i) {
        return v + v2[i];
    });
} // vector substract
function subV(v1, v2) {
    return v1.map(function(v, i) {
        return v - v2[i];
    });
}
/**
 * Calculates distance
 * @param movement the difference between current and initial vectors
 * @returns distance
 */ function calculateDistance(movement) {
    return Math.hypot.apply(Math, movement);
}
function calculateAllGeometry(movement, delta) {
    if (delta === void 0) delta = movement;
    var dl = calculateDistance(delta);
    var alpha = dl === 0 ? 0 : 1 / dl;
    var direction = delta.map(function(v) {
        return alpha * v;
    });
    var distance = calculateDistance(movement);
    return {
        distance: distance,
        direction: direction
    };
}
/**
 * Calculates all kinematics
 * @template T the expected vector type
 * @param movement the difference between current and initial vectors
 * @param delta the difference between current and previous vectors
 * @param delta_t the time difference between current and previous timestamps
 * @returns all kinematics
 */ function calculateAllKinematics(movement, delta, dt) {
    var dl = calculateDistance(delta);
    var alpha = dl === 0 ? 0 : 1 / dl;
    var beta = dt === 0 ? 0 : 1 / dt;
    var velocity = beta * dl;
    var velocities = delta.map(function(v) {
        return beta * v;
    });
    var direction = delta.map(function(v) {
        return alpha * v;
    });
    var distance = calculateDistance(movement);
    return {
        velocities: velocities,
        velocity: velocity,
        distance: distance,
        direction: direction
    };
}
/**
 * Because IE doesn't support `Math.sign` function, so we use the polyfill version of the function.
 * This polyfill function is suggested by Mozilla:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill
 * @param x target number
 */ function sign(x) {
    if (Math.sign) return Math.sign(x);
    return Number(x > 0) - Number(x < 0) || +x;
}
function minMax(value, min, max) {
    return Math.max(min, Math.min(value, max));
} // Based on @aholachek ;)
// https://twitter.com/chpwn/status/285540192096497664
// iOS constant = 0.55
// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5
function rubberband2(distance, constant) {
    // default constant from the article is 0.7
    return Math.pow(distance, constant * 5);
}
function rubberband(distance, dimension, constant) {
    if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant);
    return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min, max, constant) {
    if (constant === void 0) constant = 0.15;
    if (constant === 0) return minMax(position, min, max);
    if (position < min) return -rubberband(min - position, max - min, constant) + min;
    if (position > max) return +rubberband(position - max, max - min, constant) + max;
    return position;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function() {
                if (i >= o.length) return {
                    done: true
                };
                return {
                    done: false,
                    value: o[i++]
                };
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    it = o[Symbol.iterator]();
    return it.next.bind(it);
}
function noop() {
}
/**
 * TODO Beware that only optimized cases are covered in tests =)
 * TODO Need to cover general case as well
 *
 * @param fns
 */ function chainFns() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++)fns[_key] = arguments[_key];
    if (fns.length === 0) return noop;
    if (fns.length === 1) return fns[0];
    return function() {
        var result;
        for(var _iterator = _createForOfIteratorHelperLoose(fns), _step; !(_step = _iterator()).done;){
            var fn = _step.value;
            result = fn.apply(this, arguments) || result;
        }
        return result;
    };
}
/**
 * Expects a simple value or 2D vector (an array with 2 elements) and
 * always returns 2D vector. If simple value is passed, returns a
 * vector with this value as both coordinates.
 *
 * @param value
 */ function ensureVector(value, fallback) {
    if (value === undefined) {
        if (fallback === undefined) throw new Error('Must define fallback value if undefined is expected');
        value = fallback;
    }
    if (Array.isArray(value)) return value;
    return [
        value,
        value
    ];
}
/**
 * Helper for defining a default value
 *
 * @param value
 * @param fallback
 */ function assignDefault(value, fallback) {
    return Object.assign({
    }, fallback, value || {
    });
}
/**
 * Resolves getters (functions) by calling them
 * If simple value is given it just passes through
 *
 * @param v
 */ function valueFn(v) {
    if (typeof v === 'function') {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        // @ts-ignore
        return v.apply(void 0, args);
    } else return v;
}
function resolveWith(config, resolvers) {
    if (config === void 0) config = {
    };
    var result = {
    };
    for(var _i = 0, _Object$entries = Object.entries(resolvers); _i < _Object$entries.length; _i++){
        var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], resolver = _Object$entries$_i[1];
        switch(typeof resolver){
            case 'function':
                result[key] = resolver.call(result, config[key], key, config);
                break;
            case 'object':
                result[key] = resolveWith(config[key], resolver);
                break;
            case 'boolean':
                if (resolver) result[key] = config[key];
                break;
        }
    }
    return result;
}
/**
 * Whether the browser supports GestureEvent (ie Safari)
 * @returns true if the browser supports gesture event
 */ function supportsGestureEvents() {
    try {
        // TODO [TS] possibly find GestureEvent definitions?
        // @ts-ignore: no type definitions for webkit GestureEvents
        return 'constructor' in GestureEvent;
    } catch (e) {
        return false;
    }
}
function supportsTouchEvents() {
    return typeof window !== 'undefined' && 'ontouchstart' in window;
}
function supportsPointerEvents() {
    return typeof window !== 'undefined' && 'onpointerdown' in window;
}
function getEventTouches(event) {
    if ('pointerId' in event) return null;
    return event.type === 'touchend' ? event.changedTouches : event.targetTouches;
}
function getTouchIds(event) {
    return Array.from(getEventTouches(event)).map(function(t) {
        return t.identifier;
    });
}
function getGenericEventData(event) {
    var buttons = 'buttons' in event ? event.buttons : 0;
    var shiftKey = event.shiftKey, altKey = event.altKey, metaKey = event.metaKey, ctrlKey = event.ctrlKey; // TODO check if this might create some overrides?
    return {
        buttons: buttons,
        shiftKey: shiftKey,
        altKey: altKey,
        metaKey: metaKey,
        ctrlKey: ctrlKey
    };
}
var identity = function identity1(xy) {
    return xy;
};
/**
 * Gets pointer event values.
 * @param event
 * @returns pointer event values
 */ function getPointerEventValues(event, transform) {
    if (transform === void 0) transform = identity;
    var touchEvents = getEventTouches(event);
    var _ref = touchEvents ? touchEvents[0] : event, clientX = _ref.clientX, clientY = _ref.clientY;
    return transform([
        clientX,
        clientY
    ]);
}
/**
 * Gets two touches event data
 * @param event
 * @returns two touches event data
 */ function getTwoTouchesEventValues(event, pointerIds, transform) {
    if (transform === void 0) transform = identity;
    var _Array$from$filter = Array.from(event.touches).filter(function(t) {
        return pointerIds.includes(t.identifier);
    }), A = _Array$from$filter[0], B = _Array$from$filter[1];
    if (!A || !B) throw Error("The event doesn't have two pointers matching the pointerIds");
    var dx = B.clientX - A.clientX;
    var dy = B.clientY - A.clientY;
    var cx = (B.clientX + A.clientX) / 2;
    var cy = (B.clientY + A.clientY) / 2; // const e: any = 'nativeEvent' in event ? event.nativeEvent : event
    var distance = Math.hypot(dx, dy); // FIXME rotation has inconsistant values so we're not using it atm
    // const angle = (e.rotation as number) ?? -(Math.atan2(dx, dy) * 180) / Math.PI
    var angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
    var values = transform([
        distance,
        angle
    ]);
    var origin = transform([
        cx,
        cy
    ]);
    return {
        values: values,
        origin: origin
    };
}
/**
 * Gets scroll event values
 * @param event
 * @returns scroll event values
 */ function getScrollEventValues(event, transform) {
    if (transform === void 0) transform = identity;
    // If the currentTarget is the window then we return the scrollX/Y position.
    // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top
    var _event$currentTarget = event.currentTarget, scrollX = _event$currentTarget.scrollX, scrollY = _event$currentTarget.scrollY, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop;
    return transform([
        scrollX || scrollLeft || 0,
        scrollY || scrollTop || 0
    ]);
} // wheel delta defaults from https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
/**
 * Gets wheel event values.
 * @param event
 * @returns wheel event values
 */ function getWheelEventValues(event, transform) {
    if (transform === void 0) transform = identity;
    var deltaX = event.deltaX, deltaY = event.deltaY, deltaMode = event.deltaMode; // normalize wheel values, especially for Firefox
    if (deltaMode === 1) {
        deltaX *= LINE_HEIGHT;
        deltaY *= LINE_HEIGHT;
    } else if (deltaMode === 2) {
        deltaX *= PAGE_HEIGHT;
        deltaY *= PAGE_HEIGHT;
    }
    return transform([
        deltaX,
        deltaY
    ]);
}
/**
 * Gets webkit gesture event values.
 * @param event
 * @returns webkit gesture event values
 */ function getWebkitGestureEventValues(event, transform) {
    if (transform === void 0) transform = identity;
    return transform([
        event.scale,
        event.rotation
    ]);
}
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_RUBBERBAND = 0.15;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var InternalGestureOptionsNormalizers = {
    threshold: function threshold(value) {
        if (value === void 0) value = 0;
        return ensureVector(value);
    },
    rubberband: function rubberband1(value) {
        if (value === void 0) value = 0;
        switch(value){
            case true:
                return ensureVector(DEFAULT_RUBBERBAND);
            case false:
                return ensureVector(0);
            default:
                return ensureVector(value);
        }
    },
    enabled: function enabled(value) {
        if (value === void 0) value = true;
        return value;
    },
    triggerAllEvents: function triggerAllEvents(value) {
        if (value === void 0) value = false;
        return value;
    },
    initial: function initial(value) {
        if (value === void 0) value = 0;
        if (typeof value === 'function') return value;
        return ensureVector(value);
    },
    transform: true
};
var InternalCoordinatesOptionsNormalizers = /*#__PURE__*/ _extends({
}, InternalGestureOptionsNormalizers, {
    axis: true,
    lockDirection: function lockDirection(value) {
        if (value === void 0) value = false;
        return value;
    },
    bounds: function bounds(value) {
        if (value === void 0) value = {
        };
        if (typeof value === 'function') return function(state) {
            return InternalCoordinatesOptionsNormalizers.bounds(value(state));
        };
        var _value2 = value, _value2$left = _value2.left, left = _value2$left === void 0 ? -Infinity : _value2$left, _value2$right = _value2.right, right = _value2$right === void 0 ? Infinity : _value2$right, _value2$top = _value2.top, top = _value2$top === void 0 ? -Infinity : _value2$top, _value2$bottom = _value2.bottom, bottom = _value2$bottom === void 0 ? Infinity : _value2$bottom;
        return [
            [
                left,
                right
            ],
            [
                top,
                bottom
            ]
        ];
    }
});
var isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;
var InternalGenericOptionsNormalizers = {
    enabled: function enabled(value) {
        if (value === void 0) value = true;
        return value;
    },
    domTarget: true,
    window: /*#__PURE__*/ function(_window) {
        function window(_x) {
            return _window.apply(this, arguments);
        }
        window.toString = function() {
            return _window.toString();
        };
        return window;
    }(function(value) {
        if (value === void 0) value = isBrowser ? window : undefined;
        return value;
    }),
    eventOptions: function eventOptions(_temp) {
        var _ref = _temp === void 0 ? {
        } : _temp, _ref$passive = _ref.passive, passive = _ref$passive === void 0 ? true : _ref$passive, _ref$capture = _ref.capture, capture = _ref$capture === void 0 ? false : _ref$capture;
        return {
            passive: passive,
            capture: capture
        };
    },
    transform: true
};
var InternalDistanceAngleOptionsNormalizers = /*#__PURE__*/ _extends({
}, InternalGestureOptionsNormalizers, {
    bounds: function bounds(_value, _key, _ref2) {
        var _ref2$distanceBounds = _ref2.distanceBounds, distanceBounds = _ref2$distanceBounds === void 0 ? {
        } : _ref2$distanceBounds, _ref2$angleBounds = _ref2.angleBounds, angleBounds = _ref2$angleBounds === void 0 ? {
        } : _ref2$angleBounds;
        var _distanceBounds = function _distanceBounds1(state) {
            var D = assignDefault(valueFn(distanceBounds, state), {
                min: -Infinity,
                max: Infinity
            });
            return [
                D.min,
                D.max
            ];
        };
        var _angleBounds = function _angleBounds1(state) {
            var A = assignDefault(valueFn(angleBounds, state), {
                min: -Infinity,
                max: Infinity
            });
            return [
                A.min,
                A.max
            ];
        };
        if (typeof distanceBounds !== 'function' && typeof angleBounds !== 'function') return [
            _distanceBounds(),
            _angleBounds()
        ];
        return function(state) {
            return [
                _distanceBounds(state),
                _angleBounds(state)
            ];
        };
    }
});
var InternalDragOptionsNormalizers = /*#__PURE__*/ _extends({
}, InternalCoordinatesOptionsNormalizers, {
    useTouch: function useTouch(value) {
        if (value === void 0) value = false;
        var supportsTouch = supportsTouchEvents();
        var supportsPointer = supportsPointerEvents();
        if (value && supportsTouch) return true;
        if (supportsTouch && !supportsPointer) return true;
        return false;
    },
    experimental_preventWindowScrollY: function experimental_preventWindowScrollY(value) {
        if (value === void 0) value = false;
        return value;
    },
    threshold: function threshold(v, _k, _ref3) {
        var _ref3$filterTaps = _ref3.filterTaps, filterTaps = _ref3$filterTaps === void 0 ? false : _ref3$filterTaps, _ref3$lockDirection = _ref3.lockDirection, lockDirection = _ref3$lockDirection === void 0 ? false : _ref3$lockDirection, _ref3$axis = _ref3.axis, axis = _ref3$axis === void 0 ? undefined : _ref3$axis;
        var A = ensureVector(v, filterTaps ? 3 : lockDirection ? 1 : axis ? 1 : 0);
        this.filterTaps = filterTaps;
        return A;
    },
    swipeVelocity: function swipeVelocity(v) {
        if (v === void 0) v = DEFAULT_SWIPE_VELOCITY;
        return ensureVector(v);
    },
    swipeDistance: function swipeDistance(v) {
        if (v === void 0) v = DEFAULT_SWIPE_DISTANCE;
        return ensureVector(v);
    },
    swipeDuration: function swipeDuration(value) {
        if (value === void 0) value = DEFAULT_SWIPE_DURATION;
        return value;
    },
    delay: function delay(value) {
        if (value === void 0) value = 0;
        switch(value){
            case true:
                return DEFAULT_DRAG_DELAY;
            case false:
                return 0;
            default:
                return value;
        }
    }
});
function getInternalGenericOptions(config) {
    if (config === void 0) config = {
    };
    // TODO warn when passive is set to true and domTarget is undefined
    return resolveWith(config, InternalGenericOptionsNormalizers);
}
function getInternalCoordinatesOptions(config) {
    if (config === void 0) config = {
    };
    return resolveWith(config, InternalCoordinatesOptionsNormalizers);
}
function getInternalDistanceAngleOptions(config) {
    if (config === void 0) config = {
    };
    return resolveWith(config, InternalDistanceAngleOptionsNormalizers);
}
function getInternalDragOptions(config) {
    if (config === void 0) config = {
    };
    return resolveWith(config, InternalDragOptionsNormalizers);
}
function _buildMoveConfig(_ref) {
    var domTarget = _ref.domTarget, eventOptions = _ref.eventOptions, window = _ref.window, enabled = _ref.enabled, rest = _objectWithoutPropertiesLoose(_ref, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.move = getInternalCoordinatesOptions(rest);
    return opts;
}
function _buildHoverConfig(_ref2) {
    var domTarget = _ref2.domTarget, eventOptions = _ref2.eventOptions, window = _ref2.window, enabled = _ref2.enabled, rest = _objectWithoutPropertiesLoose(_ref2, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.hover = _extends({
        enabled: true
    }, rest);
    return opts;
}
function _buildDragConfig(_ref3) {
    var domTarget = _ref3.domTarget, eventOptions = _ref3.eventOptions, window = _ref3.window, enabled = _ref3.enabled, rest = _objectWithoutPropertiesLoose(_ref3, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.drag = getInternalDragOptions(rest);
    return opts;
}
function _buildPinchConfig(_ref4) {
    var domTarget = _ref4.domTarget, eventOptions = _ref4.eventOptions, window = _ref4.window, enabled = _ref4.enabled, rest = _objectWithoutPropertiesLoose(_ref4, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.pinch = getInternalDistanceAngleOptions(rest);
    return opts;
}
function _buildScrollConfig(_ref5) {
    var domTarget = _ref5.domTarget, eventOptions = _ref5.eventOptions, window = _ref5.window, enabled = _ref5.enabled, rest = _objectWithoutPropertiesLoose(_ref5, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.scroll = getInternalCoordinatesOptions(rest);
    return opts;
}
function _buildWheelConfig(_ref6) {
    var domTarget = _ref6.domTarget, eventOptions = _ref6.eventOptions, window = _ref6.window, enabled = _ref6.enabled, rest = _objectWithoutPropertiesLoose(_ref6, [
        "domTarget",
        "eventOptions",
        "window",
        "enabled"
    ]);
    var opts = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        window: window,
        enabled: enabled
    });
    opts.wheel = getInternalCoordinatesOptions(rest);
    return opts;
}
function buildComplexConfig(config, actions) {
    if (config === void 0) config = {
    };
    if (actions === void 0) actions = new Set();
    var _config = config, drag = _config.drag, wheel = _config.wheel, move = _config.move, scroll = _config.scroll, pinch = _config.pinch, hover = _config.hover, eventOptions = _config.eventOptions, window = _config.window, transform = _config.transform, domTarget = _config.domTarget, enabled = _config.enabled;
    var mergedConfig = getInternalGenericOptions({
        domTarget: domTarget,
        eventOptions: eventOptions,
        transform: transform,
        window: window,
        enabled: enabled
    });
    if (actions.has('onDrag')) mergedConfig.drag = getInternalDragOptions(drag);
    if (actions.has('onWheel')) mergedConfig.wheel = getInternalCoordinatesOptions(wheel);
    if (actions.has('onScroll')) mergedConfig.scroll = getInternalCoordinatesOptions(scroll);
    if (actions.has('onMove')) mergedConfig.move = getInternalCoordinatesOptions(move);
    if (actions.has('onPinch')) mergedConfig.pinch = getInternalDistanceAngleOptions(pinch);
    if (actions.has('onHover')) mergedConfig.hover = _extends({
        enabled: true
    }, hover);
    return mergedConfig;
}
function getInitial(mixed) {
    return _extends({
        _active: false,
        _blocked: false,
        _intentional: [
            false,
            false
        ],
        _movement: [
            0,
            0
        ],
        _initial: [
            0,
            0
        ],
        _bounds: [
            [-Infinity, Infinity
            ],
            [-Infinity, Infinity
            ]
        ],
        _threshold: [
            0,
            0
        ],
        _lastEventType: undefined,
        _dragStarted: false,
        _dragPreventScroll: false,
        _dragIsTap: true,
        _dragDelayed: false,
        event: undefined,
        intentional: false,
        values: [
            0,
            0
        ],
        velocities: [
            0,
            0
        ],
        delta: [
            0,
            0
        ],
        movement: [
            0,
            0
        ],
        offset: [
            0,
            0
        ],
        lastOffset: [
            0,
            0
        ],
        direction: [
            0,
            0
        ],
        initial: [
            0,
            0
        ],
        previous: [
            0,
            0
        ],
        first: false,
        last: false,
        active: false,
        timeStamp: 0,
        startTime: 0,
        elapsedTime: 0,
        cancel: noop,
        canceled: false,
        memo: undefined,
        args: undefined
    }, mixed);
}
function getInitialState() {
    var shared = {
        hovering: false,
        scrolling: false,
        wheeling: false,
        dragging: false,
        moving: false,
        pinching: false,
        touches: 0,
        buttons: 0,
        down: false,
        shiftKey: false,
        altKey: false,
        metaKey: false,
        ctrlKey: false,
        locked: false
    };
    var drag = getInitial({
        _pointerId: undefined,
        axis: undefined,
        xy: [
            0,
            0
        ],
        vxvy: [
            0,
            0
        ],
        velocity: 0,
        distance: 0,
        tap: false,
        swipe: [
            0,
            0
        ]
    });
    var pinch = getInitial({
        // @ts-expect-error when used _pointerIds we can assert its type will be [number, number]
        _pointerIds: [],
        da: [
            0,
            0
        ],
        vdva: [
            0,
            0
        ],
        // @ts-expect-error origin can never be passed as undefined in userland
        origin: undefined,
        turns: 0
    });
    var wheel = getInitial({
        axis: undefined,
        xy: [
            0,
            0
        ],
        vxvy: [
            0,
            0
        ],
        velocity: 0,
        distance: 0
    });
    var move = getInitial({
        axis: undefined,
        xy: [
            0,
            0
        ],
        vxvy: [
            0,
            0
        ],
        velocity: 0,
        distance: 0
    });
    var scroll = getInitial({
        axis: undefined,
        xy: [
            0,
            0
        ],
        vxvy: [
            0,
            0
        ],
        velocity: 0,
        distance: 0
    });
    return {
        shared: shared,
        drag: drag,
        pinch: pinch,
        wheel: wheel,
        move: move,
        scroll: scroll
    };
}
var RecognizersMap = /*#__PURE__*/ new Map();
var identity$1 = function identity2(xy) {
    return xy;
};
/**
 * @private
 * Recognizer abstract class.
 */ var Recognizer = /*#__PURE__*/ function() {
    /**
   * Creates an instance of a gesture recognizer.
   * @param stateKey drag, move, pinch, etc.
   * @param controller the controller attached to the gesture
   * @param [args] the args that should be passed to the gesture handler
   */ function Recognizer1(controller, args) {
        var _this = this;
        if (args === void 0) args = [];
        this.controller = controller;
        this.args = args;
        this.debounced = true; // Convenience method to set a timeout for a given gesture
        this.setTimeout = function(callback, ms) {
            var _window;
            if (ms === void 0) ms = 140;
            clearTimeout(_this.controller.timeouts[_this.stateKey]);
            for(var _len = arguments.length, args1 = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args1[_key - 2] = arguments[_key];
            _this.controller.timeouts[_this.stateKey] = (_window = window).setTimeout.apply(_window, [
                callback,
                ms
            ].concat(args1));
        }; // Convenience method to clear a timeout for a given gesture
        this.clearTimeout = function() {
            clearTimeout(_this.controller.timeouts[_this.stateKey]);
        };
        /**
     * Fires the gesture handler
     */ this.fireGestureHandler = function(forceFlag) {
            if (forceFlag === void 0) forceFlag = false;
            /**
       * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),
       * clean everything and don't do anything.
       */ if (_this.state._blocked) {
                // we need debounced gestures to end by themselves
                if (!_this.debounced) {
                    _this.state._active = false;
                    _this.clean();
                }
                return null;
            } // If the gesture has no intentional dimension, don't fire the handler.
            if (!forceFlag && !_this.state.intentional && !_this.config.triggerAllEvents) return null;
            if (_this.state.intentional) {
                var prev_active = _this.state.active;
                var next_active = _this.state._active;
                _this.state.active = next_active;
                _this.state.first = next_active && !prev_active;
                _this.state.last = prev_active && !next_active;
                _this.controller.state.shared[_this.ingKey] = next_active; // Sets dragging, pinching, etc. to the gesture active state
            }
            var touches = _this.controller.pointerIds.size || _this.controller.touchIds.size;
            var down = _this.controller.state.shared.buttons > 0 || touches > 0;
            var state = _extends({
            }, _this.controller.state.shared, _this.state, _this.mapStateValues(_this.state), {
                locked: !!document.pointerLockElement,
                touches: touches,
                down: down
            }); // @ts-expect-error
            var newMemo = _this.handler(state); // Sets memo to the returned value of the handler (unless it's not undefined)
            _this.state.memo = newMemo !== void 0 ? newMemo : _this.state.memo;
            return state;
        };
        this.controller = controller;
        this.args = args;
    } // Returns the gesture config
    var _proto = Recognizer1.prototype;
    // Convenience method to update the shared state
    _proto.updateSharedState = function updateSharedState(sharedState) {
        Object.assign(this.controller.state.shared, sharedState);
    } // Convenience method to update the gesture state
    ;
    _proto.updateGestureState = function updateGestureState(gestureState) {
        Object.assign(this.state, gestureState);
    };
    _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {
        return {
            _intentional: _intentional,
            _blocked: false
        };
    };
    _proto.getMovement = function getMovement(values) {
        var rubberband1 = this.config.rubberband;
        var _this$state = this.state, _bounds = _this$state._bounds, _initial = _this$state._initial, _active = _this$state._active, wasIntentional = _this$state._intentional, lastOffset = _this$state.lastOffset, prevMovement = _this$state.movement, _T = _this$state._threshold;
        var M = this.getInternalMovement(values, this.state);
        var i0 = wasIntentional[0] === false ? getIntentionalDisplacement(M[0], _T[0]) : wasIntentional[0];
        var i1 = wasIntentional[1] === false ? getIntentionalDisplacement(M[1], _T[1]) : wasIntentional[1]; // Get gesture specific state properties based on intentionality and movement.
        var intentionalityCheck = this.checkIntentionality([
            i0,
            i1
        ], M);
        if (intentionalityCheck._blocked) return _extends({
        }, intentionalityCheck, {
            _movement: M,
            delta: [
                0,
                0
            ]
        });
        var _intentional = intentionalityCheck._intentional;
        var _movement = M;
        /**
     * The movement sent to the handler has 0 in its dimensions when intentionality is false.
     * It is calculated from the actual movement minus the threshold.
     */ var movement = [
            _intentional[0] !== false ? M[0] - _intentional[0] : 0,
            _intentional[1] !== false ? M[1] - _intentional[1] : 0
        ];
        var offset = addV(movement, lastOffset);
        /**
     * Rubberband should be 0 when the gesture is no longer active, so that movement
     * and offset can return within their bounds.
     */ var _rubberband = _active ? rubberband1 : [
            0,
            0
        ];
        movement = computeRubberband(_bounds, addV(movement, _initial), _rubberband);
        return _extends({
        }, intentionalityCheck, {
            intentional: _intentional[0] !== false || _intentional[1] !== false,
            _initial: _initial,
            _movement: _movement,
            movement: movement,
            values: values,
            offset: computeRubberband(_bounds, offset, _rubberband),
            delta: subV(movement, prevMovement)
        });
    } // Cleans the gesture. Can be overriden by gestures.
    ;
    _proto.clean = function clean() {
        this.clearTimeout();
    };
    _createClass(Recognizer1, [
        {
            key: "config",
            get: function get() {
                return this.controller.config[this.stateKey];
            } // Is the gesture enabled
        },
        {
            key: "enabled",
            get: function get() {
                return this.controller.config.enabled && this.config.enabled;
            } // Returns the controller state for a given gesture
        },
        {
            key: "state",
            get: function get() {
                return this.controller.state[this.stateKey];
            } // Returns the gesture handler
        },
        {
            key: "handler",
            get: function get() {
                return this.controller.handlers[this.stateKey];
            }
        },
        {
            key: "transform",
            get: function get() {
                return this.config.transform || this.controller.config.transform || identity$1;
            }
        }
    ]);
    return Recognizer1;
}(); //--------------------------------------------
function getIntentionalDisplacement(movement, threshold) {
    if (Math.abs(movement) >= threshold) return sign(movement) * threshold;
    else return false;
}
function computeRubberband(bounds, _ref, _ref2) {
    var Vx = _ref[0], Vy = _ref[1];
    var Rx = _ref2[0], Ry = _ref2[1];
    var _bounds$ = bounds[0], X1 = _bounds$[0], X2 = _bounds$[1], _bounds$2 = bounds[1], Y1 = _bounds$2[0], Y2 = _bounds$2[1];
    return [
        rubberbandIfOutOfBounds(Vx, X1, X2, Rx),
        rubberbandIfOutOfBounds(Vy, Y1, Y2, Ry)
    ];
}
/**
 * Returns a generic, common payload for all gestures from an event.
 */ function getGenericPayload(_ref3, event, isStartEvent) {
    var state = _ref3.state;
    var timeStamp = event.timeStamp, _lastEventType = event.type;
    var previous = state.values;
    var elapsedTime = isStartEvent ? 0 : timeStamp - state.startTime;
    return {
        _lastEventType: _lastEventType,
        event: event,
        timeStamp: timeStamp,
        elapsedTime: elapsedTime,
        previous: previous
    };
}
/**
 * Returns the reinitialized start state for the gesture.
 * Should be common to all gestures.
 */ function getStartGestureState(_ref4, values, event, initial) {
    var state = _ref4.state, config = _ref4.config, stateKey = _ref4.stateKey, args = _ref4.args, transform = _ref4.transform;
    var offset = state.offset;
    var startTime = event.timeStamp;
    var initialFn = config.initial, bounds = config.bounds, threshold = config.threshold; // the _threshold is the difference between a [0,0] offset converted to
    // its new space coordinates
    var _threshold = subV(transform(threshold), transform([
        0,
        0
    ])).map(Math.abs);
    var _state = _extends({
    }, getInitialState()[stateKey], {
        _active: true,
        args: args,
        values: values,
        initial: initial != null ? initial : values,
        _threshold: _threshold,
        offset: offset,
        lastOffset: offset,
        startTime: startTime
    });
    return _extends({
    }, _state, {
        _initial: valueFn(initialFn, _state),
        _bounds: valueFn(bounds, _state)
    });
}
/**
 * The controller will keep track of the state for all gestures and also keep
 * track of timeouts, and window listeners.
 */ var Controller = function Controller1(classes) {
    var _this = this;
    this.classes = classes;
    this.pointerIds = new Set(); // register Pointer Events pointerIds
    this.touchIds = new Set(); // register Touch Events identifiers
    this.supportsTouchEvents = supportsTouchEvents();
    this.supportsGestureEvents = supportsGestureEvents();
    this.bind = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var bindings = {
        };
        for(var _iterator = _createForOfIteratorHelperLoose(_this.classes), _step; !(_step = _iterator()).done;){
            var RecognizerClass = _step.value;
            new RecognizerClass(_this, args).addBindings(bindings);
        } // // we also add event bindings for native handlers
        var _loop = function _loop1(eventKey) {
            addBindings(bindings, eventKey, function(event) {
                return _this.nativeRefs[eventKey](_extends({
                }, _this.state.shared, {
                    event: event,
                    args: args
                }));
            });
        };
        for(var eventKey in _this.nativeRefs)_loop(eventKey);
        if (_this.config.domTarget) // If config.domTarget is set we add event listeners to it and return the clean function.
        return updateDomListeners(_this, bindings);
        else // If not, we return an object that contains gesture handlers mapped to react handler event keys.
        return getPropsListener(_this, bindings);
    };
    this.effect = function() {
        if (_this.config.domTarget) _this.bind();
        return _this.clean;
    };
    /**
   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.
   */ this.clean = function() {
        var domTarget = getDomTargetFromConfig(_this.config);
        var eventOptions = _this.config.eventOptions;
        if (domTarget) removeListeners(domTarget, takeAll(_this.domListeners), eventOptions);
        Object.values(_this.timeouts).forEach(clearTimeout);
        clearAllWindowListeners(_this);
    };
    this.classes = classes;
    this.state = getInitialState();
    this.timeouts = {
    };
    this.domListeners = [];
    this.windowListeners = {
    };
};
function addEventIds(controller, event) {
    if ('pointerId' in event) controller.pointerIds.add(event.pointerId);
    else controller.touchIds = new Set(getTouchIds(event));
}
function removeEventIds(controller, event) {
    if ('pointerId' in event) controller.pointerIds["delete"](event.pointerId);
    else getTouchIds(event).forEach(function(id) {
        return controller.touchIds["delete"](id);
    });
}
function clearAllWindowListeners(controller) {
    var _controller$config = controller.config, el = _controller$config.window, eventOptions = _controller$config.eventOptions, windowListeners = controller.windowListeners;
    if (!el) return;
    for(var stateKey in windowListeners){
        var handlers = windowListeners[stateKey];
        removeListeners(el, handlers, eventOptions);
    }
    controller.windowListeners = {
    };
}
function clearWindowListeners(_ref, stateKey, options) {
    var config = _ref.config, windowListeners = _ref.windowListeners;
    if (options === void 0) options = config.eventOptions;
    if (!config.window) return;
    removeListeners(config.window, windowListeners[stateKey], options);
    delete windowListeners[stateKey];
}
function updateWindowListeners(_ref2, stateKey, listeners, options) {
    var config = _ref2.config, windowListeners = _ref2.windowListeners;
    if (listeners === void 0) listeners = [];
    if (options === void 0) options = config.eventOptions;
    if (!config.window) return;
    removeListeners(config.window, windowListeners[stateKey], options);
    addListeners(config.window, windowListeners[stateKey] = listeners, options);
}
function updateDomListeners(_ref3, bindings) {
    var config = _ref3.config, domListeners = _ref3.domListeners;
    var domTarget = getDomTargetFromConfig(config);
    if (!domTarget) throw new Error('domTarget must be defined');
    var eventOptions = config.eventOptions;
    removeListeners(domTarget, takeAll(domListeners), eventOptions);
    for(var _i = 0, _Object$entries = Object.entries(bindings); _i < _Object$entries.length; _i++){
        var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], fns = _Object$entries$_i[1];
        var name = key.slice(2).toLowerCase();
        domListeners.push([
            name,
            chainFns.apply(void 0, fns)
        ]);
    }
    addListeners(domTarget, domListeners, eventOptions);
}
function getPropsListener(_ref4, bindings) {
    var config = _ref4.config;
    var props = {
    };
    var captureString = config.eventOptions.capture ? 'Capture' : '';
    for(var _i2 = 0, _Object$entries2 = Object.entries(bindings); _i2 < _Object$entries2.length; _i2++){
        var _Object$entries2$_i = _Object$entries2[_i2], event = _Object$entries2$_i[0], fns = _Object$entries2$_i[1];
        var fnsArray = Array.isArray(fns) ? fns : [
            fns
        ];
        var key = event + captureString;
        props[key] = chainFns.apply(void 0, fnsArray);
    }
    return props;
}
function takeAll(array) {
    if (array === void 0) array = [];
    return array.splice(0, array.length);
}
function getDomTargetFromConfig(_ref5) {
    var domTarget = _ref5.domTarget;
    return domTarget && 'current' in domTarget ? domTarget.current : domTarget;
}
/**
 * bindings is an object which keys match ReactEventHandlerKeys.
 * Since a recognizer might want to bind a handler function to an event key already used by a previously
 * added recognizer, we need to make sure that each event key is an array of all the functions mapped for
 * that key.
 */ function addBindings(bindings, name, fn) {
    if (!bindings[name]) bindings[name] = [];
    bindings[name].push(fn);
}
function addListeners(el, listeners, options) {
    if (listeners === void 0) listeners = [];
    if (options === void 0) options = {
    };
    for(var _iterator2 = _createForOfIteratorHelperLoose(listeners), _step2; !(_step2 = _iterator2()).done;){
        var _step2$value = _step2.value, eventName = _step2$value[0], eventHandler = _step2$value[1];
        el.addEventListener(eventName, eventHandler, options);
    }
}
function removeListeners(el, listeners, options) {
    if (listeners === void 0) listeners = [];
    if (options === void 0) options = {
    };
    for(var _iterator3 = _createForOfIteratorHelperLoose(listeners), _step3; !(_step3 = _iterator3()).done;){
        var _step3$value = _step3.value, eventName = _step3$value[0], eventHandler = _step3$value[1];
        el.removeEventListener(eventName, eventHandler, options);
    }
}
/* eslint-disable react-hooks/exhaustive-deps */ /**
 * Utility hook called by all gesture hooks and that will be responsible for the internals.
 *
 * @param handlers
 * @param classes
 * @param config
 * @param nativeHandlers - native handlers such as onClick, onMouseDown, etc.
 */ function useRecognizers(handlers, config, nativeHandlers) {
    if (nativeHandlers === void 0) nativeHandlers = {
    };
    var classes = resolveClasses(handlers);
    var controller = _reactDefault.default.useMemo(function() {
        return new Controller(classes);
    }, []);
    controller.config = config;
    controller.handlers = handlers;
    controller.nativeRefs = nativeHandlers;
    _reactDefault.default.useEffect(controller.effect, []); // @ts-ignore
    if (controller.config.domTarget) return deprecationNoticeForDomTarget; // @ts-ignore
    return controller.bind;
}
function deprecationNoticeForDomTarget() {
    // eslint-disable-next-line no-console
    console.warn("Deprecation notice: When the `domTarget` option is specified, you don't need to write `useEffect(bind, [bind])` anymore: event binding is now made handled internally to this lib.\n\nNext version won't return anything when `domTarget` is provided, therefore your code will break if you try to call `useEffect`.");
}
function resolveClasses(internalHandlers) {
    var classes = new Set();
    if (internalHandlers.drag) classes.add(RecognizersMap.get('drag'));
    if (internalHandlers.wheel) classes.add(RecognizersMap.get('wheel'));
    if (internalHandlers.scroll) classes.add(RecognizersMap.get('scroll'));
    if (internalHandlers.move) classes.add(RecognizersMap.get('move'));
    if (internalHandlers.pinch) classes.add(RecognizersMap.get('pinch'));
    if (internalHandlers.hover) classes.add(RecognizersMap.get('hover'));
    return classes;
}
/**
 * @private
 * Abstract class for coordinates-based gesture recongizers
 */ var CoordinatesRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
    _inheritsLoose(CoordinatesRecognizer2, _Recognizer);
    function CoordinatesRecognizer2() {
        return _Recognizer.apply(this, arguments) || this;
    }
    var _proto = CoordinatesRecognizer2.prototype;
    /**
   * Returns the real movement (without taking intentionality into account)
   */ _proto.getInternalMovement = function getInternalMovement(values, state) {
        return subV(values, state.initial);
    };
    _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {
        if (_intentional[0] === false && _intentional[1] === false) return {
            _intentional: _intentional,
            axis: this.state.axis
        };
        var _movement$map = _movement.map(Math.abs), absX = _movement$map[0], absY = _movement$map[1];
        var axis = this.state.axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined);
        if (!this.config.axis && !this.config.lockDirection) return {
            _intentional: _intentional,
            _blocked: false,
            axis: axis
        };
        if (!axis) return {
            _intentional: [
                false,
                false
            ],
            _blocked: false,
            axis: axis
        };
        if (!!this.config.axis && axis !== this.config.axis) return {
            _intentional: _intentional,
            _blocked: true,
            axis: axis
        };
        _intentional[axis === 'x' ? 1 : 0] = false;
        return {
            _intentional: _intentional,
            _blocked: false,
            axis: axis
        };
    };
    _proto.getKinematics = function getKinematics(values, event) {
        var state = this.getMovement(values);
        if (!state._blocked) {
            var dt = event.timeStamp - this.state.timeStamp;
            Object.assign(state, calculateAllKinematics(state.movement, state.delta, dt));
        }
        return state;
    };
    _proto.mapStateValues = function mapStateValues(state) {
        return {
            xy: state.values,
            vxvy: state.velocities
        };
    };
    return CoordinatesRecognizer2;
}(Recognizer);
var TAP_DISTANCE_THRESHOLD = 3;
function persistEvent(event) {
    'persist' in event && typeof event.persist === 'function' && event.persist();
}
var DragRecognizer1 = /*#__PURE__*/ function(_CoordinatesRecognize) {
    _inheritsLoose(DragRecognizer2, _CoordinatesRecognize);
    function DragRecognizer2() {
        var _this;
        _this = _CoordinatesRecognize.apply(this, arguments) || this;
        _this.ingKey = 'dragging';
        _this.stateKey = 'drag'; // TODO add back when setPointerCapture is widely wupported
        // https://caniuse.com/#search=setPointerCapture
        _this.setPointerCapture = function(event) {
            // don't perform pointere capture when user wants to use touch events or
            // when a pointerLockElement exists as this would throw an error
            if (_this.config.useTouch || document.pointerLockElement) return;
            var target = event.target, pointerId = event.pointerId;
            if (target && 'setPointerCapture' in target) // this would work in the DOM but doesn't with react three fiber
            // target.addEventListener('pointermove', this.onDragChange, this.controller.config.eventOptions)
            // @ts-expect-error
            target.setPointerCapture(pointerId);
            _this.updateGestureState({
                _dragTarget: target,
                _dragPointerId: pointerId
            });
        };
        _this.releasePointerCapture = function() {
            if (_this.config.useTouch || document.pointerLockElement) return;
            var _this$state = _this.state, _dragTarget = _this$state._dragTarget, _dragPointerId = _this$state._dragPointerId;
            if (_dragPointerId && _dragTarget && 'releasePointerCapture' in _dragTarget) {
                // this would work in the DOM but doesn't with react three fiber
                // target.removeEventListener('pointermove', this.onDragChange, this.controller.config.eventOptions)
                if (!('hasPointerCapture' in _dragTarget) || _dragTarget.hasPointerCapture(_dragPointerId)) try {
                    _dragTarget.releasePointerCapture(_dragPointerId);
                } catch (e) {
                }
            }
        };
        _this.preventScroll = function(event) {
            if (_this.state._dragPreventScroll && event.cancelable) event.preventDefault();
        };
        _this.getEventId = function(event) {
            if (_this.config.useTouch) return event.changedTouches[0].identifier;
            return event.pointerId;
        };
        _this.isValidEvent = function(event) {
            // if we were using pointer events only event.isPrimary === 1 would suffice
            return _this.state._pointerId === _this.getEventId(event);
        };
        _this.shouldPreventWindowScrollY = _this.config.experimental_preventWindowScrollY && _this.controller.supportsTouchEvents;
        _this.setUpWindowScrollDetection = function(event) {
            persistEvent(event); // we add window listeners that will prevent the scroll when the user has started dragging
            updateWindowListeners(_this.controller, _this.stateKey, [
                [
                    'touchmove',
                    _this.preventScroll
                ],
                [
                    'touchend',
                    _this.clean.bind(_assertThisInitialized(_this))
                ],
                [
                    'touchcancel',
                    _this.clean.bind(_assertThisInitialized(_this))
                ]
            ], {
                passive: false
            });
            _this.setTimeout(_this.startDrag.bind(_assertThisInitialized(_this)), 250, event);
        };
        _this.setUpDelayedDragTrigger = function(event) {
            _this.state._dragDelayed = true;
            persistEvent(event);
            _this.setTimeout(_this.startDrag.bind(_assertThisInitialized(_this)), _this.config.delay, event);
        };
        _this.setStartState = function(event) {
            var values = getPointerEventValues(event, _this.transform);
            _this.updateSharedState(getGenericEventData(event));
            _this.updateGestureState(_extends({
            }, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {
                _pointerId: _this.getEventId(event)
            }));
            _this.updateGestureState(_this.getMovement(values));
        };
        _this.onDragStart = function(event) {
            addEventIds(_this.controller, event);
            if (!_this.enabled || _this.state._active) return;
            _this.setStartState(event);
            _this.setPointerCapture(event);
            if (_this.shouldPreventWindowScrollY) _this.setUpWindowScrollDetection(event);
            else if (_this.config.delay > 0) _this.setUpDelayedDragTrigger(event);
            else _this.startDrag(event, true); // we pass the values to the startDrag event
        };
        _this.onDragChange = function(event) {
            if (_this.state.canceled || !_this.state._active || !_this.isValidEvent(event) || // note that checking type equality is ONLY for tests ¯\_(ツ)_/¯
            _this.state._lastEventType === event.type && event.timeStamp === _this.state.timeStamp) return;
            var values;
            if (document.pointerLockElement) {
                var movementX = event.movementX, movementY = event.movementY;
                values = addV(_this.transform([
                    movementX,
                    movementY
                ]), _this.state.values);
            } else values = getPointerEventValues(event, _this.transform);
            var kinematics = _this.getKinematics(values, event); // if startDrag hasn't fired
            if (!_this.state._dragStarted) {
                // If the gesture isn't active then respond to the event only if
                // it's been delayed via the `delay` option, in which case start
                // the gesture immediately.
                if (_this.state._dragDelayed) {
                    _this.startDrag(event);
                    return;
                } // if the user wants to prevent vertical window scroll when user starts dragging
                if (_this.shouldPreventWindowScrollY) {
                    if (!_this.state._dragPreventScroll && kinematics.axis) {
                        // if the user is dragging horizontally then we should allow the drag
                        if (kinematics.axis === 'x') _this.startDrag(event);
                        else {
                            _this.state._active = false;
                            return;
                        }
                    } else return;
                } else return;
            }
            var genericEventData = getGenericEventData(event);
            _this.updateSharedState(genericEventData);
            var genericPayload = getGenericPayload(_assertThisInitialized(_this), event); // This verifies if the drag can be assimilated to a tap by checking
            // if the real distance of the drag (ie not accounting for the threshold) is
            // greater than the TAP_DISTANCE_THRESHOLD.
            var realDistance = calculateDistance(kinematics._movement);
            var _dragIsTap = _this.state._dragIsTap;
            if (_dragIsTap && realDistance >= TAP_DISTANCE_THRESHOLD) _dragIsTap = false;
            _this.updateGestureState(_extends({
            }, genericPayload, kinematics, {
                _dragIsTap: _dragIsTap
            }));
            _this.fireGestureHandler();
        };
        _this.onDragEnd = function(event) {
            removeEventIds(_this.controller, event); // if the event pointerId doesn't match the one that initiated the drag
            // we don't want to end the drag
            if (!_this.isValidEvent(event)) return;
            _this.clean(); // if the gesture is no longer active (ie canceled)
            // don't do anything
            if (!_this.state._active) return;
            _this.state._active = false;
            var tap = _this.state._dragIsTap;
            var _this$state$velocitie = _this.state.velocities, vx = _this$state$velocitie[0], vy = _this$state$velocitie[1];
            var _this$state$movement = _this.state.movement, mx = _this$state$movement[0], my = _this$state$movement[1];
            var _this$state$_intentio = _this.state._intentional, ix = _this$state$_intentio[0], iy = _this$state$_intentio[1];
            var _this$config$swipeVel = _this.config.swipeVelocity, svx = _this$config$swipeVel[0], svy = _this$config$swipeVel[1];
            var _this$config$swipeDis = _this.config.swipeDistance, sx = _this$config$swipeDis[0], sy = _this$config$swipeDis[1];
            var sd = _this.config.swipeDuration;
            var endState = _extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values));
            var swipe = [
                0,
                0
            ];
            if (endState.elapsedTime < sd) {
                if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = sign(vx);
                if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = sign(vy);
            }
            _this.updateSharedState({
                buttons: 0
            });
            _this.updateGestureState(_extends({
            }, endState, {
                tap: tap,
                swipe: swipe
            }));
            _this.fireGestureHandler(_this.config.filterTaps && tap === true);
        };
        _this.clean = function() {
            _CoordinatesRecognize.prototype.clean.call(_assertThisInitialized(_this));
            _this.state._dragStarted = false;
            _this.releasePointerCapture();
            clearWindowListeners(_this.controller, _this.stateKey);
        };
        _this.onCancel = function() {
            if (_this.state.canceled) return;
            _this.updateGestureState({
                canceled: true,
                _active: false
            });
            _this.updateSharedState({
                buttons: 0
            });
            setTimeout(function() {
                return _this.fireGestureHandler();
            }, 0);
        };
        _this.onClick = function(event) {
            if (!_this.state._dragIsTap) event.stopPropagation();
        };
        return _this;
    }
    var _proto = DragRecognizer2.prototype;
    _proto.startDrag = function startDrag(event, onDragIsStart) {
        if (onDragIsStart === void 0) onDragIsStart = false;
        // startDrag can happen after a timeout, so we need to check if the gesture is still active
        // as the user might have lift up the pointer in between.
        if (!this.state._active || this.state._dragStarted) return;
        if (!onDragIsStart) this.setStartState(event);
        this.updateGestureState({
            _dragStarted: true,
            _dragPreventScroll: true,
            cancel: this.onCancel
        });
        this.clearTimeout();
        this.fireGestureHandler();
    };
    _proto.addBindings = function addBindings$1(bindings) {
        if (this.config.useTouch) {
            addBindings(bindings, 'onTouchStart', this.onDragStart);
            addBindings(bindings, 'onTouchMove', this.onDragChange); // this is needed for react-three-fiber
            addBindings(bindings, 'onTouchEnd', this.onDragEnd);
            addBindings(bindings, 'onTouchCancel', this.onDragEnd);
        } else {
            addBindings(bindings, 'onPointerDown', this.onDragStart);
            addBindings(bindings, 'onPointerMove', this.onDragChange); // this is needed for react-three-fiber
            addBindings(bindings, 'onPointerUp', this.onDragEnd);
            addBindings(bindings, 'onPointerCancel', this.onDragEnd);
        }
        if (this.config.filterTaps) {
            var handler = this.controller.config.eventOptions.capture ? 'onClick' : 'onClickCapture';
            addBindings(bindings, handler, this.onClick);
        }
    };
    return DragRecognizer2;
}(CoordinatesRecognizer1);
/**
 * Inlined from https://github.com/alexreardon/memoize-one
 */ function memoizeOne(resultFn, isEqual) {
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        for(var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++)newArgs[_key] = arguments[_key];
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) return lastResult;
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}
/**
 * Taken from https://github.com/FormidableLabs/react-fast-compare
 *
 * Dropped comments and ArrayBuffer handling
 */ function equal(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length !== b.length) return false;
            for(i = length; (i--) !== 0;){
                if (!equal(a[i], b[i])) return false;
            }
            return true;
        }
        var it;
        if (typeof Map === 'function' && a instanceof Map && b instanceof Map) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done){
                if (!b.has(i.value[0])) return false;
            }
            it = a.entries();
            while(!(i = it.next()).done){
                if (!equal(i.value[1], b.get(i.value[0]))) return false;
            }
            return true;
        }
        if (typeof Set === 'function' && a instanceof Set && b instanceof Set) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done){
                if (!b.has(i.value[0])) return false;
            }
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; (i--) !== 0;){
            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        }
        if (typeof Element !== 'undefined' && a instanceof Element) return false;
        for(i = length; (i--) !== 0;){
            if (keys[i] === '_owner' && a.$$typeof) continue;
            if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        return true;
    } // true if both NaN, false otherwise — NaN !== NaN → true
    // eslint-disable-next-line no-self-compare
    return a !== a && b !== b;
}
function isEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if ((error.message || '').match(/stack|recursion/i)) {
            // eslint-disable-next-line no-console
            console.warn('react-fast-compare cannot handle circular refs');
            return false;
        }
        throw error;
    }
}
/**
 * Drag hook.
 *
 * @param handler - the function fired every time the drag gesture updates
 * @param [config={}] - the config object including generic options and drag options
 */ function useDrag(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('drag', DragRecognizer1);
    var buildDragConfig = _react.useRef();
    if (!buildDragConfig.current) buildDragConfig.current = memoizeOne(_buildDragConfig, isEqual);
    return useRecognizers({
        drag: handler
    }, buildDragConfig.current(config));
}
/**
 * @private
 * Abstract class for distance/angle-based gesture recongizers
 */ var DistanceAngleRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
    _inheritsLoose(DistanceAngleRecognizer2, _Recognizer);
    function DistanceAngleRecognizer2() {
        return _Recognizer.apply(this, arguments) || this;
    }
    var _proto = DistanceAngleRecognizer2.prototype;
    _proto.getInternalMovement = function getInternalMovement(values, state) {
        var prev_a = state.values[1]; // not be defined if ctrl+wheel is used for zoom only
        var d = values[0], _values$ = values[1], a = _values$ === void 0 ? prev_a : _values$;
        var delta_a = a - prev_a;
        var next_turns = state.turns;
        if (Math.abs(delta_a) > 270) next_turns += sign(delta_a);
        return subV([
            d,
            a - 360 * next_turns
        ], state.initial);
    };
    _proto.getKinematics = function getKinematics(values, event) {
        var state = this.getMovement(values);
        var turns = (values[1] - state._movement[1] - this.state.initial[1]) / 360;
        var dt = event.timeStamp - this.state.timeStamp;
        var _calculateAllKinemati = calculateAllKinematics(state.movement, state.delta, dt), kinematics = _objectWithoutPropertiesLoose(_calculateAllKinemati, [
            "distance",
            "velocity"
        ]);
        return _extends({
            turns: turns
        }, state, kinematics);
    };
    _proto.mapStateValues = function mapStateValues(state) {
        return {
            da: state.values,
            vdva: state.velocities
        };
    };
    return DistanceAngleRecognizer2;
}(Recognizer);
var ZOOM_CONSTANT = 7;
var WEBKIT_DISTANCE_SCALE_FACTOR = 260;
var PinchRecognizer1 = /*#__PURE__*/ function(_DistanceAngleRecogni) {
    _inheritsLoose(PinchRecognizer2, _DistanceAngleRecogni);
    function PinchRecognizer2() {
        var _this;
        _this = _DistanceAngleRecogni.apply(this, arguments) || this;
        _this.ingKey = 'pinching';
        _this.stateKey = 'pinch';
        _this.onPinchStart = function(event) {
            addEventIds(_this.controller, event);
            var touchIds = _this.controller.touchIds;
            if (!_this.enabled) return;
            if (_this.state._active) {
                // check that the pointerIds that initiated the gesture
                // are still enabled. This is useful for when the page
                // loses track of the pointers (minifying gesture on iPad).
                if (_this.state._pointerIds.every(function(id) {
                    return touchIds.has(id);
                })) return; // something was wrong with the pointers but we let it go.
            } // until we reach two fingers on the target don't react
            if (touchIds.size < 2) return;
            var _pointerIds = Array.from(touchIds).slice(0, 2);
            var _getTwoTouchesEventVa = getTwoTouchesEventValues(event, _pointerIds, _this.transform), values = _getTwoTouchesEventVa.values, origin = _getTwoTouchesEventVa.origin;
            _this.updateSharedState(getGenericEventData(event));
            _this.updateGestureState(_extends({
            }, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {
                _pointerIds: _pointerIds,
                cancel: _this.onCancel,
                origin: origin
            }));
            _this.updateGestureState(_this.getMovement(values));
            _this.fireGestureHandler();
        };
        _this.onPinchChange = function(event) {
            var _this$state = _this.state, canceled = _this$state.canceled, _active = _this$state._active;
            if (canceled || !_active || event.timeStamp === _this.state.timeStamp) return;
            var genericEventData = getGenericEventData(event);
            _this.updateSharedState(genericEventData);
            try {
                var _getTwoTouchesEventVa2 = getTwoTouchesEventValues(event, _this.state._pointerIds, _this.transform), values = _getTwoTouchesEventVa2.values, origin = _getTwoTouchesEventVa2.origin;
                var kinematics = _this.getKinematics(values, event);
                _this.updateGestureState(_extends({
                }, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {
                    origin: origin
                }));
                _this.fireGestureHandler();
            } catch (e) {
                _this.onPinchEnd(event);
            }
        };
        _this.onPinchEnd = function(event) {
            removeEventIds(_this.controller, event);
            var pointerIds = getTouchIds(event); // if none of the lifted pointerIds is in the state pointerIds don't do anything
            if (_this.state._pointerIds.every(function(id) {
                return !pointerIds.includes(id);
            })) return;
            _this.clean();
            if (!_this.state._active) return;
            _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values), {
                _active: false
            }));
            _this.fireGestureHandler();
        };
        _this.onCancel = function() {
            if (_this.state.canceled) return;
            _this.updateGestureState({
                _active: false,
                canceled: true
            });
            setTimeout(function() {
                return _this.fireGestureHandler();
            }, 0);
        };
        /**
     * PINCH WITH WEBKIT GESTURES
     */ _this.onGestureStart = function(event) {
            if (!_this.enabled) return;
            event.preventDefault();
            var values = getWebkitGestureEventValues(event, _this.transform);
            _this.updateSharedState(getGenericEventData(event));
            _this.updateGestureState(_extends({
            }, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {
                origin: [
                    event.clientX,
                    event.clientY
                ],
                cancel: _this.onCancel
            }));
            _this.updateGestureState(_this.getMovement(values));
            _this.fireGestureHandler();
        };
        _this.onGestureChange = function(event) {
            var _this$state2 = _this.state, canceled = _this$state2.canceled, _active = _this$state2._active;
            if (canceled || !_active) return;
            event.preventDefault();
            var genericEventData = getGenericEventData(event);
            _this.updateSharedState(genericEventData); // this normalizes the values of the Safari's WebKitEvent by calculating
            // the delta and then multiplying it by a constant.
            var values = getWebkitGestureEventValues(event, _this.transform);
            values[0] = (values[0] - _this.state.event.scale) * WEBKIT_DISTANCE_SCALE_FACTOR + _this.state.values[0];
            var kinematics = _this.getKinematics(values, event);
            _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {
                origin: [
                    event.clientX,
                    event.clientY
                ]
            }));
            _this.fireGestureHandler();
        };
        _this.onGestureEnd = function(event) {
            _this.clean();
            if (!_this.state._active) return;
            _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values), {
                _active: false,
                origin: [
                    event.clientX,
                    event.clientY
                ]
            }));
            _this.fireGestureHandler();
        };
        /**
     * PINCH WITH WHEEL
     */ _this.wheelShouldRun = function(event) {
            return _this.enabled && event.ctrlKey;
        };
        _this.getWheelValuesFromEvent = function(event) {
            var _getWheelEventValues = getWheelEventValues(event, _this.transform), delta_d = _getWheelEventValues[1];
            var _this$state$values = _this.state.values, prev_d = _this$state$values[0], prev_a = _this$state$values[1]; // ZOOM_CONSTANT is based on Safari trackpad natural zooming
            var _delta_d = -delta_d * ZOOM_CONSTANT; // new distance is the previous state distance added to the delta
            var d = prev_d + _delta_d;
            var a = prev_a !== void 0 ? prev_a : 0;
            return {
                values: [
                    d,
                    a
                ],
                origin: [
                    event.clientX,
                    event.clientY
                ],
                delta: [
                    _delta_d,
                    a
                ]
            };
        };
        _this.onWheel = function(event) {
            if (!_this.wheelShouldRun(event)) return;
            _this.setTimeout(_this.onWheelEnd);
            if (!_this.state._active) _this.onWheelStart(event);
            else _this.onWheelChange(event);
        };
        _this.onWheelStart = function(event) {
            var _this$getWheelValuesF = _this.getWheelValuesFromEvent(event), values = _this$getWheelValuesF.values, delta = _this$getWheelValuesF.delta, origin = _this$getWheelValuesF.origin;
            if (event.cancelable) event.preventDefault();
            else // eslint-disable-next-line no-console
            console.warn('To properly support zoom on trackpads, try using the `domTarget` option and `config.eventOptions.passive` set to `false`. This message will only appear in development mode.');
            _this.updateSharedState(getGenericEventData(event));
            _this.updateGestureState(_extends({
            }, getStartGestureState(_assertThisInitialized(_this), values, event, _this.state.values), getGenericPayload(_assertThisInitialized(_this), event, true), {
                offset: values,
                delta: delta,
                origin: origin
            }));
            _this.updateGestureState(_this.getMovement(values));
            _this.fireGestureHandler();
        };
        _this.onWheelChange = function(event) {
            if (event.cancelable) event.preventDefault();
            _this.updateSharedState(getGenericEventData(event));
            var _this$getWheelValuesF2 = _this.getWheelValuesFromEvent(event), values = _this$getWheelValuesF2.values, origin = _this$getWheelValuesF2.origin, delta = _this$getWheelValuesF2.delta;
            _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event), {
                origin: origin,
                delta: delta
            }));
            _this.fireGestureHandler();
        };
        _this.onWheelEnd = function() {
            _this.clean();
            if (!_this.state._active) return;
            _this.state._active = false;
            _this.updateGestureState(_this.getMovement(_this.state.values));
            _this.fireGestureHandler();
        };
        return _this;
    }
    var _proto = PinchRecognizer2.prototype;
    _proto.addBindings = function addBindings$1(bindings) {
        // Only try to use gesture events when they are supported and domTarget is set
        // as React doesn't support gesture handlers.
        if (this.controller.config.domTarget && !this.controller.supportsTouchEvents && this.controller.supportsGestureEvents) {
            addBindings(bindings, 'onGestureStart', this.onGestureStart);
            addBindings(bindings, 'onGestureChange', this.onGestureChange);
            addBindings(bindings, 'onGestureEnd', this.onGestureEnd);
        } else {
            addBindings(bindings, 'onTouchStart', this.onPinchStart);
            addBindings(bindings, 'onTouchMove', this.onPinchChange);
            addBindings(bindings, 'onTouchEnd', this.onPinchEnd);
            addBindings(bindings, 'onTouchCancel', this.onPinchEnd);
            addBindings(bindings, 'onWheel', this.onWheel);
        }
    };
    return PinchRecognizer2;
}(DistanceAngleRecognizer1);
/**
 * Pinch hook.
 *
 * @param handler - the function fired every time the pinch gesture updates
 * @param [config={}] - the config object including generic options and pinch options
 */ function usePinch(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('pinch', PinchRecognizer1);
    var buildPinchConfig = _react.useRef();
    if (!buildPinchConfig.current) buildPinchConfig.current = memoizeOne(_buildPinchConfig, isEqual);
    return useRecognizers({
        pinch: handler
    }, buildPinchConfig.current(config));
}
var WheelRecognizer1 = /*#__PURE__*/ function(_CoordinatesRecognize) {
    _inheritsLoose(WheelRecognizer2, _CoordinatesRecognize);
    function WheelRecognizer2() {
        var _this;
        _this = _CoordinatesRecognize.apply(this, arguments) || this;
        _this.ingKey = 'wheeling';
        _this.stateKey = 'wheel';
        _this.debounced = true;
        _this.handleEvent = function(event) {
            if (event.ctrlKey && 'pinch' in _this.controller.handlers) return;
            if (!_this.enabled) return;
            _this.setTimeout(_this.onEnd);
            _this.updateSharedState(getGenericEventData(event));
            var values = addV(getWheelEventValues(event, _this.transform), _this.state.values);
            if (!_this.state._active) {
                _this.updateGestureState(_extends({
                }, getStartGestureState(_assertThisInitialized(_this), values, event, _this.state.values), getGenericPayload(_assertThisInitialized(_this), event, true)));
                var movement = _this.getMovement(values);
                var geometry = calculateAllGeometry(movement.delta);
                _this.updateGestureState(movement);
                _this.updateGestureState(geometry);
            } else _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));
            _this.fireGestureHandler();
        };
        _this.onEnd = function() {
            _this.clean();
            if (!_this.state._active) return;
            var movement = _this.getMovement(_this.state.values);
            _this.updateGestureState(movement);
            _this.updateGestureState({
                _active: false,
                velocities: [
                    0,
                    0
                ],
                velocity: 0
            });
            _this.fireGestureHandler();
        };
        return _this;
    }
    var _proto = WheelRecognizer2.prototype;
    _proto.addBindings = function addBindings$1(bindings) {
        addBindings(bindings, 'onWheel', this.handleEvent);
    };
    return WheelRecognizer2;
}(CoordinatesRecognizer1);
/**
 * Wheel hook.
 *
 * @param handler - the function fired every time the wheel gesture updates
 * @param the config object including generic options and wheel options
 */ function useWheel(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('wheel', WheelRecognizer1);
    var buildWheelConfig = _react.useRef();
    if (!buildWheelConfig.current) buildWheelConfig.current = memoizeOne(_buildWheelConfig, isEqual);
    return useRecognizers({
        wheel: handler
    }, buildWheelConfig.current(config));
}
var MoveRecognizer1 = /*#__PURE__*/ function(_CoordinatesRecognize) {
    _inheritsLoose(MoveRecognizer2, _CoordinatesRecognize);
    function MoveRecognizer2() {
        var _this;
        _this = _CoordinatesRecognize.apply(this, arguments) || this;
        _this.ingKey = 'moving';
        _this.stateKey = 'move';
        _this.debounced = true;
        _this.onMove = function(event) {
            if (!_this.enabled) return;
            _this.setTimeout(_this.onMoveEnd);
            if (!_this.state._active) _this.onMoveStart(event);
            else _this.onMoveChange(event);
        };
        _this.onMoveStart = function(event) {
            _this.updateSharedState(getGenericEventData(event));
            var values = getPointerEventValues(event, _this.transform);
            _this.updateGestureState(_extends({
            }, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true)));
            _this.updateGestureState(_this.getMovement(values));
            _this.fireGestureHandler();
        };
        _this.onMoveChange = function(event) {
            _this.updateSharedState(getGenericEventData(event));
            var values = getPointerEventValues(event, _this.transform);
            _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));
            _this.fireGestureHandler();
        };
        _this.onMoveEnd = function() {
            _this.clean();
            if (!_this.state._active) return;
            var values = _this.state.values;
            _this.updateGestureState(_this.getMovement(values));
            _this.updateGestureState({
                velocities: [
                    0,
                    0
                ],
                velocity: 0,
                _active: false
            });
            _this.fireGestureHandler();
        };
        _this.hoverTransform = function() {
            return _this.controller.config.hover.transform || _this.controller.config.transform;
        };
        _this.onPointerEnter = function(event) {
            _this.controller.state.shared.hovering = true;
            if (!_this.controller.config.enabled) return;
            if (_this.controller.config.hover.enabled) {
                var values = getPointerEventValues(event, _this.hoverTransform());
                var state = _extends({
                }, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event, true), {
                    args: _this.args,
                    values: values,
                    active: true,
                    hovering: true
                });
                _this.controller.handlers.hover(_extends({
                }, state, _this.mapStateValues(state)));
            }
            if ('move' in _this.controller.handlers) _this.onMoveStart(event);
        };
        _this.onPointerLeave = function(event) {
            _this.controller.state.shared.hovering = false;
            if ('move' in _this.controller.handlers) _this.onMoveEnd();
            if (!_this.controller.config.hover.enabled) return;
            var values = getPointerEventValues(event, _this.hoverTransform());
            var state = _extends({
            }, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event), {
                args: _this.args,
                values: values,
                active: false
            });
            _this.controller.handlers.hover(_extends({
            }, state, _this.mapStateValues(state)));
        };
        return _this;
    }
    var _proto = MoveRecognizer2.prototype;
    _proto.addBindings = function addBindings$1(bindings) {
        if ('move' in this.controller.handlers) addBindings(bindings, 'onPointerMove', this.onMove);
        if ('hover' in this.controller.handlers) {
            addBindings(bindings, 'onPointerEnter', this.onPointerEnter);
            addBindings(bindings, 'onPointerLeave', this.onPointerLeave);
        }
    };
    return MoveRecognizer2;
}(CoordinatesRecognizer1);
/**
 * Move hook.
 *
 * @param handler - the function fired every time the move gesture updates
 * @param [config={}] - the config object including generic options and move options
 */ function useMove(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('move', MoveRecognizer1);
    var buildMoveConfig = _react.useRef();
    if (!buildMoveConfig.current) buildMoveConfig.current = memoizeOne(_buildMoveConfig, isEqual);
    return useRecognizers({
        move: handler
    }, buildMoveConfig.current(config));
}
/**
 * Hover hook.
 *
 * @param handler - the function fired every time the hover gesture updates
 * @param [config={}] - the config object including generic options and hover options
 */ function useHover(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('hover', MoveRecognizer1);
    var buildHoverConfig = _react.useRef();
    if (!buildHoverConfig.current) buildHoverConfig.current = memoizeOne(_buildHoverConfig, isEqual);
    return useRecognizers({
        hover: handler
    }, buildHoverConfig.current(config));
}
var ScrollRecognizer1 = /*#__PURE__*/ function(_CoordinatesRecognize) {
    _inheritsLoose(ScrollRecognizer2, _CoordinatesRecognize);
    function ScrollRecognizer2() {
        var _this;
        _this = _CoordinatesRecognize.apply(this, arguments) || this;
        _this.ingKey = 'scrolling';
        _this.stateKey = 'scroll';
        _this.debounced = true;
        _this.handleEvent = function(event) {
            if (!_this.enabled) return;
            _this.clearTimeout();
            _this.setTimeout(_this.onEnd);
            var values = getScrollEventValues(event, _this.transform);
            _this.updateSharedState(getGenericEventData(event));
            if (!_this.state._active) {
                _this.updateGestureState(_extends({
                }, getStartGestureState(_assertThisInitialized(_this), values, event, _this.state.values), getGenericPayload(_assertThisInitialized(_this), event, true)));
                var movementDetection = _this.getMovement(values);
                var geometry = calculateAllGeometry(movementDetection.delta);
                _this.updateGestureState(movementDetection);
                _this.updateGestureState(geometry);
            } else _this.updateGestureState(_extends({
            }, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));
            _this.fireGestureHandler();
        };
        _this.onEnd = function() {
            _this.clean();
            if (!_this.state._active) return;
            _this.updateGestureState(_extends({
            }, _this.getMovement(_this.state.values), {
                _active: false,
                velocities: [
                    0,
                    0
                ],
                velocity: 0
            }));
            _this.fireGestureHandler();
        };
        return _this;
    }
    var _proto = ScrollRecognizer2.prototype;
    _proto.addBindings = function addBindings$1(bindings) {
        addBindings(bindings, 'onScroll', this.handleEvent);
    };
    return ScrollRecognizer2;
}(CoordinatesRecognizer1);
/**
 * Scroll hook.
 *
 * @param handler - the function fired every time the scroll gesture updates
 * @param [config={}] - the config object including generic options and scroll options
 */ function useScroll(handler, config) {
    if (config === void 0) config = {
    };
    RecognizersMap.set('scroll', ScrollRecognizer1);
    var buildScrollConfig = _react.useRef();
    if (!buildScrollConfig.current) buildScrollConfig.current = memoizeOne(_buildScrollConfig, isEqual);
    return useRecognizers({
        scroll: handler
    }, buildScrollConfig.current(config));
}
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(handlers) {
    var _native = {
    };
    var handle = {
    };
    var actions = new Set();
    for(var key in handlers)if (RE_NOT_NATIVE.test(key)) {
        actions.add(RegExp.lastMatch);
        handle[key] = handlers[key];
    } else _native[key] = handlers[key];
    return [
        handle,
        _native,
        actions
    ];
}
/**
 * @public
 *
 * The most complete gesture hook, allowing support for multiple gestures.
 *
 * @param {Handlers} handlers - an object with on[Gesture] keys containg gesture handlers
 * @param {UseGestureConfig} [config={}] - the full config object
 * @returns {(...args: any[]) => HookReturnType<Config>}
 */ function useGesture(_handlers, config) {
    if (config === void 0) config = {
    };
    var _sortHandlers = sortHandlers(_handlers), handlers = _sortHandlers[0], nativeHandlers = _sortHandlers[1], actions = _sortHandlers[2];
    RecognizersMap.set('drag', DragRecognizer1);
    RecognizersMap.set('hover', MoveRecognizer1);
    RecognizersMap.set('move', MoveRecognizer1);
    RecognizersMap.set('pinch', PinchRecognizer1);
    RecognizersMap.set('scroll', ScrollRecognizer1);
    RecognizersMap.set('wheel', WheelRecognizer1);
    var mergedConfig = buildComplexConfig(config, actions);
    var internalHandlers = {
    };
    if (actions.has('onDrag')) internalHandlers.drag = includeStartEndHandlers(handlers, 'onDrag');
    if (actions.has('onWheel')) internalHandlers.wheel = includeStartEndHandlers(handlers, 'onWheel');
    if (actions.has('onScroll')) internalHandlers.scroll = includeStartEndHandlers(handlers, 'onScroll');
    if (actions.has('onMove')) internalHandlers.move = includeStartEndHandlers(handlers, 'onMove');
    if (actions.has('onPinch')) internalHandlers.pinch = includeStartEndHandlers(handlers, 'onPinch');
    if (actions.has('onHover')) internalHandlers.hover = handlers.onHover;
    return useRecognizers(internalHandlers, mergedConfig, nativeHandlers);
}
function includeStartEndHandlers(handlers, handlerKey) {
    var startKey = handlerKey + 'Start';
    var endKey = handlerKey + 'End';
    var fn = function fn1(state) {
        var memo = undefined;
        if (state.first && startKey in handlers) handlers[startKey](state);
        if (handlerKey in handlers) memo = handlers[handlerKey](state);
        if (state.last && endKey in handlers) handlers[endKey](state);
        return memo;
    };
    return fn;
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"gkgZb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getStrokeOutlinePoints", ()=>getStrokeOutlinePoints
);
parcelHelpers.export(exports, "getStrokePoints", ()=>getStrokePoints
);
/**
 * Negate a vector.
 * @param A
 */ /**
 * Add vectors.
 * @param A
 * @param B
 */ function add(A, B) {
    return [
        A[0] + B[0],
        A[1] + B[1]
    ];
}
/**
 * Subtract vectors.
 * @param A
 * @param B
 */ function sub(A, B) {
    return [
        A[0] - B[0],
        A[1] - B[1]
    ];
}
/**
 * Get the vector from vectors A to B.
 * @param A
 * @param B
 */ function vec(A, B) {
    // A, B as vectors get the vector from A to B
    return [
        B[0] - A[0],
        B[1] - A[1]
    ];
}
/**
 * Vector multiplication by scalar
 * @param A
 * @param n
 */ function mul(A, n) {
    return [
        A[0] * n,
        A[1] * n
    ];
}
/**
 * Vector division by scalar.
 * @param A
 * @param n
 */ function div(A, n) {
    return [
        A[0] / n,
        A[1] / n
    ];
}
/**
 * Perpendicular rotation of a vector A
 * @param A
 */ function per(A) {
    return [
        A[1],
        -A[0]
    ];
}
/**
 * Dot product
 * @param A
 * @param B
 */ function dpr(A, B) {
    return A[0] * B[0] + A[1] * B[1];
}
/**
 * Length of the vector
 * @param A
 */ function len(A) {
    return Math.hypot(A[0], A[1]);
}
/**
 * Length of the vector squared
 * @param A
 */ function len2(A) {
    return A[0] * A[0] + A[1] * A[1];
}
/**
 * Dist length from A to B squared.
 * @param A
 * @param B
 */ function dist2(A, B) {
    return len2(sub(A, B));
}
/**
 * Get normalized / unit vector.
 * @param A
 */ function uni(A) {
    return div(A, len(A));
}
/**
 * Dist length from A to B
 * @param A
 * @param B
 */ function dist(A, B) {
    return Math.hypot(A[1] - B[1], A[0] - B[0]);
}
/**
 * Rotate a vector around another vector by r (radians)
 * @param A vector
 * @param C center
 * @param r rotation in radians
 */ function rotAround(A, C, r) {
    var s = Math.sin(r);
    var c = Math.cos(r);
    var px = A[0] - C[0];
    var py = A[1] - C[1];
    var nx = px * c - py * s;
    var ny = px * s + py * c;
    return [
        nx + C[0],
        ny + C[1]
    ];
}
/**
 * Interpolate vector A to B with a scalar t
 * @param A
 * @param B
 * @param t scalar
 */ function lrp(A, B, t) {
    return add(A, mul(vec(A, B), t));
} //  isLeft: >0 for counterclockwise
function isEqual(a, b) {
    return a[0] === b[0] && a[1] === b[1];
}
function lerp(y1, y2, mu) {
    return y1 * (1 - mu) + y2 * mu;
}
function clamp(n, a, b) {
    return Math.max(a, Math.min(b, n));
}
/**
 * Convert an array of points to the correct format ([x, y, radius])
 * @param points
 * @returns
 */ function toPointsArray(points) {
    if (Array.isArray(points[0])) return points.map(function(_ref) {
        var x = _ref[0], y = _ref[1], _ref$ = _ref[2], pressure = _ref$ === void 0 ? 0.5 : _ref$;
        return [
            x,
            y,
            pressure
        ];
    });
    else return points.map(function(_ref2) {
        var x = _ref2.x, y = _ref2.y, _ref2$pressure = _ref2.pressure, pressure = _ref2$pressure === void 0 ? 0.5 : _ref2$pressure;
        return [
            x,
            y,
            pressure
        ];
    });
}
/**
 * Compute a radius based on the pressure.
 * @param size
 * @param thinning
 * @param easing
 * @param pressure
 * @returns
 */ function getStrokeRadius(size, thinning, easing, pressure) {
    if (pressure === void 0) pressure = 0.5;
    if (!thinning) return size / 2;
    pressure = clamp(easing(pressure), 0, 1);
    return (thinning < 0 ? lerp(size, size + size * clamp(thinning, -0.95, -0.05), pressure) : lerp(size - size * clamp(thinning, 0.05, 0.95), size, pressure)) / 2;
}
var min = Math.min, PI = Math.PI;
/**
 * ## getStrokePoints
 * @description Get points for a stroke.
 * @param points An array of points (as `[x, y, pressure]` or `{x, y, pressure}`). Pressure is optional.
 * @param streamline How much to streamline the stroke.
 * @param size The stroke's size.
 */ function getStrokePoints(points, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$simulatePres = _options.simulatePressure, simulatePressure = _options$simulatePres === void 0 ? true : _options$simulatePres, _options$streamline = _options.streamline, streamline = _options$streamline === void 0 ? 0.5 : _options$streamline, _options$size = _options.size, size = _options$size === void 0 ? 8 : _options$size;
    streamline /= 2;
    if (!simulatePressure) streamline /= 2;
    var pts = toPointsArray(points);
    if (pts.length === 0) return [];
    if (pts.length === 1) pts.push([].concat(add(pts[0], [
        1,
        1
    ]), [
        pts[0][2]
    ]));
    var strokePoints = [
        {
            point: [
                pts[0][0],
                pts[0][1]
            ],
            pressure: pts[0][2],
            vector: [
                0,
                0
            ],
            distance: 0,
            runningLength: 0
        }
    ];
    for(var i = 1, j = 0, curr = pts[i], prev = strokePoints[j]; i < pts.length; i++, curr = pts[i], prev = strokePoints[j]){
        var point = lrp(prev.point, curr, 1 - streamline);
        if (isEqual(prev.point, point)) continue;
        var pressure = curr[2];
        var vector = uni(vec(point, prev.point));
        var distance = dist(point, prev.point);
        var runningLength = prev.runningLength + distance;
        var strokePoint = {
            point: point,
            pressure: pressure,
            vector: vector,
            distance: distance,
            runningLength: runningLength
        };
        strokePoints.push(strokePoint);
        j += 1; // only increment j if we add an item to strokePoints
    }
    /*
    Align vectors at the end of the line
       Starting from the last point, work back until we've traveled more than
    half of the line's size (width). Take the current point's vector and then
    work forward, setting all remaining points' vectors to this vector. This
    removes the "noise" at the end of the line and allows for a better-facing
    end cap.
  */ // Update the length to the length of the strokePoints array.
    var len1 = strokePoints.length;
    var totalLength = strokePoints[len1 - 1].runningLength;
    for(var _i = len1 - 2; _i > 1; _i--){
        var _strokePoints$_i = strokePoints[_i], _runningLength = _strokePoints$_i.runningLength, _vector = _strokePoints$_i.vector;
        var dpr$1 = dpr(strokePoints[_i - 1].vector, strokePoints[_i].vector);
        if (totalLength - _runningLength > size / 2 || dpr$1 < 0.8) {
            for(var _j = _i; _j < len1; _j++)strokePoints[_j].vector = _vector;
            break;
        }
    }
    return strokePoints;
}
/**
 * ## getStrokeOutlinePoints
 * @description Get an array of points (as `[x, y]`) representing the outline of a stroke.
 * @param points An array of points (as `[x, y, pressure]` or `{x, y, pressure}`). Pressure is optional.
 * @param options An (optional) object with options.
 * @param options.size	The base size (diameter) of the stroke.
 * @param options.thinning The effect of pressure on the stroke's size.
 * @param options.smoothing	How much to soften the stroke's edges.
 * @param options.easing	An easing function to apply to each point's pressure.
 * @param options.simulatePressure Whether to simulate pressure based on velocity.
 * @param options.start Tapering and easing function for the start of the line.
 * @param options.end Tapering and easing function for the end of the line.
 * @param options.last Whether to handle the points as a completed stroke.
 */ function getStrokeOutlinePoints(points, options) {
    if (options === void 0) options = {
    };
    var _options2 = options, _options2$size = _options2.size, size = _options2$size === void 0 ? 8 : _options2$size, _options2$thinning = _options2.thinning, thinning = _options2$thinning === void 0 ? 0.5 : _options2$thinning, _options2$smoothing = _options2.smoothing, smoothing = _options2$smoothing === void 0 ? 0.5 : _options2$smoothing, _options2$simulatePre = _options2.simulatePressure, simulatePressure = _options2$simulatePre === void 0 ? true : _options2$simulatePre, _options2$easing = _options2.easing, easing = _options2$easing === void 0 ? function(t) {
        return t;
    } : _options2$easing, _options2$start = _options2.start, start = _options2$start === void 0 ? {
    } : _options2$start, _options2$end = _options2.end, end = _options2$end === void 0 ? {
    } : _options2$end, _options2$last = _options2.last, isComplete = _options2$last === void 0 ? false : _options2$last;
    var _options3 = options, _options3$streamline = _options3.streamline, streamline = _options3$streamline === void 0 ? 0.5 : _options3$streamline;
    streamline /= 2;
    var _start$taper = start.taper, taperStart = _start$taper === void 0 ? 0 : _start$taper, _start$easing = start.easing, taperStartEase = _start$easing === void 0 ? function(t) {
        return t * (2 - t);
    } : _start$easing;
    var _end$taper = end.taper, taperEnd = _end$taper === void 0 ? 0 : _end$taper, _end$easing = end.easing, taperEndEase = _end$easing === void 0 ? function(t) {
        return (--t) * t * t + 1;
    } : _end$easing; // The number of points in the array
    var len1 = points.length; // We can't do anything with an empty array.
    if (len1 === 0) return []; // The total length of the line
    var totalLength = points[len1 - 1].runningLength; // Our collected left and right points
    var leftPts = [];
    var rightPts = []; // Previous pressure (start with average of first five pressures)
    var prevPressure = points.slice(0, 5).reduce(function(acc, cur) {
        return (acc + cur.pressure) / 2;
    }, points[0].pressure); // The current radius
    var radius = getStrokeRadius(size, thinning, easing, points[len1 - 1].pressure); // Previous vector
    var prevVector = points[0].vector; // Previous left and right points
    var pl = points[0].point;
    var pr = pl; // Temporary left and right points
    var tl = pl;
    var tr = pr;
    /*
    Find the outline's left and right points
      Iterating through the points and populate the rightPts and leftPts arrays,
   skipping the first and last pointsm, which will get caps later on.
  */ for(var i = 1; i < len1 - 1; i++){
        var _points$i = points[i], point = _points$i.point, pressure = _points$i.pressure, vector = _points$i.vector, distance = _points$i.distance, runningLength = _points$i.runningLength;
        /*
      Calculate the radius
           If not thinning, the current point's radius will be half the size; or
      otherwise, the size will be based on the current (real or simulated)
      pressure.
    */ if (thinning) {
            if (simulatePressure) {
                var rp = min(1, 1 - distance / size);
                var sp = min(1, distance / size);
                pressure = min(1, prevPressure + (rp - prevPressure) * (sp / 2));
            }
            radius = getStrokeRadius(size, thinning, easing, pressure);
        } else radius = size / 2;
        /*
      Apply tapering
           If the current length is within the taper distance at either the
      start or the end, calculate the taper strengths. Apply the smaller
      of the two taper strengths to the radius.
    */ var ts = runningLength < taperStart ? taperStartEase(runningLength / taperStart) : 1;
        var te = totalLength - runningLength < taperEnd ? taperEndEase((totalLength - runningLength) / taperEnd) : 1;
        radius *= Math.min(ts, te);
        /*
      Handle sharp corners
           Find the difference (dot product) between the current and next vector.
      If the next vector is at more than a right angle to the current vector,
      draw a cap at the current point.
    */ var nextVector = points[i + 1].vector;
        var dpr$1 = dpr(vector, nextVector);
        if (dpr$1 < 0) {
            var _offset = mul(per(prevVector), radius);
            for(var t = 0; t < 1; t += 0.2){
                tr = rotAround(add(point, _offset), point, PI * -t);
                tl = rotAround(sub(point, _offset), point, PI * t);
                rightPts.push(tr);
                leftPts.push(tl);
            }
            pl = tl;
            pr = tr;
            continue;
        }
        /*
      Add regular points
           Project points to either side of the current point, using the
      calculated size as a distance. If a point's distance to the
      previous point on that side greater than the minimum distance
      (or if the corner is kinda sharp), add the points to the side's
      points array.
    */ var offset = mul(per(lrp(nextVector, vector, dpr$1)), radius);
        tl = sub(point, offset);
        tr = add(point, offset);
        var alwaysAdd = i === 1 || dpr$1 < 0.25;
        var minDistance = Math.pow((runningLength > size ? size : size / 2) * smoothing, 2);
        if (alwaysAdd || dist2(pl, tl) > minDistance) {
            leftPts.push(lrp(pl, tl, streamline));
            pl = tl;
        }
        if (alwaysAdd || dist2(pr, tr) > minDistance) {
            rightPts.push(lrp(pr, tr, streamline));
            pr = tr;
        } // Set variables for next iteration
        prevPressure = pressure;
        prevVector = vector;
    }
    /*
    Drawing caps
    
    Now that we have our points on either side of the line, we need to
    draw caps at the start and end. Tapered lines don't have caps, but
    may have dots for very short lines.
  */ var firstPoint = points[0];
    var lastPoint = points[len1 - 1];
    var isVeryShort = rightPts.length < 2 || leftPts.length < 2;
    /*
    Draw a dot for very short or completed strokes
    
    If the line is too short to gather left or right points and if the line is
    not tapered on either side, draw a dot. If the line is tapered, then only
    draw a dot if the line is both very short and complete. If we draw a dot,
    we can just return those points.
  */ if (isVeryShort && (!(taperStart || taperEnd) || isComplete)) {
        var ir = 0;
        for(var _i2 = 0; _i2 < len1; _i2++){
            var _points$_i = points[_i2], _pressure = _points$_i.pressure, _runningLength2 = _points$_i.runningLength;
            if (_runningLength2 > size) {
                ir = getStrokeRadius(size, thinning, easing, _pressure);
                break;
            }
        }
        var _start = sub(firstPoint.point, mul(per(uni(vec(lastPoint.point, firstPoint.point))), ir || radius));
        var dotPts = [];
        for(var _t = 0, step = 0.1; _t <= 1; _t += step)dotPts.push(rotAround(_start, firstPoint.point, PI * 2 * _t));
        return dotPts;
    }
    /*
    Draw a start cap
       Unless the line has a tapered start, or unless the line has a tapered end
    and the line is very short, draw a start cap around the first point. Use
    the distance between the second left and right point for the cap's radius.
    Finally remove the first left and right points. :psyduck:
  */ var startCap = [];
    if (!taperStart && !(taperEnd && isVeryShort)) {
        tr = rightPts[1];
        for(var _i3 = 1; _i3 < leftPts.length; _i3++)if (!isEqual(tr, leftPts[_i3])) {
            tl = leftPts[_i3];
            break;
        }
        if (!isEqual(tr, tl)) {
            var _start2 = sub(firstPoint.point, mul(uni(vec(tr, tl)), dist(tr, tl) / 2));
            for(var _t2 = 0, _step = 0.2; _t2 <= 1; _t2 += _step)startCap.push(rotAround(_start2, firstPoint.point, PI * _t2));
            leftPts.shift();
            rightPts.shift();
        }
    }
    /*
    Draw an end cap
       If the line does not have a tapered end, and unless the line has a tapered
    start and the line is very short, draw a cap around the last point. Finally,
    remove the last left and right points. Otherwise, add the last point. Note
    that This cap is a full-turn-and-a-half: this prevents incorrect caps on
    sharp end turns.
  */ var endCap = [];
    if (!taperEnd && !(taperStart && isVeryShort)) {
        var _start3 = sub(lastPoint.point, mul(per(lastPoint.vector), radius));
        for(var _t3 = 0, _step2 = 0.1; _t3 <= 1; _t3 += _step2)endCap.push(rotAround(_start3, lastPoint.point, PI * 3 * _t3));
    } else endCap.push(lastPoint.point);
    /*
    Return the points in the correct windind order: begin on the left side, then
    continue around the end cap, then come back along the right side, and finally
    complete the start cap.
  */ return leftPts.concat(endCap, rightPts.reverse(), startCap);
}
/**
 * ## getStroke
 * @description Returns a stroke as an array of outline points.
 * @param points An array of points (as `[x, y, pressure]` or `{x, y, pressure}`). Pressure is optional.
 * @param options An (optional) object with options.
 * @param options.size	The base size (diameter) of the stroke.
 * @param options.thinning The effect of pressure on the stroke's size.
 * @param options.smoothing	How much to soften the stroke's edges.
 * @param options.easing	An easing function to apply to each point's pressure.
 * @param options.simulatePressure Whether to simulate pressure based on velocity.
 * @param options.start Tapering and easing function for the start of the line.
 * @param options.end Tapering and easing function for the end of the line.
 * @param options.last Whether to handle the points as a completed stroke.
 */ function getStroke(points, options) {
    if (options === void 0) options = {
    };
    return getStrokeOutlinePoints(getStrokePoints(points, options), options);
}
exports.default = getStroke;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eEtwz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isHotkeyPressed", ()=>isHotkeyPressed
);
parcelHelpers.export(exports, "useHotkeys", ()=>useHotkeys
);
parcelHelpers.export(exports, "useIsHotkeyPressed", ()=>useIsHotkeyPressed
);
var _hotkeysJs = require("hotkeys-js");
var _hotkeysJsDefault = parcelHelpers.interopDefault(_hotkeysJs);
var _react = require("react");
/**
 * @deprecated Use isHotkeyPressed instead. Will be removed version 4.
 */ function useIsHotkeyPressed() {
    return _hotkeysJsDefault.default.isPressed;
}
_hotkeysJsDefault.default.filter = function() {
    return true;
};
var tagFilter = function tagFilter1(_ref, enableOnTags) {
    var target = _ref.target;
    var targetTagName = target && target.tagName;
    return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
};
var isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput1(ev) {
    return tagFilter(ev, [
        'INPUT',
        'TEXTAREA',
        'SELECT'
    ]);
};
function useHotkeys(keys, callback, options, deps) {
    if (options instanceof Array) {
        deps = options;
        options = undefined;
    }
    var _ref2 = options || {
    }, enableOnTags = _ref2.enableOnTags, filter = _ref2.filter, keyup = _ref2.keyup, keydown = _ref2.keydown, _ref2$filterPreventDe = _ref2.filterPreventDefault, filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe, _ref2$enabled = _ref2.enabled, enabled = _ref2$enabled === void 0 ? true : _ref2$enabled, _ref2$enableOnContent = _ref2.enableOnContentEditable, enableOnContentEditable = _ref2$enableOnContent === void 0 ? false : _ref2$enableOnContent;
    var ref = _react.useRef(null); // The return value of this callback determines if the browsers default behavior is prevented.
    var memoisedCallback = _react.useCallback(function(keyboardEvent, hotkeysEvent) {
        var _keyboardEvent$target;
        if (filter && !filter(keyboardEvent)) return !filterPreventDefault;
         // Check whether the hotkeys was triggered inside an input and that input is enabled or if it was triggered by a content editable tag and it is enabled.
        if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags) || (_keyboardEvent$target = keyboardEvent.target) != null && _keyboardEvent$target.isContentEditable && !enableOnContentEditable) return true;
        if (ref.current === null || document.activeElement === ref.current) {
            callback(keyboardEvent, hotkeysEvent);
            return true;
        }
        return false;
    }, deps ? [
        ref,
        enableOnTags,
        filter
    ].concat(deps) : [
        ref,
        enableOnTags,
        filter
    ]);
    _react.useEffect(function() {
        if (!enabled) return;
         // In this case keydown is likely undefined, so we set it to false, since hotkeys needs the `keydown` key to have a value.
        if (keyup && keydown !== true) options.keydown = false;
        _hotkeysJsDefault.default(keys, options || {
        }, memoisedCallback);
        return function() {
            return _hotkeysJsDefault.default.unbind(keys, memoisedCallback);
        };
    }, [
        memoisedCallback,
        keys,
        enabled
    ]);
    return ref;
}
var isHotkeyPressed = _hotkeysJsDefault.default.isPressed;

},{"hotkeys-js":"agpIe","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"agpIe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * hotkeys-js v3.8.7
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 * 
 * Copyright (c) 2021 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 * 
 * Licensed under the MIT license.
 */ var isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件
function addEvent(object, event, method) {
    if (object.addEventListener) object.addEventListener(event, method, false);
    else if (object.attachEvent) object.attachEvent("on".concat(event), function() {
        method(window.event);
    });
} // 修饰键转换成对应的键码
function getMods(modifier, key) {
    var mods = key.slice(0, key.length - 1);
    for(var i = 0; i < mods.length; i++)mods[i] = modifier[mods[i].toLowerCase()];
    return mods;
} // 处理传的key字符串转换成数组
function getKeys(key) {
    if (typeof key !== 'string') key = '';
    key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等
    var keys = key.split(','); // 同时设置多个快捷键，以','分割
    var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理
    for(; index >= 0;){
        keys[index - 1] += ',';
        keys.splice(index, 1);
        index = keys.lastIndexOf('');
    }
    return keys;
} // 比较修饰键的数组
function compareArray(a1, a2) {
    var arr1 = a1.length >= a2.length ? a1 : a2;
    var arr2 = a1.length >= a2.length ? a2 : a1;
    var isIndex = true;
    for(var i = 0; i < arr1.length; i++)if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
    return isIndex;
}
var _keyMap = {
    backspace: 8,
    tab: 9,
    clear: 12,
    enter: 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    '⇪': 20,
    ',': 188,
    '.': 190,
    '/': 191,
    '`': 192,
    '-': isff ? 173 : 189,
    '=': isff ? 61 : 187,
    ';': isff ? 59 : 186,
    '\'': 222,
    '[': 219,
    ']': 221,
    '\\': 220
}; // Modifier Keys
var _modifier = {
    // shiftKey
    '⇧': 16,
    shift: 16,
    // altKey
    '⌥': 18,
    alt: 18,
    option: 18,
    // ctrlKey
    '⌃': 17,
    ctrl: 17,
    control: 17,
    // metaKey
    '⌘': 91,
    cmd: 91,
    command: 91
};
var modifierMap = {
    16: 'shiftKey',
    18: 'altKey',
    17: 'ctrlKey',
    91: 'metaKey',
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
};
var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
};
var _handlers = {
}; // F1~F12 special key
for(var k = 1; k < 20; k++)_keyMap["f".concat(k)] = 111 + k;
var _downKeys = []; // 记录摁下的绑定键
var _scope = 'all'; // 默认热键范围
var elementHasBindEvent = []; // 已绑定事件的节点记录
// 返回键码
var code = function code1(x) {
    return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
}; // 设置获取当前范围（默认为'所有'）
function setScope(scope) {
    _scope = scope || 'all';
} // 获取当前范围
function getScope() {
    return _scope || 'all';
} // 获取摁下绑定键的键值
function getPressedKeyCodes() {
    return _downKeys.slice(0);
} // 表单控件控件判断 返回 Boolean
// hotkey is effective only when filter return true
function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>
    if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) flag = false;
    return flag;
} // 判断摁下的键是否为某个键，返回true或者false
function isPressed(keyCode) {
    if (typeof keyCode === 'string') keyCode = code(keyCode); // 转换成键码
    return _downKeys.indexOf(keyCode) !== -1;
} // 循环删除handlers中的所有 scope(范围)
function deleteScope(scope, newScope) {
    var handlers;
    var i; // 没有指定scope，获取scope
    if (!scope) scope = getScope();
    for(var key in _handlers)if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for(i = 0; i < handlers.length;)if (handlers[i].scope === scope) handlers.splice(i, 1);
        else i++;
    }
     // 如果scope被删除，将scope重置为all
    if (getScope() === scope) setScope(newScope || 'all');
} // 清除修饰键
function clearModifier(event) {
    var key = event.keyCode || event.which || event.charCode;
    var i = _downKeys.indexOf(key); // 从列表中清除按压过的键
    if (i >= 0) _downKeys.splice(i, 1);
     // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题
    if (event.key && event.key.toLowerCase() === 'meta') _downKeys.splice(0, _downKeys.length);
     // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
    if (key === 93 || key === 224) key = 91;
    if (key in _mods) {
        _mods[key] = false; // 将修饰键重置为false
        for(var k1 in _modifier)if (_modifier[k1] === key) hotkeys[k1] = false;
    }
}
function unbind(keysInfo) {
    // unbind(), unbind all keys
    if (!keysInfo) Object.keys(_handlers).forEach(function(key) {
        return delete _handlers[key];
    });
    else if (Array.isArray(keysInfo)) // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])
    keysInfo.forEach(function(info) {
        if (info.key) eachUnbind(info);
    });
    else if (typeof keysInfo === 'object') // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})
    {
        if (keysInfo.key) eachUnbind(keysInfo);
    } else if (typeof keysInfo === 'string') {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        // support old method
        // eslint-disable-line
        var scope = args[0], method = args[1];
        if (typeof scope === 'function') {
            method = scope;
            scope = '';
        }
        eachUnbind({
            key: keysInfo,
            scope: scope,
            method: method,
            splitKey: '+'
        });
    }
} // 解除绑定某个范围的快捷键
var eachUnbind = function eachUnbind1(_ref) {
    var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;
    var multipleKeys = getKeys(key);
    multipleKeys.forEach(function(originKey) {
        var unbindKeys = originKey.split(splitKey);
        var len = unbindKeys.length;
        var lastKey = unbindKeys[len - 1];
        var keyCode = lastKey === '*' ? '*' : code(lastKey);
        if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围
        if (!scope) scope = getScope();
        var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
        _handlers[keyCode] = _handlers[keyCode].map(function(record) {
            // 通过函数判断，是否解除绑定，函数相等直接返回
            var isMatchingMethod = method ? record.method === method : true;
            if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) return {
            };
            return record;
        });
    });
}; // 对监听对应快捷键的回调函数进行处理
function eventHandler(event, handler, scope) {
    var modifiersMatch; // 看它是否在当前范围
    if (handler.scope === scope || handler.scope === 'all') {
        // 检查是否匹配修饰符（如果有返回true）
        modifiersMatch = handler.mods.length > 0;
        for(var y in _mods){
            if (Object.prototype.hasOwnProperty.call(_mods, y)) {
                if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) modifiersMatch = false;
            }
        } // 调用处理程序，如果是修饰键不做处理
        if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
            if (handler.method(event, handler) === false) {
                if (event.preventDefault) event.preventDefault();
                else event.returnValue = false;
                if (event.stopPropagation) event.stopPropagation();
                if (event.cancelBubble) event.cancelBubble = true;
            }
        }
    }
} // 处理keydown事件
function dispatch(event) {
    var asterisk = _handlers['*'];
    var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键
    if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
    // Webkit左右 command 键值不一样
    if (key === 93 || key === 224) key = 91;
    /**
   * Collect bound keys
   * If an Input Method Editor is processing key input and the event is keydown, return 229.
   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229
   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
   */ if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
    /**
   * Jest test cases are required.
   * ===============================
   */ [
        'ctrlKey',
        'altKey',
        'shiftKey',
        'metaKey'
    ].forEach(function(keyName) {
        var keyNum = modifierMap[keyName];
        if (event[keyName] && _downKeys.indexOf(keyNum) === -1) _downKeys.push(keyNum);
        else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) _downKeys.splice(_downKeys.indexOf(keyNum), 1);
        else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) /**
       * Fix if Command is pressed:
       * ===============================
       */ {
            if (!(event.ctrlKey || event.shiftKey || event.altKey)) _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
        }
    });
    /**
   * -------------------------------
   */ if (key in _mods) {
        _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上
        for(var k2 in _modifier)if (_modifier[k2] === key) hotkeys[k2] = true;
        if (!asterisk) return;
    } // 将 modifierMap 里面的修饰键绑定到 event 中
    for(var e in _mods)if (Object.prototype.hasOwnProperty.call(_mods, e)) _mods[e] = event[modifierMap[e]];
    /**
   * https://github.com/jaywcjlove/hotkeys/pull/129
   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.
   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.
   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate
   */ if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {
        if (_downKeys.indexOf(17) === -1) _downKeys.push(17);
        if (_downKeys.indexOf(18) === -1) _downKeys.push(18);
        _mods[17] = true;
        _mods[18] = true;
    } // 获取范围 默认为 `all`
    var scope = getScope(); // 对任何快捷键都需要做的处理
    if (asterisk) {
        for(var i = 0; i < asterisk.length; i++)if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) eventHandler(event, asterisk[i], scope);
    } // key 不在 _handlers 中返回
    if (!(key in _handlers)) return;
    for(var _i = 0; _i < _handlers[key].length; _i++){
        if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {
            if (_handlers[key][_i].key) {
                var record = _handlers[key][_i];
                var splitKey = record.splitKey;
                var keyShortcut = record.key.split(splitKey);
                var _downKeysCurrent = []; // 记录当前按键键值
                for(var a = 0; a < keyShortcut.length; a++)_downKeysCurrent.push(code(keyShortcut[a]));
                if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) // 找到处理内容
                eventHandler(event, record, scope);
            }
        }
    }
} // 判断 element 是否已经绑定事件
function isElementBind(element) {
    return elementHasBindEvent.indexOf(element) > -1;
}
function hotkeys(key, option, method) {
    _downKeys = [];
    var keys = getKeys(key); // 需要处理的快捷键列表
    var mods = [];
    var scope = 'all'; // scope默认为all，所有范围都有效
    var element = document; // 快捷键事件绑定节点
    var i = 0;
    var keyup = false;
    var keydown = true;
    var splitKey = '+'; // 对为设定范围的判断
    if (method === undefined && typeof option === 'function') method = option;
    if (Object.prototype.toString.call(option) === '[object Object]') {
        if (option.scope) scope = option.scope; // eslint-disable-line
        if (option.element) element = option.element; // eslint-disable-line
        if (option.keyup) keyup = option.keyup; // eslint-disable-line
        if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line
        if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line
    }
    if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理
    for(; i < keys.length; i++){
        key = keys[i].split(splitKey); // 按键列表
        mods = []; // 如果是组合快捷键取得组合快捷键
        if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码
        key = key[key.length - 1];
        key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键
        // 判断key是否在_handlers中，不在就赋一个空数组
        if (!(key in _handlers)) _handlers[key] = [];
        _handlers[key].push({
            keyup: keyup,
            keydown: keydown,
            scope: scope,
            mods: mods,
            shortcut: keys[i],
            method: method,
            key: keys[i],
            splitKey: splitKey
        });
    } // 在全局document上设置快捷键
    if (typeof element !== 'undefined' && !isElementBind(element) && window) {
        elementHasBindEvent.push(element);
        addEvent(element, 'keydown', function(e) {
            dispatch(e);
        });
        addEvent(window, 'focus', function() {
            _downKeys = [];
        });
        addEvent(element, 'keyup', function(e) {
            dispatch(e);
            clearModifier(e);
        });
    }
}
var _api = {
    setScope: setScope,
    getScope: getScope,
    deleteScope: deleteScope,
    getPressedKeyCodes: getPressedKeyCodes,
    isPressed: isPressed,
    filter: filter,
    unbind: unbind
};
for(var a in _api)if (Object.prototype.hasOwnProperty.call(_api, a)) hotkeys[a] = _api[a];
if (typeof window !== 'undefined') {
    var _hotkeys = window.hotkeys;
    hotkeys.noConflict = function(deep) {
        if (deep && window.hotkeys === hotkeys) window.hotkeys = _hotkeys;
        return hotkeys;
    };
    window.hotkeys = hotkeys;
}
exports.default = hotkeys;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"AVCpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCss", ()=>K
) //# sourceMappingUrl=index.map
;
parcelHelpers.export(exports, "css", ()=>_
);
parcelHelpers.export(exports, "defaultThemeMap", ()=>r
);
parcelHelpers.export(exports, "global", ()=>ee
);
parcelHelpers.export(exports, "keyframes", ()=>te
);
parcelHelpers.export(exports, "styled", ()=>ne
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var e5 = {
    all: "all"
}, t4 = "colors", n = "sizes", i = "space", r = {
    gap: i,
    gridGap: i,
    columnGap: i,
    gridColumnGap: i,
    rowGap: i,
    gridRowGap: i,
    inset: i,
    insetBlock: i,
    insetBlockEnd: i,
    insetBlockStart: i,
    insetInline: i,
    insetInlineEnd: i,
    insetInlineStart: i,
    margin: i,
    marginTop: i,
    marginRight: i,
    marginBottom: i,
    marginLeft: i,
    marginBlock: i,
    marginBlockEnd: i,
    marginBlockStart: i,
    marginInline: i,
    marginInlineEnd: i,
    marginInlineStart: i,
    padding: i,
    paddingTop: i,
    paddingRight: i,
    paddingBottom: i,
    paddingLeft: i,
    paddingBlock: i,
    paddingBlockEnd: i,
    paddingBlockStart: i,
    paddingInline: i,
    paddingInlineEnd: i,
    paddingInlineStart: i,
    top: i,
    right: i,
    bottom: i,
    left: i,
    scrollMargin: i,
    scrollMarginTop: i,
    scrollMarginRight: i,
    scrollMarginBottom: i,
    scrollMarginLeft: i,
    scrollMarginX: i,
    scrollMarginY: i,
    scrollMarginBlock: i,
    scrollMarginBlockEnd: i,
    scrollMarginBlockStart: i,
    scrollMarginInline: i,
    scrollMarginInlineEnd: i,
    scrollMarginInlineStart: i,
    scrollPadding: i,
    scrollPaddingTop: i,
    scrollPaddingRight: i,
    scrollPaddingBottom: i,
    scrollPaddingLeft: i,
    scrollPaddingX: i,
    scrollPaddingY: i,
    scrollPaddingBlock: i,
    scrollPaddingBlockEnd: i,
    scrollPaddingBlockStart: i,
    scrollPaddingInline: i,
    scrollPaddingInlineEnd: i,
    scrollPaddingInlineStart: i,
    fontSize: "fontSizes",
    background: t4,
    backgroundColor: t4,
    backgroundImage: t4,
    border: t4,
    borderBlock: t4,
    borderBlockEnd: t4,
    borderBlockStart: t4,
    borderBottom: t4,
    borderBottomColor: t4,
    borderColor: t4,
    borderInline: t4,
    borderInlineEnd: t4,
    borderInlineStart: t4,
    borderLeft: t4,
    borderLeftColor: t4,
    borderRight: t4,
    borderRightColor: t4,
    borderTop: t4,
    borderTopColor: t4,
    caretColor: t4,
    color: t4,
    columnRuleColor: t4,
    fill: t4,
    outline: t4,
    outlineColor: t4,
    stroke: t4,
    textDecorationColor: t4,
    fontFamily: "fonts",
    fontWeight: "fontWeights",
    lineHeight: "lineHeights",
    letterSpacing: "letterSpacings",
    blockSize: n,
    minBlockSize: n,
    maxBlockSize: n,
    inlineSize: n,
    minInlineSize: n,
    maxInlineSize: n,
    width: n,
    minWidth: n,
    maxWidth: n,
    height: n,
    minHeight: n,
    maxHeight: n,
    flexBasis: n,
    gridTemplateColumns: n,
    gridTemplateRows: n,
    borderWidth: "borderWidths",
    borderTopWidth: "borderWidths",
    borderRightWidth: "borderWidths",
    borderBottomWidth: "borderWidths",
    borderLeftWidth: "borderWidths",
    borderStyle: "borderStyles",
    borderTopStyle: "borderStyles",
    borderRightStyle: "borderStyles",
    borderBottomStyle: "borderStyles",
    borderLeftStyle: "borderStyles",
    borderRadius: "radii",
    borderTopLeftRadius: "radii",
    borderTopRightRadius: "radii",
    borderBottomRightRadius: "radii",
    borderBottomLeftRadius: "radii",
    boxShadow: "shadows",
    textShadow: "shadows",
    transition: "transitions",
    zIndex: "zIndices"
}, o = (e1, t1)=>"function" == typeof t1 ? {
        "()": Function.prototype.toString.call(t1)
    } : t1
, l = ()=>{
    const e1 = Object.create(null);
    return (t1, n1, ...i1)=>{
        const r1 = ((e2)=>JSON.stringify(e2, o)
        )(t1);
        return r1 in e1 ? e1[r1] : e1[r1] = n1(t1, ...i1);
    };
}, s = Symbol.for("sxs.composers"), a = (e1, t1)=>Object.defineProperties(e1, Object.getOwnPropertyDescriptors(t1))
, c = (e1)=>{
    for(const t1 in e1)return !0;
    return !1;
}, { hasOwnProperty: d  } = Object.prototype, g1 = (e1, t1)=>d.call(e1, t1)
, u = (e1)=>e1.includes("-") ? e1 : e1.replace(/[A-Z]/g, (e2)=>"-" + e2.toLowerCase()
    )
, p1 = /\s+(?![^()]*\))/, h1 = (e1)=>(t1)=>e1(..."string" == typeof t1 ? String(t1).split(p1) : [
            t1
        ])
, f = {
    appearance: (e1)=>({
            WebkitAppearance: e1,
            appearance: e1
        })
    ,
    backfaceVisibility: (e1)=>({
            WebkitBackfaceVisibility: e1,
            backfaceVisibility: e1
        })
    ,
    backdropFilter: (e1)=>({
            WebkitBackdropFilter: e1,
            backdropFilter: e1
        })
    ,
    backgroundClip: (e1)=>({
            WebkitBackgroundClip: e1,
            backgroundClip: e1
        })
    ,
    boxDecorationBreak: (e1)=>({
            WebkitBoxDecorationBreak: e1,
            boxDecorationBreak: e1
        })
    ,
    clipPath: (e1)=>({
            WebkitClipPath: e1,
            clipPath: e1
        })
    ,
    content: (e1)=>({
            content: e1.includes('"') || e1.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e1) ? e1 : `"${e1}"`
        })
    ,
    hyphens: (e1)=>({
            WebkitHyphens: e1,
            hyphens: e1
        })
    ,
    maskImage: (e1)=>({
            WebkitMaskImage: e1,
            maskImage: e1
        })
    ,
    tabSize: (e1)=>({
            MozTabSize: e1,
            tabSize: e1
        })
    ,
    textSizeAdjust: (e1)=>({
            WebkitTextSizeAdjust: e1,
            textSizeAdjust: e1
        })
    ,
    userSelect: (e1)=>({
            WebkitUserSelect: e1,
            userSelect: e1
        })
    ,
    marginBlock: h1((e1, t1)=>({
            marginBlockStart: e1,
            marginBlockEnd: t1 || e1
        })
    ),
    marginInline: h1((e1, t1)=>({
            marginInlineStart: e1,
            marginInlineEnd: t1 || e1
        })
    ),
    maxSize: h1((e1, t1)=>({
            maxBlockSize: e1,
            maxInlineSize: t1 || e1
        })
    ),
    minSize: h1((e1, t1)=>({
            minBlockSize: e1,
            minInlineSize: t1 || e1
        })
    ),
    paddingBlock: h1((e1, t1)=>({
            paddingBlockStart: e1,
            paddingBlockEnd: t1 || e1
        })
    ),
    paddingInline: h1((e1, t1)=>({
            paddingInlineStart: e1,
            paddingInlineEnd: t1 || e1
        })
    )
}, m = /([\d.]+)([^]*)/, b = (e1, t1)=>e1.length ? e1.reduce((e2, n1)=>(e2.push(...t1.map((e3)=>e3.includes("&") ? e3.replace(/&/g, /[ +>|~]/.test(n1) && /&.*&/.test(e3) ? `:is(${n1})` : n1) : n1 + " " + e3
        )), e2)
    , []) : t1
, S = (e1, t1)=>e1 in k && "string" == typeof t1 ? t1.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t2, n1, i1, r1)=>n1 + ("stretch" === i1 ? `-moz-available${r1};${e1}:${n1}-webkit-fill-available` : `-moz-fit-content${r1};${e1}:${n1}fit-content`) + r1
    ) : String(t1)
, k = {
    blockSize: 1,
    height: 1,
    inlineSize: 1,
    maxBlockSize: 1,
    maxHeight: 1,
    maxInlineSize: 1,
    maxWidth: 1,
    minBlockSize: 1,
    minHeight: 1,
    minInlineSize: 1,
    minWidth: 1,
    width: 1
}, y = (e1)=>e1 ? e1 + "-" : ""
, B = (e1, t1, n1)=>e1.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e2, i1, r1, o1, l1)=>"$" == o1 == !!r1 ? e2 : (i1 || "--" == o1 ? "calc(" : "") + "var(--" + ("$" === o1 ? y(t1) + (l1.includes("$") ? "" : y(n1)) + l1.replace(/\$/g, "-") : l1) + ")" + (i1 || "--" == o1 ? "*" + (i1 || "") + (r1 || "1") + ")" : "")
    )
, R = /\s*,\s*(?![^()]*\))/, $ = Object.prototype.toString, x = (e1, t1, n1, i1, r1)=>{
    let o1, l1, s1;
    const a1 = (e2, t2, n2)=>{
        let c1, d1;
        const g1 = (e3)=>{
            for(c1 in e3){
                const k1 = 64 === c1.charCodeAt(0), x1 = k1 && Array.isArray(e3[c1]) ? e3[c1] : [
                    e3[c1]
                ];
                for (d1 of x1){
                    const e4 = "object" == typeof d1 && d1 && d1.toString === $, x2 = /[A-Z]/.test(h2 = c1) ? h2 : h2.replace(/-[^]/g, (e5)=>e5[1].toUpperCase()
                    );
                    if (x2 in i1.utils) {
                        const e5 = i1.utils[x2];
                        if (e5 !== l1) {
                            l1 = e5, g1(e5(i1)(d1)), l1 = null;
                            continue;
                        }
                    } else if (x2 in f) {
                        const e5 = f[x2];
                        if (e5 !== s1) {
                            s1 = e5, g1(e5(d1)), s1 = null;
                            continue;
                        }
                    }
                    if (k1 && (p2 = c1.slice(1) in i1.media ? "@media " + i1.media[c1.slice(1)] : c1, c1 = p2.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e5, t3, n3, i2, r2, o2)=>{
                        const l2 = m.test(t3), s2 = 0.0625 * (l2 ? -1 : 1), [a2, c2] = l2 ? [
                            i2,
                            t3
                        ] : [
                            t3,
                            i2
                        ];
                        return "(" + ("=" === n3[0] ? "" : ">" === n3[0] === l2 ? "max-" : "min-") + a2 + ":" + ("=" !== n3[0] && 1 === n3.length ? c2.replace(m, (e6, t4, i3)=>Number(t4) + s2 * (">" === n3 ? 1 : -1) + i3
                        ) : c2) + (r2 ? ") and (" + (">" === r2[0] ? "min-" : "max-") + a2 + ":" + (1 === r2.length ? o2.replace(m, (e6, t4, n4)=>Number(t4) + s2 * (">" === r2 ? -1 : 1) + n4
                        ) : o2) : "") + ")";
                    })), e4) {
                        const e5 = k1 ? n2.concat(c1) : [
                            ...n2
                        ], i2 = k1 ? [
                            ...t2
                        ] : b(t2, c1.split(R));
                        (void 0) !== o1 && r1(I(...o1)), o1 = void 0, a1(d1, i2, e5);
                    } else (void 0) === o1 && (o1 = [
                        [],
                        t2,
                        n2
                    ]), c1 = k1 || 36 !== c1.charCodeAt(0) ? c1 : `--${y(i1.prefix)}${c1.slice(1).replace(/\$/g, "-")}`, d1 = e4 ? d1 : "number" == typeof d1 ? d1 && x2 in W ? String(d1) + "px" : String(d1) : B(S(x2, d1), i1.prefix, i1.themeMap[x2]), o1[0].push(`${k1 ? `${c1} ` : `${u(c1)}:`}${d1}`);
                }
            }
            var p2, h2;
        };
        g1(e2), (void 0) !== o1 && r1(I(...o1)), o1 = void 0;
    };
    a1(e1, t1, n1);
}, I = (e1, t1, n1)=>`${n1.map((e2)=>`${e2}{`
    ).join("")}${t1.length ? `${t1.join(",")}{` : ""}${e1.join(";")}${t1.length ? "}" : ""}${Array(n1.length ? n1.length + 1 : 0).join("}")}`
, W = {
    animationDelay: 1,
    animationDuration: 1,
    backgroundSize: 1,
    blockSize: 1,
    border: 1,
    borderBlock: 1,
    borderBlockEnd: 1,
    borderBlockEndWidth: 1,
    borderBlockStart: 1,
    borderBlockStartWidth: 1,
    borderBlockWidth: 1,
    borderBottom: 1,
    borderBottomLeftRadius: 1,
    borderBottomRightRadius: 1,
    borderBottomWidth: 1,
    borderEndEndRadius: 1,
    borderEndStartRadius: 1,
    borderInlineEnd: 1,
    borderInlineEndWidth: 1,
    borderInlineStart: 1,
    borderInlineStartWidth: 1,
    borderInlineWidth: 1,
    borderLeft: 1,
    borderLeftWidth: 1,
    borderRadius: 1,
    borderRight: 1,
    borderRightWidth: 1,
    borderSpacing: 1,
    borderStartEndRadius: 1,
    borderStartStartRadius: 1,
    borderTop: 1,
    borderTopLeftRadius: 1,
    borderTopRightRadius: 1,
    borderTopWidth: 1,
    borderWidth: 1,
    bottom: 1,
    columnGap: 1,
    columnRule: 1,
    columnRuleWidth: 1,
    columnWidth: 1,
    containIntrinsicSize: 1,
    flexBasis: 1,
    fontSize: 1,
    gap: 1,
    gridAutoColumns: 1,
    gridAutoRows: 1,
    gridTemplateColumns: 1,
    gridTemplateRows: 1,
    height: 1,
    inlineSize: 1,
    inset: 1,
    insetBlock: 1,
    insetBlockEnd: 1,
    insetBlockStart: 1,
    insetInline: 1,
    insetInlineEnd: 1,
    insetInlineStart: 1,
    left: 1,
    letterSpacing: 1,
    margin: 1,
    marginBlock: 1,
    marginBlockEnd: 1,
    marginBlockStart: 1,
    marginBottom: 1,
    marginInline: 1,
    marginInlineEnd: 1,
    marginInlineStart: 1,
    marginLeft: 1,
    marginRight: 1,
    marginTop: 1,
    maxBlockSize: 1,
    maxHeight: 1,
    maxInlineSize: 1,
    maxWidth: 1,
    minBlockSize: 1,
    minHeight: 1,
    minInlineSize: 1,
    minWidth: 1,
    offsetDistance: 1,
    offsetRotate: 1,
    outline: 1,
    outlineOffset: 1,
    outlineWidth: 1,
    overflowClipMargin: 1,
    padding: 1,
    paddingBlock: 1,
    paddingBlockEnd: 1,
    paddingBlockStart: 1,
    paddingBottom: 1,
    paddingInline: 1,
    paddingInlineEnd: 1,
    paddingInlineStart: 1,
    paddingLeft: 1,
    paddingRight: 1,
    paddingTop: 1,
    perspective: 1,
    right: 1,
    rowGap: 1,
    scrollMargin: 1,
    scrollMarginBlock: 1,
    scrollMarginBlockEnd: 1,
    scrollMarginBlockStart: 1,
    scrollMarginBottom: 1,
    scrollMarginInline: 1,
    scrollMarginInlineEnd: 1,
    scrollMarginInlineStart: 1,
    scrollMarginLeft: 1,
    scrollMarginRight: 1,
    scrollMarginTop: 1,
    scrollPadding: 1,
    scrollPaddingBlock: 1,
    scrollPaddingBlockEnd: 1,
    scrollPaddingBlockStart: 1,
    scrollPaddingBottom: 1,
    scrollPaddingInline: 1,
    scrollPaddingInlineEnd: 1,
    scrollPaddingInlineStart: 1,
    scrollPaddingLeft: 1,
    scrollPaddingRight: 1,
    scrollPaddingTop: 1,
    shapeMargin: 1,
    textDecoration: 1,
    textDecorationThickness: 1,
    textIndent: 1,
    textUnderlineOffset: 1,
    top: 1,
    transitionDelay: 1,
    transitionDuration: 1,
    verticalAlign: 1,
    width: 1,
    wordSpacing: 1
}, j = (e1)=>String.fromCharCode(e1 + (e1 > 25 ? 39 : 97))
, z = (e1)=>((e2)=>{
        let t1, n1 = "";
        for(t1 = Math.abs(e2); t1 > 52; t1 = t1 / 52 | 0)n1 = j(t1 % 52) + n1;
        return j(t1 % 52) + n1;
    })(((e2, t1)=>{
        let n1 = t1.length;
        for(; n1;)e2 = 33 * e2 ^ t1.charCodeAt(--n1);
        return e2;
    })(5381, JSON.stringify(e1)) >>> 0)
, w = l(), v = (e1, t1)=>w(e1, ()=>(...n1)=>{
            let i1 = null;
            const r1 = new Set;
            for (const t2 of n1)if (null != t2) switch(typeof t2){
                case "function":
                    if (null == i1 && !t2[s]) {
                        i1 = t2;
                        break;
                    }
                case "object":
                    if (null == i1 && null != t2.type && (i1 = t2.type), s in t2) for (const e2 of t2[s])r1.add(e2);
                    else if (!("$$typeof" in t2)) {
                        const n2 = E(t2, e1);
                        r1.add(n2);
                    }
                    break;
                case "string":
                    i1 = t2;
            }
            return null == i1 && (i1 = "span"), r1.size || r1.add([
                "PJLV",
                {
                },
                [],
                [],
                {
                },
                []
            ]), M(e1, i1, r1, t1);
        }
    )
, E = ({ variants: e1 , compoundVariants: t1 , defaultVariants: n1 , ...i1 }, r1)=>{
    const o1 = `${y(r1.prefix)}c-${z(i1)}`, l1 = [], s1 = [], a1 = Object.create(null), d1 = [];
    for(const e2 in n1)a1[e2] = String(n1[e2]);
    if ("object" == typeof e1 && e1) for(const t2 in e1){
        g1(a1, t2) || (a1[t2] = "undefined");
        const n2 = e1[t2];
        for(const e3 in n2){
            const i2 = {
                [t2]: String(e3)
            };
            "undefined" === String(e3) && d1.push(t2);
            const r2 = n2[e3], o2 = [
                i2,
                r2,
                !c(r2)
            ];
            l1.push(o2);
        }
    }
    if ("object" == typeof t1 && t1) for (const e3 of t1){
        let { css: t3 , ...n2 } = e3;
        t3 = "object" == typeof t3 && t3 || {
        };
        for(const e4 in n2)n2[e4] = String(n2[e4]);
        const i2 = [
            n2,
            t3,
            !c(t3)
        ];
        s1.push(i2);
    }
    return [
        o1,
        i1,
        l1,
        s1,
        a1,
        d1
    ];
}, M = (e1, t1, n1, i1)=>{
    const [r1, o1, l1, c1] = C(n1), d1 = `.${r1}`, g1 = (s1)=>{
        s1 = "object" == typeof s1 && s1 || T;
        const { css: a1 , ...g2 } = s1, u1 = {
        };
        for(const e2 in l1)if (delete g2[e2], e2 in s1) {
            let t2 = s1[e2];
            "object" == typeof t2 && t2 ? u1[e2] = {
                "@initial": l1[e2],
                ...t2
            } : (t2 = String(t2), u1[e2] = "undefined" !== t2 || c1.has(e2) ? t2 : l1[e2]);
        } else u1[e2] = l1[e2];
        const p3 = new Set([
            ...o1
        ]);
        for (const [t2, r2, o2, l2] of n1){
            i1.rules.styled.cache.has(t2) || (i1.rules.styled.cache.add(t2), x(r2, [
                `.${t2}`
            ], [], e1, (e3)=>{
                i1.rules.styled.apply(e3);
            }));
            const n2 = P(o2, u1, e1.media), s2 = P(l2, u1, e1.media, !0);
            for (const r3 of n2)if ((void 0) !== r3) for (const [n3, o3] of r3){
                const r4 = `${t2}-${z(o3)}-${n3}`;
                p3.add(r4), i1.rules.onevar.cache.has(r4) || (i1.rules.onevar.cache.add(r4), x(o3, [
                    `.${r4}`
                ], [], e1, (e3)=>{
                    i1.rules.onevar.apply(e3);
                }));
            }
            for (const n4 of s2)if ((void 0) !== n4) for (const [r4, o4] of n4){
                const n5 = `${t2}-${z(o4)}-${r4}`;
                p3.add(n5), i1.rules.allvar.cache.has(n5) || (i1.rules.allvar.cache.add(n5), x(o4, [
                    `.${n5}`
                ], [], e1, (e3)=>{
                    i1.rules.allvar.apply(e3);
                }));
            }
        }
        if ("object" == typeof a1 && a1) {
            const t3 = `${r1}-i${z(a1)}-css`;
            p3.add(t3), i1.rules.inline.cache.has(t3) || (i1.rules.inline.cache.add(t3), x(a1, [
                `.${t3}`
            ], [], e1, (e3)=>{
                i1.rules.inline.apply(e3);
            }));
        }
        for (const e3 of String(s1.className || "").trim().split(/\s+/))e3 && p3.add(e3);
        const h3 = g2.className = [
            ...p3
        ].join(" ");
        return {
            type: t1,
            className: h3,
            selector: d1,
            props: g2,
            toString: ()=>h3
        };
    };
    return a(g1, {
        type: t1,
        className: r1,
        selector: d1,
        [s]: n1,
        toString: ()=>(i1.rules.styled.cache.has(r1) || g1(), r1)
    });
}, C = (e1)=>{
    let t1 = "";
    const n1 = [], i1 = {
    }, r1 = [];
    for (const [o1, , , , l1, s1] of e1){
        "" === t1 && (t1 = o1), n1.push(o1), r1.push(...s1);
        for(const e2 in l1){
            const t2 = l1[e2];
            ((void 0) === i1[e2] || "undefined" !== t2 || s1.includes(t2)) && (i1[e2] = t2);
        }
    }
    return [
        t1,
        n1,
        i1,
        new Set(r1)
    ];
}, P = (e1, t1, n1, i1)=>{
    const r1 = [];
    e: for (let [o1, l1, s1] of e1){
        if (s1) continue;
        let e2, a1 = 0;
        for(e2 in o1){
            const i2 = o1[e2];
            let r2 = t1[e2];
            if (r2 !== i2) {
                if ("object" != typeof r2 || !r2) continue e;
                {
                    let e3, t2 = 0;
                    for(const o2 in r2)i2 === String(r2[o2]) && ("@initial" !== o2 && (l1 = {
                        [o2 in n1 ? n1[o2] : o2]: l1
                    }), a1 += t2, e3 = !0), ++t2;
                    if (!e3) continue e;
                }
            }
        }
        (r1[a1] = r1[a1] || []).push([
            i1 ? "cv" : `${e2}-${o1[e2]}`,
            l1
        ]);
    }
    return r1;
}, T = {
}, L = l(), O = (e1, t1)=>L(e1, ()=>(n1)=>{
            const i1 = z(n1 = "object" == typeof n1 && n1 || {
            }), r1 = ()=>{
                if (!t1.rules.global.cache.has(i1)) {
                    if (t1.rules.global.cache.add(i1), "@import" in n1) {
                        let e2 = [].indexOf.call(t1.sheet.cssRules, t1.rules.themed.group) - 1;
                        for (let i2 of [].concat(n1["@import"]))i2 = i2.includes('"') || i2.includes("'") ? i2 : `"${i2}"`, t1.sheet.insertRule(`@import ${i2};`, e2++);
                        delete n1["@import"];
                    }
                    x(n1, [], [], e1, (e2)=>{
                        t1.rules.global.apply(e2);
                    });
                }
                return "";
            };
            return a(r1, {
                toString: r1
            });
        }
    )
, A = l(), N = (e1, t1)=>A(e1, ()=>(n1)=>{
            const i1 = `${y(e1.prefix)}k-${z(n1)}`, r1 = ()=>{
                if (!t1.rules.global.cache.has(i1)) {
                    t1.rules.global.cache.add(i1);
                    const r2 = [];
                    x(n1, [], [], e1, (e2)=>r2.push(e2)
                    );
                    const o1 = `@keyframes ${i1}{${r2.join("")}}`;
                    t1.rules.global.apply(o1);
                }
                return i1;
            };
            return a(r1, {
                get name () {
                    return r1();
                },
                toString: r1
            });
        }
    )
, D = class {
    constructor(e1, t1, n1, i1){
        this.token = null == e1 ? "" : String(e1), this.value = null == t1 ? "" : String(t1), this.scale = null == n1 ? "" : String(n1), this.prefix = null == i1 ? "" : String(i1);
    }
    get computedValue() {
        return "var(" + this.variable + ")";
    }
    get variable() {
        return "--" + y(this.prefix) + y(this.scale) + this.token;
    }
    toString() {
        return this.computedValue;
    }
}, H = l(), V = (e2, t2)=>H(e2, ()=>(n2, i2)=>{
            i2 = "object" == typeof n2 && n2 || Object(i2);
            const r1 = `.${n2 = (n2 = "string" == typeof n2 ? n2 : "") || `${y(e2.prefix)}t-${z(i2)}`}`, o1 = {
            }, l1 = [];
            for(const t3 in i2){
                o1[t3] = {
                };
                for(const n3 in i2[t3]){
                    const r2 = `--${y(e2.prefix)}${t3}-${n3}`, s1 = B(String(i2[t3][n3]), e2.prefix, t3);
                    o1[t3][n3] = new D(n3, s1, t3, e2.prefix), l1.push(`${r2}:${s1}`);
                }
            }
            return {
                ...o1,
                className: n2,
                selector: r1,
                toString: ()=>{
                    if (l1.length && !t2.rules.themed.cache.has(n2)) {
                        t2.rules.themed.cache.add(n2);
                        const r2 = `${i2 === e2.theme ? ":root," : ""}.${n2}{${l1.join(";")}}`;
                        t2.rules.themed.apply(r2);
                    }
                    return n2;
                }
            };
        }
    )
, G = [
    "themed",
    "global",
    "styled",
    "onevar",
    "allvar",
    "inline"
], F = (e2)=>{
    let t2;
    const n2 = ()=>{
        if (t2) {
            const { rules: e3 , sheet: n3  } = t2;
            if (!n3.deleteRule) {
                for(; 3 === Object(Object(n3.cssRules)[0]).type;)n3.cssRules.splice(0, 1);
                n3.cssRules = [];
            }
            for(const t3 in e3)delete e3[t3];
            n3.ownerRule && (n3.ownerRule.textContent = n3.ownerRule.textContent);
        }
        const i2 = Object(e2).styleSheets || [];
        for (const e3 of i2)if (!e3.href || e3.href.startsWith(location.origin)) {
            for(let i3 = 0, r1 = e3.cssRules; r1[i3]; ++i3){
                const o1 = Object(r1[i3]);
                if (1 !== o1.type) continue;
                const l1 = Object(r1[i3 + 1]);
                if (4 !== l1.type) continue;
                ++i3;
                const { cssText: s1  } = o1;
                if (!s1.startsWith("--stitches")) continue;
                const a1 = s1.slice(16, -3).trim().split(/\s+/), c1 = G[a1[0]];
                c1 && (t2 || (t2 = {
                    sheet: e3,
                    reset: n2,
                    rules: {
                    }
                }), t2.rules[c1] = {
                    group: l1,
                    index: i3,
                    cache: new Set(a1)
                });
            }
            if (t2) break;
        }
        if (!t2) {
            const i3 = (e4, t3)=>({
                    type: t3,
                    cssRules: [],
                    insertRule (e, t) {
                        this.cssRules.splice(t, 0, i3(e, {
                            import: 3,
                            undefined: 1
                        }[(e.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
                    },
                    get cssText () {
                        return "@media{}" === e4 ? `@media{${[].map.call(this.cssRules, (e6)=>e6.cssText
                        ).join("")}}` : e4;
                    }
                })
            ;
            t2 = {
                sheet: e2 ? (e2.head || e2).appendChild(document.createElement("style")).sheet : i3("", "text/css"),
                rules: {
                },
                reset: n2,
                toString () {
                    const { cssRules: e4  } = t2.sheet;
                    return [].map.call(e4, (n3, i4)=>{
                        const { cssText: r1  } = n3;
                        let o1 = "";
                        if (r1.startsWith("--stitches")) return "";
                        if (e4[i4 - 1] && (o1 = e4[i4 - 1].cssText).startsWith("--stitches")) {
                            if (!n3.cssRules.length) return "";
                            for(const e6 in t2.rules)if (t2.rules[e6].group === n3) return `--stitches{--:${[
                                ...t2.rules[e6].cache
                            ].join(" ")}}${r1}`;
                            return n3.cssRules.length ? `${o1}${r1}` : "";
                        }
                        return r1;
                    }).join("");
                }
            };
        }
        const { sheet: r1 , rules: o1  } = t2;
        if (!o1.inline) {
            const e4 = r1.cssRules.length;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:5}", e4), o1.inline = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    5
                ])
            };
        }
        if (J(o1.inline), !o1.allvar) {
            const e4 = o1.inline.index;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:4}", e4), o1.allvar = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    4
                ])
            };
        }
        if (J(o1.allvar), !o1.onevar) {
            const e4 = o1.allvar.index;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:3}", e4), o1.onevar = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    3
                ])
            };
        }
        if (J(o1.onevar), !o1.styled) {
            const e4 = o1.onevar.index;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:2}", e4), o1.styled = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    2
                ])
            };
        }
        if (J(o1.styled), !o1.global) {
            const e4 = o1.styled.index;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:1}", e4), o1.global = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    1
                ])
            };
        }
        if (J(o1.global), !o1.themed) {
            const e4 = o1.global.index;
            r1.insertRule("@media{}", e4), r1.insertRule("--stitches{--:0}", e4), o1.themed = {
                index: e4,
                group: r1.cssRules[e4 + 1],
                cache: new Set([
                    0
                ])
            };
        }
        J(o1.themed);
    };
    return n2(), t2;
}, J = (e2)=>{
    const t2 = e2.group;
    let n2 = t2.cssRules.length;
    e2.apply = (e3)=>{
        try {
            t2.insertRule(e3, n2), ++n2;
        } catch  {
        }
    };
}, U = l();
var X, Y = (e2)=>null == e2 ? "span" : "object" != typeof e2 || e2.$$typeof ? g1(e2, s) ? Y(e2.type) : e2 : "span"
, q = l(), K = (t2)=>{
    const n2 = ((t3)=>{
        let n3 = !1;
        const i2 = U(t3, (t5)=>{
            n3 = !0;
            const i3 = "prefix" in (t5 = "object" == typeof t5 && t5 || {
            }) ? String(t5.prefix) : "", o1 = {
                ...e5,
                ..."object" == typeof t5.media && t5.media || {
                }
            }, l1 = "object" == typeof t5.root ? t5.root || null : globalThis.document || null, s1 = "object" == typeof t5.theme && t5.theme || {
            }, a1 = {
                prefix: i3,
                media: o1,
                root: l1,
                theme: s1,
                themeMap: "object" == typeof t5.themeMap && t5.themeMap || {
                    ...r
                },
                utils: "object" == typeof t5.utils && t5.utils || {
                }
            }, c1 = F(l1), d1 = {
                css: v(a1, c1),
                global: O(a1, c1),
                keyframes: N(a1, c1),
                theme: V(a1, c1),
                reset () {
                    c1.reset(), g2.toString();
                },
                sheet: c1,
                config: a1,
                prefix: i3,
                getCssString: c1.toString,
                toString: c1.toString
            }, g2 = d1.theme(s1);
            return Object.assign(d1.theme, g2), g2.toString(), d1;
        });
        return n3 || i2.reset(), i2;
    })(t2);
    return n2.styled = (({ config: e2 , sheet: t3  })=>q(e2, ()=>{
            const n3 = v(e2, t3);
            return (...e3)=>{
                const t5 = Y(e3[0]), i2 = n3(...e3), r1 = _reactDefault.default.forwardRef((e4, n4)=>{
                    const r2 = e4 && e4.as || t5, o1 = i2(e4).props;
                    return delete o1.as, o1.ref = n4, _reactDefault.default.createElement(r2, o1);
                });
                return r1.className = i2.className, r1.displayName = `Styled.${t5.displayName || t5.name || t5}`, r1.selector = i2.selector, r1.type = t5, r1.toString = ()=>i2.selector
                , r1[s] = i2[s], r1;
            };
        })
    )(n2), n2;
}, Q = ()=>X || (X = K())
, _ = (...e2)=>Q().css(...e2)
, ee = (...e2)=>Q().global(...e2)
, te = (...e2)=>Q().keyframes(...e2)
, ne = (...e2)=>Q().styled(...e2)
;

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lplMf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ContextMenu", ()=>ContextMenu
);
parcelHelpers.export(exports, "ContextMenuTrigger", ()=>ContextMenuTrigger
);
parcelHelpers.export(exports, "ContextMenuContent", ()=>ContextMenuContent
);
parcelHelpers.export(exports, "ContextMenuGroup", ()=>ContextMenuGroup
);
parcelHelpers.export(exports, "ContextMenuLabel", ()=>ContextMenuLabel
);
parcelHelpers.export(exports, "ContextMenuTriggerItem", ()=>ContextMenuTriggerItem
);
parcelHelpers.export(exports, "ContextMenuItem", ()=>ContextMenuItem
);
parcelHelpers.export(exports, "ContextMenuCheckboxItem", ()=>ContextMenuCheckboxItem
);
parcelHelpers.export(exports, "ContextMenuRadioGroup", ()=>ContextMenuRadioGroup
);
parcelHelpers.export(exports, "ContextMenuRadioItem", ()=>ContextMenuRadioItem
);
parcelHelpers.export(exports, "ContextMenuItemIndicator", ()=>ContextMenuItemIndicator
);
parcelHelpers.export(exports, "ContextMenuSeparator", ()=>ContextMenuSeparator
);
parcelHelpers.export(exports, "ContextMenuArrow", ()=>ContextMenuArrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Trigger", ()=>Trigger
);
parcelHelpers.export(exports, "Content", ()=>Content
);
parcelHelpers.export(exports, "Group", ()=>Group
);
parcelHelpers.export(exports, "Label", ()=>Label
);
parcelHelpers.export(exports, "Item", ()=>Item
);
parcelHelpers.export(exports, "TriggerItem", ()=>TriggerItem
);
parcelHelpers.export(exports, "CheckboxItem", ()=>CheckboxItem
);
parcelHelpers.export(exports, "RadioGroup", ()=>RadioGroup
);
parcelHelpers.export(exports, "RadioItem", ()=>RadioItem
);
parcelHelpers.export(exports, "ItemIndicator", ()=>ItemIndicator
);
parcelHelpers.export(exports, "Separator", ()=>Separator
);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _reactMenu = require("@radix-ui/react-menu");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactContext = require("@radix-ui/react-context");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const [c, x] = _reactContext.createContext("ContextMenu");
const ContextMenu = (n)=>{
    const { children: o , onOpenChange: r , dir: a  } = n, [u, x1] = _react.useState(!1), s = _react.useContext(p), m = _reactUseCallbackRef.useCallbackRef(r), C = _react.useCallback((e)=>{
        x1(e), m(e);
    }, [
        m
    ]);
    return s ? /*#__PURE__*/ _react.createElement(c, {
        isRootMenu: !1,
        open: u,
        onOpenChange: C
    }, /*#__PURE__*/ _react.createElement(_reactMenu.Sub, {
        open: u,
        onOpenChange: C
    }, o)) : /*#__PURE__*/ _react.createElement(c, {
        isRootMenu: !0,
        open: u,
        onOpenChange: C
    }, /*#__PURE__*/ _react.createElement(_reactMenu.Root, {
        dir: a,
        open: u,
        onOpenChange: C
    }, o));
}; /*#__PURE__*/ 
const s = "span";
const ContextMenuTrigger = /*#__PURE__*/ _react.forwardRef((e, o)=>{
    const { as: r = s , ...c1 } = e, m = x("ContextMenuTrigger"), l = _react.useRef({
        x: 0,
        y: 0
    }), d = _react.useRef({
        getBoundingClientRect: ()=>DOMRect.fromRect({
                width: 0,
                height: 0,
                ...l.current
            })
    }), M = _react.useRef(0), f = _react.useCallback(()=>window.clearTimeout(M.current)
    , []), g = (e1)=>{
        l.current = {
            x: e1.clientX,
            y: e1.clientY
        }, m.onOpenChange(!0);
    };
    return _react.useEffect(()=>f
    , [
        f
    ]), /*#__PURE__*/ _react.createElement(p.Provider, {
        value: !1
    }, /*#__PURE__*/ _react.createElement(_reactMenu.Anchor, {
        virtualRef: d
    }), /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, c1, {
        as: r,
        ref: o,
        style: {
            WebkitTouchCallout: "none",
            ...c1.style
        },
        onContextMenu: _primitive.composeEventHandlers(e.onContextMenu, (e1)=>{
            f(), e1.preventDefault(), g(e1);
        }),
        onPointerDown: _primitive.composeEventHandlers(e.onPointerDown, C((e1)=>{
            f(), M.current = window.setTimeout(()=>g(e1)
            , 700);
        })),
        onPointerMove: _primitive.composeEventHandlers(e.onPointerMove, C(f)),
        onPointerCancel: _primitive.composeEventHandlers(e.onPointerCancel, C(f)),
        onPointerUp: _primitive.composeEventHandlers(e.onPointerUp, C(f))
    })));
}); /*#__PURE__*/ 
const p = /*#__PURE__*/ _react.createContext(!1);
const ContextMenuContent = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const o = x("ContextMenuContent"), r = {
        ...e,
        style: {
            ...e.style,
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)"
        }
    }; /*#__PURE__*/ 
    return _react.createElement(p.Provider, {
        value: !0
    }, o.isRootMenu ? /*#__PURE__*/ _react.createElement(m, _extendsDefault.default({
    }, r, {
        ref: n
    })) : /*#__PURE__*/ _react.createElement(_reactMenu.Content, _extendsDefault.default({
    }, r, {
        ref: n
    })));
}); /*#__PURE__*/ 
const m = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const { disableOutsidePointerEvents: o = !0 , ...r } = e, a = x("ContextMenuContent"); /*#__PURE__*/ 
    return _react.createElement(_reactMenu.Content, _extendsDefault.default({
    }, r, {
        ref: n,
        disableOutsidePointerEvents: !!a.open && o,
        trapFocus: !0,
        disableOutsideScroll: !0,
        portalled: !0,
        side: "right",
        sideOffset: 2,
        align: "start"
    }));
});
const ContextMenuGroup = _reactPrimitive.extendPrimitive(_reactMenu.Group, {
    displayName: "ContextMenuGroup"
});
const ContextMenuLabel = _reactPrimitive.extendPrimitive(_reactMenu.Label, {
    displayName: "ContextMenuLabel"
});
const ContextMenuTriggerItem = _reactPrimitive.extendPrimitive(_reactMenu.SubTrigger, {
    displayName: "ContextMenuTriggerItem"
});
const ContextMenuItem = _reactPrimitive.extendPrimitive(_reactMenu.Item, {
    displayName: "ContextMenuItem"
});
const ContextMenuCheckboxItem = _reactPrimitive.extendPrimitive(_reactMenu.CheckboxItem, {
    displayName: "ContextMenuCheckboxItem"
});
const ContextMenuRadioGroup = _reactPrimitive.extendPrimitive(_reactMenu.RadioGroup, {
    displayName: "ContextMenuRadioGroup"
});
const ContextMenuRadioItem = _reactPrimitive.extendPrimitive(_reactMenu.RadioItem, {
    displayName: "ContextMenuRadioItem"
});
const ContextMenuItemIndicator = _reactPrimitive.extendPrimitive(_reactMenu.ItemIndicator, {
    displayName: "ContextMenuItemIndicator"
});
const ContextMenuSeparator = _reactPrimitive.extendPrimitive(_reactMenu.Separator, {
    displayName: "ContextMenuSeparator"
});
const ContextMenuArrow = _reactPrimitive.extendPrimitive(_reactMenu.Arrow, {
    displayName: "ContextMenuArrow"
});
function C(e) {
    return (t)=>"mouse" !== t.pointerType ? e(t) : void 0
    ;
}
const Root = ContextMenu;
const Trigger = ContextMenuTrigger;
const Content = ContextMenuContent;
const Group = ContextMenuGroup;
const Label = ContextMenuLabel;
const Item = ContextMenuItem;
const TriggerItem = ContextMenuTriggerItem;
const CheckboxItem = ContextMenuCheckboxItem;
const RadioGroup = ContextMenuRadioGroup;
const RadioItem = ContextMenuRadioItem;
const ItemIndicator = ContextMenuItemIndicator;
const Separator = ContextMenuSeparator;
const Arrow = ContextMenuArrow;

},{"@radix-ui/react-use-callback-ref":"jO45C","@radix-ui/react-menu":"bkrBr","@radix-ui/react-primitive":"50mzH","@radix-ui/react-context":"hrkBZ","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jO45C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallbackRef", ()=>useCallbackRef
);
var _react = require("react");
function useCallbackRef(r) {
    const t = _react.useRef(r);
    return _react.useEffect(()=>{
        t.current = r;
    }), _react.useCallback((...e)=>{
        var r1;
        return null === (r1 = t.current) || (void 0) === r1 ? void 0 : r1.call(t, ...e);
    }, []);
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bkrBr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Menu", ()=>Menu
);
parcelHelpers.export(exports, "MenuSub", ()=>MenuSub
);
parcelHelpers.export(exports, "MenuContent", ()=>MenuContent
);
parcelHelpers.export(exports, "MenuItem", ()=>MenuItem
);
parcelHelpers.export(exports, "MenuSubTrigger", ()=>MenuSubTrigger
);
parcelHelpers.export(exports, "MenuCheckboxItem", ()=>MenuCheckboxItem
);
parcelHelpers.export(exports, "MenuRadioGroup", ()=>MenuRadioGroup
);
parcelHelpers.export(exports, "MenuRadioItem", ()=>MenuRadioItem
);
parcelHelpers.export(exports, "MenuItemIndicator", ()=>MenuItemIndicator
);
parcelHelpers.export(exports, "MenuAnchor", ()=>MenuAnchor
);
parcelHelpers.export(exports, "MenuGroup", ()=>MenuGroup
);
parcelHelpers.export(exports, "MenuLabel", ()=>MenuLabel
);
parcelHelpers.export(exports, "MenuSeparator", ()=>MenuSeparator
);
parcelHelpers.export(exports, "MenuArrow", ()=>MenuArrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Sub", ()=>Sub
);
parcelHelpers.export(exports, "Anchor", ()=>Anchor
);
parcelHelpers.export(exports, "SubTrigger", ()=>SubTrigger
);
parcelHelpers.export(exports, "Content", ()=>Content
);
parcelHelpers.export(exports, "Group", ()=>Group
);
parcelHelpers.export(exports, "Label", ()=>Label
);
parcelHelpers.export(exports, "Item", ()=>Item
);
parcelHelpers.export(exports, "CheckboxItem", ()=>CheckboxItem
);
parcelHelpers.export(exports, "RadioGroup", ()=>RadioGroup
);
parcelHelpers.export(exports, "RadioItem", ()=>RadioItem
);
parcelHelpers.export(exports, "ItemIndicator", ()=>ItemIndicator
);
parcelHelpers.export(exports, "Separator", ()=>Separator
);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
var _reactId = require("@radix-ui/react-id");
var _reactFocusGuards = require("@radix-ui/react-focus-guards");
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _reactUseDirection = require("@radix-ui/react-use-direction");
var _reactSlot = require("@radix-ui/react-slot");
var _reactRovingFocus = require("@radix-ui/react-roving-focus");
var _reactPortal = require("@radix-ui/react-portal");
var _reactPopper = require("@radix-ui/react-popper");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactPresence = require("@radix-ui/react-presence");
var _reactFocusScope = require("@radix-ui/react-focus-scope");
var _reactDismissableLayer = require("@radix-ui/react-dismissable-layer");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _reactCollection = require("@radix-ui/react-collection");
var _primitive = require("@radix-ui/primitive");
var _ariaHidden = require("aria-hidden");
var _reactRemoveScroll = require("react-remove-scroll");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const M = [
    "Enter",
    " "
], y = [
    "ArrowUp",
    "PageDown",
    "End"
], R = [
    "ArrowDown",
    "PageUp",
    "Home",
    ...y
], I = {
    ltr: [
        ...M,
        "ArrowRight"
    ],
    rtl: [
        ...M,
        "ArrowLeft"
    ]
}, P = {
    ltr: [
        "ArrowLeft"
    ],
    rtl: [
        "ArrowRight"
    ]
}, [k, D] = _reactContext.createContext("Menu");
const Menu = (e)=>{
    const { open: t = !1 , children: o , onOpenChange: u  } = e, [a, c] = _react.useState(null), l = _react.useRef(!1), s = _reactUseCallbackRef.useCallbackRef(u), d = _reactUseDirection.useDirection(a, e.dir);
    return _react.useEffect(()=>{
        const e1 = ()=>l.current = !0
        , t1 = ()=>l.current = !1
        ;
        return document.addEventListener("keydown", e1, {
            capture: !0
        }), document.addEventListener("pointerdown", t1, {
            capture: !0
        }), document.addEventListener("pointermove", t1, {
            capture: !0
        }), ()=>{
            document.removeEventListener("keydown", e1, {
                capture: !0
            }), document.removeEventListener("pointerdown", t1, {
                capture: !0
            }), document.removeEventListener("pointermove", t1, {
                capture: !0
            });
        };
    }, []), /*#__PURE__*/ _react.createElement(_reactPopper.Root, null, /*#__PURE__*/ _react.createElement(k, {
        isSubmenu: !1,
        isUsingKeyboardRef: l,
        dir: d,
        open: t,
        onOpenChange: s,
        content: a,
        onContentChange: c,
        onRootClose: _react.useCallback(()=>s(!1)
        , [
            s
        ])
    }, o));
}; /*#__PURE__*/ 
const MenuSub = (t)=>{
    const { children: r , open: o = !1 , onOpenChange: u  } = t, a = D("MenuSub"), [c, l] = _react.useState(null), [s, d] = _react.useState(null), m = _reactUseCallbackRef.useCallbackRef(u);
    return _react.useEffect(()=>(!1 === a.open && m(!1), ()=>m(!1)
        )
    , [
        a.open,
        m
    ]), /*#__PURE__*/ _react.createElement(_reactPopper.Root, null, /*#__PURE__*/ _react.createElement(k, {
        isSubmenu: !0,
        isUsingKeyboardRef: a.isUsingKeyboardRef,
        dir: a.dir,
        open: o,
        onOpenChange: m,
        content: s,
        onContentChange: d,
        onRootClose: a.onRootClose,
        contentId: _reactId.useId(),
        trigger: c,
        onTriggerChange: l,
        triggerId: _reactId.useId()
    }, r));
}; /*#__PURE__*/ 
const [S, T, O] = _reactCollection.createCollection(), [A, L] = _reactContext.createContext("MenuContent");
const MenuContent = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const { forceMount: n , ...r } = e, o = D("MenuContent"); /*#__PURE__*/ 
    return _react.createElement(_reactPresence.Presence, {
        present: n || o.open
    }, /*#__PURE__*/ _react.createElement(S, null, o.isSubmenu ? /*#__PURE__*/ _react.createElement(F, _extendsDefault.default({
    }, r, {
        ref: t
    })) : /*#__PURE__*/ _react.createElement(K, _extendsDefault.default({
    }, r, {
        ref: t
    }))));
});
const K = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const n = D("MenuContent"), r = _react.useRef(null), o = _reactComposeRefs.useComposedRefs(t, r);
    return _react.useEffect(()=>{
        const e1 = r.current;
        if (e1) return _ariaHidden.hideOthers(e1);
    }, []), /*#__PURE__*/ _react.createElement(G, _extendsDefault.default({
    }, e, {
        ref: o,
        onDismiss: ()=>n.onOpenChange(!1)
    }));
}), F = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const n = D("MenuContent"), r = _react.useRef(null), o = _reactComposeRefs.useComposedRefs(t, r);
    return n.isSubmenu ? /*#__PURE__*/ _react.createElement(G, _extendsDefault.default({
        id: n.contentId,
        "aria-labelledby": n.triggerId
    }, e, {
        ref: o,
        align: "start",
        side: "rtl" === n.dir ? "left" : "right",
        portalled: !0,
        disableOutsidePointerEvents: !1,
        disableOutsideScroll: !1,
        trapFocus: !1,
        onOpenAutoFocus: (e1)=>{
            var t1;
            n.isUsingKeyboardRef.current && (null === (t1 = r.current) || (void 0) === t1 || t1.focus()), e1.preventDefault();
        },
        onCloseAutoFocus: (e1)=>e1.preventDefault()
        ,
        onFocusOutside: _primitive.composeEventHandlers(e.onFocusOutside, (e1)=>{
            e1.target !== n.trigger && n.onOpenChange(!1);
        }),
        onEscapeKeyDown: _primitive.composeEventHandlers(e.onEscapeKeyDown, n.onRootClose),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (e1)=>{
            const t2 = e1.currentTarget.contains(e1.target), r1 = P[n.dir].includes(e1.key);
            var o1;
            t2 && r1 && (n.onOpenChange(!1), null === (o1 = n.trigger) || (void 0) === o1 || o1.focus());
        })
    })) : null;
}), G = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const { loop: r = !1 , trapFocus: a2 , onOpenAutoFocus: l , onCloseAutoFocus: s , disableOutsidePointerEvents: d , onEscapeKeyDown: p , onPointerDownOutside: g , onFocusOutside: h , onInteractOutside: b , onDismiss: M1 , disableOutsideScroll: I1 , portalled: P1 , ...k1 } = e, S1 = D("MenuContent"), { getItems: T1  } = O(), [L1, K1] = _react.useState(null), F1 = _react.useRef(null), G1 = _reactComposeRefs.useComposedRefs(n, F1, S1.onContentChange), U = _react.useRef(!1), V = _react.useRef(0), N = _react.useRef(""), X = _react.useRef(0), B = _react.useRef(null), z = _react.useRef("right"), W = _react.useRef(0), j = P1 ? _reactPortal.Portal : _react.Fragment, q = I1 ? _reactRemoveScroll.RemoveScroll : _react.Fragment, J = (e1)=>{
        var t2, n1;
        const r1 = N.current + e1, o2 = T1().filter((e2)=>!e2.disabled
        ), u = document.activeElement, a1 = null === (t2 = o2.find((e2)=>e2.ref.current === u
        )) || (void 0) === t2 ? void 0 : t2.textValue, c1 = function(e2, t3, n2) {
            const r2 = t3.length > 1 && Array.from(t3).every((e3)=>e3 === t3[0]
            ) ? t3[0] : t3, o3 = n2 ? e2.indexOf(n2) : -1;
            let u1 = (a3 = e2, c2 = Math.max(o3, 0), a3.map((e3, t4)=>a3[(c2 + t4) % a3.length]
            ));
            var a3, c2;
            1 === r2.length && (u1 = u1.filter((e3)=>e3 !== n2
            ));
            const i = u1.find((e3)=>e3.toLowerCase().startsWith(r2.toLowerCase())
            );
            return i !== n2 ? i : void 0;
        }(o2.map((e2)=>e2.textValue
        ), r1, a1), i = null === (n1 = o2.find((e2)=>e2.textValue === c1
        )) || (void 0) === n1 ? void 0 : n1.ref.current;
        !function e2(t3) {
            N.current = t3, window.clearTimeout(V.current), "" !== t3 && (V.current = window.setTimeout(()=>e2("")
            , 1000));
        }(r1), i && setTimeout(()=>i.focus()
        );
    };
    _react.useEffect(()=>()=>window.clearTimeout(V.current)
    , []), _reactFocusGuards.useFocusGuards();
    const Q = _react.useCallback((e1)=>{
        var t3, n2;
        return z.current === (null === (t3 = B.current) || (void 0) === t3 ? void 0 : t3.side) && (function(e2, t4) {
            if (!t4) return !1;
            return (function(e3, t5) {
                const { x: n3 , y: r1  } = e3;
                let o2 = !1;
                for(let e4 = 0, u = t5.length - 1; e4 < t5.length; u = e4++){
                    const a1 = t5[e4].x, c = t5[e4].y, i = t5[u].x, l1 = t5[u].y;
                    c > r1 != l1 > r1 && n3 < (i - a1) * (r1 - c) / (l1 - c) + a1 && (o2 = !o2);
                }
                return o2;
            })({
                x: e2.clientX,
                y: e2.clientY
            }, t4);
        })(e1, null === (n2 = B.current) || (void 0) === n2 ? void 0 : n2.area);
    }, []); /*#__PURE__*/ 
    return _react.createElement(j, null, /*#__PURE__*/ _react.createElement(q, null, /*#__PURE__*/ _react.createElement(A, {
        searchRef: N,
        onItemEnter: _react.useCallback((e1)=>{
            Q(e1) && e1.preventDefault();
        }, [
            Q
        ]),
        onItemLeave: _react.useCallback((e1)=>{
            var t4;
            Q(e1) || (null === (t4 = F1.current) || (void 0) === t4 || t4.focus(), K1(null));
        }, [
            Q
        ]),
        onTriggerLeave: _react.useCallback((e1)=>{
            Q(e1) && e1.preventDefault();
        }, [
            Q
        ]),
        pointerGraceTimerRef: X,
        onPointerGraceIntentChange: _react.useCallback((e1)=>{
            B.current = e1;
        }, [])
    }, /*#__PURE__*/ _react.createElement(_reactFocusScope.FocusScope, {
        as: _reactSlot.Slot,
        trapped: a2 && S1.open,
        onMountAutoFocus: _primitive.composeEventHandlers(l, (e1)=>{
            var t5;
            e1.preventDefault(), null === (t5 = F1.current) || (void 0) === t5 || t5.focus();
        }),
        onUnmountAutoFocus: (e1)=>{
            !d && U.current ? e1.preventDefault() : null == s || s(e1);
        }
    }, /*#__PURE__*/ _react.createElement(_reactDismissableLayer.DismissableLayer, {
        as: _reactSlot.Slot,
        disableOutsidePointerEvents: d,
        onEscapeKeyDown: _primitive.composeEventHandlers(p, ()=>{
            U.current = !1;
        }),
        onPointerDownOutside: _primitive.composeEventHandlers(g, (e1)=>{
            const t6 = e1.detail.originalEvent, n3 = 0 === t6.button && !1 === t6.ctrlKey;
            U.current = n3;
        }, {
            checkForDefaultPrevented: !1
        }),
        onFocusOutside: _primitive.composeEventHandlers(h, (e1)=>{
            a2 && e1.preventDefault();
        }, {
            checkForDefaultPrevented: !1
        }),
        onInteractOutside: b,
        onDismiss: M1
    }, /*#__PURE__*/ _react.createElement(_reactRovingFocus.RovingFocusGroup, {
        as: _reactSlot.Slot,
        dir: S1.dir,
        orientation: "vertical",
        loop: r,
        currentTabStopId: L1,
        onCurrentTabStopIdChange: K1,
        onEntryFocus: (e1)=>{
            S1.isUsingKeyboardRef.current || e1.preventDefault();
        }
    }, /*#__PURE__*/ _react.createElement(_reactPopper.Content, _extendsDefault.default({
        role: "menu",
        dir: S1.dir,
        "data-state": Y(S1.open)
    }, k1, {
        ref: G1,
        style: {
            outline: "none",
            ...k1.style
        },
        onKeyDown: _primitive.composeEventHandlers(k1.onKeyDown, (e1)=>{
            const t6 = e1.target, n3 = e1.currentTarget.contains(t6), r1 = e1.ctrlKey || e1.altKey || e1.metaKey;
            n3 && !r1 && 1 === e1.key.length && J(e1.key), "Tab" === e1.key && e1.preventDefault();
            const o2 = F1.current;
            if (e1.target !== o2) return;
            if (!R.includes(e1.key)) return;
            e1.preventDefault();
            const u = T1().filter((e2)=>!e2.disabled
            ).map((e2)=>e2.ref.current
            );
            y.includes(e1.key) && u.reverse(), (function(e2) {
                const t7 = document.activeElement;
                for (const n4 of e2){
                    if (n4 === t7) return;
                    if (n4.focus(), document.activeElement !== t7) return;
                }
            })(u);
        }),
        onBlur: _primitive.composeEventHandlers(e.onBlur, (e1)=>{
            e1.currentTarget.contains(e1.target) || (window.clearTimeout(V.current), N.current = "");
        }),
        onPointerMove: _primitive.composeEventHandlers(e.onPointerMove, H((e1)=>{
            const t6 = e1.target, n3 = W.current !== e1.clientX;
            if (e1.currentTarget.contains(t6) && n3) {
                const t7 = e1.clientX > W.current ? "right" : "left";
                z.current = t7, W.current = e1.clientX;
            }
        }))
    }))))))));
}), U = "div";
const MenuItem = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const { disabled: n3 = !1 , onSelect: r , ...o2 } = e, u = _react.useRef(null), a = D("MenuItem"), c = L("MenuItem"), i = _reactComposeRefs.useComposedRefs(t6, u), l = ()=>{
        const e1 = u.current;
        if (!n3 && e1) {
            const t7 = new Event("menu.itemSelect", {
                bubbles: !0,
                cancelable: !0
            });
            if (e1.addEventListener("menu.itemSelect", (e2)=>null == r ? void 0 : r(e2)
            , {
                once: !0
            }), e1.dispatchEvent(t7), t7.defaultPrevented) return;
            a.onRootClose();
        }
    }; /*#__PURE__*/ 
    return _react.createElement(V, _extendsDefault.default({
    }, o2, {
        ref: i,
        disabled: n3,
        onPointerUp: _primitive.composeEventHandlers(e.onPointerUp, l),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (e1)=>{
            const t7 = "" !== c.searchRef.current;
            n3 || t7 && " " === e1.key || M.includes(e1.key) && (" " === e1.key && e1.preventDefault(), l());
        })
    }));
}); /*#__PURE__*/ 
const MenuSubTrigger = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const n3 = D("MenuSubTrigger"), r = L("MenuSubTrigger"), u = _react.useRef(null), { pointerGraceTimerRef: a , onPointerGraceIntentChange: c  } = r, i = _react.useCallback(()=>{
        u.current && window.clearTimeout(u.current), u.current = null;
    }, []);
    var l;
    return _react.useEffect(()=>i
    , [
        i
    ]), _react.useEffect(()=>{
        const e1 = a.current;
        return ()=>{
            window.clearTimeout(e1), c(null);
        };
    }, [
        a,
        c
    ]), n3.isSubmenu ? /*#__PURE__*/ _react.createElement(MenuAnchor, {
        as: _reactSlot.Slot
    }, /*#__PURE__*/ _react.createElement(V, _extendsDefault.default({
        id: n3.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": n3.open,
        "aria-controls": n3.contentId,
        "data-state": Y(n3.open)
    }, e, {
        ref: _reactComposeRefs.composeRefs(t6, n3.onTriggerChange),
        onPointerUp: _primitive.composeEventHandlers(e.onPointerUp, (l = (t7)=>{
            r.onItemEnter(t7), t7.defaultPrevented || e.disabled || n3.open || n3.onOpenChange(!0);
        }, (e1)=>"mouse" !== e1.pointerType ? l(e1) : void 0
        )),
        onPointerMove: _primitive.composeEventHandlers(e.onPointerMove, H((t7)=>{
            r.onItemEnter(t7), t7.defaultPrevented || e.disabled || n3.open || u.current || (r.onPointerGraceIntentChange(null), u.current = window.setTimeout(()=>{
                n3.onOpenChange(!0), i();
            }, 100));
        })),
        onPointerLeave: _primitive.composeEventHandlers(e.onPointerLeave, H((e1)=>{
            var t7;
            i();
            const o2 = null === (t7 = n3.content) || (void 0) === t7 ? void 0 : t7.getBoundingClientRect();
            if (o2) {
                var u1;
                const t8 = null === (u1 = n3.content) || (void 0) === u1 ? void 0 : u1.dataset.side, c1 = "right" === t8, i1 = c1 ? -5 : 5, l1 = o2[c1 ? "left" : "right"], s = o2[c1 ? "right" : "left"];
                r.onPointerGraceIntentChange({
                    area: [
                        {
                            x: e1.clientX + i1,
                            y: e1.clientY
                        },
                        {
                            x: l1,
                            y: o2.top
                        },
                        {
                            x: s,
                            y: o2.top
                        },
                        {
                            x: s,
                            y: o2.bottom
                        },
                        {
                            x: l1,
                            y: o2.bottom
                        }
                    ],
                    side: t8
                }), window.clearTimeout(a.current), a.current = window.setTimeout(()=>r.onPointerGraceIntentChange(null)
                , 300);
            } else {
                if (r.onTriggerLeave(e1), e1.defaultPrevented) return;
                r.onPointerGraceIntentChange(null);
            }
        })),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (t8)=>{
            const o2 = "" !== r.searchRef.current;
            var u2;
            e.disabled || o2 && " " === t8.key || I[n3.dir].includes(t8.key) && (n3.onOpenChange(!0), null === (u2 = n3.content) || (void 0) === u2 || u2.focus());
        })
    }))) : null;
}); /*#__PURE__*/ 
const V = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const { as: n3 = U , disabled: r = !1 , textValue: o2 , ...u3 } = e, c = _react.useRef(null), i = _reactComposeRefs.useComposedRefs(t6, c), l = L("MenuItem"), [s, d] = _react.useState("");
    return _react.useEffect(()=>{
        const e1 = c.current;
        var t8;
        e1 && d((null !== (t8 = e1.textContent) && (void 0) !== t8 ? t8 : "").trim());
    }, [
        u3.children
    ]), /*#__PURE__*/ _react.createElement(T, {
        disabled: r,
        textValue: null != o2 ? o2 : s
    }, /*#__PURE__*/ _react.createElement(_reactRovingFocus.RovingFocusItem, _extendsDefault.default({
        role: "menuitem",
        "aria-disabled": r || void 0,
        "data-disabled": r ? "" : void 0,
        focusable: !r
    }, u3, {
        as: n3,
        ref: i,
        onPointerMove: _primitive.composeEventHandlers(e.onPointerMove, H((e1)=>{
            if (r) l.onItemLeave(e1);
            else if (l.onItemEnter(e1), !e1.defaultPrevented) e1.currentTarget.focus();
        })),
        onPointerLeave: _primitive.composeEventHandlers(e.onPointerLeave, H((e1)=>l.onItemLeave(e1)
        ))
    })));
});
const MenuCheckboxItem = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const { checked: n3 = !1 , onCheckedChange: r , ...o2 } = e; /*#__PURE__*/ 
    return _react.createElement(B.Provider, {
        value: n3
    }, /*#__PURE__*/ _react.createElement(MenuItem, _extendsDefault.default({
        role: "menuitemcheckbox",
        "aria-checked": n3
    }, o2, {
        ref: t6,
        "data-state": z(n3),
        onSelect: _primitive.composeEventHandlers(o2.onSelect, ()=>null == r ? void 0 : r(!n3)
        , {
            checkForDefaultPrevented: !1
        })
    })));
}); /*#__PURE__*/ 
const N = /*#__PURE__*/ _react.createContext({
});
const MenuRadioGroup = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const { value: r , onValueChange: o2 , ...u3 } = e, a = _reactUseCallbackRef.useCallbackRef(o2), c = _react.useMemo(()=>({
            value: r,
            onValueChange: a
        })
    , [
        r,
        a
    ]); /*#__PURE__*/ 
    return _react.createElement(N.Provider, {
        value: c
    }, /*#__PURE__*/ _react.createElement(MenuGroup, _extendsDefault.default({
    }, u3, {
        ref: t6
    })));
}); /*#__PURE__*/ 
const MenuRadioItem = /*#__PURE__*/ _react.forwardRef((e, t6)=>{
    const { value: n3 , ...r } = e, o2 = _react.useContext(N), u3 = n3 === o2.value; /*#__PURE__*/ 
    return _react.createElement(B.Provider, {
        value: u3
    }, /*#__PURE__*/ _react.createElement(MenuItem, _extendsDefault.default({
        role: "menuitemradio",
        "aria-checked": u3
    }, r, {
        ref: t6,
        "data-state": z(u3),
        onSelect: _primitive.composeEventHandlers(r.onSelect, ()=>{
            var e1;
            return null === (e1 = o2.onValueChange) || (void 0) === e1 ? void 0 : e1.call(o2, n3);
        }, {
            checkForDefaultPrevented: !1
        })
    })));
}); /*#__PURE__*/ 
const X = "span", B = /*#__PURE__*/ _react.createContext(!1);
const MenuItemIndicator = /*#__PURE__*/ _react.forwardRef((e2, t6)=>{
    const { as: n3 = X , forceMount: r , ...o2 } = e2, u3 = _react.useContext(B); /*#__PURE__*/ 
    return _react.createElement(_reactPresence.Presence, {
        present: r || u3
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, o2, {
        as: n3,
        ref: t6,
        "data-state": z(u3)
    })));
}); /*#__PURE__*/ 
const MenuAnchor = _reactPrimitive.extendPrimitive(_reactPopper.Anchor, {
    displayName: "MenuAnchor"
});
const MenuGroup = _reactPrimitive.extendPrimitive(_reactPrimitive.Primitive, {
    defaultProps: {
        role: "group"
    },
    displayName: "MenuGroup"
});
const MenuLabel = _reactPrimitive.extendPrimitive(_reactPrimitive.Primitive, {
    displayName: "MenuLabel"
});
const MenuSeparator = _reactPrimitive.extendPrimitive(_reactPrimitive.Primitive, {
    defaultProps: {
        role: "separator",
        "aria-orientation": "horizontal"
    },
    displayName: "MenuSeparator "
});
const MenuArrow = _reactPrimitive.extendPrimitive(_reactPopper.Arrow, {
    displayName: "MenuArrow"
});
function Y(e2) {
    return e2 ? "open" : "closed";
}
function z(e2) {
    return e2 ? "checked" : "unchecked";
}
function H(e2) {
    return (t6)=>"mouse" === t6.pointerType ? e2(t6) : void 0
    ;
}
const Root = Menu;
const Sub = MenuSub;
const Anchor = MenuAnchor;
const SubTrigger = MenuSubTrigger;
const Content = MenuContent;
const Group = MenuGroup;
const Label = MenuLabel;
const Item = MenuItem;
const CheckboxItem = MenuCheckboxItem;
const RadioGroup = MenuRadioGroup;
const RadioItem = MenuRadioItem;
const ItemIndicator = MenuItemIndicator;
const Separator = MenuSeparator;
const Arrow = MenuArrow;

},{"@radix-ui/react-id":"jzxjA","@radix-ui/react-focus-guards":"evdAS","@radix-ui/react-use-callback-ref":"jO45C","@radix-ui/react-use-direction":"5GkW9","@radix-ui/react-slot":"iiT1C","@radix-ui/react-roving-focus":"9HuIY","@radix-ui/react-portal":"saCDC","@radix-ui/react-popper":"9ZIbk","@radix-ui/react-primitive":"50mzH","@radix-ui/react-presence":"lIJsD","@radix-ui/react-focus-scope":"k9bdB","@radix-ui/react-dismissable-layer":"iAkT6","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/react-collection":"jR8UG","@radix-ui/primitive":"dbLQ2","aria-hidden":"hD7A6","react-remove-scroll":"kqUUJ","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"evdAS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FocusGuards", ()=>FocusGuards
);
parcelHelpers.export(exports, "useFocusGuards", ()=>useFocusGuards
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _react = require("react");
let t = 0;
function FocusGuards(e) {
    return useFocusGuards(), e.children;
}
function useFocusGuards() {
    _react.useEffect(()=>{
        var e, n;
        const r = document.querySelectorAll("[data-radix-focus-guard]");
        return document.body.insertAdjacentElement("afterbegin", null !== (e = r[0]) && (void 0) !== e ? e : o()), document.body.insertAdjacentElement("beforeend", null !== (n = r[1]) && (void 0) !== n ? n : o()), t++, ()=>{
            1 === t && document.querySelectorAll("[data-radix-focus-guard]").forEach((e1)=>e1.remove()
            ), t--;
        };
    }, []);
}
function o() {
    const e = document.createElement("span");
    return e.setAttribute("data-radix-focus-guard", ""), e.tabIndex = 0, e.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none", e;
}
const Root = FocusGuards;

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5GkW9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDirection", ()=>useDirection
);
var _react = require("react");
function useDirection(t, n) {
    const [r, o] = _react.useState("ltr"), [i, u] = _react.useState(), c = _react.useRef(0);
    return _react.useEffect(()=>{
        if ((void 0) === n && null != t && t.parentElement) {
            const e = getComputedStyle(t.parentElement);
            u(e);
        }
    }, [
        t,
        n
    ]), _react.useEffect(()=>((void 0) === n && (function e() {
            c.current = requestAnimationFrame(()=>{
                const t1 = null == i ? void 0 : i.direction;
                t1 && o(t1), e();
            });
        })(), ()=>cancelAnimationFrame(c.current)
        )
    , [
        i,
        n,
        o
    ]), n || r;
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iiT1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Slot", ()=>Slot
);
parcelHelpers.export(exports, "Slottable", ()=>Slottable
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const Slot = /*#__PURE__*/ _react.forwardRef((e, o)=>{
    const { children: l , ...c } = e;
    return 1 === _react.Children.count(l) ? /*#__PURE__*/ _react.createElement(r, _extendsDefault.default({
    }, c, {
        ref: o
    }), l) : /*#__PURE__*/ _react.createElement(_react.Fragment, null, _react.Children.map(l, (e1)=>/*#__PURE__*/ _react.isValidElement(e1) && e1.type === Slottable ? /*#__PURE__*/ _react.createElement(r, _extendsDefault.default({
        }, c, {
            ref: o
        }), e1.props.children) : e1
    ));
});
Slot.displayName = "Slot";
const r = /*#__PURE__*/ _react.forwardRef((n, r1)=>{
    const { children: l , ...c } = n, i = _react.Children.only(l); /*#__PURE__*/ 
    return _react.isValidElement(i) ? /*#__PURE__*/ _react.cloneElement(i, {
        ...o(c, i.props),
        ref: _reactComposeRefs.composeRefs(r1, i.ref)
    }) : null;
});
r.displayName = "SlotClone";
const Slottable = ({ children: e  })=>e
;
function o(e, t) {
    const n = {
        ...t
    };
    for(const r1 in t){
        const o1 = e[r1], c = t[r1];
        /^on[A-Z]/.test(r1) ? n[r1] = l(c, o1) : "style" === r1 && (n[r1] = {
            ...o1,
            ...c
        });
    }
    return {
        ...e,
        ...n
    };
}
function l(e, t) {
    return function(...n) {
        null == e || e(...n);
        n[0] instanceof Event && n[0].defaultPrevented || null == t || t(...n);
    };
}
const Root = Slot;

},{"@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kiFIZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "composeRefs", ()=>composeRefs
);
parcelHelpers.export(exports, "useComposedRefs", ()=>useComposedRefs
);
var _react = require("react");
function composeRefs(...o) {
    return (e)=>o.forEach((o1)=>(function(o2, e1) {
                "function" == typeof o2 ? o2(e1) : null != o2 && (o2.current = e1);
            })(o1, e)
        )
    ;
}
function useComposedRefs(...e) {
    return _react.useCallback(composeRefs(...e), e);
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9HuIY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RovingFocusGroup", ()=>RovingFocusGroup
);
parcelHelpers.export(exports, "RovingFocusItem", ()=>RovingFocusItem
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Item", ()=>Item
);
var _reactUseControllableState = require("@radix-ui/react-use-controllable-state");
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactId = require("@radix-ui/react-id");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _reactCollection = require("@radix-ui/react-collection");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const f = {
    bubbles: !1,
    cancelable: !0
}, [l, m, p] = _reactCollection.createCollection(), d = "span", [v, g] = _reactContext.createContext("RovingFocusGroup");
const RovingFocusGroup = /*#__PURE__*/ _react.forwardRef((e, t)=>/*#__PURE__*/ _react.createElement(l, null, /*#__PURE__*/ _react.createElement(w, _extendsDefault.default({
    }, e, {
        ref: t
    })))
); /*#__PURE__*/ 
const w = /*#__PURE__*/ _react.forwardRef((o, n)=>{
    const { as: a = d , orientation: l1 , dir: m1 = "ltr" , loop: g1 = !1 , currentTabStopId: w1 , defaultCurrentTabStopId: b , onCurrentTabStopIdChange: x , onEntryFocus: E , ...I } = o, R = _react.useRef(null), h = _reactComposeRefs.useComposedRefs(n, R), [T = null, A] = _reactUseControllableState.useControllableState({
        prop: w1,
        defaultProp: b,
        onChange: x
    }), [y, D] = _react.useState(!1), S = _reactUseCallbackRef.useCallbackRef(E), { getItems: C  } = p(), G = _react.useRef(!1);
    return _react.useEffect(()=>{
        const e = R.current;
        if (e) return e.addEventListener("rovingFocusGroup.onEntryFocus", S), ()=>e.removeEventListener("rovingFocusGroup.onEntryFocus", S)
        ;
    }, [
        S
    ]), /*#__PURE__*/ _react.createElement(v, {
        orientation: l1,
        dir: m1,
        loop: g1,
        currentTabStopId: T,
        onItemFocus: _react.useCallback((e)=>A(e)
        , [
            A
        ]),
        onItemShiftTab: _react.useCallback(()=>D(!0)
        , [])
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        tabIndex: y ? -1 : 0,
        "aria-orientation": l1,
        "data-orientation": l1
    }, I, {
        as: a,
        ref: h,
        style: {
            outline: "none",
            ...o.style
        },
        onMouseDown: _primitive.composeEventHandlers(o.onMouseDown, ()=>{
            G.current = !0;
        }),
        onFocus: _primitive.composeEventHandlers(o.onFocus, (e)=>{
            const t = !G.current;
            if (e.target === e.currentTarget && t && !y) {
                const t1 = new Event("rovingFocusGroup.onEntryFocus", f);
                if (e.currentTarget.dispatchEvent(t1), !t1.defaultPrevented) {
                    const e1 = C().filter((e2)=>e2.focusable
                    );
                    F([
                        e1.find((e2)=>e2.active
                        ),
                        e1.find((e2)=>e2.id === T
                        ),
                        ...e1
                    ].filter(Boolean).map((e2)=>e2.ref.current
                    ));
                }
            }
            G.current = !1;
        }),
        onBlur: _primitive.composeEventHandlers(o.onBlur, ()=>D(!1)
        )
    })));
}), b = "span";
const RovingFocusItem = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const { as: n = b , focusable: i = !0 , active: a = !1 , ...f1 } = e, l1 = _reactId.useId(), d1 = g("RovingFocusItem"), v1 = d1.currentTabStopId === l1, { getItems: w1  } = p(); /*#__PURE__*/ 
    return _react.createElement(m, {
        id: l1,
        focusable: i,
        active: a
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        tabIndex: v1 ? 0 : -1,
        "data-orientation": d1.orientation
    }, f1, {
        as: n,
        ref: t,
        onMouseDown: _primitive.composeEventHandlers(e.onMouseDown, (e1)=>{
            i ? d1.onItemFocus(l1) : e1.preventDefault();
        }),
        onFocus: _primitive.composeEventHandlers(e.onFocus, ()=>d1.onItemFocus(l1)
        ),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (e1)=>{
            if ("Tab" === e1.key && e1.shiftKey) return void d1.onItemShiftTab();
            if (e1.target !== e1.currentTarget) return;
            const t1 = function(e2, t2, r) {
                const o = function(e3, t3) {
                    return "rtl" !== t3 ? e3 : "ArrowLeft" === e3 ? "ArrowRight" : "ArrowRight" === e3 ? "ArrowLeft" : e3;
                }(e2.key, r);
                return "vertical" === t2 && [
                    "ArrowLeft",
                    "ArrowRight"
                ].includes(o) || "horizontal" === t2 && [
                    "ArrowUp",
                    "ArrowDown"
                ].includes(o) ? void 0 : x[o];
            }(e1, d1.orientation, d1.dir);
            if ((void 0) !== t1) {
                e1.preventDefault();
                let n1 = w1().filter((e2)=>e2.focusable
                ).map((e2)=>e2.ref.current
                );
                if ("last" === t1) n1.reverse();
                else if ("prev" === t1 || "next" === t1) {
                    "prev" === t1 && n1.reverse();
                    const i1 = n1.indexOf(e1.currentTarget);
                    n1 = d1.loop ? (o = i1 + 1, (r = n1).map((e2, t2)=>r[(o + t2) % r.length]
                    )) : n1.slice(i1 + 1);
                }
                setTimeout(()=>F(n1)
                );
            }
            var r, o;
        })
    })));
}); /*#__PURE__*/ 
const x = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
};
function F(e) {
    const t = document.activeElement;
    for (const r of e){
        if (r === t) return;
        if (r.focus(), document.activeElement !== t) return;
    }
}
const Root = RovingFocusGroup;
const Item = RovingFocusItem;

},{"@radix-ui/react-use-controllable-state":"iZM9F","@radix-ui/react-use-callback-ref":"jO45C","@radix-ui/react-primitive":"50mzH","@radix-ui/react-id":"jzxjA","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/react-collection":"jR8UG","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iZM9F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useControllableState", ()=>useControllableState
);
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _react = require("react");
function useControllableState({ prop: o , defaultProp: r , onChange: n = ()=>{
}  }) {
    const [a, u] = function({ defaultProp: o1 , onChange: r1  }) {
        const n1 = _react.useState(o1), [a1] = n1, u1 = _react.useRef(a1), c = _reactUseCallbackRef.useCallbackRef(r1);
        return _react.useEffect(()=>{
            u1.current !== a1 && (c(a1), u1.current = a1);
        }, [
            a1,
            u1,
            c
        ]), n1;
    }({
        defaultProp: r,
        onChange: n
    }), c = (void 0) !== o, f = c ? o : a, l = _reactUseCallbackRef.useCallbackRef(n);
    return [
        f,
        _react.useCallback((e)=>{
            if (c) {
                const t = e, r1 = "function" == typeof e ? t(o) : e;
                r1 !== o && l(r1);
            } else u(e);
        }, [
            c,
            o,
            u,
            l
        ])
    ];
}

},{"@radix-ui/react-use-callback-ref":"jO45C","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"50mzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Primitive", ()=>Primitive
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "extendPrimitive", ()=>extendPrimitive
);
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const r = "div";
const Primitive = /*#__PURE__*/ _react.forwardRef((o, i)=>{
    const { as: n = r , ...a } = o; /*#__PURE__*/ 
    return _react.createElement(n, _extendsDefault.default({
    }, a, {
        ref: i
    }));
}); /*#__PURE__*/ 
const Root = Primitive;
function extendPrimitive(r1, o) {
    const i = /*#__PURE__*/ _react.forwardRef((i1, n)=>{
        const a = r1, s = {
            ...o.defaultProps,
            ...i1
        }; /*#__PURE__*/ 
        return _react.createElement(a, _extendsDefault.default({
        }, s, {
            ref: n
        }));
    });
    return i.displayName = o.displayName || "Extended" + r1.displayName, i;
}

},{"react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hrkBZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createContext", ()=>createContext
);
var _react = require("react");
function createContext(t) {
    const r = /*#__PURE__*/ _react.createContext(null);
    function n(t1) {
        const { children: n1 , ...o } = t1, u = _react.useMemo(()=>o
        , Object.values(o)); /*#__PURE__*/ 
        return _react.createElement(r.Provider, {
            value: u
        }, n1);
    }
    return n.displayName = t + "Provider", [
        n,
        function(n1) {
            const o = _react.useContext(r);
            if (null === o) throw new Error(`\`${n1}\` must be used within \`${t}\``);
            return o;
        }
    ];
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jR8UG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCollection", ()=>createCollection
);
var _reactSlot = require("@radix-ui/react-slot");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
function createCollection() {
    const o = /*#__PURE__*/ _reactDefault.default.createContext({
    }), n = /*#__PURE__*/ _reactDefault.default.forwardRef((n1, c)=>{
        const { children: f  } = n1, u = _reactDefault.default.useRef(null), a = _reactComposeRefs.useComposedRefs(c, u), i = _reactDefault.default.useRef(new Map).current; /*#__PURE__*/ 
        return _reactDefault.default.createElement(o.Provider, {
            value: _reactDefault.default.useMemo(()=>({
                    itemMap: i,
                    collectionRef: u
                })
            , [
                i
            ])
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactSlot.Slot, {
            ref: a
        }, f));
    }), c = "data-radix-collection-item", f = /*#__PURE__*/ _reactDefault.default.forwardRef((n1, f1)=>{
        const { children: u , ...a } = n1, i = _reactDefault.default.useRef(null), l = _reactComposeRefs.useComposedRefs(f1, i), m = _reactDefault.default.useContext(o);
        return _reactDefault.default.useEffect(()=>(m.itemMap.set(i, {
                ref: i,
                ...a
            }), ()=>{
                m.itemMap.delete(i);
            })
        ), /*#__PURE__*/ _reactDefault.default.createElement(_reactSlot.Slot, {
            [c]: "",
            ref: l
        }, u);
    });
    return [
        n,
        f,
        function() {
            const e = _reactDefault.default.useContext(o);
            return {
                getItems () {
                    const r = Array.from(e.collectionRef.current.querySelectorAll(`[${c}]`));
                    return Array.from(e.itemMap.values()).sort((e1, t)=>r.indexOf(e1.ref.current) - r.indexOf(t.ref.current)
                    );
                }
            };
        }
    ];
}

},{"@radix-ui/react-slot":"iiT1C","@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dbLQ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "composeEventHandlers", ()=>composeEventHandlers
);
function composeEventHandlers(e, n, { checkForDefaultPrevented: t = !0  } = {
}) {
    return function(r) {
        if (null == e || e(r), !1 === t || !r.defaultPrevented) return null == n ? void 0 : n(r);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"saCDC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Portal", ()=>Portal
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactUseLayoutEffect = require("@radix-ui/react-use-layout-effect");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const Portal = /*#__PURE__*/ _react.forwardRef((a, i)=>{
    var n, d;
    const { containerRef: m , style: s , ...u } = a, c = null !== (n = null == m ? void 0 : m.current) && (void 0) !== n ? n : null === globalThis || (void 0) === globalThis || null === (d = globalThis.document) || (void 0) === d ? void 0 : d.body, [, f] = _react.useState({
    });
    return _reactUseLayoutEffect.useLayoutEffect(()=>{
        f({
        });
    }, []), c ? /*#__PURE__*/ _reactDomDefault.default.createPortal(/*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        "data-radix-portal": ""
    }, u, {
        ref: i,
        style: c === document.body ? {
            position: "absolute",
            top: 0,
            left: 0,
            zIndex: 2147483647,
            ...s
        } : void 0
    })), c) : null;
}); /*#__PURE__*/ 
const Root = Portal;

},{"@radix-ui/react-primitive":"50mzH","@radix-ui/react-use-layout-effect":"1rgUP","react-dom":"4iRhS","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1rgUP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useLayoutEffect", ()=>useLayoutEffect
);
var _react = require("react");
const useLayoutEffect = Boolean(null === globalThis || (void 0) === globalThis ? void 0 : globalThis.document) ? _react.useLayoutEffect : ()=>{
};

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9ZIbk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Popper", ()=>Popper
);
parcelHelpers.export(exports, "PopperAnchor", ()=>PopperAnchor
);
parcelHelpers.export(exports, "PopperContent", ()=>PopperContent
);
parcelHelpers.export(exports, "PopperArrow", ()=>PopperArrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Anchor", ()=>Anchor
);
parcelHelpers.export(exports, "Content", ()=>Content
);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
var _reactArrow = require("@radix-ui/react-arrow");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactUseSize = require("@radix-ui/react-use-size");
var _reactUseRect = require("@radix-ui/react-use-rect");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _popper = require("@radix-ui/popper");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const [p, l] = _reactContext.createContext("Popper");
const Popper = ({ children: e  })=>{
    const [r, o] = _react.useState(null); /*#__PURE__*/ 
    return _react.createElement(p, {
        anchor: r,
        onAnchorChange: o
    }, e);
}; /*#__PURE__*/ 
const PopperAnchor = /*#__PURE__*/ _react.forwardRef((e, o)=>{
    const { virtualRef: t , children: n , ...a } = e, p1 = l("PopperAnchor"), f = _react.useRef(null), d = _reactComposeRefs.useComposedRefs(o, f);
    return _react.useEffect(()=>{
        p1.onAnchorChange((null == t ? void 0 : t.current) || f.current);
    }), t ? null : /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, a, {
        ref: d
    }), n);
}); /*#__PURE__*/ 
const [f, d] = _reactContext.createContext("PopperContent");
const PopperContent = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const { side: p1 = "bottom" , sideOffset: d1 , align: u = "center" , alignOffset: m , collisionTolerance: w , avoidCollisions: h = !0 , ...x } = e, A = l("PopperContent"), [v, g] = _react.useState(), E = _reactUseRect.useRect(A.anchor), [y, C] = _react.useState(null), P = _reactUseSize.useSize(y), [S, R] = _react.useState(null), O = _reactUseSize.useSize(S), b = _reactComposeRefs.useComposedRefs(n, (e1)=>C(e1)
    ), z = function() {
        const [e1, r] = _react.useState(void 0);
        return _react.useEffect(()=>{
            let e2;
            function o() {
                r({
                    width: window.innerWidth,
                    height: window.innerHeight
                });
            }
            function t() {
                window.clearTimeout(e2), e2 = window.setTimeout(o, 100);
            }
            return o(), window.addEventListener("resize", t), ()=>window.removeEventListener("resize", t)
            ;
        }, []), e1;
    }(), T = z ? DOMRect.fromRect({
        ...z,
        x: 0,
        y: 0
    }) : void 0, { popperStyles: k , arrowStyles: L , placedSide: B , placedAlign: D  } = _popper.getPlacementData({
        anchorRect: E,
        popperSize: P,
        arrowSize: O,
        arrowOffset: v,
        side: p1,
        sideOffset: d1,
        align: u,
        alignOffset: m,
        shouldAvoidCollisions: h,
        collisionBoundariesRect: T,
        collisionTolerance: w
    }), H = (void 0) !== B; /*#__PURE__*/ 
    return _react.createElement("div", {
        style: k,
        "data-radix-popper-content-wrapper": ""
    }, /*#__PURE__*/ _react.createElement(f, {
        arrowStyles: L,
        onArrowChange: R,
        onArrowOffsetChange: g
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        "data-side": B,
        "data-align": D
    }, x, {
        style: {
            ...x.style,
            animation: H ? void 0 : "none"
        },
        ref: b
    }))));
}); /*#__PURE__*/ 
const PopperArrow = /*#__PURE__*/ _react.forwardRef(function(r, o) {
    const { offset: t , ...n } = r, i = d("PopperArrow"), { onArrowOffsetChange: a  } = i;
    return _react.useEffect(()=>a(t)
    , [
        a,
        t
    ]), /*#__PURE__*/ _react.createElement("span", {
        style: {
            ...i.arrowStyles,
            pointerEvents: "none"
        }
    }, /*#__PURE__*/ _react.createElement("span", {
        ref: i.onArrowChange,
        style: {
            display: "inline-block",
            verticalAlign: "top",
            pointerEvents: "auto"
        }
    }, /*#__PURE__*/ _react.createElement(_reactArrow.Root, _extendsDefault.default({
    }, n, {
        ref: o,
        style: {
            ...n.style,
            display: "block"
        }
    }))));
}); /*#__PURE__*/ 
const Root = Popper;
const Anchor = PopperAnchor;
const Content = PopperContent;
const Arrow = PopperArrow;

},{"@radix-ui/react-arrow":"laRx7","@radix-ui/react-primitive":"50mzH","@radix-ui/react-use-size":"dYwud","@radix-ui/react-use-rect":"8AXy9","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/popper":"82BGs","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"laRx7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactPrimitive = require("@radix-ui/react-primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const Arrow = /*#__PURE__*/ _react.forwardRef((i, n)=>{
    const { as: s = o , ...a } = i; /*#__PURE__*/ 
    return _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, a, {
        as: s,
        ref: n
    }));
});
const o = /*#__PURE__*/ _react.forwardRef((e, o1)=>{
    const { width: i = 10 , height: n = 5 , ...s } = e; /*#__PURE__*/ 
    return _react.createElement("svg", _extendsDefault.default({
    }, s, {
        ref: o1,
        width: i,
        height: n,
        viewBox: "0 0 30 10",
        preserveAspectRatio: "none"
    }), /*#__PURE__*/ _react.createElement("polygon", {
        points: "0,0 30,0 15,10"
    }));
}); /*#__PURE__*/ 
const Root = Arrow;

},{"@radix-ui/react-primitive":"50mzH","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dYwud":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSize", ()=>useSize
);
var _react = require("react");
function useSize(r) {
    const [i, t] = _react.useState(void 0);
    return _react.useEffect(()=>{
        if (r) {
            const e = new ResizeObserver((e1)=>{
                if (!Array.isArray(e1)) return;
                if (!e1.length) return;
                const i1 = e1[0];
                let o, n;
                if ("borderBoxSize" in i1) {
                    const e2 = i1.borderBoxSize, r1 = Array.isArray(e2) ? e2[0] : e2;
                    o = r1.inlineSize, n = r1.blockSize;
                } else {
                    const e2 = r.getBoundingClientRect();
                    o = e2.width, n = e2.height;
                }
                t({
                    width: o,
                    height: n
                });
            });
            return e.observe(r, {
                box: "border-box"
            }), ()=>{
                t(void 0), e.unobserve(r);
            };
        }
    }, [
        r
    ]), i;
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8AXy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRect", ()=>useRect
);
var _rect = require("@radix-ui/rect");
var _react = require("react");
function useRect(e) {
    const [o, c] = _react.useState();
    return _react.useEffect(()=>{
        if (e) {
            const r = _rect.observeElementRect(e, c);
            return ()=>{
                c(void 0), r();
            };
        }
    }, [
        e
    ]), o;
}

},{"@radix-ui/rect":"2QHAF","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2QHAF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observeElementRect", ()=>observeElementRect
);
function observeElementRect(n, o) {
    const a = e.get(n);
    return (void 0) === a ? (e.set(n, {
        rect: {
        },
        callbacks: [
            o
        ]
    }), 1 === e.size && (t = requestAnimationFrame(c))) : a.callbacks.push(o), ()=>{
        const c = e.get(n);
        if ((void 0) === c) return;
        const a1 = c.callbacks.indexOf(o);
        a1 > -1 && c.callbacks.splice(a1, 1), 0 === c.callbacks.length && (e.delete(n), 0 === e.size && cancelAnimationFrame(t));
    };
}
let t;
const e = new Map;
function c() {
    const n = [];
    e.forEach((t1, e1)=>{
        const c1 = e1.getBoundingClientRect();
        var o, a;
        o = t1.rect, a = c1, (o.width !== a.width || o.height !== a.height || o.top !== a.top || o.right !== a.right || o.bottom !== a.bottom || o.left !== a.left) && (t1.rect = c1, n.push(t1));
    }), n.forEach((t1)=>{
        t1.callbacks.forEach((e1)=>e1(t1.rect)
        );
    }), t = requestAnimationFrame(c);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"82BGs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SIDE_OPTIONS", ()=>SIDE_OPTIONS
);
parcelHelpers.export(exports, "ALIGN_OPTIONS", ()=>ALIGN_OPTIONS
);
parcelHelpers.export(exports, "getPlacementData", ()=>getPlacementData
);
const SIDE_OPTIONS = [
    "top",
    "right",
    "bottom",
    "left"
];
const ALIGN_OPTIONS = [
    "start",
    "center",
    "end"
];
function getPlacementData({ anchorRect: p , popperSize: c , arrowSize: f , arrowOffset: l = 0 , side: d , sideOffset: h = 0 , align: x , alignOffset: g = 0 , shouldAvoidCollisions: u = !0 , collisionBoundariesRect: w , collisionTolerance: m = 0  }) {
    if (!p || !c || !w) return {
        popperStyles: o,
        arrowStyles: n
    };
    const y = function(e, r, o = 0, n = 0, i) {
        const p1 = i ? i.height : 0, a = t(r, e, "x"), s = t(r, e, "y"), c1 = s.before - o - p1, f1 = s.after + o + p1, l1 = a.before - o - p1, d1 = a.after + o + p1;
        return {
            top: {
                start: {
                    x: a.start + n,
                    y: c1
                },
                center: {
                    x: a.center,
                    y: c1
                },
                end: {
                    x: a.end - n,
                    y: c1
                }
            },
            right: {
                start: {
                    x: d1,
                    y: s.start + n
                },
                center: {
                    x: d1,
                    y: s.center
                },
                end: {
                    x: d1,
                    y: s.end - n
                }
            },
            bottom: {
                start: {
                    x: a.start + n,
                    y: f1
                },
                center: {
                    x: a.center,
                    y: f1
                },
                end: {
                    x: a.end - n,
                    y: f1
                }
            },
            left: {
                start: {
                    x: l1,
                    y: s.start + n
                },
                center: {
                    x: l1,
                    y: s.center
                },
                end: {
                    x: l1,
                    y: s.end - n
                }
            }
        };
    }(c, p, h, g, f), b = y[d][x];
    if (!1 === u) {
        const t = e(b);
        let o = n;
        f && (o = i({
            popperSize: c,
            arrowSize: f,
            arrowOffset: l,
            side: d,
            align: x
        }));
        return {
            popperStyles: {
                ...t,
                "--radix-popper-transform-origin": r(c, d, x, l, f)
            },
            arrowStyles: o,
            placedSide: d,
            placedAlign: x
        };
    }
    const S = DOMRect.fromRect({
        ...c,
        ...b
    }), $ = (O = w, z = m, DOMRect.fromRect({
        width: O.width - 2 * z,
        height: O.height - 2 * z,
        x: O.left + z,
        y: O.top + z
    }));
    var O, z;
    const R = s(S, $), M = y[a(d)][x], D = function(t, e, r) {
        const o = a(t);
        return e[t] && !r[o] ? o : t;
    }(d, R, s(DOMRect.fromRect({
        ...c,
        ...M
    }), $)), A = function(t, e, r, o, n) {
        const i = "top" === r || "bottom" === r, p1 = i ? "left" : "top", a = i ? "right" : "bottom", s = i ? "width" : "height", c1 = e[s] > t[s];
        if (("start" === o || "center" === o) && (n[p1] && c1 || n[a] && !c1)) return "end";
        if (("end" === o || "center" === o) && (n[a] && c1 || n[p1] && !c1)) return "start";
        return o;
    }(c, p, d, x, R), I = e(y[D][A]);
    let C = n;
    f && (C = i({
        popperSize: c,
        arrowSize: f,
        arrowOffset: l,
        side: D,
        align: A
    }));
    return {
        popperStyles: {
            ...I,
            "--radix-popper-transform-origin": r(c, D, A, l, f)
        },
        arrowStyles: C,
        placedSide: D,
        placedAlign: A
    };
}
function t(t1, e, r) {
    const o = t1["x" === r ? "left" : "top"], n = "x" === r ? "width" : "height", i = t1[n], p = e[n];
    return {
        before: o - p,
        start: o,
        center: o + (i - p) / 2,
        end: o + i - p,
        after: o + i
    };
}
function e(t1) {
    return {
        position: "absolute",
        top: 0,
        left: 0,
        minWidth: "max-content",
        willChange: "transform",
        transform: `translate3d(${Math.round(t1.x + window.scrollX)}px, ${Math.round(t1.y + window.scrollY)}px, 0)`
    };
}
function r(t1, e1, r1, o, n) {
    const i = "top" === e1 || "bottom" === e1, p = n ? n.width : 0, a = n ? n.height : 0, s = p / 2 + o;
    let c = "", f = "";
    return i ? (c = ({
        start: `${s}px`,
        center: "center",
        end: t1.width - s + "px"
    })[r1], f = "top" === e1 ? `${t1.height + a}px` : -a + "px") : (c = "left" === e1 ? `${t1.width + a}px` : -a + "px", f = ({
        start: `${s}px`,
        center: "center",
        end: t1.height - s + "px"
    })[r1]), `${c} ${f}`;
}
const o = {
    position: "fixed",
    top: 0,
    left: 0,
    opacity: 0,
    transform: "translate3d(0, -200%, 0)"
}, n = {
    position: "absolute",
    opacity: 0
};
function i({ popperSize: t1 , arrowSize: e1 , arrowOffset: r1 , side: o1 , align: n1  }) {
    const i1 = (t1.width - e1.width) / 2, a = (t1.height - e1.width) / 2, s = {
        top: 0,
        right: 90,
        bottom: 180,
        left: -90
    }[o1], c = Math.max(e1.width, e1.height), f = {
        width: `${c}px`,
        height: `${c}px`,
        transform: `rotate(${s}deg)`,
        willChange: "transform",
        position: "absolute",
        [o1]: "100%",
        direction: p(o1, n1)
    };
    return "top" !== o1 && "bottom" !== o1 || ("start" === n1 && (f.left = `${r1}px`), "center" === n1 && (f.left = `${i1}px`), "end" === n1 && (f.right = `${r1}px`)), "left" !== o1 && "right" !== o1 || ("start" === n1 && (f.top = `${r1}px`), "center" === n1 && (f.top = `${a}px`), "end" === n1 && (f.bottom = `${r1}px`)), f;
}
function p(t1, e1) {
    return ("top" !== t1 && "right" !== t1 || "end" !== e1) && ("bottom" !== t1 && "left" !== t1 || "end" === e1) ? "ltr" : "rtl";
}
function a(t1) {
    return ({
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right"
    })[t1];
}
function s(t1, e1) {
    return {
        top: t1.top < e1.top,
        right: t1.right > e1.right,
        bottom: t1.bottom > e1.bottom,
        left: t1.left < e1.left
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lIJsD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Presence", ()=>Presence
);
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
const Presence = (r)=>{
    const { present: u , children: o  } = r, s = function(e) {
        const [r1, u1] = _react.useState(), o1 = _react.useRef({
        }), s1 = _react.useRef(e), i = _react.useRef(), c = e ? "mounted" : "unmounted", [a, d] = function(e1, t) {
            return _react.useReducer((e2, n)=>{
                const r2 = t[e2][n];
                return null != r2 ? r2 : e2;
            }, e1);
        }(c, {
            mounted: {
                UNMOUNT: "unmounted",
                ANIMATION_OUT: "unmountSuspended"
            },
            unmountSuspended: {
                MOUNT: "mounted",
                ANIMATION_END: "unmounted"
            },
            unmounted: {
                MOUNT: "mounted"
            }
        });
        return _react.useEffect(()=>{
            const n = o1.current, r2 = s1.current;
            if (r2 !== e) {
                const u2 = i.current, o2 = t(n);
                if (e) d("MOUNT");
                else if ("none" === o2 || "none" === (null == n ? void 0 : n.display)) d("UNMOUNT");
                else {
                    const e1 = u2 !== o2;
                    d(r2 && e1 ? "ANIMATION_OUT" : "UNMOUNT");
                }
                s1.current = e;
            }
        }, [
            e,
            d
        ]), _react.useEffect(()=>{
            if (r1) {
                const e1 = (e2)=>{
                    const n = t(o1.current).includes(e2.animationName);
                    e2.target === r1 && n && d("ANIMATION_END");
                }, n = (e2)=>{
                    e2.target === r1 && (i.current = t(o1.current));
                };
                return r1.addEventListener("animationstart", n), r1.addEventListener("animationcancel", e1), r1.addEventListener("animationend", e1), ()=>{
                    r1.removeEventListener("animationstart", n), r1.removeEventListener("animationcancel", e1), r1.removeEventListener("animationend", e1);
                };
            }
        }, [
            r1,
            d
        ]), {
            isPresent: [
                "mounted",
                "unmountSuspended"
            ].includes(a),
            ref: _react.useCallback((e1)=>{
                e1 && (o1.current = getComputedStyle(e1), u1(e1));
            }, [])
        };
    }(u), i = "function" == typeof o ? o({
        present: s.isPresent
    }) : _react.Children.only(o), c = _reactComposeRefs.useComposedRefs(s.ref, i.ref);
    return "function" == typeof o || s.isPresent ? /*#__PURE__*/ _react.cloneElement(i, {
        ref: c
    }) : null;
};
function t(e) {
    return (null == e ? void 0 : e.animationName) || "none";
}
Presence.displayName = "Presence";

},{"@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k9bdB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FocusScope", ()=>FocusScope
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const c = {
    bubbles: !1,
    cancelable: !0
};
const FocusScope = /*#__PURE__*/ _react.forwardRef((i, f)=>{
    const { trapped: l = !1 , onMountAutoFocus: m , onUnmountAutoFocus: p , ...v } = i, [E, F] = _react.useState(null), S = _reactUseCallbackRef.useCallbackRef(m), b = _reactUseCallbackRef.useCallbackRef(p), T = _react.useRef(null), y = _reactComposeRefs.useComposedRefs(f, (e)=>F(e)
    ), L = l, h = l, x = _react.useRef({
        paused: !1,
        pause () {
            this.paused = !0;
        },
        resume () {
            this.paused = !1;
        }
    }).current;
    _react.useEffect(()=>{
        if (h) {
            function e(e1) {
                if (x.paused || !E) return;
                const t = e1.target;
                E.contains(t) ? T.current = t : a(T.current, {
                    select: !0
                });
            }
            function t(e1) {
                !x.paused && E && (E.contains(e1.relatedTarget) || a(T.current, {
                    select: !0
                }));
            }
            return document.addEventListener("focusin", e), document.addEventListener("focusout", t), ()=>{
                document.removeEventListener("focusin", e), document.removeEventListener("focusout", t);
            };
        }
    }, [
        h,
        E,
        x.paused
    ]), _react.useEffect(()=>{
        if (E) {
            d.add(x);
            const e = document.activeElement;
            E.addEventListener("focusScope.autoFocusOnMount", S), E.addEventListener("focusScope.autoFocusOnUnmount", b);
            const t = new Event("focusScope.autoFocusOnMount", c);
            return E.dispatchEvent(t), t.defaultPrevented || (!function(e1, { select: t1 = !1  } = {
            }) {
                const n = document.activeElement;
                for (const o of e1)if (a(o, {
                    select: t1
                }), document.activeElement !== n) return;
            }(r(E), {
                select: !0
            }), document.activeElement === e && a(E)), ()=>{
                E.removeEventListener("focusScope.autoFocusOnMount", S), setTimeout(()=>{
                    const t1 = new Event("focusScope.autoFocusOnUnmount", c);
                    E.dispatchEvent(t1), t1.defaultPrevented || a(null != e ? e : document.body, {
                        select: !0
                    }), E.removeEventListener("focusScope.autoFocusOnUnmount", b), d.remove(x);
                }, 0);
            };
        }
    }, [
        E,
        S,
        b,
        x
    ]);
    const N = _react.useCallback((e)=>{
        if (!L && !h) return;
        if (x.paused) return;
        const t = "Tab" === e.key && !e.altKey && !e.ctrlKey && !e.metaKey, n = document.activeElement;
        if (t && n) {
            const t1 = e.currentTarget, [o, u] = function(e1) {
                const t2 = r(e1), n1 = s(t2, e1), o1 = s(t2.reverse(), e1);
                return [
                    n1,
                    o1
                ];
            }(t1);
            o && u ? e.shiftKey || n !== u ? e.shiftKey && n === o && (e.preventDefault(), L && a(u, {
                select: !0
            })) : (e.preventDefault(), L && a(o, {
                select: !0
            })) : n === t1 && e.preventDefault();
        }
    }, [
        L,
        h,
        x.paused
    ]); /*#__PURE__*/ 
    return _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        tabIndex: -1
    }, v, {
        ref: y,
        onKeyDown: N
    }));
}); /*#__PURE__*/ 
function r(e) {
    const t = [], n = document.createTreeWalker(e, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (e1)=>{
            const t1 = "INPUT" === e1.tagName && "hidden" === e1.type;
            return e1.disabled || e1.hidden || t1 ? NodeFilter.FILTER_SKIP : e1.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
    });
    for(; n.nextNode();)t.push(n.currentNode);
    return t;
}
function s(e, t) {
    for (const n of e)if (!i(n, {
        upTo: t
    })) return n;
}
function i(e, { upTo: t  }) {
    if ("hidden" === getComputedStyle(e).visibility) return !0;
    for(; e;){
        if ((void 0) !== t && e === t) return !1;
        if ("none" === getComputedStyle(e).display) return !0;
        e = e.parentElement;
    }
    return !1;
}
function a(e, { select: t = !1  } = {
}) {
    if (e && e.focus) {
        const n = document.activeElement;
        e.focus({
            preventScroll: !0
        }), e !== n && (function(e1) {
            return e1 instanceof HTMLInputElement && "select" in e1;
        })(e) && t && e.select();
    }
}
const d = function() {
    let e = [];
    return {
        add (t) {
            const n = e[0];
            t !== n && (null == n || n.pause()), e = f(e, t), e.unshift(t);
        },
        remove (t) {
            var n;
            e = f(e, t), null === (n = e[0]) || (void 0) === n || n.resume();
        }
    };
}();
function f(e, t) {
    const n = [
        ...e
    ], o = n.indexOf(t);
    return -1 !== o && n.splice(o, 1), n;
}
const Root = FocusScope;

},{"@radix-ui/react-use-callback-ref":"jO45C","@radix-ui/react-primitive":"50mzH","@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iAkT6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DismissableLayer", ()=>DismissableLayer
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactUseEscapeKeydown = require("@radix-ui/react-use-escape-keydown");
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _reactUseBodyPointerEvents = require("@radix-ui/react-use-body-pointer-events");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const [s, a] = E(), [c, l] = C(), [d, m] = E("TotalLayerCountWithDisabledOutsidePointerEventsProvider"), [f, p] = C("RunningLayerCountWithDisabledOutsidePointerEventsProvider");
const DismissableLayer = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const n = 0 === l(), r = /*#__PURE__*/ _react.createElement(v, _extendsDefault.default({
    }, e, {
        ref: t
    }));
    return n ? /*#__PURE__*/ _react.createElement(s, null, /*#__PURE__*/ _react.createElement(d, null, r)) : r;
}); /*#__PURE__*/ 
const v = /*#__PURE__*/ _react.forwardRef((s1, d1)=>{
    const { disableOutsidePointerEvents: v1 = !1 , onEscapeKeyDown: E , onPointerDownOutside: C , onFocusOutside: b , onInteractOutside: w , onDismiss: L , ...P } = s1, y = a(), D = l() + 1, x = D === y, O = m(v1), g = p() + (v1 ? 1 : 0), h = g < O;
    _reactUseBodyPointerEvents.useBodyPointerEvents({
        disabled: v1
    }), _reactUseEscapeKeydown.useEscapeKeydown((e)=>{
        x && (null == E || E(e), e.defaultPrevented || null == L || L());
    });
    const { onPointerDownCapture: R  } = function(e) {
        const n = _reactUseCallbackRef.useCallbackRef(e), r = _react.useRef(!1);
        return _react.useEffect(()=>{
            const e1 = (e2)=>{
                const t = e2.target;
                if (t && !r.current) {
                    const r1 = new CustomEvent("dismissableLayer.pointerDownOutside", {
                        bubbles: !1,
                        cancelable: !0,
                        detail: {
                            originalEvent: e2
                        }
                    });
                    t.addEventListener("dismissableLayer.pointerDownOutside", n, {
                        once: !0
                    }), t.dispatchEvent(r1);
                }
                r.current = !1;
            };
            return document.addEventListener("pointerdown", e1), ()=>document.removeEventListener("pointerdown", e1)
            ;
        }, [
            n
        ]), {
            onPointerDownCapture: ()=>r.current = !0
        };
    }((e)=>{
        h || (null == C || C(e), null == w || w(e), e.defaultPrevented || null == L || L());
    }), { onBlurCapture: F , onFocusCapture: B  } = function(e) {
        const n = _reactUseCallbackRef.useCallbackRef(e), r = _react.useRef(!1);
        return _react.useEffect(()=>{
            const e1 = (e2)=>{
                const t = e2.target;
                if (t && !r.current) {
                    const r1 = new CustomEvent("dismissableLayer.focusOutside", {
                        bubbles: !1,
                        cancelable: !0,
                        detail: {
                            originalEvent: e2
                        }
                    });
                    t.addEventListener("dismissableLayer.focusOutside", n, {
                        once: !0
                    }), t.dispatchEvent(r1);
                }
            };
            return document.addEventListener("focusin", e1), ()=>document.removeEventListener("focusin", e1)
            ;
        }, [
            n
        ]), {
            onFocusCapture: ()=>r.current = !0
            ,
            onBlurCapture: ()=>r.current = !1
        };
    }((e)=>{
        null == b || b(e), null == w || w(e), e.defaultPrevented || null == L || L();
    }), T = O > 0 && !h; /*#__PURE__*/ 
    return _react.createElement(c, {
        runningCount: D
    }, /*#__PURE__*/ _react.createElement(f, {
        runningCount: g
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, P, {
        ref: d1,
        style: {
            pointerEvents: T ? "auto" : void 0,
            ...P.style
        },
        onPointerDownCapture: _primitive.composeEventHandlers(s1.onPointerDownCapture, R),
        onBlurCapture: _primitive.composeEventHandlers(s1.onBlurCapture, F),
        onFocusCapture: _primitive.composeEventHandlers(s1.onFocusCapture, B)
    }))));
});
function E(e) {
    const t = /*#__PURE__*/ _react.createContext({
        total: 0,
        setTotal: ()=>{
        }
    }), n = ({ children: e1  })=>{
        const [n1, r] = _react.useState(0), o = _react.useMemo(()=>({
                total: n1,
                setTotal: r
            })
        , [
            n1,
            r
        ]); /*#__PURE__*/ 
        return _react.createElement(t.Provider, {
            value: o
        }, e1);
    };
    return [
        n,
        function(e1 = !0) {
            const { total: n1 , setTotal: r  } = _react.useContext(t);
            return _react.useLayoutEffect(()=>{
                if (e1) return r((e2)=>e2 + 1
                ), ()=>r((e2)=>e2 - 1
                    )
                ;
            }, [
                e1,
                r
            ]), n1;
        }
    ];
}
function C(e) {
    const t = /*#__PURE__*/ _react.createContext(0), n = (e1)=>{
        const { children: n1 , runningCount: r  } = e1; /*#__PURE__*/ 
        return _react.createElement(t.Provider, {
            value: r
        }, n1);
    };
    return [
        n,
        function() {
            return _react.useContext(t) || 0;
        }
    ];
}
const Root = DismissableLayer;

},{"@radix-ui/react-use-escape-keydown":"586iD","@radix-ui/react-use-callback-ref":"jO45C","@radix-ui/react-use-body-pointer-events":"lvLr6","@radix-ui/react-primitive":"50mzH","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"586iD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEscapeKeydown", ()=>useEscapeKeydown
);
var _reactUseCallbackRef = require("@radix-ui/react-use-callback-ref");
var _react = require("react");
function useEscapeKeydown(n) {
    const o = _reactUseCallbackRef.useCallbackRef(n);
    _react.useEffect(()=>{
        const e = (e1)=>{
            "Escape" === e1.key && o(e1);
        };
        return document.addEventListener("keydown", e), ()=>document.removeEventListener("keydown", e)
        ;
    }, [
        o
    ]);
}

},{"@radix-ui/react-use-callback-ref":"jO45C","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lvLr6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBodyPointerEvents", ()=>useBodyPointerEvents
);
var _reactUseLayoutEffect = require("@radix-ui/react-use-layout-effect");
let t, o = 0;
function useBodyPointerEvents({ disabled: n  }) {
    _reactUseLayoutEffect.useLayoutEffect(()=>{
        if (n) return 0 === o && (t = document.body.style.pointerEvents), document.body.style.pointerEvents = "none", o++, ()=>{
            o--, 0 === o && (document.body.style.pointerEvents = t);
        };
    }, [
        n
    ]);
}

},{"@radix-ui/react-use-layout-effect":"1rgUP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hD7A6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hideOthers", ()=>hideOthers
);
var getDefaultParent = function(originalTarget) {
    if (typeof document === 'undefined') return null;
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {
};
var lockCount = 0;
var hideOthers = function(originalTarget, parentNode, markerName) {
    if (parentNode === void 0) parentNode = getDefaultParent(originalTarget);
    if (markerName === void 0) markerName = "data-aria-hidden";
    var targets = Array.isArray(originalTarget) ? originalTarget : [
        originalTarget
    ];
    if (!markerMap[markerName]) markerMap[markerName] = new WeakMap();
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = new Set();
    var keep = function(el) {
        if (!el || elementsToKeep.has(el)) return;
        elementsToKeep.add(el);
        keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
        if (!parent || targets.indexOf(parent) >= 0) return;
        Array.prototype.forEach.call(parent.children, function(node) {
            if (elementsToKeep.has(node)) deep(node);
            else {
                var attr = node.getAttribute('aria-hidden');
                var alreadyHidden = attr !== null && attr !== 'false';
                var counterValue = (counterMap.get(node) || 0) + 1;
                var markerValue = (markerCounter.get(node) || 0) + 1;
                counterMap.set(node, counterValue);
                markerCounter.set(node, markerValue);
                hiddenNodes.push(node);
                if (counterValue === 1 && alreadyHidden) uncontrolledNodes.set(node, true);
                if (markerValue === 1) node.setAttribute(markerName, 'true');
                if (!alreadyHidden) node.setAttribute('aria-hidden', 'true');
            }
        });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
        hiddenNodes.forEach(function(node) {
            var counterValue = counterMap.get(node) - 1;
            var markerValue = markerCounter.get(node) - 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            if (!counterValue) {
                if (!uncontrolledNodes.has(node)) node.removeAttribute('aria-hidden');
                uncontrolledNodes.delete(node);
            }
            if (!markerValue) node.removeAttribute(markerName);
        });
        lockCount--;
        if (!lockCount) {
            counterMap = new WeakMap();
            counterMap = new WeakMap();
            uncontrolledNodes = new WeakMap();
            markerMap = {
            };
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kqUUJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScroll", ()=>_combinationDefault.default
);
var _combination = require("./Combination");
var _combinationDefault = parcelHelpers.interopDefault(_combination);

},{"./Combination":"4ANYr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4ANYr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tslib = require("tslib");
var _react = require("react");
var _ui = require("./UI");
var _sidecar = require("./sidecar");
var _sidecarDefault = parcelHelpers.interopDefault(_sidecar);
var ReactRemoveScroll = _react.forwardRef(function(props, ref) {
    return _react.createElement(_ui.RemoveScroll, _tslib.__assign({
    }, props, {
        ref: ref,
        sideCar: _sidecarDefault.default
    }));
});
ReactRemoveScroll.classNames = _ui.RemoveScroll.classNames;
exports.default = ReactRemoveScroll;

},{"tslib":"l7rDu","react":"2vIKB","./UI":"eSq43","./sidecar":"kI7kb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l7rDu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
parcelHelpers.export(exports, "__spread", ()=>__spread
);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (b1.hasOwnProperty(p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eSq43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScroll", ()=>RemoveScroll
);
var _tslib = require("tslib");
var _react = require("react");
var _constants = require("react-remove-scroll-bar/constants");
var _medium = require("./medium");
var _useCallbackRef = require("use-callback-ref");
var nothing = function() {
    return;
};
/**
 * Removes scrollbar from the page and contain the scroll within the Lock
 */ var RemoveScroll = _react.forwardRef(function(props, parentRef) {
    var ref = _react.useRef(null);
    var _a = _react.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? 'div' : _b, rest = _tslib.__rest(props, [
        "forwardProps",
        "children",
        "className",
        "removeScrollBar",
        "enabled",
        "shards",
        "sideCar",
        "noIsolation",
        "inert",
        "allowPinchZoom",
        "as"
    ]);
    var SideCar = sideCar;
    var containerRef = _useCallbackRef.useMergeRefs([
        ref,
        parentRef
    ]);
    var containerProps = _tslib.__assign({
    }, rest, callbacks);
    return _react.createElement(_react.Fragment, null, enabled && _react.createElement(SideCar, {
        sideCar: _medium.effectCar,
        removeScrollBar: removeScrollBar,
        shards: shards,
        noIsolation: noIsolation,
        inert: inert,
        setCallbacks: setCallbacks,
        allowPinchZoom: !!allowPinchZoom,
        lockRef: ref
    }), forwardProps ? _react.cloneElement(_react.Children.only(children), _tslib.__assign({
    }, containerProps, {
        ref: containerRef
    })) : _react.createElement(Container, _tslib.__assign({
    }, containerProps, {
        className: className,
        ref: containerRef
    }), children));
});
RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
};
RemoveScroll.classNames = {
    fullWidth: _constants.fullWidthClassName,
    zeroRight: _constants.zeroRightClassName
};

},{"tslib":"l7rDu","react":"2vIKB","react-remove-scroll-bar/constants":"h5Lr4","./medium":"aypCK","use-callback-ref":"j9IUe","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h5Lr4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zeroRightClassName", ()=>zeroRightClassName
);
parcelHelpers.export(exports, "fullWidthClassName", ()=>fullWidthClassName
);
parcelHelpers.export(exports, "noScrollbarsClassName", ()=>noScrollbarsClassName
);
parcelHelpers.export(exports, "removedBarSizeVariable", ()=>removedBarSizeVariable
);
var zeroRightClassName = 'right-scroll-bar-position';
var fullWidthClassName = 'width-before-scroll-bar';
var noScrollbarsClassName = 'with-scroll-bars-hidden';
var removedBarSizeVariable = '--removed-body-scroll-bar-size';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aypCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "effectCar", ()=>effectCar
);
var _useSidecar = require("use-sidecar");
var effectCar = _useSidecar.createSidecarMedium();

},{"use-sidecar":"8xCnb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8xCnb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sidecar", ()=>_hoc.sidecar
);
parcelHelpers.export(exports, "useSidecar", ()=>_hook.useSidecar
);
parcelHelpers.export(exports, "setConfig", ()=>_config.setConfig
);
parcelHelpers.export(exports, "createMedium", ()=>_medium.createMedium
);
parcelHelpers.export(exports, "createSidecarMedium", ()=>_medium.createSidecarMedium
);
parcelHelpers.export(exports, "renderCar", ()=>_renderProp.renderCar
);
parcelHelpers.export(exports, "exportSidecar", ()=>_exports.exportSidecar
);
var _hoc = require("./hoc");
var _hook = require("./hook");
var _config = require("./config");
var _medium = require("./medium");
var _renderProp = require("./renderProp");
var _exports = require("./exports");

},{"./hoc":"d43Wu","./hook":"dA7P3","./config":"7k7L4","./medium":"azdCN","./renderProp":"253hz","./exports":"6qzDV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d43Wu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sidecar", ()=>sidecar
);
var _tslib = require("tslib");
var _react = require("react");
var _hook = require("./hook");
function sidecar(importer, errorComponent) {
    var ErrorCase = function() {
        return errorComponent;
    };
    return function Sidecar(props) {
        var _a = _hook.useSidecar(importer, props.sideCar), Car = _a[0], error = _a[1];
        if (error && errorComponent) return ErrorCase;
        return Car ? _react.createElement(Car, _tslib.__assign({
        }, props)) : null;
    };
}

},{"tslib":"l7rDu","react":"2vIKB","./hook":"dA7P3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dA7P3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSidecar", ()=>useSidecar
);
var _react = require("react");
var _env = require("./env");
var cache = new WeakMap();
function useSidecar(importer, effect) {
    var options = effect && effect.options || {
    };
    if (_env.env.isNode && !options.ssr) return [
        null,
        null
    ];
    var couldUseCache = _env.env.forceCache || _env.env.isNode && !!options.ssr || !options.async;
    var _a = _react.useState(couldUseCache ? function() {
        return cache.get(importer);
    } : undefined), Car = _a[0], setCar = _a[1];
    var _b = _react.useState(null), error = _b[0], setError = _b[1];
    _react.useEffect(function() {
        if (!Car) importer().then(function(car) {
            var resolved = effect ? effect.read() : car.default || car;
            if (!resolved) {
                console.error('Sidecar error: with importer', importer);
                var error_1;
                if (effect) {
                    console.error('Sidecar error: with medium', effect);
                    error_1 = new Error('Sidecar medium was not found');
                } else error_1 = new Error('Sidecar was not found in exports');
                setError(function() {
                    return error_1;
                });
                throw error_1;
            }
            cache.set(importer, resolved);
            setCar(function() {
                return resolved;
            });
        }, function(e) {
            return setError(function() {
                return e;
            });
        });
    }, []);
    return [
        Car,
        error
    ];
}

},{"react":"2vIKB","./env":"j7HlC","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j7HlC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "env", ()=>env
);
var _detectNodeEs = require("detect-node-es");
var env = {
    isNode: _detectNodeEs.isNode,
    forceCache: false
};

},{"detect-node-es":"7UUWL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7UUWL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
const isNode = false;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7k7L4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config
);
parcelHelpers.export(exports, "setConfig", ()=>setConfig
);
var config = {
    onError: function(e) {
        return console.error(e);
    }
};
var setConfig = function(conf) {
    Object.assign(config, conf);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"azdCN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMedium", ()=>createMedium
);
parcelHelpers.export(exports, "createSidecarMedium", ()=>createSidecarMedium
);
var _tslib = require("tslib");
function ItoI(a) {
    return a;
}
function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    var buffer = [];
    var assigned = false;
    var medium = {
        read: function() {
            if (assigned) throw new Error('Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.');
            if (buffer.length) return buffer[buffer.length - 1];
            return defaults;
        },
        useMedium: function(data) {
            var item = middleware(data, assigned);
            buffer.push(item);
            return function() {
                buffer = buffer.filter(function(x) {
                    return x !== item;
                });
            };
        },
        assignSyncMedium: function(cb) {
            assigned = true;
            while(buffer.length){
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
            }
            buffer = {
                push: function(x) {
                    return cb(x);
                },
                filter: function() {
                    return buffer;
                }
            };
        },
        assignMedium: function(cb) {
            assigned = true;
            var pendingQueue = [];
            if (buffer.length) {
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
                pendingQueue = buffer;
            }
            var executeQueue = function() {
                var cbs = pendingQueue;
                pendingQueue = [];
                cbs.forEach(cb);
            };
            var cycle = function() {
                return Promise.resolve().then(executeQueue);
            };
            cycle();
            buffer = {
                push: function(x) {
                    pendingQueue.push(x);
                    cycle();
                },
                filter: function(filter) {
                    pendingQueue = pendingQueue.filter(filter);
                    return buffer;
                }
            };
        }
    };
    return medium;
}
function createMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    return innerCreateMedium(defaults, middleware);
}
function createSidecarMedium(options) {
    if (options === void 0) options = {
    };
    var medium = innerCreateMedium(null);
    medium.options = _tslib.__assign({
        async: true,
        ssr: false
    }, options);
    return medium;
}

},{"tslib":"l7rDu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"253hz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderCar", ()=>renderCar
);
var _tslib = require("tslib");
var _react = require("react");
function renderCar(WrappedComponent, defaults, options) {
    if (options === void 0) options = {
    };
    function State(_a) {
        var stateRef = _a.stateRef, props = _a.props;
        var renderTarget = _react.useCallback(function SideTarget() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            _react.useLayoutEffect(function() {
                stateRef.current(args);
            });
            return null;
        }, []);
        return _react.createElement(WrappedComponent, _tslib.__assign({
        }, props, {
            children: renderTarget
        }));
    }
    var Children = _react.memo(function(_a) {
        var stateRef = _a.stateRef, defaultState = _a.defaultState, children = _a.children;
        var _b = _react.useState(defaultState.current), state = _b[0], setState = _b[1];
        _react.useEffect(function() {
            stateRef.current = setState;
        }, []);
        return children.apply(void 0, state);
    }, function() {
        return true;
    });
    return function Combiner(props) {
        var defaultState = _react.useRef(defaults(props));
        var ref = _react.useRef(function(state) {
            return defaultState.current = state;
        });
        return _react.createElement(_react.Fragment, null, _react.createElement(State, {
            stateRef: ref,
            props: props
        }), _react.createElement(Children, {
            stateRef: ref,
            defaultState: defaultState,
            children: props.children
        }));
    };
}

},{"tslib":"l7rDu","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6qzDV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exportSidecar", ()=>exportSidecar
);
var _tslib = require("tslib");
var _react = require("react");
var SideCar = function(_a) {
    var sideCar = _a.sideCar, rest = _tslib.__rest(_a, [
        "sideCar"
    ]);
    if (!sideCar) throw new Error('Sidecar: please provide `sideCar` property to import the right car');
    var Target = sideCar.read();
    if (!Target) throw new Error('Sidecar medium not found');
    return _react.createElement(Target, _tslib.__assign({
    }, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
}

},{"tslib":"l7rDu","react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j9IUe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignRef", ()=>_assignRef.assignRef
);
// callback ref
parcelHelpers.export(exports, "useCallbackRef", ()=>_useRef.useCallbackRef
);
parcelHelpers.export(exports, "createCallbackRef", ()=>_createRef.createCallbackRef
);
// merge ref
parcelHelpers.export(exports, "mergeRefs", ()=>_mergeRef.mergeRefs
);
parcelHelpers.export(exports, "useMergeRefs", ()=>_useMergeRef.useMergeRefs
);
// transform ref
parcelHelpers.export(exports, "useTransformRef", ()=>_useTransformRef.useTransformRef
);
parcelHelpers.export(exports, "transformRef", ()=>_transformRef.transformRef
);
// refToCallback
parcelHelpers.export(exports, "refToCallback", ()=>_refToCallback.refToCallback
);
parcelHelpers.export(exports, "useRefToCallback", ()=>_refToCallback.useRefToCallback
);
var _assignRef = require("./assignRef");
var _useRef = require("./useRef");
var _createRef = require("./createRef");
var _mergeRef = require("./mergeRef");
var _useMergeRef = require("./useMergeRef");
var _useTransformRef = require("./useTransformRef");
var _transformRef = require("./transformRef");
var _refToCallback = require("./refToCallback");

},{"./assignRef":"fbKxH","./useRef":"laO0A","./createRef":"7uvt9","./mergeRef":"boEZf","./useMergeRef":"3bLru","./useTransformRef":"5xWSH","./transformRef":"kgnxF","./refToCallback":"6mUyr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fbKxH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Assigns a value for a given ref, no matter of the ref format
 * @param {RefObject} ref - a callback function or ref object
 * @param value - a new value
 *
 * @see https://github.com/theKashey/use-callback-ref#assignref
 * @example
 * const refObject = useRef();
 * const refFn = (ref) => {....}
 *
 * assignRef(refObject, "refValue");
 * assignRef(refFn, "refValue");
 */ parcelHelpers.export(exports, "assignRef", ()=>assignRef
);
function assignRef(ref, value) {
    if (typeof ref === 'function') ref(value);
    else if (ref) ref.current = value;
    return ref;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"laO0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * creates a MutableRef with ref change callback
 * @param initialValue - initial ref value
 * @param {Function} callback - a callback to run when value changes
 *
 * @example
 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
 * ref.current = 1;
 * // prints 0 -> 1
 *
 * @see https://reactjs.org/docs/hooks-reference.html#useref
 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
 * @returns {MutableRefObject}
 */ parcelHelpers.export(exports, "useCallbackRef", ()=>useCallbackRef
);
var _react = require("react");
function useCallbackRef(initialValue, callback) {
    var ref = _react.useState(function() {
        return {
            // value
            value: initialValue,
            // last callback
            callback: callback,
            // "memoized" public interface
            facade: {
                get current () {
                    return ref.value;
                },
                set current (value){
                    var last = ref.value;
                    if (last !== value) {
                        ref.value = value;
                        ref.callback(value, last);
                    }
                }
            }
        };
    })[0];
    // update callback
    ref.callback = callback;
    return ref.facade;
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7uvt9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * creates a Ref object with on change callback
 * @param callback
 * @returns {RefObject}
 *
 * @see {@link useCallbackRef}
 * @see https://reactjs.org/docs/refs-and-the-dom.html#creating-refs
 */ parcelHelpers.export(exports, "createCallbackRef", ()=>createCallbackRef
);
function createCallbackRef(callback) {
    var current = null;
    return {
        get current () {
            return current;
        },
        set current (value){
            var last = current;
            if (last !== value) {
                current = value;
                callback(value, last);
            }
        }
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"boEZf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link useMergeRefs} to be used in ReactComponents
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = mergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */ parcelHelpers.export(exports, "mergeRefs", ()=>mergeRefs
);
var _createRef = require("./createRef");
var _assignRef = require("./assignRef");
function mergeRefs(refs) {
    return _createRef.createCallbackRef(function(newValue) {
        return refs.forEach(function(ref) {
            return _assignRef.assignRef(ref, newValue);
        });
    });
}

},{"./createRef":"7uvt9","./assignRef":"fbKxH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3bLru":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link mergeRefs} a version without buit-in memoization
 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */ parcelHelpers.export(exports, "useMergeRefs", ()=>useMergeRefs
);
var _useRef = require("./useRef");
var _assignRef = require("./assignRef");
function useMergeRefs(refs, defaultValue) {
    return _useRef.useCallbackRef(defaultValue, function(newValue) {
        return refs.forEach(function(ref) {
            return _assignRef.assignRef(ref, newValue);
        });
    });
}

},{"./useRef":"laO0A","./assignRef":"fbKxH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5xWSH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a _lense_ on Ref, making it possible to transform ref value
 * @param {ReactRef} ref
 * @param {Function} transformer. 👉 Ref would be __NOT updated__ on `transformer` update.
 * @returns {RefObject}
 *
 * @see https://github.com/theKashey/use-callback-ref#usetransformref-to-replace-reactuseimperativehandle
 * @example
 *
 * const ResizableWithRef = forwardRef((props, ref) =>
 *  <Resizable {...props} ref={useTransformRef(ref, i => i ? i.resizable : null)}/>
 * );
 */ parcelHelpers.export(exports, "useTransformRef", ()=>useTransformRef
);
var _useRef = require("./useRef");
var _assignRef = require("./assignRef");
function useTransformRef(ref, transformer) {
    return _useRef.useCallbackRef(undefined, function(value) {
        return _assignRef.assignRef(ref, transformer(value));
    });
}

},{"./useRef":"laO0A","./assignRef":"fbKxH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kgnxF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformRef", ()=>transformRef
);
var _assignRef = require("./assignRef");
var _createRef = require("./createRef");
function transformRef(ref, transformer) {
    return _createRef.createCallbackRef(function(value) {
        return _assignRef.assignRef(ref, transformer(value));
    });
}

},{"./assignRef":"fbKxH","./createRef":"7uvt9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6mUyr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unmemoized version of {@link useRefToCallback}
 * @see {@link useRefToCallback}
 * @param ref
 */ parcelHelpers.export(exports, "refToCallback", ()=>refToCallback
);
/**
 * Transforms a given `ref` into `callback`.
 *
 * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}
 *
 * @param {ReactRef} ref
 * @returns {Function}
 *
 * @see https://github.com/theKashey/use-callback-ref#reftocallback
 *
 * @example
 * const ref = useRef(0);
 * const setRef = useRefToCallback(ref);
 * 👉 setRef(10);
 * ✅ ref.current === 10
 */ parcelHelpers.export(exports, "useRefToCallback", ()=>useRefToCallback
);
function refToCallback(ref) {
    return function(newValue) {
        if (typeof ref === 'function') ref(newValue);
        else if (ref) ref.current = newValue;
    };
}
var nullCallback = function() {
    return null;
};
// lets maintain a weak ref to, well, ref :)
// not using `kashe` to keep this package small
var weakMem = new WeakMap();
var weakMemoize = function(ref) {
    var usedRef = ref || nullCallback;
    if (weakMem.has(usedRef)) return weakMem.get(usedRef);
    var cb = refToCallback(usedRef);
    weakMem.set(usedRef, cb);
    return cb;
};
function useRefToCallback(ref) {
    return weakMemoize(ref);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kI7kb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useSidecar = require("use-sidecar");
var _sideEffect = require("./SideEffect");
var _medium = require("./medium");
exports.default = _useSidecar.exportSidecar(_medium.effectCar, _sideEffect.RemoveScrollSideCar);

},{"use-sidecar":"8xCnb","./SideEffect":"95LYa","./medium":"aypCK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"95LYa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTouchXY", ()=>getTouchXY
);
parcelHelpers.export(exports, "getDeltaXY", ()=>getDeltaXY
);
parcelHelpers.export(exports, "RemoveScrollSideCar", ()=>RemoveScrollSideCar
);
var _react = require("react");
var _reactRemoveScrollBar = require("react-remove-scroll-bar");
var _reactStyleSingleton = require("react-style-singleton");
var _handleScroll = require("./handleScroll");
var _aggresiveCapture = require("./aggresiveCapture");
var getTouchXY = function(event) {
    return 'changedTouches' in event ? [
        event.changedTouches[0].clientX,
        event.changedTouches[0].clientY
    ] : [
        0,
        0
    ];
};
var getDeltaXY = function(event) {
    return [
        event.deltaX,
        event.deltaY
    ];
};
var extractRef = function(ref) {
    return ref && 'current' in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
    return "\n  .block-interactivity-" + id + " {pointer-events: none;}\n  .allow-interactivity-" + id + " {pointer-events: all;}\n";
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
    var shouldPreventQueue = _react.useRef([]);
    var touchStartRef = _react.useRef([
        0,
        0
    ]);
    var activeAxis = _react.useRef();
    var id = _react.useState(idCounter++)[0];
    var Style = _react.useState(function() {
        return _reactStyleSingleton.styleSingleton();
    })[0];
    var lastProps = _react.useRef(props);
    _react.useEffect(function() {
        lastProps.current = props;
    }, [
        props
    ]);
    _react.useEffect(function() {
        if (props.inert) {
            document.body.classList.add("block-interactivity-" + id);
            var allow_1 = [
                props.lockRef.current
            ].concat((props.shards || []).map(extractRef)).filter(Boolean);
            allow_1.forEach(function(el) {
                return el.classList.add("allow-interactivity-" + id);
            });
            return function() {
                document.body.classList.remove("block-interactivity-" + id);
                allow_1.forEach(function(el) {
                    return el.classList.remove("allow-interactivity-" + id);
                });
            };
        }
        return;
    }, [
        props.inert,
        props.lockRef.current,
        props.shards
    ]);
    var shouldCancelEvent = _react.useCallback(function(event, parent) {
        if ('touches' in event && event.touches.length === 2) return !lastProps.current.allowPinchZoom;
        var touch = getTouchXY(event);
        var touchStart = touchStartRef.current;
        var deltaX = 'deltaX' in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = 'deltaY' in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'h' : 'v';
        var canBeScrolledInMainDirection = _handleScroll.locationCouldBeScrolled(moveDirection, target);
        if (!canBeScrolledInMainDirection) return true;
        if (canBeScrolledInMainDirection) currentAxis = moveDirection;
        else {
            currentAxis = moveDirection === 'v' ? 'h' : 'v';
            canBeScrolledInMainDirection = _handleScroll.locationCouldBeScrolled(moveDirection, target);
        // other axis might be not scrollable
        }
        if (!canBeScrolledInMainDirection) return false;
        if (!activeAxis.current && 'changedTouches' in event && (deltaX || deltaY)) activeAxis.current = currentAxis;
        if (!currentAxis) return true;
        var cancelingAxis = activeAxis.current || currentAxis;
        return _handleScroll.handleScroll(cancelingAxis, parent, event, cancelingAxis === 'h' ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = _react.useCallback(function(_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) // not the last active
        return;
        var delta = 'deltaY' in event ? getDeltaXY(event) : getTouchXY(event);
        var sourceEvent = shouldPreventQueue.current.filter(function(e) {
            return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
        })[0];
        // self event, and should be canceled
        if (sourceEvent && sourceEvent.should) {
            event.preventDefault();
            return;
        }
        // outside or shard event
        if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
                return node.contains(event.target);
            });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) event.preventDefault();
        }
    }, []);
    var shouldCancel = _react.useCallback(function(name, delta, target, should) {
        var event = {
            name: name,
            delta: delta,
            target: target,
            should: should
        };
        shouldPreventQueue.current.push(event);
        setTimeout(function() {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
                return e !== event;
            });
        }, 1);
    }, []);
    var scrollTouchStart = _react.useCallback(function(event) {
        touchStartRef.current = getTouchXY(event);
        activeAxis.current = undefined;
    }, []);
    var scrollWheel = _react.useCallback(function(event) {
        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = _react.useCallback(function(event) {
        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    _react.useEffect(function() {
        lockStack.push(Style);
        props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove
        });
        document.addEventListener('wheel', shouldPrevent, _aggresiveCapture.nonPassive);
        document.addEventListener('touchmove', shouldPrevent, _aggresiveCapture.nonPassive);
        document.addEventListener('touchstart', scrollTouchStart, _aggresiveCapture.nonPassive);
        return function() {
            lockStack = lockStack.filter(function(inst) {
                return inst !== Style;
            });
            document.removeEventListener('wheel', shouldPrevent, _aggresiveCapture.nonPassive);
            document.removeEventListener('touchmove', shouldPrevent, _aggresiveCapture.nonPassive);
            document.removeEventListener('touchstart', scrollTouchStart, _aggresiveCapture.nonPassive);
        };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return _react.createElement(_react.Fragment, null, inert ? _react.createElement(Style, {
        styles: generateStyle(id)
    }) : null, removeScrollBar ? _react.createElement(_reactRemoveScrollBar.RemoveScrollBar, {
        gapMode: "margin"
    }) : null);
}

},{"react":"2vIKB","react-remove-scroll-bar":"8WI3g","react-style-singleton":"elOII","./handleScroll":"S36Yo","./aggresiveCapture":"2DzHr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8WI3g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScrollBar", ()=>_component.RemoveScrollBar
);
parcelHelpers.export(exports, "zeroRightClassName", ()=>_constants.zeroRightClassName
);
parcelHelpers.export(exports, "fullWidthClassName", ()=>_constants.fullWidthClassName
);
parcelHelpers.export(exports, "noScrollbarsClassName", ()=>_constants.noScrollbarsClassName
);
parcelHelpers.export(exports, "removedBarSizeVariable", ()=>_constants.removedBarSizeVariable
);
parcelHelpers.export(exports, "getGapWidth", ()=>_utils.getGapWidth
);
var _component = require("./component");
var _utils = require("./utils");
var _constants = require("./constants");

},{"./component":"h1bjE","./utils":"1Scom","./constants":"h5Lr4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h1bjE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RemoveScrollBar", ()=>RemoveScrollBar
);
var _react = require("react");
var _reactStyleSingleton = require("react-style-singleton");
var _utils = require("./utils");
var _constants = require("./constants");
var Style = _reactStyleSingleton.styleSingleton();
var getStyles = function(_a, allowRelative, gapMode, important) {
    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
    if (gapMode === void 0) gapMode = 'margin';
    return "\n  ." + _constants.noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
        allowRelative && "position: relative " + important + ";",
        gapMode === 'margin' && "\n    padding-left: " + left + "px;\n    padding-top: " + top + "px;\n    padding-right: " + right + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
        gapMode === 'padding' && "padding-right: " + gap + "px " + important + ";", 
    ].filter(Boolean).join('') + "\n  }\n  \n  ." + _constants.zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + _constants.fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + _constants.zeroRightClassName + " ." + _constants.zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + _constants.fullWidthClassName + " ." + _constants.fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + _constants.removedBarSizeVariable + ": " + gap + "px;\n  }\n";
};
var RemoveScrollBar = function(props) {
    var _a = _react.useState(_utils.getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];
    _react.useEffect(function() {
        setGap(_utils.getGapWidth(props.gapMode));
    }, [
        props.gapMode
    ]);
    var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? 'margin' : _b;
    return _react.createElement(Style, {
        styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : '')
    });
};

},{"react":"2vIKB","react-style-singleton":"elOII","./utils":"1Scom","./constants":"h5Lr4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"elOII":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleSingleton", ()=>_component.styleSingleton
);
parcelHelpers.export(exports, "stylesheetSingleton", ()=>_singleton.stylesheetSingleton
);
parcelHelpers.export(exports, "styleHookSingleton", ()=>_hook.styleHookSingleton
);
var _component = require("./component");
var _singleton = require("./singleton");
var _hook = require("./hook");

},{"./component":"1I8vt","./singleton":"8kKf3","./hook":"cWDL5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1I8vt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleSingleton", ()=>styleSingleton
);
var _hook = require("./hook");
var styleSingleton = function() {
    var useStyle = _hook.styleHookSingleton();
    var Sheet = function(_a) {
        var styles = _a.styles;
        useStyle(styles);
        return null;
    };
    return Sheet;
};

},{"./hook":"cWDL5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cWDL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleHookSingleton", ()=>styleHookSingleton
);
var _react = require("react");
var _singleton = require("./singleton");
var styleHookSingleton = function() {
    var sheet = _singleton.stylesheetSingleton();
    return function(styles) {
        _react.useEffect(function() {
            sheet.add(styles);
            return function() {
                sheet.remove();
            };
        }, []);
    };
};

},{"react":"2vIKB","./singleton":"8kKf3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8kKf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stylesheetSingleton", ()=>stylesheetSingleton
);
var _getNonce = require("get-nonce");
function makeStyleTag() {
    if (!document) return null;
    var tag = document.createElement('style');
    tag.type = 'text/css';
    var nonce = _getNonce.getNonce();
    if (nonce) tag.setAttribute('nonce', nonce);
    return tag;
}
function injectStyles(tag, css) {
    if (tag.styleSheet) tag.styleSheet.cssText = css;
    else tag.appendChild(document.createTextNode(css));
}
function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName('head')[0];
    head.appendChild(tag);
}
var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
        add: function(style) {
            if (counter == 0) {
                if (stylesheet = makeStyleTag()) {
                    injectStyles(stylesheet, style);
                    insertStyleTag(stylesheet);
                }
            }
            counter++;
        },
        remove: function() {
            counter--;
            if (!counter && stylesheet) {
                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
                stylesheet = null;
            }
        }
    };
};

},{"get-nonce":"mQFos","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mQFos":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setNonce", ()=>setNonce
);
parcelHelpers.export(exports, "getNonce", ()=>getNonce
);
var currentNonce;
var setNonce = function(nonce) {
    currentNonce = nonce;
};
var getNonce = function() {
    if (currentNonce) return currentNonce;
    if (typeof __webpack_nonce__ !== 'undefined') return __webpack_nonce__;
    return undefined;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1Scom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zeroGap", ()=>zeroGap
);
parcelHelpers.export(exports, "getGapWidth", ()=>getGapWidth
);
var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
};
var parse = function(x) {
    return parseInt(x || '', 10) || 0;
};
var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === 'padding' ? 'paddingLeft' : 'marginLeft'];
    var top = cs[gapMode === 'padding' ? 'paddingTop' : 'marginTop'];
    var right = cs[gapMode === 'padding' ? 'paddingRight' : 'marginRight'];
    return [
        parse(left),
        parse(top),
        parse(right), 
    ];
};
var getGapWidth = function(gapMode) {
    if (gapMode === void 0) gapMode = 'margin';
    if (typeof window === 'undefined') return zeroGap;
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"S36Yo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locationCouldBeScrolled", ()=>locationCouldBeScrolled
);
parcelHelpers.export(exports, "handleScroll", ()=>handleScroll
);
var elementCouldBeVScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    return styles.overflowY !== 'hidden' && !(styles.overflowY === styles.overflowX && styles.overflowY === 'visible') // scrollable
    ;
};
var elementCouldBeHScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    // we allow horizontal scroll on range elements
    if (node.type === "range") return true;
    return styles.overflowX !== 'hidden' && !(styles.overflowY === styles.overflowX && styles.overflowX === 'visible') // scrollable
    ;
};
var locationCouldBeScrolled = function(axis, node) {
    var current = node;
    do {
        // Skip over shadow root
        if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) current = current.host;
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
            if (s > d) return true;
        }
        current = current.parentNode;
    }while (current && current !== document.body)
    return false;
};
var getVScrollVariables = function(_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [
        scrollTop,
        scrollHeight,
        clientHeight
    ];
};
var getHScrollVariables = function(_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [
        scrollLeft,
        scrollWidth,
        clientWidth
    ];
};
var elementCouldBeScrolled = function(axis, node) {
    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var delta = sourceDelta;
    // find scrollable target
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
        var elementScroll = scroll_1 - capacity - position;
        if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
                availableScroll += elementScroll;
                availableScrollTop += position;
            }
        }
        target = target.parentNode;
    }while (// portaled content
    !targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target))
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) shouldCancelScroll = true;
    else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) shouldCancelScroll = true;
    return shouldCancelScroll;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2DzHr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonPassive", ()=>nonPassive
);
var passiveSupported = false;
if (typeof window !== 'undefined') try {
    var options = Object.defineProperty({
    }, 'passive', {
        get: function() {
            passiveSupported = true;
            return true;
        }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
} catch (err) {
    passiveSupported = false;
}
var nonPassive = passiveSupported ? {
    passive: false
} : false;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1vrpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tooltip", ()=>Tooltip
);
parcelHelpers.export(exports, "TooltipTrigger", ()=>TooltipTrigger
);
parcelHelpers.export(exports, "TooltipContent", ()=>TooltipContent
);
parcelHelpers.export(exports, "TooltipArrow", ()=>TooltipArrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Trigger", ()=>Trigger
);
parcelHelpers.export(exports, "Content", ()=>Content
);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
var _reactId = require("@radix-ui/react-id");
var _reactVisuallyHidden = require("@radix-ui/react-visually-hidden");
var _reactSlot = require("@radix-ui/react-slot");
var _reactPortal = require("@radix-ui/react-portal");
var _reactPopper = require("@radix-ui/react-popper");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactPresence = require("@radix-ui/react-presence");
var _reactUseRect = require("@radix-ui/react-use-rect");
var _reactUsePrevious = require("@radix-ui/react-use-previous");
var _reactUseLayoutEffect = require("@radix-ui/react-use-layout-effect");
var _reactUseEscapeKeydown = require("@radix-ui/react-use-escape-keydown");
var _reactUseControllableState = require("@radix-ui/react-use-controllable-state");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function x(e) {
    return {
        type: "machine.actions.assign",
        assign: e
    };
}
let y, T;
const C = x((e, t)=>{
    var o;
    return {
        ...e,
        id: null !== (o = t.id) && (void 0) !== o ? o : e.id
    };
}), v = function(e, { debug: t = !1 , warnOnUnknownTransitions: o = !1  } = {
}) {
    let n = e.initial, r = e.context;
    const i = [], a = (s)=>{
        var l, c;
        const u = e.states[n], p = s.type, d = null === (l = e.on) || (void 0) === l ? void 0 : l[p], m = null === (c = u.on) || (void 0) === c ? void 0 : c[p], f = null != d ? d : m;
        if ((void 0) === f) o && console.warn(`From state: "${n}", event "${p}" has no transition to any state`);
        else {
            const { target: o1 , actions: l1 = [] , cond: c1 = ()=>!0
              } = f, p1 = o1 ? e.states[o1] : {
            };
            if (c1(r, s)) {
                const e1 = (u.exit || []).concat(l1, p1.entry || []);
                r = (function(e2, t1, o2) {
                    let n1 = o2;
                    return null == e2 || e2.forEach((e3)=>{
                        "function" == typeof e3 ? e3(n1, t1, a) : "machine.actions.assign" === e3.type && (n1 = e3.assign(n1, t1));
                    }), n1;
                })(e1, s, r), o1 && (n = o1, t && (console.group("event:", s), console.log("state:", n), console.log("context:", r), console.groupEnd()), i.forEach((e2)=>e2({
                        state: n,
                        context: r
                    })
                ));
            }
        }
    };
    return {
        subscribe: function(e1) {
            return i.push(e1), ()=>{
                i.splice(i.indexOf(e1), 1);
            };
        },
        send: a,
        getContext: function() {
            return r;
        }
    };
}({
    initial: "closed",
    context: {
        id: null,
        delayed: !1
    },
    on: {
        FOCUS: {
            target: "open"
        }
    },
    states: {
        closed: {
            entry: [
                x((e)=>({
                        ...e,
                        id: null
                    })
                )
            ],
            on: {
                OPEN: {
                    target: "opening"
                }
            }
        },
        opening: {
            entry: [
                (e, t, o)=>{
                    const n = t.delayDuration, r = ()=>o({
                            type: "DELAY_TIMER_END"
                        })
                    ;
                    (void 0) === n ? r() : y = window.setTimeout(r, n);
                },
                C,
                x((e)=>({
                        ...e,
                        delayed: !0
                    })
                )
            ],
            exit: [
                ()=>clearTimeout(y)
            ],
            on: {
                DELAY_TIMER_END: {
                    target: "open"
                },
                CLOSE: {
                    target: "closed"
                }
            }
        },
        open: {
            entry: [
                C
            ],
            exit: [
                x((e)=>({
                        ...e,
                        delayed: !1
                    })
                )
            ],
            on: {
                OPEN: {
                    target: "open"
                },
                CLOSE: {
                    target: "closing",
                    cond: (e, t)=>e.id === t.id
                }
            }
        },
        closing: {
            entry: [
                (e, t, o)=>{
                    var n;
                    const r = null !== (n = t.skipDelayDuration) && (void 0) !== n ? n : 300;
                    T = window.setTimeout(()=>o({
                            type: "SKIP_DELAY_TIMER_END"
                        })
                    , r);
                }
            ],
            exit: [
                ()=>clearTimeout(T)
            ],
            on: {
                OPEN: {
                    target: "open"
                },
                SKIP_DELAY_TIMER_END: {
                    target: "closed"
                }
            }
        }
    }
}), [b, D] = _reactContext.createContext("Tooltip");
const Tooltip = (t)=>{
    const { children: o , open: n , defaultOpen: i = !1 , onOpenChange: a , delayDuration: s = 700 , skipDelayDuration: l = 300  } = t, [u, d] = _react.useState(null), m = _reactId.useId(), [f = !1, E] = _reactUseControllableState.useControllableState({
        prop: n,
        defaultProp: i,
        onChange: a
    }), [x1, y1] = _react.useState(n ? "instant-open" : "closed");
    _react.useEffect(()=>v.subscribe(({ state: e , context: t1  })=>{
            "open" === e && t1.id === m ? E(!0) : E(!1);
        })
    , [
        m,
        E
    ]), _react.useEffect(()=>v.subscribe(({ state: e , context: t1  })=>{
            t1.id === m ? y1("open" === e ? t1.delayed ? "delayed-open" : "instant-open" : "closed") : y1("closed");
        })
    , [
        m
    ]);
    const T1 = _react.useCallback(()=>v.send({
            type: "FOCUS",
            id: m
        })
    , [
        m
    ]), C1 = _react.useCallback(()=>v.send({
            type: "OPEN",
            id: m,
            delayDuration: s
        })
    , [
        m,
        s
    ]), D1 = _react.useCallback(()=>v.send({
            type: "CLOSE",
            id: m,
            skipDelayDuration: l
        })
    , [
        l,
        m
    ]);
    return _react.useEffect(()=>()=>D1()
    , [
        D1
    ]), _reactUseLayoutEffect.useLayoutEffect(()=>{
        !0 === n && v.send({
            type: "OPEN",
            id: m
        });
    }, [
        m,
        n
    ]), /*#__PURE__*/ _react.createElement(_reactPopper.Root, null, /*#__PURE__*/ _react.createElement(b, {
        contentId: m,
        open: f,
        stateAttribute: x1,
        trigger: u,
        onTriggerChange: d,
        onFocus: T1,
        onOpen: C1,
        onClose: D1
    }, o));
}; /*#__PURE__*/ 
const w = "button";
const TooltipTrigger = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const { as: o = w , ...n } = e, i = D("TooltipTrigger"), a = _reactComposeRefs.useComposedRefs(t, (e1)=>i.onTriggerChange(e1)
    ); /*#__PURE__*/ 
    return _react.createElement(_reactPopper.Anchor, _extendsDefault.default({
        type: "button",
        "aria-describedby": i.open ? i.contentId : void 0,
        "data-state": i.stateAttribute
    }, n, {
        as: o,
        ref: a,
        onMouseEnter: _primitive.composeEventHandlers(e.onMouseEnter, i.onOpen),
        onMouseLeave: _primitive.composeEventHandlers(e.onMouseLeave, i.onClose),
        onMouseDown: _primitive.composeEventHandlers(e.onMouseDown, i.onClose),
        onFocus: _primitive.composeEventHandlers(e.onFocus, i.onFocus),
        onBlur: _primitive.composeEventHandlers(e.onBlur, i.onClose),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (e1)=>{
            "Enter" !== e1.key && " " !== e1.key || i.onClose();
        })
    }));
}); /*#__PURE__*/ 
const TooltipContent = /*#__PURE__*/ _react.forwardRef((e, t)=>{
    const { forceMount: o , ...n } = e, r = D("TooltipContent"); /*#__PURE__*/ 
    return _react.createElement(_reactPresence.Presence, {
        present: o || r.open
    }, /*#__PURE__*/ _react.createElement(h, _extendsDefault.default({
        ref: t
    }, n)));
});
const h = /*#__PURE__*/ _react.forwardRef((e, i)=>{
    const { children: a , "aria-label": s , portalled: l = !0 , ...c } = e, p = D("TooltipContent"), d = l ? _reactPortal.Portal : _react.Fragment;
    return _reactUseEscapeKeydown.useEscapeKeydown(()=>p.onClose()
    ), /*#__PURE__*/ _react.createElement(d, null, /*#__PURE__*/ _react.createElement(O, null), /*#__PURE__*/ _react.createElement(_reactPopper.Content, _extendsDefault.default({
        "data-state": p.stateAttribute
    }, c, {
        ref: i,
        style: {
            ...c.style,
            "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)"
        }
    }), /*#__PURE__*/ _react.createElement(_reactSlot.Slottable, null, a), /*#__PURE__*/ _react.createElement(_reactVisuallyHidden.Root, {
        id: p.contentId,
        role: "tooltip"
    }, s || a)));
}); /*#__PURE__*/ 
const TooltipArrow = _reactPrimitive.extendPrimitive(_reactPopper.Arrow, {
    displayName: "TooltipArrow"
});
function O() {
    const e = D("CheckTriggerMoved"), t = _reactUseRect.useRect(e.trigger), o = null == t ? void 0 : t.left, n = _reactUsePrevious.usePrevious(o), r = null == t ? void 0 : t.top, i = _reactUsePrevious.usePrevious(r), a = e.onClose;
    return _react.useEffect(()=>{
        ((void 0) !== n && n !== o || (void 0) !== i && i !== r) && a();
    }, [
        a,
        n,
        i,
        o,
        r
    ]), null;
}
const Root = Tooltip;
const Trigger = TooltipTrigger;
const Content = TooltipContent;
const Arrow = TooltipArrow;

},{"@radix-ui/react-id":"jzxjA","@radix-ui/react-visually-hidden":"4GavG","@radix-ui/react-slot":"iiT1C","@radix-ui/react-portal":"saCDC","@radix-ui/react-popper":"9ZIbk","@radix-ui/react-primitive":"50mzH","@radix-ui/react-presence":"lIJsD","@radix-ui/react-use-rect":"8AXy9","@radix-ui/react-use-previous":"i2JhE","@radix-ui/react-use-layout-effect":"1rgUP","@radix-ui/react-use-escape-keydown":"586iD","@radix-ui/react-use-controllable-state":"iZM9F","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4GavG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisuallyHidden", ()=>VisuallyHidden
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactPrimitive = require("@radix-ui/react-primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const o = "span";
const VisuallyHidden = /*#__PURE__*/ _react.forwardRef((i, a)=>{
    const { as: n = o , ...s } = i; /*#__PURE__*/ 
    return _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
    }, s, {
        as: n,
        ref: a,
        style: {
            ...i.style,
            position: "absolute",
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            wordWrap: "normal"
        }
    }));
}); /*#__PURE__*/ 
const Root = VisuallyHidden;

},{"@radix-ui/react-primitive":"50mzH","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i2JhE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usePrevious", ()=>usePrevious
);
var _react = require("react");
function usePrevious(r) {
    const t = _react.useRef(r);
    return _react.useEffect(()=>{
        t.current = r;
    }, [
        r
    ]), t.current;
}

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gmoPt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DropdownMenu", ()=>DropdownMenu
);
parcelHelpers.export(exports, "DropdownMenuTrigger", ()=>DropdownMenuTrigger
);
parcelHelpers.export(exports, "DropdownMenuContent", ()=>DropdownMenuContent
);
parcelHelpers.export(exports, "DropdownMenuGroup", ()=>DropdownMenuGroup
);
parcelHelpers.export(exports, "DropdownMenuLabel", ()=>DropdownMenuLabel
);
parcelHelpers.export(exports, "DropdownMenuTriggerItem", ()=>DropdownMenuTriggerItem
);
parcelHelpers.export(exports, "DropdownMenuItem", ()=>DropdownMenuItem
);
parcelHelpers.export(exports, "DropdownMenuCheckboxItem", ()=>DropdownMenuCheckboxItem
);
parcelHelpers.export(exports, "DropdownMenuRadioGroup", ()=>DropdownMenuRadioGroup
);
parcelHelpers.export(exports, "DropdownMenuRadioItem", ()=>DropdownMenuRadioItem
);
parcelHelpers.export(exports, "DropdownMenuItemIndicator", ()=>DropdownMenuItemIndicator
);
parcelHelpers.export(exports, "DropdownMenuSeparator", ()=>DropdownMenuSeparator
);
parcelHelpers.export(exports, "DropdownMenuArrow", ()=>DropdownMenuArrow
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Trigger", ()=>Trigger
);
parcelHelpers.export(exports, "Content", ()=>Content
);
parcelHelpers.export(exports, "Group", ()=>Group
);
parcelHelpers.export(exports, "Label", ()=>Label
);
parcelHelpers.export(exports, "Item", ()=>Item
);
parcelHelpers.export(exports, "TriggerItem", ()=>TriggerItem
);
parcelHelpers.export(exports, "CheckboxItem", ()=>CheckboxItem
);
parcelHelpers.export(exports, "RadioGroup", ()=>RadioGroup
);
parcelHelpers.export(exports, "RadioItem", ()=>RadioItem
);
parcelHelpers.export(exports, "ItemIndicator", ()=>ItemIndicator
);
parcelHelpers.export(exports, "Separator", ()=>Separator
);
parcelHelpers.export(exports, "Arrow", ()=>Arrow
);
var _reactId = require("@radix-ui/react-id");
var _reactMenu = require("@radix-ui/react-menu");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactUseControllableState = require("@radix-ui/react-use-controllable-state");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const [u, s] = _reactContext.createContext("DropdownMenu");
const DropdownMenu = (e)=>{
    const { children: n , open: t , defaultOpen: p , onOpenChange: a , dir: i  } = e, s1 = _react.useContext(m), [l = !1, w] = _reactUseControllableState.useControllableState({
        prop: t,
        defaultProp: p,
        onChange: a
    }), g = _react.useCallback(()=>w((e1)=>!e1
        )
    , [
        w
    ]);
    return s1 ? /*#__PURE__*/ _react.createElement(u, {
        isRootMenu: !1,
        open: l,
        onOpenChange: w,
        onOpenToggle: g
    }, /*#__PURE__*/ _react.createElement(_reactMenu.Sub, {
        open: l,
        onOpenChange: w
    }, n)) : /*#__PURE__*/ _react.createElement(c, {
        dir: i,
        open: l,
        onOpenChange: w,
        onOpenToggle: g
    }, n);
}; /*#__PURE__*/ 
const c = (n)=>{
    const { children: r , dir: t , open: p , onOpenChange: a , onOpenToggle: i  } = n, s1 = _react.useRef(null); /*#__PURE__*/ 
    return _react.createElement(u, {
        isRootMenu: !0,
        triggerId: _reactId.useId(),
        triggerRef: s1,
        contentId: _reactId.useId(),
        open: p,
        onOpenChange: a,
        onOpenToggle: i
    }, /*#__PURE__*/ _react.createElement(_reactMenu.Root, {
        open: p,
        onOpenChange: a,
        dir: t
    }, r));
}, l = "button";
const DropdownMenuTrigger = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const { as: r = l , ...t } = e, u1 = s("DropdownMenuTrigger");
    return u1.isRootMenu ? /*#__PURE__*/ _react.createElement(_reactMenu.Anchor, _extendsDefault.default({
        type: "button",
        id: u1.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": !!u1.open || void 0,
        "aria-controls": u1.open ? u1.contentId : void 0,
        "data-state": u1.open ? "open" : "closed"
    }, t, {
        as: r,
        ref: _reactComposeRefs.composeRefs(n, u1.triggerRef),
        onMouseDown: _primitive.composeEventHandlers(e.onMouseDown, (e1)=>{
            0 === e1.button && !1 === e1.ctrlKey && u1.onOpenToggle();
        }),
        onKeyDown: _primitive.composeEventHandlers(e.onKeyDown, (e1)=>{
            [
                " ",
                "Enter",
                "ArrowDown"
            ].includes(e1.key) && (e1.preventDefault(), u1.onOpenChange(!0));
        })
    })) : null;
}); /*#__PURE__*/ 
const m = /*#__PURE__*/ _react.createContext(!1);
const DropdownMenuContent = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const r = s("DropdownMenuContent"), t = {
        ...e,
        style: {
            ...e.style,
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)"
        }
    }; /*#__PURE__*/ 
    return _react.createElement(m.Provider, {
        value: !0
    }, r.isRootMenu ? /*#__PURE__*/ _react.createElement(w, _extendsDefault.default({
    }, t, {
        ref: n
    })) : /*#__PURE__*/ _react.createElement(_reactMenu.Content, _extendsDefault.default({
    }, t, {
        ref: n
    })));
}); /*#__PURE__*/ 
const w = /*#__PURE__*/ _react.forwardRef((e, n)=>{
    const { disableOutsidePointerEvents: r = !0 , disableOutsideScroll: t = !0 , portalled: p = !0 , ...u1 } = e, c1 = s("DropdownMenuContent");
    return c1.isRootMenu ? /*#__PURE__*/ _react.createElement(_reactMenu.Content, _extendsDefault.default({
        id: c1.contentId,
        "aria-labelledby": c1.triggerId
    }, u1, {
        ref: n,
        disableOutsidePointerEvents: r,
        disableOutsideScroll: t,
        portalled: p,
        trapFocus: !0,
        onCloseAutoFocus: _primitive.composeEventHandlers(e.onCloseAutoFocus, (e1)=>{
            var o;
            e1.preventDefault(), null === (o = c1.triggerRef.current) || (void 0) === o || o.focus();
        }),
        onPointerDownOutside: _primitive.composeEventHandlers(e.onPointerDownOutside, (e1)=>{
            var o;
            const n1 = e1.target;
            (null === (o = c1.triggerRef.current) || (void 0) === o ? void 0 : o.contains(n1)) && e1.preventDefault();
        }, {
            checkForDefaultPrevented: !1
        })
    })) : null;
});
const DropdownMenuGroup = _reactPrimitive.extendPrimitive(_reactMenu.Group, {
    displayName: "DropdownMenuGroup"
});
const DropdownMenuLabel = _reactPrimitive.extendPrimitive(_reactMenu.Label, {
    displayName: "DropdownMenuLabel"
});
const DropdownMenuTriggerItem = _reactPrimitive.extendPrimitive(_reactMenu.SubTrigger, {
    displayName: "DropdownMenuTriggerItem"
});
const DropdownMenuItem = _reactPrimitive.extendPrimitive(_reactMenu.Item, {
    displayName: "DropdownMenuItem"
});
const DropdownMenuCheckboxItem = _reactPrimitive.extendPrimitive(_reactMenu.CheckboxItem, {
    displayName: "DropdownMenuCheckboxItem"
});
const DropdownMenuRadioGroup = _reactPrimitive.extendPrimitive(_reactMenu.RadioGroup, {
    displayName: "DropdownMenuRadioGroup"
});
const DropdownMenuRadioItem = _reactPrimitive.extendPrimitive(_reactMenu.RadioItem, {
    displayName: "DropdownMenuRadioItem"
});
const DropdownMenuItemIndicator = _reactPrimitive.extendPrimitive(_reactMenu.ItemIndicator, {
    displayName: "DropdownMenuItemIndicator"
});
const DropdownMenuSeparator = _reactPrimitive.extendPrimitive(_reactMenu.Separator, {
    displayName: "DropdownMenuSeparator"
});
const DropdownMenuArrow = _reactPrimitive.extendPrimitive(_reactMenu.Arrow, {
    displayName: "DropdownMenuArrow"
});
const Root = DropdownMenu;
const Trigger = DropdownMenuTrigger;
const Content = DropdownMenuContent;
const Group = DropdownMenuGroup;
const Label = DropdownMenuLabel;
const Item = DropdownMenuItem;
const TriggerItem = DropdownMenuTriggerItem;
const CheckboxItem = DropdownMenuCheckboxItem;
const RadioGroup = DropdownMenuRadioGroup;
const RadioItem = DropdownMenuRadioItem;
const ItemIndicator = DropdownMenuItemIndicator;
const Separator = DropdownMenuSeparator;
const Arrow = DropdownMenuArrow;

},{"@radix-ui/react-id":"jzxjA","@radix-ui/react-menu":"bkrBr","@radix-ui/react-primitive":"50mzH","@radix-ui/react-use-controllable-state":"iZM9F","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ajnk9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RadioGroup", ()=>RadioGroup
);
parcelHelpers.export(exports, "RadioGroupItem", ()=>RadioGroupItem
);
parcelHelpers.export(exports, "RadioGroupIndicator", ()=>RadioGroupIndicator
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Item", ()=>Item
);
parcelHelpers.export(exports, "Indicator", ()=>Indicator
);
var _reactPresence = require("@radix-ui/react-presence");
var _reactUsePrevious = require("@radix-ui/react-use-previous");
var _reactUseSize = require("@radix-ui/react-use-size");
var _reactUseControllableState = require("@radix-ui/react-use-controllable-state");
var _reactSlot = require("@radix-ui/react-slot");
var _reactRovingFocus = require("@radix-ui/react-roving-focus");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _reactLabel = require("@radix-ui/react-label");
var _primitive = require("@radix-ui/primitive");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const b = "button", [v, h] = _reactContext.createContext("Radio"), x = /*#__PURE__*/ _react.forwardRef((e, r)=>{
    const { as: t = b , "aria-labelledby": o , name: a , checked: i = !1 , required: n , disabled: c , value: l = "on" , onCheck: h1 , ...x1 } = e, [R, k] = _react.useState(null), I = _reactComposeRefs.useComposedRefs(r, (e1)=>k(e1)
    ), g = _reactLabel.useLabelContext(R), C = o || g, G = _react.useRef(!1), w = !R || Boolean(R.closest("form")); /*#__PURE__*/ 
    return _react.createElement(v, {
        checked: i,
        disabled: c
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        type: "button",
        role: "radio",
        "aria-checked": i,
        "aria-labelledby": C,
        "data-state": y(i),
        "data-disabled": c ? "" : void 0,
        disabled: c,
        value: l
    }, x1, {
        as: t,
        ref: I,
        onClick: _primitive.composeEventHandlers(e.onClick, (e1)=>{
            i || null == h1 || h1(), w && (G.current = e1.isPropagationStopped(), G.current || e1.stopPropagation());
        })
    })), w && /*#__PURE__*/ _react.createElement(E, {
        control: R,
        bubbles: !G.current,
        name: a,
        value: l,
        checked: i,
        required: n,
        disabled: c,
        style: {
            transform: "translateX(-100%)"
        }
    }));
}), R = "span", k = /*#__PURE__*/ _react.forwardRef((r, t)=>{
    const { as: o = R , forceMount: a , ...i } = r, n = h("RadioIndicator"); /*#__PURE__*/ 
    return _react.createElement(_reactPresence.Presence, {
        present: a || n.checked
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        "data-state": y(n.checked),
        "data-disabled": n.disabled ? "" : void 0
    }, i, {
        as: o,
        ref: t
    })));
}), E = (e)=>{
    const { control: o , checked: a , bubbles: i = !0 , ...n } = e, c = _react.useRef(null), d = _reactUsePrevious.usePrevious(a), l = _reactUseSize.useSize(o);
    return _react.useEffect(()=>{
        const e1 = c.current, r = window.HTMLInputElement.prototype, t = Object.getOwnPropertyDescriptor(r, "checked").set;
        if (d !== a && t) {
            const r1 = new Event("click", {
                bubbles: i
            });
            t.call(e1, a), e1.dispatchEvent(r1);
        }
    }, [
        d,
        a,
        i
    ]), /*#__PURE__*/ _react.createElement("input", _extendsDefault.default({
        type: "radio",
        defaultChecked: a
    }, n, {
        tabIndex: -1,
        ref: c,
        style: {
            ...e.style,
            ...l,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
        }
    }));
};
function y(e) {
    return e ? "checked" : "unchecked";
}
const I = "div", [g, C] = _reactContext.createContext("RadioGroup");
const RadioGroup = /*#__PURE__*/ _react.forwardRef((e, r)=>{
    const { as: t = I , name: a , "aria-labelledby": n , defaultValue: c , value: d , required: l , orientation: u , dir: p = "ltr" , loop: b1 = !0 , onValueChange: v1 , ...h1 } = e, x1 = _reactLabel.useLabelContext(), R1 = n || x1, [k1, E1] = _reactUseControllableState.useControllableState({
        prop: d,
        defaultProp: c,
        onChange: v1
    }); /*#__PURE__*/ 
    return _react.createElement(g, {
        name: a,
        value: k1,
        required: l,
        onValueChange: E1
    }, /*#__PURE__*/ _react.createElement(_reactRovingFocus.RovingFocusGroup, _extendsDefault.default({
        role: "radiogroup",
        "aria-labelledby": R1,
        orientation: u,
        dir: p,
        loop: b1
    }, h1, {
        as: t,
        ref: r
    })));
}); /*#__PURE__*/ 
const RadioGroupItem = /*#__PURE__*/ _react.forwardRef((e, r)=>{
    const { disabled: t , ...o } = e, i = C("RadioGroupItem"), c = _react.useRef(null), d = _reactComposeRefs.useComposedRefs(r, c), l = i.value === o.value; /*#__PURE__*/ 
    return _react.createElement(_reactRovingFocus.RovingFocusItem, {
        as: _reactSlot.Slot,
        focusable: !t,
        active: l
    }, /*#__PURE__*/ _react.createElement(x, _extendsDefault.default({
        disabled: t,
        required: i.required,
        checked: l
    }, o, {
        name: i.name,
        ref: d,
        onCheck: ()=>i.onValueChange(o.value)
        ,
        onFocus: _primitive.composeEventHandlers(o.onFocus, ()=>{
            var e1;
            (void 0) !== i.value && (null === (e1 = c.current) || (void 0) === e1 || e1.click());
        })
    })));
}); /*#__PURE__*/ 
const RadioGroupIndicator = _reactPrimitive.extendPrimitive(k, {
    displayName: "RadioGroupIndicator"
});
const Root = RadioGroup;
const Item = RadioGroupItem;
const Indicator = RadioGroupIndicator;

},{"@radix-ui/react-presence":"lIJsD","@radix-ui/react-use-previous":"i2JhE","@radix-ui/react-use-size":"dYwud","@radix-ui/react-use-controllable-state":"iZM9F","@radix-ui/react-slot":"iiT1C","@radix-ui/react-roving-focus":"9HuIY","@radix-ui/react-primitive":"50mzH","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","@radix-ui/react-label":"2G67W","@radix-ui/primitive":"dbLQ2","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2G67W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Label", ()=>Label
);
parcelHelpers.export(exports, "useLabelContext", ()=>useLabelContext
);
parcelHelpers.export(exports, "Root", ()=>Root
);
var _reactId = require("@radix-ui/react-id");
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const i = "span", a = /*#__PURE__*/ _react.createContext(void 0);
const Label = /*#__PURE__*/ _react.forwardRef((l, c)=>{
    const { as: u = i , htmlFor: d , id: f , ...m } = l, b = _react.useRef(null), v = _reactComposeRefs.useComposedRefs(c, b), p = _reactId.useId(f);
    return _react.useEffect(()=>{
        const e = b.current;
        if (e) {
            const t = (e1)=>{
                e1.detail > 1 && e1.preventDefault();
            };
            return e.addEventListener("mousedown", t), ()=>e.removeEventListener("mousedown", t)
            ;
        }
    }, [
        b
    ]), _react.useEffect(()=>{
        if (d) {
            const e = document.getElementById(d), t = b.current;
            if (t && e) {
                const r = s(t, e), o = ()=>e.getAttribute("aria-labelledby")
                , n = [
                    o(),
                    p
                ].filter(Boolean).join(" ");
                return e.setAttribute("aria-labelledby", n), ()=>{
                    var t1;
                    r();
                    const n1 = null === (t1 = o()) || (void 0) === t1 ? void 0 : t1.replace(p, "");
                    "" === n1 ? e.removeAttribute("aria-labelledby") : n1 && e.setAttribute("aria-labelledby", n1);
                };
            }
        }
    }, [
        p,
        d
    ]), /*#__PURE__*/ _react.createElement(a.Provider, {
        value: _react.useMemo(()=>({
                id: p,
                ref: b
            })
        , [
            p
        ])
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        role: "label",
        id: p
    }, m, {
        as: u,
        ref: v
    })));
}); /*#__PURE__*/ 
const useLabelContext = (e)=>{
    const t2 = _react.useContext(a);
    return _react.useEffect(()=>{
        const r = null == t2 ? void 0 : t2.ref.current;
        if (r && e) return s(r, e);
    }, [
        t2,
        e
    ]), null == t2 ? void 0 : t2.id;
};
function s(e, t2) {
    const r = (e1)=>{
        const r1 = t2.contains(e1.target), o = !0 === e1.isTrusted;
        !r1 && o && (t2.click(), t2.focus());
    };
    return e.addEventListener("click", r), ()=>e.removeEventListener("click", r)
    ;
}
const Root = Label;

},{"@radix-ui/react-id":"jzxjA","@radix-ui/react-primitive":"50mzH","@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"24vEr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ActivityLogIcon", ()=>ActivityLogIcon
);
parcelHelpers.export(exports, "AlignBaselineIcon", ()=>AlignBaselineIcon
);
parcelHelpers.export(exports, "AlignBottomIcon", ()=>AlignBottomIcon
);
parcelHelpers.export(exports, "AlignCenterHorizontallyIcon", ()=>AlignCenterHorizontallyIcon
);
parcelHelpers.export(exports, "AlignCenterVerticallyIcon", ()=>AlignCenterVerticallyIcon
);
parcelHelpers.export(exports, "AlignLeftIcon", ()=>AlignLeftIcon
);
parcelHelpers.export(exports, "AlignRightIcon", ()=>AlignRightIcon
);
parcelHelpers.export(exports, "AlignTopIcon", ()=>AlignTopIcon
);
parcelHelpers.export(exports, "AllSidesIcon", ()=>AllSidesIcon
);
parcelHelpers.export(exports, "AngleIcon", ()=>AngleIcon
);
parcelHelpers.export(exports, "ArchiveIcon", ()=>ArchiveIcon
);
parcelHelpers.export(exports, "ArrowBottomLeftIcon", ()=>ArrowBottomLeftIcon
);
parcelHelpers.export(exports, "ArrowBottomRightIcon", ()=>ArrowBottomRightIcon
);
parcelHelpers.export(exports, "ArrowDownIcon", ()=>ArrowDownIcon
);
parcelHelpers.export(exports, "ArrowLeftIcon", ()=>ArrowLeftIcon
);
parcelHelpers.export(exports, "ArrowRightIcon", ()=>ArrowRightIcon
);
parcelHelpers.export(exports, "ArrowTopLeftIcon", ()=>ArrowTopLeftIcon
);
parcelHelpers.export(exports, "ArrowTopRightIcon", ()=>ArrowTopRightIcon
);
parcelHelpers.export(exports, "ArrowUpIcon", ()=>ArrowUpIcon
);
parcelHelpers.export(exports, "AspectRatioIcon", ()=>AspectRatioIcon
);
parcelHelpers.export(exports, "AvatarIcon", ()=>AvatarIcon
);
parcelHelpers.export(exports, "BackpackIcon", ()=>BackpackIcon
);
parcelHelpers.export(exports, "BadgeIcon", ()=>BadgeIcon
);
parcelHelpers.export(exports, "BarChartIcon", ()=>BarChartIcon
);
parcelHelpers.export(exports, "BellIcon", ()=>BellIcon
);
parcelHelpers.export(exports, "BlendingModeIcon", ()=>BlendingModeIcon
);
parcelHelpers.export(exports, "BookmarkIcon", ()=>BookmarkIcon
);
parcelHelpers.export(exports, "BorderAllIcon", ()=>BorderAllIcon
);
parcelHelpers.export(exports, "BorderBottomIcon", ()=>BorderBottomIcon
);
parcelHelpers.export(exports, "BorderDashedIcon", ()=>BorderDashedIcon
);
parcelHelpers.export(exports, "BorderDottedIcon", ()=>BorderDottedIcon
);
parcelHelpers.export(exports, "BorderLeftIcon", ()=>BorderLeftIcon
);
parcelHelpers.export(exports, "BorderNoneIcon", ()=>BorderNoneIcon
);
parcelHelpers.export(exports, "BorderRightIcon", ()=>BorderRightIcon
);
parcelHelpers.export(exports, "BorderSolidIcon", ()=>BorderSolidIcon
);
parcelHelpers.export(exports, "BorderSplitIcon", ()=>BorderSplitIcon
);
parcelHelpers.export(exports, "BorderStyleIcon", ()=>BorderStyleIcon
);
parcelHelpers.export(exports, "BorderTopIcon", ()=>BorderTopIcon
);
parcelHelpers.export(exports, "BoxIcon", ()=>BoxIcon
);
parcelHelpers.export(exports, "BoxModelIcon", ()=>BoxModelIcon
);
parcelHelpers.export(exports, "ButtonIcon", ()=>ButtonIcon
);
parcelHelpers.export(exports, "CalendarIcon", ()=>CalendarIcon
);
parcelHelpers.export(exports, "CameraIcon", ()=>CameraIcon
);
parcelHelpers.export(exports, "CardStackIcon", ()=>CardStackIcon
);
parcelHelpers.export(exports, "CardStackMinusIcon", ()=>CardStackMinusIcon
);
parcelHelpers.export(exports, "CardStackPlusIcon", ()=>CardStackPlusIcon
);
parcelHelpers.export(exports, "CaretDownIcon", ()=>CaretDownIcon
);
parcelHelpers.export(exports, "CaretLeftIcon", ()=>CaretLeftIcon
);
parcelHelpers.export(exports, "CaretRightIcon", ()=>CaretRightIcon
);
parcelHelpers.export(exports, "CaretSortIcon", ()=>CaretSortIcon
);
parcelHelpers.export(exports, "CaretUpIcon", ()=>CaretUpIcon
);
parcelHelpers.export(exports, "ChatBubbleIcon", ()=>ChatBubbleIcon
);
parcelHelpers.export(exports, "CheckCircledIcon", ()=>CheckCircledIcon
);
parcelHelpers.export(exports, "CheckIcon", ()=>CheckIcon
);
parcelHelpers.export(exports, "CheckboxIcon", ()=>CheckboxIcon
);
parcelHelpers.export(exports, "ChevronDownIcon", ()=>ChevronDownIcon
);
parcelHelpers.export(exports, "ChevronLeftIcon", ()=>ChevronLeftIcon
);
parcelHelpers.export(exports, "ChevronRightIcon", ()=>ChevronRightIcon
);
parcelHelpers.export(exports, "ChevronUpIcon", ()=>ChevronUpIcon
);
parcelHelpers.export(exports, "CircleBackslashIcon", ()=>CircleBackslashIcon
);
parcelHelpers.export(exports, "CircleIcon", ()=>CircleIcon
);
parcelHelpers.export(exports, "ClipboardCopyIcon", ()=>ClipboardCopyIcon
);
parcelHelpers.export(exports, "ClipboardIcon", ()=>ClipboardIcon
);
parcelHelpers.export(exports, "ClockIcon", ()=>ClockIcon
);
parcelHelpers.export(exports, "CodeIcon", ()=>CodeIcon
);
parcelHelpers.export(exports, "CodeSandboxLogoIcon", ()=>CodeSandboxLogoIcon
);
parcelHelpers.export(exports, "ColumnSpacingIcon", ()=>ColumnSpacingIcon
);
parcelHelpers.export(exports, "ColumnsIcon", ()=>ColumnsIcon
);
parcelHelpers.export(exports, "CommitIcon", ()=>CommitIcon
);
parcelHelpers.export(exports, "Component1Icon", ()=>Component1Icon
);
parcelHelpers.export(exports, "Component2Icon", ()=>Component2Icon
);
parcelHelpers.export(exports, "ComponentBooleanIcon", ()=>ComponentBooleanIcon
);
parcelHelpers.export(exports, "ComponentInstanceIcon", ()=>ComponentInstanceIcon
);
parcelHelpers.export(exports, "ComponentNoneIcon", ()=>ComponentNoneIcon
);
parcelHelpers.export(exports, "ComponentPlaceholderIcon", ()=>ComponentPlaceholderIcon
);
parcelHelpers.export(exports, "ContainerIcon", ()=>ContainerIcon
);
parcelHelpers.export(exports, "CookieIcon", ()=>CookieIcon
);
parcelHelpers.export(exports, "CopyIcon", ()=>CopyIcon
);
parcelHelpers.export(exports, "CornerBottomLeftIcon", ()=>CornerBottomLeftIcon
);
parcelHelpers.export(exports, "CornerBottomRightIcon", ()=>CornerBottomRightIcon
);
parcelHelpers.export(exports, "CornerTopLeftIcon", ()=>CornerTopLeftIcon
);
parcelHelpers.export(exports, "CornerTopRightIcon", ()=>CornerTopRightIcon
);
parcelHelpers.export(exports, "CornersIcon", ()=>CornersIcon
);
parcelHelpers.export(exports, "CountdownTimerIcon", ()=>CountdownTimerIcon
);
parcelHelpers.export(exports, "CounterClockwiseClockIcon", ()=>CounterClockwiseClockIcon
);
parcelHelpers.export(exports, "CropIcon", ()=>CropIcon
);
parcelHelpers.export(exports, "Cross1Icon", ()=>Cross1Icon
);
parcelHelpers.export(exports, "Cross2Icon", ()=>Cross2Icon
);
parcelHelpers.export(exports, "CrossCircledIcon", ()=>CrossCircledIcon
);
parcelHelpers.export(exports, "Crosshair1Icon", ()=>Crosshair1Icon
);
parcelHelpers.export(exports, "Crosshair2Icon", ()=>Crosshair2Icon
);
parcelHelpers.export(exports, "CrumpledPaperIcon", ()=>CrumpledPaperIcon
);
parcelHelpers.export(exports, "CubeIcon", ()=>CubeIcon
);
parcelHelpers.export(exports, "CursorArrowIcon", ()=>CursorArrowIcon
);
parcelHelpers.export(exports, "CursorTextIcon", ()=>CursorTextIcon
);
parcelHelpers.export(exports, "DashIcon", ()=>DashIcon
);
parcelHelpers.export(exports, "DashboardIcon", ()=>DashboardIcon
);
parcelHelpers.export(exports, "DimensionsIcon", ()=>DimensionsIcon
);
parcelHelpers.export(exports, "DiscIcon", ()=>DiscIcon
);
parcelHelpers.export(exports, "DividerHorizontalIcon", ()=>DividerHorizontalIcon
);
parcelHelpers.export(exports, "DividerVerticalIcon", ()=>DividerVerticalIcon
);
parcelHelpers.export(exports, "DotFilledIcon", ()=>DotFilledIcon
);
parcelHelpers.export(exports, "DotIcon", ()=>DotIcon
);
parcelHelpers.export(exports, "DotsHorizontalIcon", ()=>DotsHorizontalIcon
);
parcelHelpers.export(exports, "DotsVerticalIcon", ()=>DotsVerticalIcon
);
parcelHelpers.export(exports, "DoubleArrowDownIcon", ()=>DoubleArrowDownIcon
);
parcelHelpers.export(exports, "DoubleArrowLeftIcon", ()=>DoubleArrowLeftIcon
);
parcelHelpers.export(exports, "DoubleArrowRightIcon", ()=>DoubleArrowRightIcon
);
parcelHelpers.export(exports, "DoubleArrowUpIcon", ()=>DoubleArrowUpIcon
);
parcelHelpers.export(exports, "DownloadIcon", ()=>DownloadIcon
);
parcelHelpers.export(exports, "DragHandleDots1Icon", ()=>DragHandleDots1Icon
);
parcelHelpers.export(exports, "DragHandleDots2Icon", ()=>DragHandleDots2Icon
);
parcelHelpers.export(exports, "DragHandleHorizontalIcon", ()=>DragHandleHorizontalIcon
);
parcelHelpers.export(exports, "DragHandleVerticalIcon", ()=>DragHandleVerticalIcon
);
parcelHelpers.export(exports, "DrawingPinFilledIcon", ()=>DrawingPinFilledIcon
);
parcelHelpers.export(exports, "DrawingPinIcon", ()=>DrawingPinIcon
);
parcelHelpers.export(exports, "DropdownMenuIcon", ()=>DropdownMenuIcon
);
parcelHelpers.export(exports, "EnterFullScreenIcon", ()=>EnterFullScreenIcon
);
parcelHelpers.export(exports, "EnterIcon", ()=>EnterIcon
);
parcelHelpers.export(exports, "EnvelopeClosedIcon", ()=>EnvelopeClosedIcon
);
parcelHelpers.export(exports, "EnvelopeOpenIcon", ()=>EnvelopeOpenIcon
);
parcelHelpers.export(exports, "ExclamationTriangleIcon", ()=>ExclamationTriangleIcon
);
parcelHelpers.export(exports, "ExitFullScreenIcon", ()=>ExitFullScreenIcon
);
parcelHelpers.export(exports, "ExitIcon", ()=>ExitIcon
);
parcelHelpers.export(exports, "ExternalLinkIcon", ()=>ExternalLinkIcon
);
parcelHelpers.export(exports, "EyeClosedIcon", ()=>EyeClosedIcon
);
parcelHelpers.export(exports, "EyeNoneIcon", ()=>EyeNoneIcon
);
parcelHelpers.export(exports, "EyeOpenIcon", ()=>EyeOpenIcon
);
parcelHelpers.export(exports, "FaceIcon", ()=>FaceIcon
);
parcelHelpers.export(exports, "FigmaLogoIcon", ()=>FigmaLogoIcon
);
parcelHelpers.export(exports, "FileIcon", ()=>FileIcon
);
parcelHelpers.export(exports, "FileMinusIcon", ()=>FileMinusIcon
);
parcelHelpers.export(exports, "FilePlusIcon", ()=>FilePlusIcon
);
parcelHelpers.export(exports, "FileTextIcon", ()=>FileTextIcon
);
parcelHelpers.export(exports, "FontBoldIcon", ()=>FontBoldIcon
);
parcelHelpers.export(exports, "FontFamilyIcon", ()=>FontFamilyIcon
);
parcelHelpers.export(exports, "FontItalicIcon", ()=>FontItalicIcon
);
parcelHelpers.export(exports, "FontRomanIcon", ()=>FontRomanIcon
);
parcelHelpers.export(exports, "FontSizeIcon", ()=>FontSizeIcon
);
parcelHelpers.export(exports, "FontStyleIcon", ()=>FontStyleIcon
);
parcelHelpers.export(exports, "FrameIcon", ()=>FrameIcon
);
parcelHelpers.export(exports, "FramerLogoIcon", ()=>FramerLogoIcon
);
parcelHelpers.export(exports, "GearIcon", ()=>GearIcon
);
parcelHelpers.export(exports, "GitHubLogoIcon", ()=>GitHubLogoIcon
);
parcelHelpers.export(exports, "GlobeIcon", ()=>GlobeIcon
);
parcelHelpers.export(exports, "GridIcon", ()=>GridIcon
);
parcelHelpers.export(exports, "GroupIcon", ()=>GroupIcon
);
parcelHelpers.export(exports, "Half1Icon", ()=>Half1Icon
);
parcelHelpers.export(exports, "Half2Icon", ()=>Half2Icon
);
parcelHelpers.export(exports, "HamburgerMenuIcon", ()=>HamburgerMenuIcon
);
parcelHelpers.export(exports, "HandIcon", ()=>HandIcon
);
parcelHelpers.export(exports, "HeadingIcon", ()=>HeadingIcon
);
parcelHelpers.export(exports, "HeightIcon", ()=>HeightIcon
);
parcelHelpers.export(exports, "HomeIcon", ()=>HomeIcon
);
parcelHelpers.export(exports, "IconJarLogoIcon", ()=>IconJarLogoIcon
);
parcelHelpers.export(exports, "IdCardIcon", ()=>IdCardIcon
);
parcelHelpers.export(exports, "ImageIcon", ()=>ImageIcon
);
parcelHelpers.export(exports, "InfoCircledIcon", ()=>InfoCircledIcon
);
parcelHelpers.export(exports, "InputIcon", ()=>InputIcon
);
parcelHelpers.export(exports, "LapTimerIcon", ()=>LapTimerIcon
);
parcelHelpers.export(exports, "LayersIcon", ()=>LayersIcon
);
parcelHelpers.export(exports, "LayoutIcon", ()=>LayoutIcon
);
parcelHelpers.export(exports, "LetterCaseCapitalizeIcon", ()=>LetterCaseCapitalizeIcon
);
parcelHelpers.export(exports, "LetterCaseLowercaseIcon", ()=>LetterCaseLowercaseIcon
);
parcelHelpers.export(exports, "LetterCaseToggleIcon", ()=>LetterCaseToggleIcon
);
parcelHelpers.export(exports, "LetterCaseUppercaseIcon", ()=>LetterCaseUppercaseIcon
);
parcelHelpers.export(exports, "LetterSpacingIcon", ()=>LetterSpacingIcon
);
parcelHelpers.export(exports, "LightningBoltIcon", ()=>LightningBoltIcon
);
parcelHelpers.export(exports, "LineHeightIcon", ()=>LineHeightIcon
);
parcelHelpers.export(exports, "Link1Icon", ()=>Link1Icon
);
parcelHelpers.export(exports, "Link2Icon", ()=>Link2Icon
);
parcelHelpers.export(exports, "LinkBreak1Icon", ()=>LinkBreak1Icon
);
parcelHelpers.export(exports, "LinkBreak2Icon", ()=>LinkBreak2Icon
);
parcelHelpers.export(exports, "LinkNone1Icon", ()=>LinkNone1Icon
);
parcelHelpers.export(exports, "LinkNone2Icon", ()=>LinkNone2Icon
);
parcelHelpers.export(exports, "ListBulletIcon", ()=>ListBulletIcon
);
parcelHelpers.export(exports, "LockClosedIcon", ()=>LockClosedIcon
);
parcelHelpers.export(exports, "LockOpen1Icon", ()=>LockOpen1Icon
);
parcelHelpers.export(exports, "LockOpen2Icon", ()=>LockOpen2Icon
);
parcelHelpers.export(exports, "LoopIcon", ()=>LoopIcon
);
parcelHelpers.export(exports, "MagicWandIcon", ()=>MagicWandIcon
);
parcelHelpers.export(exports, "MagnifyingGlassIcon", ()=>MagnifyingGlassIcon
);
parcelHelpers.export(exports, "MarginIcon", ()=>MarginIcon
);
parcelHelpers.export(exports, "MaskOffIcon", ()=>MaskOffIcon
);
parcelHelpers.export(exports, "MaskOnIcon", ()=>MaskOnIcon
);
parcelHelpers.export(exports, "MinusCircledIcon", ()=>MinusCircledIcon
);
parcelHelpers.export(exports, "MinusIcon", ()=>MinusIcon
);
parcelHelpers.export(exports, "MixIcon", ()=>MixIcon
);
parcelHelpers.export(exports, "MixerHorizontalIcon", ()=>MixerHorizontalIcon
);
parcelHelpers.export(exports, "MixerVerticalIcon", ()=>MixerVerticalIcon
);
parcelHelpers.export(exports, "ModulzLogoIcon", ()=>ModulzLogoIcon
);
parcelHelpers.export(exports, "MoonIcon", ()=>MoonIcon
);
parcelHelpers.export(exports, "MoveIcon", ()=>MoveIcon
);
parcelHelpers.export(exports, "NotionLogoIcon", ()=>NotionLogoIcon
);
parcelHelpers.export(exports, "OpacityIcon", ()=>OpacityIcon
);
parcelHelpers.export(exports, "OverlineIcon", ()=>OverlineIcon
);
parcelHelpers.export(exports, "PaddingIcon", ()=>PaddingIcon
);
parcelHelpers.export(exports, "PaperPlaneIcon", ()=>PaperPlaneIcon
);
parcelHelpers.export(exports, "PauseIcon", ()=>PauseIcon
);
parcelHelpers.export(exports, "Pencil1Icon", ()=>Pencil1Icon
);
parcelHelpers.export(exports, "Pencil2Icon", ()=>Pencil2Icon
);
parcelHelpers.export(exports, "PersonIcon", ()=>PersonIcon
);
parcelHelpers.export(exports, "PieChartIcon", ()=>PieChartIcon
);
parcelHelpers.export(exports, "PilcrowIcon", ()=>PilcrowIcon
);
parcelHelpers.export(exports, "PinBottomIcon", ()=>PinBottomIcon
);
parcelHelpers.export(exports, "PinLeftIcon", ()=>PinLeftIcon
);
parcelHelpers.export(exports, "PinRightIcon", ()=>PinRightIcon
);
parcelHelpers.export(exports, "PinTopIcon", ()=>PinTopIcon
);
parcelHelpers.export(exports, "PlayIcon", ()=>PlayIcon
);
parcelHelpers.export(exports, "PlusCircledIcon", ()=>PlusCircledIcon
);
parcelHelpers.export(exports, "PlusIcon", ()=>PlusIcon
);
parcelHelpers.export(exports, "QuestionMarkCircledIcon", ()=>QuestionMarkCircledIcon
);
parcelHelpers.export(exports, "QuestionMarkIcon", ()=>QuestionMarkIcon
);
parcelHelpers.export(exports, "QuoteIcon", ()=>QuoteIcon
);
parcelHelpers.export(exports, "RadiobuttonIcon", ()=>RadiobuttonIcon
);
parcelHelpers.export(exports, "ReaderIcon", ()=>ReaderIcon
);
parcelHelpers.export(exports, "ReloadIcon", ()=>ReloadIcon
);
parcelHelpers.export(exports, "ResetIcon", ()=>ResetIcon
);
parcelHelpers.export(exports, "ResumeIcon", ()=>ResumeIcon
);
parcelHelpers.export(exports, "RocketIcon", ()=>RocketIcon
);
parcelHelpers.export(exports, "RotateCounterClockwiseIcon", ()=>RotateCounterClockwiseIcon
);
parcelHelpers.export(exports, "RowSpacingIcon", ()=>RowSpacingIcon
);
parcelHelpers.export(exports, "RowsIcon", ()=>RowsIcon
);
parcelHelpers.export(exports, "RulerHorizontalIcon", ()=>RulerHorizontalIcon
);
parcelHelpers.export(exports, "RulerSquareIcon", ()=>RulerSquareIcon
);
parcelHelpers.export(exports, "SectionIcon", ()=>SectionIcon
);
parcelHelpers.export(exports, "SewingPinFilledIcon", ()=>SewingPinFilledIcon
);
parcelHelpers.export(exports, "SewingPinIcon", ()=>SewingPinIcon
);
parcelHelpers.export(exports, "ShadowIcon", ()=>ShadowIcon
);
parcelHelpers.export(exports, "ShadowInnerIcon", ()=>ShadowInnerIcon
);
parcelHelpers.export(exports, "ShadowNoneIcon", ()=>ShadowNoneIcon
);
parcelHelpers.export(exports, "ShadowOuterIcon", ()=>ShadowOuterIcon
);
parcelHelpers.export(exports, "Share1Icon", ()=>Share1Icon
);
parcelHelpers.export(exports, "Share2Icon", ()=>Share2Icon
);
parcelHelpers.export(exports, "ShuffleIcon", ()=>ShuffleIcon
);
parcelHelpers.export(exports, "SizeIcon", ()=>SizeIcon
);
parcelHelpers.export(exports, "SketchLogoIcon", ()=>SketchLogoIcon
);
parcelHelpers.export(exports, "SlashIcon", ()=>SlashIcon
);
parcelHelpers.export(exports, "SliderIcon", ()=>SliderIcon
);
parcelHelpers.export(exports, "SpaceBetweenHorizontallyIcon", ()=>SpaceBetweenHorizontallyIcon
);
parcelHelpers.export(exports, "SpaceBetweenVerticallyIcon", ()=>SpaceBetweenVerticallyIcon
);
parcelHelpers.export(exports, "SpaceEvenlyHorizontallyIcon", ()=>SpaceEvenlyHorizontallyIcon
);
parcelHelpers.export(exports, "SpaceEvenlyVerticallyIcon", ()=>SpaceEvenlyVerticallyIcon
);
parcelHelpers.export(exports, "SpeakerLoudIcon", ()=>SpeakerLoudIcon
);
parcelHelpers.export(exports, "SpeakerModerateIcon", ()=>SpeakerModerateIcon
);
parcelHelpers.export(exports, "SpeakerOffIcon", ()=>SpeakerOffIcon
);
parcelHelpers.export(exports, "SpeakerQuietIcon", ()=>SpeakerQuietIcon
);
parcelHelpers.export(exports, "SquareIcon", ()=>SquareIcon
);
parcelHelpers.export(exports, "StackIcon", ()=>StackIcon
);
parcelHelpers.export(exports, "StarFilledIcon", ()=>StarFilledIcon
);
parcelHelpers.export(exports, "StarIcon", ()=>StarIcon
);
parcelHelpers.export(exports, "StitchesLogoIcon", ()=>StitchesLogoIcon
);
parcelHelpers.export(exports, "StopIcon", ()=>StopIcon
);
parcelHelpers.export(exports, "StopwatchIcon", ()=>StopwatchIcon
);
parcelHelpers.export(exports, "StretchHorizontallyIcon", ()=>StretchHorizontallyIcon
);
parcelHelpers.export(exports, "StretchVerticallyIcon", ()=>StretchVerticallyIcon
);
parcelHelpers.export(exports, "StrikethroughIcon", ()=>StrikethroughIcon
);
parcelHelpers.export(exports, "SunIcon", ()=>SunIcon
);
parcelHelpers.export(exports, "SwitchIcon", ()=>SwitchIcon
);
parcelHelpers.export(exports, "SymbolIcon", ()=>SymbolIcon
);
parcelHelpers.export(exports, "TableIcon", ()=>TableIcon
);
parcelHelpers.export(exports, "TargetIcon", ()=>TargetIcon
);
parcelHelpers.export(exports, "TextAlignCenterIcon", ()=>TextAlignCenterIcon
);
parcelHelpers.export(exports, "TextAlignJustifyIcon", ()=>TextAlignJustifyIcon
);
parcelHelpers.export(exports, "TextAlignLeftIcon", ()=>TextAlignLeftIcon
);
parcelHelpers.export(exports, "TextAlignRightIcon", ()=>TextAlignRightIcon
);
parcelHelpers.export(exports, "TextIcon", ()=>TextIcon
);
parcelHelpers.export(exports, "TextNoneIcon", ()=>TextNoneIcon
);
parcelHelpers.export(exports, "ThickArrowDownIcon", ()=>ThickArrowDownIcon
);
parcelHelpers.export(exports, "ThickArrowLeftIcon", ()=>ThickArrowLeftIcon
);
parcelHelpers.export(exports, "ThickArrowRightIcon", ()=>ThickArrowRightIcon
);
parcelHelpers.export(exports, "ThickArrowUpIcon", ()=>ThickArrowUpIcon
);
parcelHelpers.export(exports, "TimerIcon", ()=>TimerIcon
);
parcelHelpers.export(exports, "TokensIcon", ()=>TokensIcon
);
parcelHelpers.export(exports, "TrackNextIcon", ()=>TrackNextIcon
);
parcelHelpers.export(exports, "TrackPreviousIcon", ()=>TrackPreviousIcon
);
parcelHelpers.export(exports, "TransparencyGridIcon", ()=>TransparencyGridIcon
);
parcelHelpers.export(exports, "TrashIcon", ()=>TrashIcon
);
parcelHelpers.export(exports, "TriangleDownIcon", ()=>TriangleDownIcon
);
parcelHelpers.export(exports, "TriangleLeftIcon", ()=>TriangleLeftIcon
);
parcelHelpers.export(exports, "TriangleRightIcon", ()=>TriangleRightIcon
);
parcelHelpers.export(exports, "TriangleUpIcon", ()=>TriangleUpIcon
);
parcelHelpers.export(exports, "TwitterLogoIcon", ()=>TwitterLogoIcon
);
parcelHelpers.export(exports, "UnderlineIcon", ()=>UnderlineIcon
);
parcelHelpers.export(exports, "UpdateIcon", ()=>UpdateIcon
);
parcelHelpers.export(exports, "UploadIcon", ()=>UploadIcon
);
parcelHelpers.export(exports, "ValueIcon", ()=>ValueIcon
);
parcelHelpers.export(exports, "ValueNoneIcon", ()=>ValueNoneIcon
);
parcelHelpers.export(exports, "VercelLogoIcon", ()=>VercelLogoIcon
);
parcelHelpers.export(exports, "VideoIcon", ()=>VideoIcon
);
parcelHelpers.export(exports, "ViewGridIcon", ()=>ViewGridIcon
);
parcelHelpers.export(exports, "ViewHorizontalIcon", ()=>ViewHorizontalIcon
);
parcelHelpers.export(exports, "ViewNoneIcon", ()=>ViewNoneIcon
);
parcelHelpers.export(exports, "ViewVerticalIcon", ()=>ViewVerticalIcon
);
parcelHelpers.export(exports, "WidthIcon", ()=>WidthIcon
);
parcelHelpers.export(exports, "ZoomInIcon", ()=>ZoomInIcon
);
parcelHelpers.export(exports, "ZoomOutIcon", ()=>ZoomOutIcon
);
var _react = require("react");
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var ActivityLogIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0 1.5C0 1.22386 0.223858 1 0.5 1H2.5C2.77614 1 3 1.22386 3 1.5C3 1.77614 2.77614 2 2.5 2H0.5C0.223858 2 0 1.77614 0 1.5ZM4 1.5C4 1.22386 4.22386 1 4.5 1H14.5C14.7761 1 15 1.22386 15 1.5C15 1.77614 14.7761 2 14.5 2H4.5C4.22386 2 4 1.77614 4 1.5ZM4 4.5C4 4.22386 4.22386 4 4.5 4H11.5C11.7761 4 12 4.22386 12 4.5C12 4.77614 11.7761 5 11.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM0 7.5C0 7.22386 0.223858 7 0.5 7H2.5C2.77614 7 3 7.22386 3 7.5C3 7.77614 2.77614 8 2.5 8H0.5C0.223858 8 0 7.77614 0 7.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H14.5C14.7761 7 15 7.22386 15 7.5C15 7.77614 14.7761 8 14.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H4.5C4.22386 11 4 10.7761 4 10.5ZM0 13.5C0 13.2239 0.223858 13 0.5 13H2.5C2.77614 13 3 13.2239 3 13.5C3 13.7761 2.77614 14 2.5 14H0.5C0.223858 14 0 13.7761 0 13.5ZM4 13.5C4 13.2239 4.22386 13 4.5 13H14.5C14.7761 13 15 13.2239 15 13.5C15 13.7761 14.7761 14 14.5 14H4.5C4.22386 14 4 13.7761 4 13.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignBaselineIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.5 1.75003C10.7107 1.75003 10.8988 1.88217 10.9703 2.08042L13.9703 10.4C14.064 10.6598 13.9293 10.9463 13.6696 11.04C13.4098 11.1336 13.1233 10.999 13.0296 10.7392L12.0477 8.01606H8.95227L7.97031 10.7392C7.87664 10.999 7.59012 11.1336 7.33035 11.04C7.07058 10.9463 6.93593 10.6598 7.0296 10.4L10.0296 2.08042C10.1011 1.88217 10.2892 1.75003 10.5 1.75003ZM10.5 3.72402L11.7411 7.16606H9.25877L10.5 3.72402ZM2.49949 2.09997C2.7204 2.09997 2.89949 2.27906 2.89949 2.49997L2.89949 9.53428L4.21664 8.21713C4.37285 8.06092 4.62612 8.06092 4.78233 8.21713C4.93854 8.37334 4.93854 8.6266 4.78233 8.78281L2.78233 10.7828C2.70732 10.8578 2.60557 10.9 2.49949 10.9C2.3934 10.9 2.29166 10.8578 2.21664 10.7828L0.216645 8.78281C0.0604349 8.6266 0.0604349 8.37334 0.216645 8.21713C0.372854 8.06092 0.62612 8.06092 0.78233 8.21713L2.09949 9.53428L2.09949 2.49997C2.09949 2.27906 2.27857 2.09997 2.49949 2.09997ZM0.0999695 13.5001C0.0999695 13.2791 0.279056 13.1001 0.499969 13.1001H14.5C14.7209 13.1001 14.9 13.2791 14.9 13.5001C14.9 13.721 14.7209 13.9001 14.5 13.9001H0.499969C0.279056 13.9001 0.0999695 13.721 0.0999695 13.5001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignBottomIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9 3C9 2.44772 8.55229 2 8 2H7C6.44772 2 6 2.44772 6 3L6 14H1.5C1.22386 14 1 14.2239 1 14.5C1 14.7761 1.22386 15 1.5 15L6 15H9H13.5C13.7761 15 14 14.7761 14 14.5C14 14.2239 13.7761 14 13.5 14H9V3Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignCenterHorizontallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.99988 6C1.44759 6 0.999877 6.44772 0.999877 7L0.999877 8C0.999877 8.55228 1.44759 9 1.99988 9L6.99988 9L6.99988 13.5C6.99988 13.7761 7.22374 14 7.49988 14C7.77602 14 7.99988 13.7761 7.99988 13.5L7.99988 9L12.9999 9C13.5522 9 13.9999 8.55228 13.9999 8L13.9999 7C13.9999 6.44772 13.5522 6 12.9999 6L7.99988 6L7.99988 1.5C7.99988 1.22386 7.77602 1 7.49988 1C7.22373 1 6.99988 1.22386 6.99988 1.5L6.99988 6L1.99988 6Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignCenterVerticallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.99988 1C6.44759 1 5.99988 1.44772 5.99988 2V7H1.49988C1.22374 7 0.999878 7.22386 0.999878 7.5C0.999878 7.77614 1.22374 8 1.49988 8H5.99988V13C5.99988 13.5523 6.44759 14 6.99988 14H7.99988C8.55216 14 8.99988 13.5523 8.99988 13V8H13.4999C13.776 8 13.9999 7.77614 13.9999 7.5C13.9999 7.22386 13.776 7 13.4999 7H8.99988V2C8.99988 1.44772 8.55216 1 7.99988 1L6.99988 1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.499995 0.999995C0.223855 0.999995 -5.58458e-07 1.22385 -5.46388e-07 1.49999L-2.18554e-08 13.4999C-9.78492e-09 13.776 0.223855 13.9999 0.499995 13.9999C0.776136 13.9999 0.999991 13.776 0.999991 13.4999L0.999991 8.99993L12 8.99993C12.5523 8.99993 13 8.55222 13 7.99993L13 6.99994C13 6.44766 12.5523 5.99995 12 5.99995L0.999991 5.99995L0.999991 1.49999C0.999991 1.22385 0.776135 0.999995 0.499995 0.999995Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14.4999 1C14.2237 1 13.9999 1.22386 13.9999 1.5L13.9999 6L2.99988 6C2.44759 6 1.99988 6.44772 1.99988 7L1.99988 8C1.99988 8.55228 2.44759 9 2.99988 9L13.9999 9L13.9999 13.5C13.9999 13.7761 14.2237 14 14.4999 14C14.776 14 14.9999 13.7761 14.9999 13.5L14.9999 9L14.9999 6L14.9999 1.5C14.9999 1.22386 14.776 1 14.4999 1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AlignTopIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 0C1.22386 0 1 0.223858 1 0.5C1 0.776142 1.22386 1 1.5 1H6V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V1H13.5C13.7761 1 14 0.776142 14 0.5C14 0.223858 13.7761 0 13.5 0H9H6H1.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AllSidesIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 0.75L9.75 3H5.25L7.5 0.75ZM7.5 14.25L9.75 12H5.25L7.5 14.25ZM3 5.25L0.75 7.5L3 9.75V5.25ZM14.25 7.5L12 5.25V9.75L14.25 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AngleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.8914 2.1937C9.1158 2.35464 9.16725 2.66701 9.00631 2.89141L2.47388 12H13.5C13.7761 12 14 12.2239 14 12.5C14 12.7762 13.7761 13 13.5 13H1.5C1.31254 13 1.14082 12.8952 1.0552 12.7284C0.969578 12.5616 0.984438 12.361 1.09369 12.2086L8.19369 2.30862C8.35462 2.08422 8.667 2.03277 8.8914 2.1937ZM11.1 6.50001C11.1 6.22387 11.3238 6.00001 11.6 6.00001C11.8761 6.00001 12.1 6.22387 12.1 6.50001C12.1 6.77615 11.8761 7.00001 11.6 7.00001C11.3238 7.00001 11.1 6.77615 11.1 6.50001ZM10.4 4.00001C10.1239 4.00001 9.90003 4.22387 9.90003 4.50001C9.90003 4.77615 10.1239 5.00001 10.4 5.00001C10.6762 5.00001 10.9 4.77615 10.9 4.50001C10.9 4.22387 10.6762 4.00001 10.4 4.00001ZM12.1 8.50001C12.1 8.22387 12.3238 8.00001 12.6 8.00001C12.8761 8.00001 13.1 8.22387 13.1 8.50001C13.1 8.77615 12.8761 9.00001 12.6 9.00001C12.3238 9.00001 12.1 8.77615 12.1 8.50001ZM13.4 10C13.1239 10 12.9 10.2239 12.9 10.5C12.9 10.7761 13.1239 11 13.4 11C13.6762 11 13.9 10.7761 13.9 10.5C13.9 10.2239 13.6762 10 13.4 10Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArchiveIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.30902 1C2.93025 1 2.58398 1.214 2.41459 1.55279L1.05279 4.27639C1.01807 4.34582 1 4.42238 1 4.5V13C1 13.5523 1.44772 14 2 14H13C13.5523 14 14 13.5523 14 13V4.5C14 4.42238 13.9819 4.34582 13.9472 4.27639L12.5854 1.55281C12.416 1.21403 12.0698 1.00003 11.691 1.00003L7.5 1.00001L3.30902 1ZM3.30902 2L7 2.00001V4H2.30902L3.30902 2ZM8 4V2.00002L11.691 2.00003L12.691 4H8ZM7.5 5H13V13H2V5H7.5ZM5.5 7C5.22386 7 5 7.22386 5 7.5C5 7.77614 5.22386 8 5.5 8H9.5C9.77614 8 10 7.77614 10 7.5C10 7.22386 9.77614 7 9.5 7H5.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowBottomLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.3536 3.64644C11.5488 3.8417 11.5488 4.15828 11.3536 4.35354L4.70711 11L9 11C9.27614 11 9.5 11.2239 9.5 11.5C9.5 11.7761 9.27614 12 9 12L3.5 12C3.36739 12 3.24021 11.9473 3.14645 11.8536C3.05268 11.7598 3 11.6326 3 11.5L3 5.99999C3 5.72385 3.22386 5.49999 3.5 5.49999C3.77614 5.49999 4 5.72385 4 5.99999V10.2929L10.6464 3.64643C10.8417 3.45117 11.1583 3.45117 11.3536 3.64644Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowBottomRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.64645 3.64644C3.45118 3.8417 3.45118 4.15828 3.64645 4.35354L10.2929 11L6 11C5.72386 11 5.5 11.2239 5.5 11.5C5.5 11.7761 5.72386 12 6 12L11.5 12C11.6326 12 11.7598 11.9473 11.8536 11.8536C11.9473 11.7598 12 11.6326 12 11.5L12 5.99999C12 5.72385 11.7761 5.49999 11.5 5.49999C11.2239 5.49999 11 5.72385 11 5.99999V10.2929L4.35355 3.64643C4.15829 3.45117 3.84171 3.45117 3.64645 3.64644Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 2C7.77614 2 8 2.22386 8 2.5L8 11.2929L11.1464 8.14645C11.3417 7.95118 11.6583 7.95118 11.8536 8.14645C12.0488 8.34171 12.0488 8.65829 11.8536 8.85355L7.85355 12.8536C7.75979 12.9473 7.63261 13 7.5 13C7.36739 13 7.24021 12.9473 7.14645 12.8536L3.14645 8.85355C2.95118 8.65829 2.95118 8.34171 3.14645 8.14645C3.34171 7.95118 3.65829 7.95118 3.85355 8.14645L7 11.2929L7 2.5C7 2.22386 7.22386 2 7.5 2Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.14645 3.14645C8.34171 2.95118 8.65829 2.95118 8.85355 3.14645L12.8536 7.14645C13.0488 7.34171 13.0488 7.65829 12.8536 7.85355L8.85355 11.8536C8.65829 12.0488 8.34171 12.0488 8.14645 11.8536C7.95118 11.6583 7.95118 11.3417 8.14645 11.1464L11.2929 8H2.5C2.22386 8 2 7.77614 2 7.5C2 7.22386 2.22386 7 2.5 7H11.2929L8.14645 3.85355C7.95118 3.65829 7.95118 3.34171 8.14645 3.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowTopLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.3536 11.3536C11.5488 11.1583 11.5488 10.8417 11.3536 10.6465L4.70711 4L9 4C9.27614 4 9.5 3.77614 9.5 3.5C9.5 3.22386 9.27614 3 9 3L3.5 3C3.36739 3 3.24021 3.05268 3.14645 3.14645C3.05268 3.24022 3 3.36739 3 3.5L3 9.00001C3 9.27615 3.22386 9.50001 3.5 9.50001C3.77614 9.50001 4 9.27615 4 9.00001V4.70711L10.6464 11.3536C10.8417 11.5488 11.1583 11.5488 11.3536 11.3536Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowTopRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ArrowUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AspectRatioIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.5 2H12.5C12.7761 2 13 2.22386 13 2.5V12.5C13 12.7761 12.7761 13 12.5 13H2.5C2.22386 13 2 12.7761 2 12.5V2.5C2 2.22386 2.22386 2 2.5 2ZM1 2.5C1 1.67157 1.67157 1 2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5ZM7.5 4C7.77614 4 8 3.77614 8 3.5C8 3.22386 7.77614 3 7.5 3C7.22386 3 7 3.22386 7 3.5C7 3.77614 7.22386 4 7.5 4ZM8 5.5C8 5.77614 7.77614 6 7.5 6C7.22386 6 7 5.77614 7 5.5C7 5.22386 7.22386 5 7.5 5C7.77614 5 8 5.22386 8 5.5ZM7.5 8C7.77614 8 8 7.77614 8 7.5C8 7.22386 7.77614 7 7.5 7C7.22386 7 7 7.22386 7 7.5C7 7.77614 7.22386 8 7.5 8ZM10 7.5C10 7.77614 9.77614 8 9.5 8C9.22386 8 9 7.77614 9 7.5C9 7.22386 9.22386 7 9.5 7C9.77614 7 10 7.22386 10 7.5ZM11.5 8C11.7761 8 12 7.77614 12 7.5C12 7.22386 11.7761 7 11.5 7C11.2239 7 11 7.22386 11 7.5C11 7.77614 11.2239 8 11.5 8Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var AvatarIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877014 7.49988C0.877014 3.84219 3.84216 0.877045 7.49985 0.877045C11.1575 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1575 14.1227 7.49985 14.1227C3.84216 14.1227 0.877014 11.1575 0.877014 7.49988ZM7.49985 1.82704C4.36683 1.82704 1.82701 4.36686 1.82701 7.49988C1.82701 8.97196 2.38774 10.3131 3.30727 11.3213C4.19074 9.94119 5.73818 9.02499 7.50023 9.02499C9.26206 9.02499 10.8093 9.94097 11.6929 11.3208C12.6121 10.3127 13.1727 8.97172 13.1727 7.49988C13.1727 4.36686 10.6328 1.82704 7.49985 1.82704ZM10.9818 11.9787C10.2839 10.7795 8.9857 9.97499 7.50023 9.97499C6.01458 9.97499 4.71624 10.7797 4.01845 11.9791C4.97952 12.7272 6.18765 13.1727 7.49985 13.1727C8.81227 13.1727 10.0206 12.727 10.9818 11.9787ZM5.14999 6.50487C5.14999 5.207 6.20212 4.15487 7.49999 4.15487C8.79786 4.15487 9.84999 5.207 9.84999 6.50487C9.84999 7.80274 8.79786 8.85487 7.49999 8.85487C6.20212 8.85487 5.14999 7.80274 5.14999 6.50487ZM7.49999 5.10487C6.72679 5.10487 6.09999 5.73167 6.09999 6.50487C6.09999 7.27807 6.72679 7.90487 7.49999 7.90487C8.27319 7.90487 8.89999 7.27807 8.89999 6.50487C8.89999 5.73167 8.27319 5.10487 7.49999 5.10487Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BackpackIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 1C5 0.447715 5.44772 0 6 0H9C9.55228 0 10 0.447715 10 1V2H14C14.5523 2 15 2.44772 15 3V6C15 6.8888 14.6131 7.68734 14 8.23608V11.5C14 12.3284 13.3284 13 12.5 13H2.5C1.67157 13 1 12.3284 1 11.5V8.2359C0.38697 7.68721 0 6.88883 0 6V3C0 2.44772 0.447716 2 1 2H5V1ZM9 1V2H6V1H9ZM1 3H5H5.5H9.5H10H14V6C14 6.654 13.6866 7.23467 13.1997 7.6004C12.8655 7.85144 12.4508 8 12 8H8V7.5C8 7.22386 7.77614 7 7.5 7C7.22386 7 7 7.22386 7 7.5V8H3C2.5493 8 2.1346 7.85133 1.80029 7.60022C1.31335 7.23446 1 6.65396 1 6V3ZM7 9H3C2.64961 9 2.31292 8.93972 2 8.82905V11.5C2 11.7761 2.22386 12 2.5 12H12.5C12.7761 12 13 11.7761 13 11.5V8.82915C12.6871 8.93978 12.3504 9 12 9H8V9.5C8 9.77614 7.77614 10 7.5 10C7.22386 10 7 9.77614 7 9.5V9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BadgeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.5 6H11.5C12.3284 6 13 6.67157 13 7.5C13 8.32843 12.3284 9 11.5 9H3.5C2.67157 9 2 8.32843 2 7.5C2 6.67157 2.67157 6 3.5 6ZM1 7.5C1 6.11929 2.11929 5 3.5 5H11.5C12.8807 5 14 6.11929 14 7.5C14 8.88071 12.8807 10 11.5 10H3.5C2.11929 10 1 8.88071 1 7.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H10.5C10.7761 8 11 7.77614 11 7.5C11 7.22386 10.7761 7 10.5 7H4.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BarChartIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.5 1C11.7761 1 12 1.22386 12 1.5V13.5C12 13.7761 11.7761 14 11.5 14C11.2239 14 11 13.7761 11 13.5V1.5C11 1.22386 11.2239 1 11.5 1ZM9.5 3C9.77614 3 10 3.22386 10 3.5V13.5C10 13.7761 9.77614 14 9.5 14C9.22386 14 9 13.7761 9 13.5V3.5C9 3.22386 9.22386 3 9.5 3ZM13.5 3C13.7761 3 14 3.22386 14 3.5V13.5C14 13.7761 13.7761 14 13.5 14C13.2239 14 13 13.7761 13 13.5V3.5C13 3.22386 13.2239 3 13.5 3ZM5.5 4C5.77614 4 6 4.22386 6 4.5V13.5C6 13.7761 5.77614 14 5.5 14C5.22386 14 5 13.7761 5 13.5V4.5C5 4.22386 5.22386 4 5.5 4ZM1.5 5C1.77614 5 2 5.22386 2 5.5V13.5C2 13.7761 1.77614 14 1.5 14C1.22386 14 1 13.7761 1 13.5V5.5C1 5.22386 1.22386 5 1.5 5ZM7.5 5C7.77614 5 8 5.22386 8 5.5V13.5C8 13.7761 7.77614 14 7.5 14C7.22386 14 7 13.7761 7 13.5V5.5C7 5.22386 7.22386 5 7.5 5ZM3.5 7C3.77614 7 4 7.22386 4 7.5V13.5C4 13.7761 3.77614 14 3.5 14C3.22386 14 3 13.7761 3 13.5V7.5C3 7.22386 3.22386 7 3.5 7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BellIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.60124 1.25086C8.60124 1.75459 8.26278 2.17927 7.80087 2.30989C10.1459 2.4647 12 4.41582 12 6.79999V10.25C12 11.0563 12.0329 11.7074 12.7236 12.0528C12.931 12.1565 13.0399 12.3892 12.9866 12.6149C12.9333 12.8406 12.7319 13 12.5 13H8.16144C8.36904 13.1832 8.49997 13.4513 8.49997 13.75C8.49997 14.3023 8.05226 14.75 7.49997 14.75C6.94769 14.75 6.49997 14.3023 6.49997 13.75C6.49997 13.4513 6.63091 13.1832 6.83851 13H2.49999C2.2681 13 2.06664 12.8406 2.01336 12.6149C1.96009 12.3892 2.06897 12.1565 2.27638 12.0528C2.96708 11.7074 2.99999 11.0563 2.99999 10.25V6.79999C2.99999 4.41537 4.85481 2.46396 7.20042 2.3098C6.73867 2.17908 6.40036 1.75448 6.40036 1.25086C6.40036 0.643104 6.89304 0.150421 7.5008 0.150421C8.10855 0.150421 8.60124 0.643104 8.60124 1.25086ZM7.49999 3.29999C5.56699 3.29999 3.99999 4.86699 3.99999 6.79999V10.25L4.00002 10.3009C4.0005 10.7463 4.00121 11.4084 3.69929 12H11.3007C10.9988 11.4084 10.9995 10.7463 11 10.3009L11 10.25V6.79999C11 4.86699 9.43299 3.29999 7.49999 3.29999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BlendingModeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 9C3 6.5 4.5 4.25 7.5 1.5C10.5 4.25 12 6.5 12 9C12 11.4853 9.98528 13.5 7.5 13.5C5.01472 13.5 3 11.4853 3 9ZM10.9524 8.30307C9.67347 7.82121 8.2879 8.46208 6.98956 9.06259C5.9327 9.55142 4.93365 10.0135 4.09695 9.82153C4.03357 9.55804 4 9.28294 4 9C4 7.11203 5.02686 5.27195 7.5 2.87357C9.66837 4.97639 10.725 6.65004 10.9524 8.30307Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BookmarkIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 2.5C3 2.22386 3.22386 2 3.5 2H11.5C11.7761 2 12 2.22386 12 2.5V13.5C12 13.6818 11.9014 13.8492 11.7424 13.9373C11.5834 14.0254 11.3891 14.0203 11.235 13.924L7.5 11.5896L3.765 13.924C3.61087 14.0203 3.41659 14.0254 3.25762 13.9373C3.09864 13.8492 3 13.6818 3 13.5V2.5ZM4 3V12.5979L6.97 10.7416C7.29427 10.539 7.70573 10.539 8.03 10.7416L11 12.5979V3H4Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderAllIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.25 1C0.25 0.585786 0.585786 0.25 1 0.25H14C14.4142 0.25 14.75 0.585786 14.75 1V14C14.75 14.4142 14.4142 14.75 14 14.75H1C0.585786 14.75 0.25 14.4142 0.25 14V1ZM1.75 1.75V13.25H13.25V1.75H1.75Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("rect", {
        x: "7",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }));
});
var BorderBottomIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 13.25L14 13.25V14.75L1 14.75V13.25Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("rect", {
        x: "7",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }));
});
var BorderDashedIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0 7.5C0 7.22386 0.223858 7 0.5 7H3C3.27614 7 3.5 7.22386 3.5 7.5C3.5 7.77614 3.27614 8 3 8H0.5C0.223858 8 0 7.77614 0 7.5ZM5.75 7.5C5.75 7.22386 5.97386 7 6.25 7H8.75C9.02614 7 9.25 7.22386 9.25 7.5C9.25 7.77614 9.02614 8 8.75 8H6.25C5.97386 8 5.75 7.77614 5.75 7.5ZM12 7C11.7239 7 11.5 7.22386 11.5 7.5C11.5 7.77614 11.7239 8 12 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderDottedIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 6.625C1.01675 6.625 0.625 7.01675 0.625 7.5C0.625 7.98325 1.01675 8.375 1.5 8.375C1.98325 8.375 2.375 7.98325 2.375 7.5C2.375 7.01675 1.98325 6.625 1.5 6.625ZM5.5 6.625C5.01675 6.625 4.625 7.01675 4.625 7.5C4.625 7.98325 5.01675 8.375 5.5 8.375C5.98325 8.375 6.375 7.98325 6.375 7.5C6.375 7.01675 5.98325 6.625 5.5 6.625ZM9.5 6.625C9.01675 6.625 8.625 7.01675 8.625 7.5C8.625 7.98325 9.01675 8.375 9.5 8.375C9.98325 8.375 10.375 7.98325 10.375 7.5C10.375 7.01675 9.98325 6.625 9.5 6.625ZM12.625 7.5C12.625 7.01675 13.0168 6.625 13.5 6.625C13.9832 6.625 14.375 7.01675 14.375 7.5C14.375 7.98325 13.9832 8.375 13.5 8.375C13.0168 8.375 12.625 7.98325 12.625 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.75 1L1.75 14L0.249999 14L0.25 1L1.75 1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("rect", {
        x: "10",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 10 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "10",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 10 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "12",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 12 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "12",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 12 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 5)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "5",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 5)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 3)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "3",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 3)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 9)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "9",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 9)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 11)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "11",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 11)",
        fill: color
    }), _react.createElement("rect", {
        x: "6",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 6 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "6",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 6 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "4",
        y: "7",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 4 7)",
        fill: color
    }), _react.createElement("rect", {
        x: "4",
        y: "13",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 4 13)",
        fill: color
    }), _react.createElement("rect", {
        x: "10",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 10 1)",
        fill: color
    }), _react.createElement("rect", {
        x: "12",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 12 1)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 8 1)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 14 1)",
        fill: color
    }), _react.createElement("rect", {
        x: "6",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 6 1)",
        fill: color
    }), _react.createElement("rect", {
        x: "4",
        y: "1",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(90 4 1)",
        fill: color
    }));
});
var BorderNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("rect", {
        x: "7",
        y: "5.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "5.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "3.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "3.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "9.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "9.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "11.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "11.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "5.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "3.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "9.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "11.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }));
});
var BorderRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.25 1L13.25 14L14.75 14L14.75 1L13.25 1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 5 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 5 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 3 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 3 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 5)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 5)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 3)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 3)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 9)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 9)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 11)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 11)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 9 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 9 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 11 7)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 11 13)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 5 1)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 3 1)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 7 1)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 1 1)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 9 1)",
        fill: color
    }), _react.createElement("rect", {
        width: "1",
        height: "1",
        rx: ".5",
        transform: "matrix(0 1 1 0 11 1)",
        fill: color
    }));
});
var BorderSolidIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.25 7.5C1.25 7.22386 1.47386 7 1.75 7H13.25C13.5261 7 13.75 7.22386 13.75 7.5C13.75 7.77614 13.5261 8 13.25 8H1.75C1.47386 8 1.25 7.77614 1.25 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderSplitIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("rect", {
        x: "7",
        y: "5.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "3.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "13.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "1.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "13",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "5",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "3",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "9",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "11",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "9.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "7",
        y: "11.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("rect", {
        x: "1",
        y: "7.025",
        width: "1",
        height: "1",
        rx: ".5",
        fill: color
    }), _react.createElement("path", {
        d: "M1 1.49994C1 1.2238 1.22386 0.999939 1.5 0.999939H6V1.99994H2V5.99994H1V1.49994ZM13 1.99994H9V0.999939H13.5C13.7761 0.999939 14 1.2238 14 1.49994V5.99994H13V1.99994ZM1 13.4999V8.99994H2V12.9999H6V13.9999H1.5C1.22386 13.9999 1 13.7761 1 13.4999ZM13 12.9999V8.99994H14V13.4999C14 13.7761 13.7761 13.9999 13.5 13.9999H9.5V12.9999H13Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderStyleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H3.5C3.77614 7 4 7.22386 4 7.5C4 7.77614 3.77614 8 3.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11C1.77614 11 2 11.2239 2 11.5C2 11.7761 1.77614 12 1.5 12C1.22386 12 1 11.7761 1 11.5ZM3 11.5C3 11.2239 3.22386 11 3.5 11C3.77614 11 4 11.2239 4 11.5C4 11.7761 3.77614 12 3.5 12C3.22386 12 3 11.7761 3 11.5ZM5.5 11C5.22386 11 5 11.2239 5 11.5C5 11.7761 5.22386 12 5.5 12C5.77614 12 6 11.7761 6 11.5C6 11.2239 5.77614 11 5.5 11ZM7 11.5C7 11.2239 7.22386 11 7.5 11C7.77614 11 8 11.2239 8 11.5C8 11.7761 7.77614 12 7.5 12C7.22386 12 7 11.7761 7 11.5ZM9.5 11C9.22386 11 9 11.2239 9 11.5C9 11.7761 9.22386 12 9.5 12C9.77614 12 10 11.7761 10 11.5C10 11.2239 9.77614 11 9.5 11ZM11 11.5C11 11.2239 11.2239 11 11.5 11C11.7761 11 12 11.2239 12 11.5C12 11.7761 11.7761 12 11.5 12C11.2239 12 11 11.7761 11 11.5ZM13.5 11C13.2239 11 13 11.2239 13 11.5C13 11.7761 13.2239 12 13.5 12C13.7761 12 14 11.7761 14 11.5C14 11.2239 13.7761 11 13.5 11ZM6.5 7C6.22386 7 6 7.22386 6 7.5C6 7.77614 6.22386 8 6.5 8H8.5C8.77614 8 9 7.77614 9 7.5C9 7.22386 8.77614 7 8.5 7H6.5ZM11 7.5C11 7.22386 11.2239 7 11.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H11.5C11.2239 8 11 7.77614 11 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BorderTopIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14 1.75L1 1.75L1 0.249999L14 0.25L14 1.75Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("rect", {
        x: "8",
        y: "10",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 10)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "10",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 10)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "12",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 12)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "12",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 12)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "10",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 10 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "10",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 10 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "12",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 12 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "12",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 12 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "6",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 6 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "6",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 6 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "4",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 4 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "4",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 4 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "6",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 6)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "6",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 6)",
        fill: color
    }), _react.createElement("rect", {
        x: "8",
        y: "4",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 8 4)",
        fill: color
    }), _react.createElement("rect", {
        x: "2",
        y: "4",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 2 4)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "10",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 10)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "12",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 12)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "8",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 8)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "14",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 14)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "6",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 6)",
        fill: color
    }), _react.createElement("rect", {
        x: "14",
        y: "4",
        width: "1",
        height: "1",
        rx: ".5",
        transform: "rotate(-180 14 4)",
        fill: color
    }));
});
var BoxIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.5 2H2.5C2.22386 2 2 2.22386 2 2.5V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V2.5C13 2.22386 12.7761 2 12.5 2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var BoxModelIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.99998 0.999976C1.44769 0.999976 0.999976 1.44769 0.999976 1.99998V13C0.999976 13.5523 1.44769 14 1.99998 14H13C13.5523 14 14 13.5523 14 13V1.99998C14 1.44769 13.5523 0.999976 13 0.999976H1.99998ZM1.99998 1.99998L13 1.99998V13H1.99998V1.99998ZM4.49996 3.99996C4.22382 3.99996 3.99996 4.22382 3.99996 4.49996V10.5C3.99996 10.7761 4.22382 11 4.49996 11H10.5C10.7761 11 11 10.7761 11 10.5V4.49996C11 4.22382 10.7761 3.99996 10.5 3.99996H4.49996ZM4.99996 9.99996V4.99996H9.99996V9.99996H4.99996Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ButtonIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 5H13C13.5523 5 14 5.44772 14 6V9C14 9.55228 13.5523 10 13 10H2C1.44772 10 1 9.55228 1 9V6C1 5.44772 1.44772 5 2 5ZM0 6C0 4.89543 0.895431 4 2 4H13C14.1046 4 15 4.89543 15 6V9C15 10.1046 14.1046 11 13 11H2C0.89543 11 0 10.1046 0 9V6ZM4.5 6.75C4.08579 6.75 3.75 7.08579 3.75 7.5C3.75 7.91421 4.08579 8.25 4.5 8.25C4.91421 8.25 5.25 7.91421 5.25 7.5C5.25 7.08579 4.91421 6.75 4.5 6.75ZM6.75 7.5C6.75 7.08579 7.08579 6.75 7.5 6.75C7.91421 6.75 8.25 7.08579 8.25 7.5C8.25 7.91421 7.91421 8.25 7.5 8.25C7.08579 8.25 6.75 7.91421 6.75 7.5ZM10.5 6.75C10.0858 6.75 9.75 7.08579 9.75 7.5C9.75 7.91421 10.0858 8.25 10.5 8.25C10.9142 8.25 11.25 7.91421 11.25 7.5C11.25 7.08579 10.9142 6.75 10.5 6.75Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CalendarIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.5 1C4.77614 1 5 1.22386 5 1.5V2H10V1.5C10 1.22386 10.2239 1 10.5 1C10.7761 1 11 1.22386 11 1.5V2H12.5C13.3284 2 14 2.67157 14 3.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V3.5C1 2.67157 1.67157 2 2.5 2H4V1.5C4 1.22386 4.22386 1 4.5 1ZM10 3V3.5C10 3.77614 10.2239 4 10.5 4C10.7761 4 11 3.77614 11 3.5V3H12.5C12.7761 3 13 3.22386 13 3.5V5H2V3.5C2 3.22386 2.22386 3 2.5 3H4V3.5C4 3.77614 4.22386 4 4.5 4C4.77614 4 5 3.77614 5 3.5V3H10ZM2 6V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V6H2ZM7 7.5C7 7.22386 7.22386 7 7.5 7C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8C7.22386 8 7 7.77614 7 7.5ZM9.5 7C9.22386 7 9 7.22386 9 7.5C9 7.77614 9.22386 8 9.5 8C9.77614 8 10 7.77614 10 7.5C10 7.22386 9.77614 7 9.5 7ZM11 7.5C11 7.22386 11.2239 7 11.5 7C11.7761 7 12 7.22386 12 7.5C12 7.77614 11.7761 8 11.5 8C11.2239 8 11 7.77614 11 7.5ZM11.5 9C11.2239 9 11 9.22386 11 9.5C11 9.77614 11.2239 10 11.5 10C11.7761 10 12 9.77614 12 9.5C12 9.22386 11.7761 9 11.5 9ZM9 9.5C9 9.22386 9.22386 9 9.5 9C9.77614 9 10 9.22386 10 9.5C10 9.77614 9.77614 10 9.5 10C9.22386 10 9 9.77614 9 9.5ZM7.5 9C7.22386 9 7 9.22386 7 9.5C7 9.77614 7.22386 10 7.5 10C7.77614 10 8 9.77614 8 9.5C8 9.22386 7.77614 9 7.5 9ZM5 9.5C5 9.22386 5.22386 9 5.5 9C5.77614 9 6 9.22386 6 9.5C6 9.77614 5.77614 10 5.5 10C5.22386 10 5 9.77614 5 9.5ZM3.5 9C3.22386 9 3 9.22386 3 9.5C3 9.77614 3.22386 10 3.5 10C3.77614 10 4 9.77614 4 9.5C4 9.22386 3.77614 9 3.5 9ZM3 11.5C3 11.2239 3.22386 11 3.5 11C3.77614 11 4 11.2239 4 11.5C4 11.7761 3.77614 12 3.5 12C3.22386 12 3 11.7761 3 11.5ZM5.5 11C5.22386 11 5 11.2239 5 11.5C5 11.7761 5.22386 12 5.5 12C5.77614 12 6 11.7761 6 11.5C6 11.2239 5.77614 11 5.5 11ZM7 11.5C7 11.2239 7.22386 11 7.5 11C7.77614 11 8 11.2239 8 11.5C8 11.7761 7.77614 12 7.5 12C7.22386 12 7 11.7761 7 11.5ZM9.5 11C9.22386 11 9 11.2239 9 11.5C9 11.7761 9.22386 12 9.5 12C9.77614 12 10 11.7761 10 11.5C10 11.2239 9.77614 11 9.5 11Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CameraIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 3C1.44772 3 1 3.44772 1 4V11C1 11.5523 1.44772 12 2 12H13C13.5523 12 14 11.5523 14 11V4C14 3.44772 13.5523 3 13 3H2ZM0 4C0 2.89543 0.895431 2 2 2H13C14.1046 2 15 2.89543 15 4V11C15 12.1046 14.1046 13 13 13H2C0.895431 13 0 12.1046 0 11V4ZM2 4.25C2 4.11193 2.11193 4 2.25 4H4.75C4.88807 4 5 4.11193 5 4.25V5.75454C5 5.89261 4.88807 6.00454 4.75 6.00454H2.25C2.11193 6.00454 2 5.89261 2 5.75454V4.25ZM12.101 7.58421C12.101 9.02073 10.9365 10.1853 9.49998 10.1853C8.06346 10.1853 6.89893 9.02073 6.89893 7.58421C6.89893 6.14769 8.06346 4.98315 9.49998 4.98315C10.9365 4.98315 12.101 6.14769 12.101 7.58421ZM13.101 7.58421C13.101 9.57302 11.4888 11.1853 9.49998 11.1853C7.51117 11.1853 5.89893 9.57302 5.89893 7.58421C5.89893 5.5954 7.51117 3.98315 9.49998 3.98315C11.4888 3.98315 13.101 5.5954 13.101 7.58421Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CardStackIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 3.5C2 3.22386 2.22386 3 2.5 3H12.5C12.7761 3 13 3.22386 13 3.5V9.5C13 9.77614 12.7761 10 12.5 10H2.5C2.22386 10 2 9.77614 2 9.5V3.5ZM2 10.9146C1.4174 10.7087 1 10.1531 1 9.5V3.5C1 2.67157 1.67157 2 2.5 2H12.5C13.3284 2 14 2.67157 14 3.5V9.5C14 10.1531 13.5826 10.7087 13 10.9146V11.5C13 12.3284 12.3284 13 11.5 13H3.5C2.67157 13 2 12.3284 2 11.5V10.9146ZM12 11V11.5C12 11.7761 11.7761 12 11.5 12H3.5C3.22386 12 3 11.7761 3 11.5V11H12Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CardStackMinusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.5 3C2.22386 3 2 3.22386 2 3.5V9.5C2 9.77614 2.22386 10 2.5 10H12.5C12.7761 10 13 9.77614 13 9.5V3.5C13 3.22386 12.7761 3 12.5 3H2.5ZM1 9.5C1 10.1531 1.4174 10.7087 2 10.9146V11.5C2 12.3284 2.67157 13 3.5 13H11.5C12.3284 13 13 12.3284 13 11.5V10.9146C13.5826 10.7087 14 10.1531 14 9.5V3.5C14 2.67157 13.3284 2 12.5 2H2.5C1.67157 2 1 2.67157 1 3.5V9.5ZM12 11.5V11H3V11.5C3 11.7761 3.22386 12 3.5 12H11.5C11.7761 12 12 11.7761 12 11.5ZM5.5 6C5.22386 6 5 6.22386 5 6.5C5 6.77614 5.22386 7 5.5 7H9.5C9.77614 7 10 6.77614 10 6.5C10 6.22386 9.77614 6 9.5 6H5.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CardStackPlusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 3.5C2 3.22386 2.22386 3 2.5 3H12.5C12.7761 3 13 3.22386 13 3.5V9.5C13 9.77614 12.7761 10 12.5 10H2.5C2.22386 10 2 9.77614 2 9.5V3.5ZM2 10.9146C1.4174 10.7087 1 10.1531 1 9.5V3.5C1 2.67157 1.67157 2 2.5 2H12.5C13.3284 2 14 2.67157 14 3.5V9.5C14 10.1531 13.5826 10.7087 13 10.9146V11.5C13 12.3284 12.3284 13 11.5 13H3.5C2.67157 13 2 12.3284 2 11.5V10.9146ZM12 11V11.5C12 11.7761 11.7761 12 11.5 12H3.5C3.22386 12 3 11.7761 3 11.5V11H12ZM5 6.5C5 6.22386 5.22386 6 5.5 6H7V4.5C7 4.22386 7.22386 4 7.5 4C7.77614 4 8 4.22386 8 4.5V6H9.5C9.77614 6 10 6.22386 10 6.5C10 6.77614 9.77614 7 9.5 7H8V8.5C8 8.77614 7.77614 9 7.5 9C7.22386 9 7 8.77614 7 8.5V7H5.5C5.22386 7 5 6.77614 5 6.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CaretDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.18179 6.18181C4.35753 6.00608 4.64245 6.00608 4.81819 6.18181L7.49999 8.86362L10.1818 6.18181C10.3575 6.00608 10.6424 6.00608 10.8182 6.18181C10.9939 6.35755 10.9939 6.64247 10.8182 6.81821L7.81819 9.81821C7.73379 9.9026 7.61934 9.95001 7.49999 9.95001C7.38064 9.95001 7.26618 9.9026 7.18179 9.81821L4.18179 6.81821C4.00605 6.64247 4.00605 6.35755 4.18179 6.18181Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CaretLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.81809 4.18179C8.99383 4.35753 8.99383 4.64245 8.81809 4.81819L6.13629 7.49999L8.81809 10.1818C8.99383 10.3575 8.99383 10.6424 8.81809 10.8182C8.64236 10.9939 8.35743 10.9939 8.1817 10.8182L5.1817 7.81819C5.09731 7.73379 5.0499 7.61933 5.0499 7.49999C5.0499 7.38064 5.09731 7.26618 5.1817 7.18179L8.1817 4.18179C8.35743 4.00605 8.64236 4.00605 8.81809 4.18179Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CaretRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.18194 4.18185C6.35767 4.00611 6.6426 4.00611 6.81833 4.18185L9.81833 7.18185C9.90272 7.26624 9.95013 7.3807 9.95013 7.50005C9.95013 7.6194 9.90272 7.73386 9.81833 7.81825L6.81833 10.8182C6.6426 10.994 6.35767 10.994 6.18194 10.8182C6.0062 10.6425 6.0062 10.3576 6.18194 10.1819L8.86374 7.50005L6.18194 4.81825C6.0062 4.64251 6.0062 4.35759 6.18194 4.18185Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CaretSortIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CaretUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.18179 8.81819C4.00605 8.64245 4.00605 8.35753 4.18179 8.18179L7.18179 5.18179C7.26618 5.0974 7.38064 5.04999 7.49999 5.04999C7.61933 5.04999 7.73379 5.0974 7.81819 5.18179L10.8182 8.18179C10.9939 8.35753 10.9939 8.64245 10.8182 8.81819C10.6424 8.99392 10.3575 8.99392 10.1818 8.81819L7.49999 6.13638L4.81819 8.81819C4.64245 8.99392 4.35753 8.99392 4.18179 8.81819Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ChatBubbleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.5 3L2.49999 3.00002C1.67157 3.00002 0.999999 3.67159 0.999999 4.50002V9.50002C0.999999 10.3284 1.67157 11 2.5 11H7.50002C7.63263 11 7.75981 11.0527 7.85358 11.1465L9.99999 13.2929V11.5C9.99999 11.2239 10.2239 11 10.5 11H12.5C13.3284 11 14 10.3284 14 9.50002V4.5C14 3.67157 13.3284 3 12.5 3ZM2.49999 2.00002L12.5 2C13.8807 2 15 3.11928 15 4.5V9.50002C15 10.8807 13.8807 12 12.5 12H11V14.5C11 14.7022 10.8782 14.8845 10.6913 14.9619C10.5045 15.0393 10.2894 14.9965 10.1464 14.8535L7.29292 12H2.5C1.11929 12 0 10.8807 0 9.50002V4.50002C0 3.11931 1.11928 2.00002 2.49999 2.00002Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CheckIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CheckCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CheckboxIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 3H12V12H3L3 3ZM2 3C2 2.44771 2.44772 2 3 2H12C12.5523 2 13 2.44772 13 3V12C13 12.5523 12.5523 13 12 13H3C2.44771 13 2 12.5523 2 12V3ZM10.3498 5.51105C10.506 5.28337 10.4481 4.97212 10.2204 4.81587C9.99275 4.65961 9.6815 4.71751 9.52525 4.94519L6.64048 9.14857L5.19733 7.40889C5.02102 7.19635 4.7058 7.16699 4.49327 7.34329C4.28073 7.5196 4.25137 7.83482 4.42767 8.04735L6.2934 10.2964C6.39348 10.4171 6.54437 10.4838 6.70097 10.4767C6.85757 10.4695 7.00177 10.3894 7.09047 10.2601L10.3498 5.51105Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ChevronDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ChevronLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ChevronRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ChevronUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CircleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49991C0.877075 3.84222 3.84222 0.877075 7.49991 0.877075C11.1576 0.877075 14.1227 3.84222 14.1227 7.49991C14.1227 11.1576 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1576 0.877075 7.49991ZM7.49991 1.82708C4.36689 1.82708 1.82708 4.36689 1.82708 7.49991C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49991C13.1727 4.36689 10.6329 1.82708 7.49991 1.82708Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CircleBackslashIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.877075C3.84222 0.877075 0.877075 3.84222 0.877075 7.49991C0.877075 11.1576 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1576 14.1227 7.49991C14.1227 3.84222 11.1576 0.877075 7.49991 0.877075ZM3.85768 3.15057C4.84311 2.32448 6.11342 1.82708 7.49991 1.82708C10.6329 1.82708 13.1727 4.36689 13.1727 7.49991C13.1727 8.88638 12.6753 10.1567 11.8492 11.1421L3.85768 3.15057ZM3.15057 3.85768C2.32448 4.84311 1.82708 6.11342 1.82708 7.49991C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C8.88638 13.1727 10.1567 12.6753 11.1421 11.8492L3.15057 3.85768Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ClipboardIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM11 2V2.25C11 2.66421 10.6642 3 10.25 3H4.75C4.33579 3 4 2.66421 4 2.25V2H3.5C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V2.5C12 2.22386 11.7761 2 11.5 2H11Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ClipboardCopyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H7V13H3.5C3.22386 13 3 12.7761 3 12.5V2.5C3 2.22386 3.22386 2 3.5 2H4V2.25C4 2.66421 4.33579 3 4.75 3H10.25C10.6642 3 11 2.66421 11 2.25V2H11.5C11.7761 2 12 2.22386 12 2.5V7H13V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM9 8.5C9 8.77614 8.77614 9 8.5 9C8.22386 9 8 8.77614 8 8.5C8 8.22386 8.22386 8 8.5 8C8.77614 8 9 8.22386 9 8.5ZM10.5 9C10.7761 9 11 8.77614 11 8.5C11 8.22386 10.7761 8 10.5 8C10.2239 8 10 8.22386 10 8.5C10 8.77614 10.2239 9 10.5 9ZM13 8.5C13 8.77614 12.7761 9 12.5 9C12.2239 9 12 8.77614 12 8.5C12 8.22386 12.2239 8 12.5 8C12.7761 8 13 8.22386 13 8.5ZM14.5 9C14.7761 9 15 8.77614 15 8.5C15 8.22386 14.7761 8 14.5 8C14.2239 8 14 8.22386 14 8.5C14 8.77614 14.2239 9 14.5 9ZM15 10.5C15 10.7761 14.7761 11 14.5 11C14.2239 11 14 10.7761 14 10.5C14 10.2239 14.2239 10 14.5 10C14.7761 10 15 10.2239 15 10.5ZM14.5 13C14.7761 13 15 12.7761 15 12.5C15 12.2239 14.7761 12 14.5 12C14.2239 12 14 12.2239 14 12.5C14 12.7761 14.2239 13 14.5 13ZM14.5 15C14.7761 15 15 14.7761 15 14.5C15 14.2239 14.7761 14 14.5 14C14.2239 14 14 14.2239 14 14.5C14 14.7761 14.2239 15 14.5 15ZM8.5 11C8.77614 11 9 10.7761 9 10.5C9 10.2239 8.77614 10 8.5 10C8.22386 10 8 10.2239 8 10.5C8 10.7761 8.22386 11 8.5 11ZM9 12.5C9 12.7761 8.77614 13 8.5 13C8.22386 13 8 12.7761 8 12.5C8 12.2239 8.22386 12 8.5 12C8.77614 12 9 12.2239 9 12.5ZM8.5 15C8.77614 15 9 14.7761 9 14.5C9 14.2239 8.77614 14 8.5 14C8.22386 14 8 14.2239 8 14.5C8 14.7761 8.22386 15 8.5 15ZM11 14.5C11 14.7761 10.7761 15 10.5 15C10.2239 15 10 14.7761 10 14.5C10 14.2239 10.2239 14 10.5 14C10.7761 14 11 14.2239 11 14.5ZM12.5 15C12.7761 15 13 14.7761 13 14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5C12 14.7761 12.2239 15 12.5 15Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ClockIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.50009 0.877014C3.84241 0.877014 0.877258 3.84216 0.877258 7.49984C0.877258 11.1575 3.8424 14.1227 7.50009 14.1227C11.1578 14.1227 14.1229 11.1575 14.1229 7.49984C14.1229 3.84216 11.1577 0.877014 7.50009 0.877014ZM1.82726 7.49984C1.82726 4.36683 4.36708 1.82701 7.50009 1.82701C10.6331 1.82701 13.1729 4.36683 13.1729 7.49984C13.1729 10.6328 10.6331 13.1727 7.50009 13.1727C4.36708 13.1727 1.82726 10.6328 1.82726 7.49984ZM8 4.50001C8 4.22387 7.77614 4.00001 7.5 4.00001C7.22386 4.00001 7 4.22387 7 4.50001V7.50001C7 7.63262 7.05268 7.7598 7.14645 7.85357L9.14645 9.85357C9.34171 10.0488 9.65829 10.0488 9.85355 9.85357C10.0488 9.65831 10.0488 9.34172 9.85355 9.14646L8 7.29291V4.50001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CodeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.96424 2.68571C10.0668 2.42931 9.94209 2.13833 9.6857 2.03577C9.4293 1.93322 9.13832 2.05792 9.03576 2.31432L5.03576 12.3143C4.9332 12.5707 5.05791 12.8617 5.3143 12.9642C5.5707 13.0668 5.86168 12.9421 5.96424 12.6857L9.96424 2.68571ZM3.85355 5.14646C4.04882 5.34172 4.04882 5.6583 3.85355 5.85356L2.20711 7.50001L3.85355 9.14646C4.04882 9.34172 4.04882 9.6583 3.85355 9.85356C3.65829 10.0488 3.34171 10.0488 3.14645 9.85356L1.14645 7.85356C0.951184 7.6583 0.951184 7.34172 1.14645 7.14646L3.14645 5.14646C3.34171 4.9512 3.65829 4.9512 3.85355 5.14646ZM11.1464 5.14646C11.3417 4.9512 11.6583 4.9512 11.8536 5.14646L13.8536 7.14646C14.0488 7.34172 14.0488 7.6583 13.8536 7.85356L11.8536 9.85356C11.6583 10.0488 11.3417 10.0488 11.1464 9.85356C10.9512 9.6583 10.9512 9.34172 11.1464 9.14646L12.7929 7.50001L11.1464 5.85356C10.9512 5.6583 10.9512 5.34172 11.1464 5.14646Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CodeSandboxLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.71144 0.796902C7.57741 0.734357 7.42257 0.734357 7.28855 0.796902L1.28855 3.5969C1.11251 3.67905 0.999993 3.85573 0.999993 4.04999V10.95C0.999993 11.1443 1.11251 11.3209 1.28855 11.4031L7.28855 14.2031C7.42257 14.2656 7.57741 14.2656 7.71144 14.2031L13.7114 11.4031C13.8875 11.3209 14 11.1443 14 10.95V4.04999C14 3.85573 13.8875 3.67905 13.7114 3.5969L7.71144 0.796902ZM7.49999 3.15674L5.98039 2.51091L7.49999 1.80176L9.01959 2.51091L7.49999 3.15674ZM7.69556 4.16018L10.2382 3.07958L12.2719 4.02865L7.49999 6.05671L2.72808 4.02865L4.76181 3.07958L7.30442 4.16018C7.42939 4.2133 7.57059 4.2133 7.69556 4.16018ZM7.99999 6.93078L13 4.80578V7.92966L11.0821 8.8119C10.7273 8.97509 10.5 9.32988 10.5 9.72039V11.7982L7.99999 12.9649V6.93078ZM11.5 11.3316L13 10.6316V9.03039L11.5 9.72039V11.3316ZM6.99999 6.93078V12.9649L4.50231 11.7993V9.72036C4.50231 9.32985 4.27499 8.97506 3.92022 8.81187L1.99999 7.92856V4.80578L6.99999 6.93078ZM1.99999 10.6316L3.50231 11.3326L3.50231 9.72036L1.99999 9.02929V10.6316Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ColumnSpacingIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.00012 1.5C8.00012 1.22386 7.77626 1 7.50012 1C7.22398 1 7.00012 1.22386 7.00012 1.5V13.5C7.00012 13.7761 7.22398 14 7.50012 14C7.77626 14 8.00012 13.7761 8.00012 13.5V1.5ZM3.31812 5.818C3.49386 5.64227 3.49386 5.35734 3.31812 5.18161C3.14239 5.00587 2.85746 5.00587 2.68173 5.18161L0.681729 7.18161C0.505993 7.35734 0.505993 7.64227 0.681729 7.818L2.68173 9.818C2.85746 9.99374 3.14239 9.99374 3.31812 9.818C3.49386 9.64227 3.49386 9.35734 3.31812 9.18161L2.08632 7.9498H5.50017C5.7487 7.9498 5.95017 7.74833 5.95017 7.4998C5.95017 7.25128 5.7487 7.0498 5.50017 7.0498H2.08632L3.31812 5.818ZM12.3181 5.18161C12.1424 5.00587 11.8575 5.00587 11.6817 5.18161C11.506 5.35734 11.506 5.64227 11.6817 5.818L12.9135 7.0498H9.50017C9.25164 7.0498 9.05017 7.25128 9.05017 7.4998C9.05017 7.74833 9.25164 7.9498 9.50017 7.9498H12.9135L11.6817 9.18161C11.506 9.35734 11.506 9.64227 11.6817 9.818C11.8575 9.99374 12.1424 9.99374 12.3181 9.818L14.3181 7.818C14.4939 7.64227 14.4939 7.35734 14.3181 7.18161L12.3181 5.18161Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ColumnsIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.14998 14V1H0.849976V14H2.14998ZM6.14998 14V1H4.84998V14H6.14998ZM10.15 1V14H8.84998V1H10.15ZM14.15 14V1H12.85V14H14.15Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CommitIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.94969 7.49989C9.94969 8.85288 8.85288 9.94969 7.49989 9.94969C6.14691 9.94969 5.0501 8.85288 5.0501 7.49989C5.0501 6.14691 6.14691 5.0501 7.49989 5.0501C8.85288 5.0501 9.94969 6.14691 9.94969 7.49989ZM10.8632 8C10.6213 9.64055 9.20764 10.8997 7.49989 10.8997C5.79214 10.8997 4.37847 9.64055 4.13662 8H0.5C0.223858 8 0 7.77614 0 7.5C0 7.22386 0.223858 7 0.5 7H4.13659C4.37835 5.35935 5.79206 4.1001 7.49989 4.1001C9.20772 4.1001 10.6214 5.35935 10.8632 7H14.5C14.7761 7 15 7.22386 15 7.5C15 7.77614 14.7761 8 14.5 8H10.8632Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Component1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.67129 3.14634C4.47603 3.34161 4.47603 3.65819 4.67129 3.85345L7.14616 6.32833C7.34142 6.52359 7.65801 6.52359 7.85327 6.32833L10.3281 3.85345C10.5234 3.65819 10.5234 3.34161 10.3281 3.14634L7.85327 0.671471C7.65801 0.476209 7.34142 0.476209 7.14616 0.671471L4.67129 3.14634ZM7.49971 5.26766L5.73195 3.4999L7.49971 1.73213L9.26748 3.4999L7.49971 5.26766ZM8.67129 7.14634C8.47603 7.34161 8.47603 7.65819 8.67129 7.85345L11.1462 10.3283C11.3414 10.5236 11.658 10.5236 11.8533 10.3283L14.3281 7.85345C14.5234 7.65819 14.5234 7.34161 14.3281 7.14634L11.8533 4.67147C11.658 4.47621 11.3414 4.47621 11.1462 4.67147L8.67129 7.14634ZM11.4997 9.26766L9.73195 7.4999L11.4997 5.73213L13.2675 7.4999L11.4997 9.26766ZM4.67129 11.8535C4.47603 11.6582 4.47603 11.3416 4.67129 11.1463L7.14616 8.67147C7.34142 8.47621 7.65801 8.47621 7.85327 8.67147L10.3281 11.1463C10.5234 11.3416 10.5234 11.6582 10.3281 11.8535L7.85327 14.3283C7.65801 14.5236 7.34142 14.5236 7.14616 14.3283L4.67129 11.8535ZM5.73195 11.4999L7.49971 13.2677L9.26748 11.4999L7.49971 9.73213L5.73195 11.4999ZM0.671288 7.14649C0.476026 7.34175 0.476026 7.65834 0.671288 7.8536L3.14616 10.3285C3.34142 10.5237 3.65801 10.5237 3.85327 10.3285L6.32814 7.8536C6.5234 7.65834 6.5234 7.34175 6.32814 7.14649L3.85327 4.67162C3.65801 4.47636 3.34142 4.47636 3.14616 4.67162L0.671288 7.14649ZM3.49972 9.26781L1.73195 7.50005L3.49972 5.73228L5.26748 7.50005L3.49972 9.26781Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Component2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.87935 1H3.9H11.1H11.1207C11.5231 0.999994 11.8553 0.999989 12.1259 1.0221C12.407 1.04506 12.6653 1.09434 12.908 1.21799C13.2843 1.40973 13.5903 1.7157 13.782 2.09202C13.9057 2.33469 13.9549 2.59304 13.9779 2.87409C14 3.14468 14 3.47686 14 3.87934V3.9V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H3.9H3.87934C3.47686 14 3.14468 14 2.87409 13.9779C2.59304 13.9549 2.33469 13.9057 2.09202 13.782C1.7157 13.5903 1.40973 13.2843 1.21799 12.908C1.09434 12.6653 1.04506 12.407 1.0221 12.1259C0.999989 11.8553 0.999994 11.5231 1 11.1207V11.1207V11.1V3.9V3.87935V3.87934C0.999994 3.47686 0.999989 3.14468 1.0221 2.87409C1.04506 2.59304 1.09434 2.33469 1.21799 2.09202C1.40973 1.7157 1.7157 1.40973 2.09202 1.21799C2.33469 1.09434 2.59304 1.04506 2.87409 1.0221C3.14469 0.999989 3.47687 0.999994 3.87935 1ZM2.95552 2.01878C2.73631 2.03669 2.62421 2.06915 2.54601 2.10899C2.35785 2.20487 2.20487 2.35785 2.10899 2.54601C2.06915 2.62421 2.03669 2.73631 2.01878 2.95552C2.00039 3.18056 2 3.47171 2 3.9V7H7V2H3.9C3.47171 2 3.18056 2.00039 2.95552 2.01878ZM7 8H2V11.1C2 11.5283 2.00039 11.8194 2.01878 12.0445C2.03669 12.2637 2.06915 12.3758 2.10899 12.454C2.20487 12.6422 2.35785 12.7951 2.54601 12.891C2.62421 12.9309 2.73631 12.9633 2.95552 12.9812C3.18056 12.9996 3.47171 13 3.9 13H7V8ZM8 8H13V11.1C13 11.5283 12.9996 11.8194 12.9812 12.0445C12.9633 12.2637 12.9309 12.3758 12.891 12.454C12.7951 12.6422 12.6422 12.7951 12.454 12.891C12.3758 12.9309 12.2637 12.9633 12.0445 12.9812C11.8194 12.9996 11.5283 13 11.1 13H8V8ZM13 7H8V2H11.1C11.5283 2 11.8194 2.00039 12.0445 2.01878C12.2637 2.03669 12.3758 2.06915 12.454 2.10899C12.6422 2.20487 12.7951 2.35785 12.891 2.54601C12.9309 2.62421 12.9633 2.73631 12.9812 2.95552C12.9996 3.18056 13 3.47171 13 3.9V7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ComponentBooleanIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.85367 1.48956C7.65841 1.29429 7.34182 1.29429 7.14656 1.48956L1.48971 7.14641C1.29445 7.34167 1.29445 7.65825 1.48971 7.85352L7.14656 13.5104C7.34182 13.7056 7.65841 13.7056 7.85367 13.5104L13.5105 7.85352C13.7058 7.65825 13.7058 7.34167 13.5105 7.14641L7.85367 1.48956ZM7.5 2.55033L2.55037 7.49996L7.5 12.4496V2.55033Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ComponentInstanceIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.1465 1.48959C7.34176 1.29432 7.65835 1.29432 7.85361 1.48959L13.5105 7.14644C13.7057 7.3417 13.7057 7.65829 13.5105 7.85355L7.85361 13.5104C7.65835 13.7057 7.34176 13.7057 7.1465 13.5104L1.48965 7.85355C1.29439 7.65829 1.29439 7.3417 1.48965 7.14644L7.1465 1.48959ZM7.50005 2.55025L2.55031 7.49999L7.50005 12.4497L12.4498 7.49999L7.50005 2.55025Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ComponentNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.85361 1.48959C7.65835 1.29432 7.34176 1.29432 7.1465 1.48959L1.48965 7.14644C1.29439 7.3417 1.29439 7.65829 1.48965 7.85355L3.9645 10.3284L1.64644 12.6464C1.45118 12.8417 1.45118 13.1583 1.64644 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L4.6716 11.0355L7.1465 13.5104C7.34176 13.7057 7.65835 13.7057 7.85361 13.5104L13.5105 7.85355C13.7057 7.65829 13.7057 7.3417 13.5105 7.14644L11.0356 4.67154L13.3535 2.35355C13.5488 2.15829 13.5488 1.84171 13.3535 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L10.3285 3.96443L7.85361 1.48959ZM9.62135 4.67154L7.50005 2.55025L2.55031 7.49999L4.6716 9.62129L9.62135 4.67154ZM5.37871 10.3284L7.50005 12.4497L12.4498 7.49999L10.3285 5.37865L5.37871 10.3284Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ComponentPlaceholderIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.8034 7.14644C12.9986 6.95118 13.3152 6.95118 13.5105 7.14644C13.7057 7.3417 13.7057 7.65829 13.5105 7.85355C13.3152 8.04881 12.9986 8.04881 12.8034 7.85355C12.6081 7.65828 12.6081 7.3417 12.8034 7.14644ZM12.0962 8.56065C12.2915 8.75592 12.2915 9.0725 12.0962 9.26776C11.901 9.46302 11.5844 9.46302 11.3891 9.26776C11.1939 9.0725 11.1939 8.75592 11.3891 8.56065C11.5844 8.36539 11.901 8.36539 12.0962 8.56065ZM10.682 9.97487C10.8773 10.1701 10.8773 10.4867 10.682 10.682C10.4868 10.8772 10.1702 10.8772 9.97493 10.682C9.77967 10.4867 9.77967 10.1701 9.97493 9.97487C10.1702 9.7796 10.4868 9.7796 10.682 9.97487ZM9.26782 11.3891C9.46308 11.5843 9.46308 11.9009 9.26782 12.0962C9.07256 12.2915 8.75598 12.2915 8.56071 12.0962C8.36545 11.9009 8.36545 11.5843 8.56072 11.3891C8.75598 11.1938 9.07256 11.1938 9.26782 11.3891ZM7.1465 13.5104C6.95124 13.3151 6.95124 12.9986 7.1465 12.8033C7.17091 12.7789 7.19721 12.7575 7.22494 12.7392C7.41901 12.6111 7.68275 12.6324 7.85361 12.8033C8.04887 12.9986 8.04887 13.3151 7.85361 13.5104C7.65835 13.7057 7.34176 13.7057 7.1465 13.5104Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M2.90386 8.56065C2.7086 8.75592 2.7086 9.0725 2.90386 9.26776 3.09912 9.46302 3.41571 9.46302 3.61097 9.26776 3.80623 9.0725 3.80623 8.75592 3.61097 8.56065 3.41571 8.36539 3.09912 8.36539 2.90386 8.56065zM4.31807 9.97487C4.12281 10.1701 4.12281 10.4867 4.31807 10.682 4.51334 10.8772 4.82992 10.8772 5.02518 10.682 5.22044 10.4867 5.22044 10.1701 5.02518 9.97487 4.82992 9.7796 4.51334 9.7796 4.31807 9.97487zM5.73229 11.3891C5.53703 11.5843 5.53703 11.9009 5.73229 12.0962 5.92755 12.2914 6.24413 12.2915 6.43939 12.0962 6.63466 11.9009 6.63466 11.5843 6.43939 11.3891 6.24413 11.1938 5.92755 11.1938 5.73229 11.3891zM2.19675 7.85355C2.36761 7.68269 2.38897 7.41895 2.26082 7.22488 2.09046 6.96684 1.71063 6.92546 1.48965 7.14644 1.29439 7.3417 1.29439 7.65829 1.48965 7.85355 1.68491 8.04881 2.00149 8.04881 2.19675 7.85355zM3.61097 5.73223C3.41571 5.53696 3.09912 5.53696 2.90386 5.73223 2.7086 5.92749 2.7086 6.24407 2.90386 6.43933 3.09912 6.6346 3.41571 6.6346 3.61097 6.43933 3.80623 6.24407 3.80623 5.92749 3.61097 5.73223zM5.02518 4.31801C4.82992 4.12275 4.51334 4.12275 4.31807 4.31801 4.12281 4.51328 4.12281 4.82986 4.31807 5.02512 4.51334 5.22038 4.82992 5.22038 5.02518 5.02512 5.22044 4.82986 5.22044 4.51328 5.02518 4.31801zM6.43939 2.9038C6.24413 2.70854 5.92755 2.70854 5.73229 2.9038 5.53703 3.09906 5.53703 3.41564 5.73229 3.61091 5.92755 3.80617 6.24413 3.80617 6.43939 3.61091 6.63466 3.41564 6.63466 3.09906 6.43939 2.9038zM7.85361 1.48959C7.65835 1.29432 7.34176 1.29432 7.1465 1.48959 6.95124 1.68485 6.95124 2.00143 7.1465 2.19669 7.34176 2.39196 7.65835 2.39196 7.85361 2.19669 8.04887 2.00143 8.04887 1.68485 7.85361 1.48959zM9.26782 2.9038C9.07256 2.70854 8.75598 2.70854 8.56071 2.9038 8.36545 3.09906 8.36545 3.41564 8.56071 3.61091 8.75598 3.80617 9.07256 3.80617 9.26782 3.61091 9.46308 3.41564 9.46308 3.09906 9.26782 2.9038zM10.682 4.31801C10.4868 4.12275 10.1702 4.12275 9.97493 4.31801 9.77967 4.51328 9.77967 4.82986 9.97493 5.02512 10.1702 5.22038 10.4868 5.22038 10.682 5.02512 10.8773 4.82986 10.8773 4.51328 10.682 4.31801zM12.0962 5.73223C11.901 5.53696 11.5844 5.53696 11.3891 5.73223 11.1939 5.92749 11.1939 6.24407 11.3891 6.43933 11.5844 6.6346 11.901 6.6346 12.0962 6.43933 12.2915 6.24407 12.2915 5.92749 12.0962 5.73223z",
        fill: color
    }));
});
var ContainerIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 1.5C2 1.77614 1.77614 2 1.5 2C1.22386 2 1 1.77614 1 1.5C1 1.22386 1.22386 1 1.5 1C1.77614 1 2 1.22386 2 1.5ZM5 13H10V2L5 2L5 13ZM4 13C4 13.5523 4.44772 14 5 14H10C10.5523 14 11 13.5523 11 13V2C11 1.44772 10.5523 1 10 1H5C4.44772 1 4 1.44771 4 2V13ZM13.5 2C13.7761 2 14 1.77614 14 1.5C14 1.22386 13.7761 1 13.5 1C13.2239 1 13 1.22386 13 1.5C13 1.77614 13.2239 2 13.5 2ZM2 3.5C2 3.77614 1.77614 4 1.5 4C1.22386 4 1 3.77614 1 3.5C1 3.22386 1.22386 3 1.5 3C1.77614 3 2 3.22386 2 3.5ZM13.5 4C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3C13.2239 3 13 3.22386 13 3.5C13 3.77614 13.2239 4 13.5 4ZM2 5.5C2 5.77614 1.77614 6 1.5 6C1.22386 6 1 5.77614 1 5.5C1 5.22386 1.22386 5 1.5 5C1.77614 5 2 5.22386 2 5.5ZM13.5 6C13.7761 6 14 5.77614 14 5.5C14 5.22386 13.7761 5 13.5 5C13.2239 5 13 5.22386 13 5.5C13 5.77614 13.2239 6 13.5 6ZM2 7.5C2 7.77614 1.77614 8 1.5 8C1.22386 8 1 7.77614 1 7.5C1 7.22386 1.22386 7 1.5 7C1.77614 7 2 7.22386 2 7.5ZM13.5 8C13.7761 8 14 7.77614 14 7.5C14 7.22386 13.7761 7 13.5 7C13.2239 7 13 7.22386 13 7.5C13 7.77614 13.2239 8 13.5 8ZM2 9.5C2 9.77614 1.77614 10 1.5 10C1.22386 10 1 9.77614 1 9.5C1 9.22386 1.22386 9 1.5 9C1.77614 9 2 9.22386 2 9.5ZM13.5 10C13.7761 10 14 9.77614 14 9.5C14 9.22386 13.7761 9 13.5 9C13.2239 9 13 9.22386 13 9.5C13 9.77614 13.2239 10 13.5 10ZM2 11.5C2 11.7761 1.77614 12 1.5 12C1.22386 12 1 11.7761 1 11.5C1 11.2239 1.22386 11 1.5 11C1.77614 11 2 11.2239 2 11.5ZM13.5 12C13.7761 12 14 11.7761 14 11.5C14 11.2239 13.7761 11 13.5 11C13.2239 11 13 11.2239 13 11.5C13 11.7761 13.2239 12 13.5 12ZM2 13.5C2 13.7761 1.77614 14 1.5 14C1.22386 14 1 13.7761 1 13.5C1 13.2239 1.22386 13 1.5 13C1.77614 13 2 13.2239 2 13.5ZM13.5 14C13.7761 14 14 13.7761 14 13.5C14 13.2239 13.7761 13 13.5 13C13.2239 13 13 13.2239 13 13.5C13 13.7761 13.2239 14 13.5 14Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CookieIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.0697 1.76746C12.4807 1.21947 11.4605 0.454311 11.0495 1.0023C10.6385 1.55028 11.6588 2.31544 12.0697 1.76746ZM8.39263 1.07811C7.15585 0.950602 5.7823 1.16348 4.58433 1.70937C3.38552 2.25563 2.32735 3.15309 1.78844 4.41832C1.37574 5.38724 1.01715 6.28113 1.00088 7.44354C0.984724 8.59844 1.30522 9.96898 2.13174 11.928C2.61142 13.0649 4.03963 13.5446 5.13895 13.8079C6.40836 14.1119 7.80857 14.1914 8.6644 14.0742C9.36515 13.9782 10.1448 13.8284 10.7987 13.297C11.8977 12.4039 12.9009 11.3955 13.4994 10.3393C14.104 9.27221 14.3256 8.09207 13.7216 6.95324C13.5628 6.65373 13.316 6.57734 13.0412 6.4923C12.9374 6.46016 12.8295 6.42678 12.7209 6.37966C11.6211 5.90234 10.9646 5.34963 10.9135 5.02876C10.8656 4.72808 10.9221 4.51463 10.9811 4.29181C11.0129 4.17199 11.0453 4.04947 11.0626 3.90922C11.0838 3.73737 11.0814 3.33319 10.6996 3.12761C10.4048 2.96888 10.2164 2.65843 10.0407 2.36904C9.99742 2.29775 9.95492 2.22773 9.9118 2.16158C9.62634 1.72367 9.20769 1.16213 8.39263 1.07811ZM4.99899 2.61935C3.96483 3.09058 3.12554 3.83097 2.70846 4.81018C2.29808 5.77368 2.01406 6.50873 2.00079 7.45753C1.98741 8.41385 2.25043 9.6368 3.0531 11.5393C3.39181 12.3421 4.62167 12.6557 5.37186 12.8354C6.5493 13.1174 7.822 13.1802 8.52868 13.0834C9.21271 12.9897 9.74568 12.8642 10.1681 12.5209C11.229 11.6587 12.121 10.7435 12.6293 9.84635C12.9349 9.30709 13.5141 7.7028 12.6292 7.3873C10.7539 6.71875 10.262 6.06669 9.99011 5.41268C9.80915 4.97744 9.82868 4.52282 9.95741 4.07885L9.95741 4.07884C9.97662 4.0126 9.99538 3.94791 10.0334 3.88882C9.81857 3.73676 9.6515 3.55195 9.51464 3.3715C9.42876 3.25828 9.3469 3.12099 9.26197 2.97856C9.01866 2.57052 8.75018 2.12027 8.29008 2.07283C7.22889 1.96343 6.03398 2.14772 4.99899 2.61935ZM13.2081 3.77471C13.441 3.22671 12.4547 2.63606 12.0822 3.10163C11.5817 3.72732 12.9029 4.49281 13.2081 3.77471ZM14.3672 2.26031C14.9668 2.27493 15.1551 1.11603 14.5718 0.949371C13.8076 0.731026 13.5918 2.24139 14.3672 2.26031ZM14.2857 5.09098C14.8644 5.10004 15.0462 4.38222 14.4832 4.27899C13.7455 4.14375 13.5373 5.07927 14.2857 5.09098ZM6.9075 4.28672C6.46898 4.66754 6.0522 4.15185 5.97983 3.7365C5.86848 3.09744 6.33696 2.56856 6.94823 2.91156C7.43344 3.18382 7.26678 3.97471 6.9075 4.28672ZM4.94455 5.88184C5.40885 5.41754 4.59567 4.57013 4.11425 5.05154C3.83338 5.33242 4.00936 5.65376 4.23744 5.88184C4.43271 6.0771 4.74929 6.0771 4.94455 5.88184ZM6.97716 6.71984C7.31181 7.38914 8.48804 6.79159 7.99413 6.14788C7.86519 5.97983 7.68657 5.9494 7.62145 5.94207C7.21217 5.89601 6.76349 6.2925 6.97716 6.71984ZM6.98798 8.72461C7.14066 9.1188 7.51122 9.3187 7.91915 9.1633C8.27434 9.02799 8.33186 8.39689 8.17175 8.07427C8.02331 7.77514 7.63956 7.67793 7.33747 7.79417C6.98512 7.92976 6.85672 8.38708 6.98576 8.71889L6.98798 8.72461ZM10.3885 8.84081C10.7575 8.6566 11.4617 8.82771 11.4617 9.31199C11.4617 9.71286 10.9587 10.2165 10.5634 10.2826C10.1813 10.3465 9.70515 9.97581 9.76648 9.57718C9.81445 9.26539 10.1217 8.97401 10.3885 8.84081ZM7.56704 10.8432C7.33461 10.7502 7.14353 10.8601 7.11437 10.8769L7.11279 10.8778C6.90782 10.9949 6.71383 11.2439 6.6747 11.4842C6.59018 12.0034 7.13199 12.1239 7.52661 12.0987C8.2074 12.0553 8.06547 11.0426 7.56704 10.8432ZM4.8805 10.8932C5.0674 10.7723 5.15658 10.5363 5.08293 10.3153C4.93046 9.79687 4.3246 9.71252 3.96561 10.1297C3.79336 10.3299 3.80749 10.6274 3.99214 10.8105L3.99495 10.814L3.9979 10.8176C4.22025 11.0942 4.63624 11.1857 4.8805 10.8932ZM3.04695 7.81318C3.33147 8.0977 3.60077 8.15067 3.98443 8.05859C4.60826 7.90887 4.13814 6.24299 3.047 6.87296C2.70939 7.06788 2.86716 7.63339 3.04695 7.81318Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CopyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 9.50006C1 10.3285 1.67157 11.0001 2.5 11.0001H4L4 10.0001H2.5C2.22386 10.0001 2 9.7762 2 9.50006L2 2.50006C2 2.22392 2.22386 2.00006 2.5 2.00006L9.5 2.00006C9.77614 2.00006 10 2.22392 10 2.50006V4.00002H5.5C4.67158 4.00002 4 4.67159 4 5.50002V12.5C4 13.3284 4.67158 14 5.5 14H12.5C13.3284 14 14 13.3284 14 12.5V5.50002C14 4.67159 13.3284 4.00002 12.5 4.00002H11V2.50006C11 1.67163 10.3284 1.00006 9.5 1.00006H2.5C1.67157 1.00006 1 1.67163 1 2.50006V9.50006ZM5 5.50002C5 5.22388 5.22386 5.00002 5.5 5.00002H12.5C12.7761 5.00002 13 5.22388 13 5.50002V12.5C13 12.7762 12.7761 13 12.5 13H5.5C5.22386 13 5 12.7762 5 12.5V5.50002Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CornerBottomLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.87737 12H9.9H11.5C11.7761 12 12 11.7761 12 11.5C12 11.2239 11.7761 11 11.5 11H9.9C8.77164 11 7.95545 10.9996 7.31352 10.9472C6.67744 10.8952 6.25662 10.7946 5.91103 10.6185C5.25247 10.283 4.71703 9.74753 4.38148 9.08897C4.20539 8.74338 4.10481 8.32256 4.05284 7.68648C4.00039 7.04455 4 6.22836 4 5.1V3.5C4 3.22386 3.77614 3 3.5 3C3.22386 3 3 3.22386 3 3.5V5.1V5.12263C3 6.22359 3 7.08052 3.05616 7.76791C3.11318 8.46584 3.23058 9.0329 3.49047 9.54296C3.9219 10.3897 4.61031 11.0781 5.45704 11.5095C5.9671 11.7694 6.53416 11.8868 7.23209 11.9438C7.91948 12 8.77641 12 9.87737 12Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CornerBottomRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.12263 12H5.1H3.5C3.22386 12 3 11.7761 3 11.5C3 11.2239 3.22386 11 3.5 11H5.1C6.22836 11 7.04455 10.9996 7.68648 10.9472C8.32256 10.8952 8.74338 10.7946 9.08897 10.6185C9.74753 10.283 10.283 9.74753 10.6185 9.08897C10.7946 8.74338 10.8952 8.32256 10.9472 7.68648C10.9996 7.04455 11 6.22836 11 5.1V3.5C11 3.22386 11.2239 3 11.5 3C11.7761 3 12 3.22386 12 3.5V5.1V5.12263C12 6.22359 12 7.08052 11.9438 7.76791C11.8868 8.46584 11.7694 9.0329 11.5095 9.54296C11.0781 10.3897 10.3897 11.0781 9.54296 11.5095C9.0329 11.7694 8.46584 11.8868 7.76791 11.9438C7.08052 12 6.22359 12 5.12263 12Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CornerTopLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.87737 3H9.9H11.5C11.7761 3 12 3.22386 12 3.5C12 3.77614 11.7761 4 11.5 4H9.9C8.77164 4 7.95545 4.00039 7.31352 4.05284C6.67744 4.10481 6.25662 4.20539 5.91103 4.38148C5.25247 4.71703 4.71703 5.25247 4.38148 5.91103C4.20539 6.25662 4.10481 6.67744 4.05284 7.31352C4.00039 7.95545 4 8.77164 4 9.9V11.5C4 11.7761 3.77614 12 3.5 12C3.22386 12 3 11.7761 3 11.5V9.9V9.87737C3 8.77641 3 7.91948 3.05616 7.23209C3.11318 6.53416 3.23058 5.9671 3.49047 5.45704C3.9219 4.61031 4.61031 3.9219 5.45704 3.49047C5.9671 3.23058 6.53416 3.11318 7.23209 3.05616C7.91948 3 8.77641 3 9.87737 3Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CornerTopRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.12263 3H5.1H3.5C3.22386 3 3 3.22386 3 3.5C3 3.77614 3.22386 4 3.5 4H5.1C6.22836 4 7.04455 4.00039 7.68648 4.05284C8.32256 4.10481 8.74338 4.20539 9.08897 4.38148C9.74753 4.71703 10.283 5.25247 10.6185 5.91103C10.7946 6.25662 10.8952 6.67744 10.9472 7.31352C10.9996 7.95545 11 8.77164 11 9.9V11.5C11 11.7761 11.2239 12 11.5 12C11.7761 12 12 11.7761 12 11.5V9.9V9.87737C12 8.77641 12 7.91948 11.9438 7.23209C11.8868 6.53416 11.7694 5.9671 11.5095 5.45704C11.0781 4.61031 10.3897 3.9219 9.54296 3.49047C9.0329 3.23058 8.46584 3.11318 7.76791 3.05616C7.08052 3 6.22359 3 5.12263 3Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CornersIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.1 3C10.5283 3 10.8194 3.00039 11.0445 3.01878C11.2637 3.03669 11.3758 3.06915 11.454 3.10899C11.6422 3.20487 11.7951 3.35785 11.891 3.54601C11.9309 3.62421 11.9633 3.73631 11.9812 3.95552C11.9996 4.18056 12 4.47171 12 4.9V5.5C12 5.77614 12.2239 6 12.5 6C12.7761 6 13 5.77614 13 5.5V4.87935C13 4.47687 13 4.14469 12.9779 3.87409C12.9549 3.59304 12.9057 3.33469 12.782 3.09202C12.5903 2.7157 12.2843 2.40973 11.908 2.21799C11.6653 2.09434 11.407 2.04506 11.1259 2.0221C10.8553 1.99999 10.5231 1.99999 10.1207 2H10.1206H10.1H9.5C9.22386 2 9 2.22386 9 2.5C9 2.77614 9.22386 3 9.5 3H10.1ZM5.5 2H4.87935H4.87934C4.47686 1.99999 4.14468 1.99999 3.87409 2.0221C3.59304 2.04506 3.33469 2.09434 3.09202 2.21799C2.7157 2.40973 2.40973 2.7157 2.21799 3.09202C2.09434 3.33469 2.04506 3.59304 2.0221 3.87409C1.99999 4.14468 1.99999 4.47686 2 4.87934V4.87935V5.5C2 5.77614 2.22386 6 2.5 6C2.77614 6 3 5.77614 3 5.5V4.9C3 4.47171 3.00039 4.18056 3.01878 3.95552C3.03669 3.73631 3.06915 3.62421 3.10899 3.54601C3.20487 3.35785 3.35785 3.20487 3.54601 3.10899C3.62421 3.06915 3.73631 3.03669 3.95552 3.01878C4.18056 3.00039 4.47171 3 4.9 3H5.5C5.77614 3 6 2.77614 6 2.5C6 2.22386 5.77614 2 5.5 2ZM13 9.5C13 9.22386 12.7761 9 12.5 9C12.2239 9 12 9.22386 12 9.5V10.1C12 10.5283 11.9996 10.8194 11.9812 11.0445C11.9633 11.2637 11.9309 11.3758 11.891 11.454C11.7951 11.6422 11.6422 11.7951 11.454 11.891C11.3758 11.9309 11.2637 11.9633 11.0445 11.9812C10.8194 11.9996 10.5283 12 10.1 12H9.5C9.22386 12 9 12.2239 9 12.5C9 12.7761 9.22386 13 9.5 13H10.1206C10.5231 13 10.8553 13 11.1259 12.9779C11.407 12.9549 11.6653 12.9057 11.908 12.782C12.2843 12.5903 12.5903 12.2843 12.782 11.908C12.9057 11.6653 12.9549 11.407 12.9779 11.1259C13 10.8553 13 10.5231 13 10.1206V9.5ZM2.5 9C2.77614 9 3 9.22386 3 9.5V10.1C3 10.5283 3.00039 10.8194 3.01878 11.0445C3.03669 11.2637 3.06915 11.3758 3.10899 11.454C3.20487 11.6422 3.35785 11.7951 3.54601 11.891C3.62421 11.9309 3.73631 11.9633 3.95552 11.9812C4.18056 11.9996 4.47171 12 4.9 12H5.5C5.77614 12 6 12.2239 6 12.5C6 12.7761 5.77614 13 5.5 13H4.87935C4.47687 13 4.14469 13 3.87409 12.9779C3.59304 12.9549 3.33469 12.9057 3.09202 12.782C2.7157 12.5903 2.40973 12.2843 2.21799 11.908C2.09434 11.6653 2.04506 11.407 2.0221 11.1259C1.99999 10.8553 1.99999 10.5231 2 10.1207V10.1206V10.1V9.5C2 9.22386 2.22386 9 2.5 9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CountdownTimerIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.15 7.49998C13.15 4.66458 10.9402 1.84998 7.50002 1.84998C4.7217 1.84998 3.34851 3.90636 2.76336 4.99997H4.5C4.77614 4.99997 5 5.22383 5 5.49997C5 5.77611 4.77614 5.99997 4.5 5.99997H1.5C1.22386 5.99997 1 5.77611 1 5.49997V2.49997C1 2.22383 1.22386 1.99997 1.5 1.99997C1.77614 1.99997 2 2.22383 2 2.49997V4.31318C2.70453 3.07126 4.33406 0.849976 7.50002 0.849976C11.5628 0.849976 14.15 4.18537 14.15 7.49998C14.15 10.8146 11.5628 14.15 7.50002 14.15C5.55618 14.15 3.93778 13.3808 2.78548 12.2084C2.16852 11.5806 1.68668 10.839 1.35816 10.0407C1.25306 9.78536 1.37488 9.49315 1.63024 9.38806C1.8856 9.28296 2.17781 9.40478 2.2829 9.66014C2.56374 10.3425 2.97495 10.9745 3.4987 11.5074C4.47052 12.4963 5.83496 13.15 7.50002 13.15C10.9402 13.15 13.15 10.3354 13.15 7.49998ZM7 10V5.00001H8V10H7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CounterClockwiseClockIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.15 7.49998C13.15 4.66458 10.9402 1.84998 7.50002 1.84998C4.72167 1.84998 3.34849 3.9064 2.76335 5H4.5C4.77614 5 5 5.22386 5 5.5C5 5.77614 4.77614 6 4.5 6H1.5C1.22386 6 1 5.77614 1 5.5V2.5C1 2.22386 1.22386 2 1.5 2C1.77614 2 2 2.22386 2 2.5V4.31318C2.70453 3.07126 4.33406 0.849976 7.50002 0.849976C11.5628 0.849976 14.15 4.18537 14.15 7.49998C14.15 10.8146 11.5628 14.15 7.50002 14.15C5.55618 14.15 3.93778 13.3808 2.78548 12.2084C2.16852 11.5806 1.68668 10.839 1.35816 10.0407C1.25306 9.78536 1.37488 9.49315 1.63024 9.38806C1.8856 9.28296 2.17781 9.40478 2.2829 9.66014C2.56374 10.3425 2.97495 10.9745 3.4987 11.5074C4.47052 12.4963 5.83496 13.15 7.50002 13.15C10.9402 13.15 13.15 10.3354 13.15 7.49998ZM7.5 4.00001C7.77614 4.00001 8 4.22387 8 4.50001V7.29291L9.85355 9.14646C10.0488 9.34172 10.0488 9.65831 9.85355 9.85357C9.65829 10.0488 9.34171 10.0488 9.14645 9.85357L7.14645 7.85357C7.05268 7.7598 7 7.63262 7 7.50001V4.50001C7 4.22387 7.22386 4.00001 7.5 4.00001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CropIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.5 8.00684e-07C3.77614 7.88614e-07 4 0.223859 4 0.500001L4 3.00006L11.5 3.00006C11.7761 3.00006 12 3.22392 12 3.50006L12 11.0001L14.5 11C14.7761 11 15 11.2238 15 11.5C15 11.7761 14.7762 12 14.5 12L12 12.0001L12 14.5C12 14.7761 11.7761 15 11.5 15C11.2239 15 11 14.7761 11 14.5L11 12.0001L3.5 12.0001C3.22386 12.0001 3 11.7762 3 11.5001L3 4.00005L0.499989 4C0.223847 4 -6.10541e-06 3.77613 -5.02576e-07 3.49999C5.13006e-06 3.22385 0.223867 3 0.50001 3L3 3.00005L3 0.500001C3 0.223859 3.22386 8.12755e-07 3.5 8.00684e-07ZM4 4.00006L4 11.0001L11 11.0001L11 4.00006L4 4.00006Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Cross1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.8536 2.85355C13.0488 2.65829 13.0488 2.34171 12.8536 2.14645C12.6583 1.95118 12.3417 1.95118 12.1464 2.14645L7.5 6.79289L2.85355 2.14645C2.65829 1.95118 2.34171 1.95118 2.14645 2.14645C1.95118 2.34171 1.95118 2.65829 2.14645 2.85355L6.79289 7.5L2.14645 12.1464C1.95118 12.3417 1.95118 12.6583 2.14645 12.8536C2.34171 13.0488 2.65829 13.0488 2.85355 12.8536L7.5 8.20711L12.1464 12.8536C12.3417 13.0488 12.6583 13.0488 12.8536 12.8536C13.0488 12.6583 13.0488 12.3417 12.8536 12.1464L8.20711 7.5L12.8536 2.85355Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Cross2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CrossCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704ZM9.85358 5.14644C10.0488 5.3417 10.0488 5.65829 9.85358 5.85355L8.20713 7.49999L9.85358 9.14644C10.0488 9.3417 10.0488 9.65829 9.85358 9.85355C9.65832 10.0488 9.34173 10.0488 9.14647 9.85355L7.50002 8.2071L5.85358 9.85355C5.65832 10.0488 5.34173 10.0488 5.14647 9.85355C4.95121 9.65829 4.95121 9.3417 5.14647 9.14644L6.79292 7.49999L5.14647 5.85355C4.95121 5.65829 4.95121 5.3417 5.14647 5.14644C5.34173 4.95118 5.65832 4.95118 5.85358 5.14644L7.50002 6.79289L9.14647 5.14644C9.34173 4.95118 9.65832 4.95118 9.85358 5.14644Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Crosshair1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.50207C0.877075 3.84319 3.84319 0.877075 7.50208 0.877075C11.1609 0.877075 14.1271 3.84319 14.1271 7.50207C14.1271 11.1609 11.1609 14.1271 7.50208 14.1271C3.84319 14.1271 0.877075 11.1609 0.877075 7.50207ZM1.84898 7.00003C2.0886 4.26639 4.26639 2.0886 7.00003 1.84898V4.50003C7.00003 4.77617 7.22388 5.00003 7.50003 5.00003C7.77617 5.00003 8.00003 4.77617 8.00003 4.50003V1.84862C10.7356 2.08643 12.9154 4.26502 13.1552 7.00003H10.5C10.2239 7.00003 10 7.22388 10 7.50003C10 7.77617 10.2239 8.00003 10.5 8.00003H13.1555C12.9176 10.7369 10.7369 12.9176 8.00003 13.1555V10.5C8.00003 10.2239 7.77617 10 7.50003 10C7.22388 10 7.00003 10.2239 7.00003 10.5V13.1552C4.26502 12.9154 2.08643 10.7356 1.84862 8.00003H4.50003C4.77617 8.00003 5.00003 7.77617 5.00003 7.50003C5.00003 7.22388 4.77617 7.00003 4.50003 7.00003H1.84898Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Crosshair2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V1.80687C10.6922 2.0935 12.8167 4.28012 13.0068 7H14.5C14.7761 7 15 7.22386 15 7.5C15 7.77614 14.7761 8 14.5 8H12.9888C12.7094 10.6244 10.6244 12.7094 8 12.9888V14.5C8 14.7761 7.77614 15 7.5 15C7.22386 15 7 14.7761 7 14.5V13.0068C4.28012 12.8167 2.0935 10.6922 1.80687 8H0.5C0.223858 8 0 7.77614 0 7.5C0 7.22386 0.223858 7 0.5 7H1.78886C1.98376 4.21166 4.21166 1.98376 7 1.78886V0.5C7 0.223858 7.22386 0 7.5 0ZM8 12.0322V9.5C8 9.22386 7.77614 9 7.5 9C7.22386 9 7 9.22386 7 9.5V12.054C4.80517 11.8689 3.04222 10.1668 2.76344 8H5.5C5.77614 8 6 7.77614 6 7.5C6 7.22386 5.77614 7 5.5 7H2.7417C2.93252 4.73662 4.73662 2.93252 7 2.7417V5.5C7 5.77614 7.22386 6 7.5 6C7.77614 6 8 5.77614 8 5.5V2.76344C10.1668 3.04222 11.8689 4.80517 12.054 7H9.5C9.22386 7 9 7.22386 9 7.5C9 7.77614 9.22386 8 9.5 8H12.0322C11.7621 10.0991 10.0991 11.7621 8 12.0322Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CrumpledPaperIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.60913 0.0634287C4.39082 0.0088505 4.16575 0.12393 4.08218 0.332867L3.1538 2.6538L0.832866 3.58218C0.702884 3.63417 0.604504 3.7437 0.566705 3.87849C0.528906 4.01329 0.555994 4.158 0.639992 4.26999L2.01148 6.09864L1.06343 9.89085C1.00944 10.1068 1.12145 10.3298 1.32691 10.4154L4.20115 11.613L5.62557 13.7496C5.73412 13.9124 5.93545 13.9864 6.12362 13.9327L9.62362 12.9327C9.62988 12.9309 9.63611 12.929 9.64229 12.9269L12.6423 11.9269C12.7923 11.8769 12.905 11.7519 12.9393 11.5976L13.9393 7.09761C13.9776 6.92506 13.9114 6.74605 13.77 6.63999L11.95 5.27499V2.99999C11.95 2.82955 11.8537 2.67373 11.7012 2.5975L8.70124 1.0975C8.67187 1.08282 8.64098 1.07139 8.60913 1.06343L4.60913 0.0634287ZM11.4323 6.01173L12.7748 7.01858L10.2119 9.15429C10.1476 9.20786 10.0995 9.2783 10.0731 9.35769L9.25382 11.8155L7.73849 10.8684C7.52774 10.7367 7.25011 10.8007 7.11839 11.0115C6.98667 11.2222 7.05074 11.4999 7.26149 11.6316L8.40341 12.3453L6.19221 12.9771L4.87441 11.0004C4.82513 10.9265 4.75508 10.8688 4.67307 10.8346L2.03046 9.73352L2.85134 6.44999H4.99999C5.24852 6.44999 5.44999 6.24852 5.44999 5.99999C5.44999 5.75146 5.24852 5.54999 4.99999 5.54999H2.72499L1.7123 4.19974L3.51407 3.47903L6.35769 4.4269C6.53655 4.48652 6.73361 4.42832 6.85138 4.28111L8.62413 2.06518L11.05 3.27811V5.19533L8.83287 6.08218C8.70996 6.13134 8.61494 6.23212 8.57308 6.35769L8.07308 7.85769C7.99449 8.09346 8.12191 8.34831 8.35769 8.4269C8.59346 8.50549 8.84831 8.37807 8.9269 8.14229L9.3609 6.84029L11.4323 6.01173ZM7.71052 1.76648L6.34462 3.47386L4.09505 2.724L4.77192 1.03183L7.71052 1.76648ZM10.2115 11.7885L12.116 11.1537L12.7745 8.19034L10.8864 9.76374L10.2115 11.7885Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CubeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.28856 0.796908C7.42258 0.734364 7.57742 0.734364 7.71144 0.796908L13.7114 3.59691C13.8875 3.67906 14 3.85574 14 4.05V10.95C14 11.1443 13.8875 11.3209 13.7114 11.4031L7.71144 14.2031C7.57742 14.2656 7.42258 14.2656 7.28856 14.2031L1.28856 11.4031C1.11252 11.3209 1 11.1443 1 10.95V4.05C1 3.85574 1.11252 3.67906 1.28856 3.59691L7.28856 0.796908ZM2 4.80578L7 6.93078V12.9649L2 10.6316V4.80578ZM8 12.9649L13 10.6316V4.80578L8 6.93078V12.9649ZM7.5 6.05672L12.2719 4.02866L7.5 1.80176L2.72809 4.02866L7.5 6.05672Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CursorArrowIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.29227 0.048984C3.47033 -0.032338 3.67946 -0.00228214 3.8274 0.125891L12.8587 7.95026C13.0134 8.08432 13.0708 8.29916 13.0035 8.49251C12.9362 8.68586 12.7578 8.81866 12.5533 8.82768L9.21887 8.97474L11.1504 13.2187C11.2648 13.47 11.1538 13.7664 10.9026 13.8808L8.75024 14.8613C8.499 14.9758 8.20255 14.8649 8.08802 14.6137L6.15339 10.3703L3.86279 12.7855C3.72196 12.934 3.50487 12.9817 3.31479 12.9059C3.1247 12.8301 3 12.6461 3 12.4414V0.503792C3 0.308048 3.11422 0.130306 3.29227 0.048984ZM4 1.59852V11.1877L5.93799 9.14425C6.05238 9.02363 6.21924 8.96776 6.38319 8.99516C6.54715 9.02256 6.68677 9.12965 6.75573 9.2809L8.79056 13.7441L10.0332 13.178L8.00195 8.71497C7.93313 8.56376 7.94391 8.38824 8.03072 8.24659C8.11753 8.10494 8.26903 8.01566 8.435 8.00834L11.2549 7.88397L4 1.59852Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var CursorTextIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.5 1C4.22386 1 4 1.22386 4 1.5C4 1.77614 4.22386 2 4.5 2C5.42215 2 6.0399 2.23054 6.42075 2.56379C6.79286 2.88939 7 3.36626 7 4V7H5.75C5.47386 7 5.25 7.22386 5.25 7.5C5.25 7.77614 5.47386 8 5.75 8H7V11C7 11.6337 6.79286 12.1106 6.42075 12.4362C6.0399 12.7695 5.42215 13 4.5 13C4.22386 13 4 13.2239 4 13.5C4 13.7761 4.22386 14 4.5 14C5.57785 14 6.4601 13.7305 7.07925 13.1888C7.24168 13.0467 7.38169 12.8896 7.5 12.7198C7.61832 12.8896 7.75832 13.0467 7.92075 13.1888C8.5399 13.7305 9.42215 14 10.5 14C10.7761 14 11 13.7761 11 13.5C11 13.2239 10.7761 13 10.5 13C9.57785 13 8.9601 12.7695 8.57925 12.4362C8.20714 12.1106 8 11.6337 8 11V8H9.25C9.52614 8 9.75 7.77614 9.75 7.5C9.75 7.22386 9.52614 7 9.25 7H8V4C8 3.36626 8.20714 2.88939 8.57925 2.56379C8.9601 2.23054 9.57785 2 10.5 2C10.7761 2 11 1.77614 11 1.5C11 1.22386 10.7761 1 10.5 1C9.42215 1 8.5399 1.26946 7.92075 1.81121C7.75832 1.95333 7.61832 2.11043 7.5 2.28023C7.38168 2.11043 7.24168 1.95333 7.07925 1.81121C6.4601 1.26946 5.57785 1 4.5 1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DashIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 7.5C5 7.22386 5.22386 7 5.5 7H9.5C9.77614 7 10 7.22386 10 7.5C10 7.77614 9.77614 8 9.5 8H5.5C5.22386 8 5 7.77614 5 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DashboardIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.8 1L2.74967 0.99997C2.52122 0.999752 2.32429 0.999564 2.14983 1.04145C1.60136 1.17312 1.17312 1.60136 1.04145 2.14983C0.999564 2.32429 0.999752 2.52122 0.99997 2.74967L1 2.8V5.2L0.99997 5.25033C0.999752 5.47878 0.999564 5.67572 1.04145 5.85017C1.17312 6.39864 1.60136 6.82688 2.14983 6.95856C2.32429 7.00044 2.52122 7.00025 2.74967 7.00003L2.8 7H5.2L5.25033 7.00003C5.47878 7.00025 5.67572 7.00044 5.85017 6.95856C6.39864 6.82688 6.82688 6.39864 6.95856 5.85017C7.00044 5.67572 7.00025 5.47878 7.00003 5.25033L7 5.2V2.8L7.00003 2.74967C7.00025 2.52122 7.00044 2.32429 6.95856 2.14983C6.82688 1.60136 6.39864 1.17312 5.85017 1.04145C5.67572 0.999564 5.47878 0.999752 5.25033 0.99997L5.2 1H2.8ZM2.38328 2.01382C2.42632 2.00348 2.49222 2 2.8 2H5.2C5.50779 2 5.57369 2.00348 5.61672 2.01382C5.79955 2.05771 5.94229 2.20045 5.98619 2.38328C5.99652 2.42632 6 2.49222 6 2.8V5.2C6 5.50779 5.99652 5.57369 5.98619 5.61672C5.94229 5.79955 5.79955 5.94229 5.61672 5.98619C5.57369 5.99652 5.50779 6 5.2 6H2.8C2.49222 6 2.42632 5.99652 2.38328 5.98619C2.20045 5.94229 2.05771 5.79955 2.01382 5.61672C2.00348 5.57369 2 5.50779 2 5.2V2.8C2 2.49222 2.00348 2.42632 2.01382 2.38328C2.05771 2.20045 2.20045 2.05771 2.38328 2.01382ZM9.8 1L9.74967 0.99997C9.52122 0.999752 9.32429 0.999564 9.14983 1.04145C8.60136 1.17312 8.17312 1.60136 8.04145 2.14983C7.99956 2.32429 7.99975 2.52122 7.99997 2.74967L8 2.8V5.2L7.99997 5.25033C7.99975 5.47878 7.99956 5.67572 8.04145 5.85017C8.17312 6.39864 8.60136 6.82688 9.14983 6.95856C9.32429 7.00044 9.52122 7.00025 9.74967 7.00003L9.8 7H12.2L12.2503 7.00003C12.4788 7.00025 12.6757 7.00044 12.8502 6.95856C13.3986 6.82688 13.8269 6.39864 13.9586 5.85017C14.0004 5.67572 14.0003 5.47878 14 5.25033L14 5.2V2.8L14 2.74967C14.0003 2.52122 14.0004 2.32429 13.9586 2.14983C13.8269 1.60136 13.3986 1.17312 12.8502 1.04145C12.6757 0.999564 12.4788 0.999752 12.2503 0.99997L12.2 1H9.8ZM9.38328 2.01382C9.42632 2.00348 9.49222 2 9.8 2H12.2C12.5078 2 12.5737 2.00348 12.6167 2.01382C12.7995 2.05771 12.9423 2.20045 12.9862 2.38328C12.9965 2.42632 13 2.49222 13 2.8V5.2C13 5.50779 12.9965 5.57369 12.9862 5.61672C12.9423 5.79955 12.7995 5.94229 12.6167 5.98619C12.5737 5.99652 12.5078 6 12.2 6H9.8C9.49222 6 9.42632 5.99652 9.38328 5.98619C9.20045 5.94229 9.05771 5.79955 9.01382 5.61672C9.00348 5.57369 9 5.50779 9 5.2V2.8C9 2.49222 9.00348 2.42632 9.01382 2.38328C9.05771 2.20045 9.20045 2.05771 9.38328 2.01382ZM2.74967 7.99997L2.8 8H5.2L5.25033 7.99997C5.47878 7.99975 5.67572 7.99956 5.85017 8.04145C6.39864 8.17312 6.82688 8.60136 6.95856 9.14983C7.00044 9.32429 7.00025 9.52122 7.00003 9.74967L7 9.8V12.2L7.00003 12.2503C7.00025 12.4788 7.00044 12.6757 6.95856 12.8502C6.82688 13.3986 6.39864 13.8269 5.85017 13.9586C5.67572 14.0004 5.47878 14.0003 5.25033 14L5.2 14H2.8L2.74967 14C2.52122 14.0003 2.32429 14.0004 2.14983 13.9586C1.60136 13.8269 1.17312 13.3986 1.04145 12.8502C0.999564 12.6757 0.999752 12.4788 0.99997 12.2503L1 12.2V9.8L0.99997 9.74967C0.999752 9.52122 0.999564 9.32429 1.04145 9.14983C1.17312 8.60136 1.60136 8.17312 2.14983 8.04145C2.32429 7.99956 2.52122 7.99975 2.74967 7.99997ZM2.8 9C2.49222 9 2.42632 9.00348 2.38328 9.01382C2.20045 9.05771 2.05771 9.20045 2.01382 9.38328C2.00348 9.42632 2 9.49222 2 9.8V12.2C2 12.5078 2.00348 12.5737 2.01382 12.6167C2.05771 12.7995 2.20045 12.9423 2.38328 12.9862C2.42632 12.9965 2.49222 13 2.8 13H5.2C5.50779 13 5.57369 12.9965 5.61672 12.9862C5.79955 12.9423 5.94229 12.7995 5.98619 12.6167C5.99652 12.5737 6 12.5078 6 12.2V9.8C6 9.49222 5.99652 9.42632 5.98619 9.38328C5.94229 9.20045 5.79955 9.05771 5.61672 9.01382C5.57369 9.00348 5.50779 9 5.2 9H2.8ZM9.8 8L9.74967 7.99997C9.52122 7.99975 9.32429 7.99956 9.14983 8.04145C8.60136 8.17312 8.17312 8.60136 8.04145 9.14983C7.99956 9.32429 7.99975 9.52122 7.99997 9.74967L8 9.8V12.2L7.99997 12.2503C7.99975 12.4788 7.99956 12.6757 8.04145 12.8502C8.17312 13.3986 8.60136 13.8269 9.14983 13.9586C9.32429 14.0004 9.52122 14.0003 9.74967 14L9.8 14H12.2L12.2503 14C12.4788 14.0003 12.6757 14.0004 12.8502 13.9586C13.3986 13.8269 13.8269 13.3986 13.9586 12.8502C14.0004 12.6757 14.0003 12.4788 14 12.2503L14 12.2V9.8L14 9.74967C14.0003 9.52122 14.0004 9.32429 13.9586 9.14983C13.8269 8.60136 13.3986 8.17312 12.8502 8.04145C12.6757 7.99956 12.4788 7.99975 12.2503 7.99997L12.2 8H9.8ZM9.38328 9.01382C9.42632 9.00348 9.49222 9 9.8 9H12.2C12.5078 9 12.5737 9.00348 12.6167 9.01382C12.7995 9.05771 12.9423 9.20045 12.9862 9.38328C12.9965 9.42632 13 9.49222 13 9.8V12.2C13 12.5078 12.9965 12.5737 12.9862 12.6167C12.9423 12.7995 12.7995 12.9423 12.6167 12.9862C12.5737 12.9965 12.5078 13 12.2 13H9.8C9.49222 13 9.42632 12.9965 9.38328 12.9862C9.20045 12.9423 9.05771 12.7995 9.01382 12.6167C9.00348 12.5737 9 12.5078 9 12.2V9.8C9 9.49222 9.00348 9.42632 9.01382 9.38328C9.05771 9.20045 9.20045 9.05771 9.38328 9.01382Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DimensionsIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.00014 2.73895C3.00014 2.94698 2.76087 3.06401 2.59666 2.93628L1.00386 1.69744C0.875177 1.59735 0.875177 1.40286 1.00386 1.30277L2.59666 0.063928C2.76087 -0.0637944 3.00014 0.0532293 3.00014 0.261266V1.00012H9.00009V0.261296C9.00009 0.0532591 9.23936 -0.0637646 9.40358 0.0639578L10.9964 1.3028C11.1251 1.40289 11.1251 1.59738 10.9964 1.69747L9.40358 2.93631C9.23936 3.06404 9.00009 2.94701 9.00009 2.73898V2.00012H3.00014V2.73895ZM9.50002 4.99998H2.50002C2.22388 4.99998 2.00002 5.22384 2.00002 5.49998V12.5C2.00002 12.7761 2.22388 13 2.50002 13H9.50002C9.77616 13 10 12.7761 10 12.5V5.49998C10 5.22384 9.77616 4.99998 9.50002 4.99998ZM2.50002 3.99998C1.67159 3.99998 1.00002 4.67156 1.00002 5.49998V12.5C1.00002 13.3284 1.67159 14 2.50002 14H9.50002C10.3284 14 11 13.3284 11 12.5V5.49998C11 4.67156 10.3284 3.99998 9.50002 3.99998H2.50002ZM14.7389 6.00001H14V12H14.7389C14.9469 12 15.064 12.2393 14.9362 12.4035L13.6974 13.9963C13.5973 14.125 13.4028 14.125 13.3027 13.9963L12.0639 12.4035C11.9362 12.2393 12.0532 12 12.2612 12H13V6.00001H12.2612C12.0532 6.00001 11.9361 5.76074 12.0639 5.59653L13.3027 4.00373C13.4028 3.87505 13.5973 3.87505 13.6974 4.00374L14.9362 5.59653C15.0639 5.76074 14.9469 6.00001 14.7389 6.00001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DiscIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.877075C3.84222 0.877075 0.877075 3.84222 0.877075 7.49991C0.877075 11.1576 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1576 14.1227 7.49991C14.1227 3.84222 11.1576 0.877075 7.49991 0.877075ZM1.82708 7.49991C1.82708 4.36689 4.36689 1.82707 7.49991 1.82707C10.6329 1.82707 13.1727 4.36689 13.1727 7.49991C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49991ZM8.37287 7.50006C8.37287 7.98196 7.98221 8.37263 7.5003 8.37263C7.01839 8.37263 6.62773 7.98196 6.62773 7.50006C6.62773 7.01815 7.01839 6.62748 7.5003 6.62748C7.98221 6.62748 8.37287 7.01815 8.37287 7.50006ZM9.32287 7.50006C9.32287 8.50664 8.50688 9.32263 7.5003 9.32263C6.49372 9.32263 5.67773 8.50664 5.67773 7.50006C5.67773 6.49348 6.49372 5.67748 7.5003 5.67748C8.50688 5.67748 9.32287 6.49348 9.32287 7.50006Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DividerHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DividerVerticalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 2C7.77614 2 8 2.22386 8 2.5L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 2.5C7 2.22386 7.22386 2 7.5 2Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DotIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 9.125C8.39746 9.125 9.125 8.39746 9.125 7.5C9.125 6.60254 8.39746 5.875 7.5 5.875C6.60254 5.875 5.875 6.60254 5.875 7.5C5.875 8.39746 6.60254 9.125 7.5 9.125ZM7.5 10.125C8.94975 10.125 10.125 8.94975 10.125 7.5C10.125 6.05025 8.94975 4.875 7.5 4.875C6.05025 4.875 4.875 6.05025 4.875 7.5C4.875 8.94975 6.05025 10.125 7.5 10.125Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DotFilledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.875 7.5C9.875 8.81168 8.81168 9.875 7.5 9.875C6.18832 9.875 5.125 8.81168 5.125 7.5C5.125 6.18832 6.18832 5.125 7.5 5.125C8.81168 5.125 9.875 6.18832 9.875 7.5Z",
        fill: color
    }));
});
var DotsHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM12.5 8.625C13.1213 8.625 13.625 8.12132 13.625 7.5C13.625 6.87868 13.1213 6.375 12.5 6.375C11.8787 6.375 11.375 6.87868 11.375 7.5C11.375 8.12132 11.8787 8.625 12.5 8.625Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DotsVerticalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.625 2.5C8.625 3.12132 8.12132 3.625 7.5 3.625C6.87868 3.625 6.375 3.12132 6.375 2.5C6.375 1.87868 6.87868 1.375 7.5 1.375C8.12132 1.375 8.625 1.87868 8.625 2.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM7.5 13.625C8.12132 13.625 8.625 13.1213 8.625 12.5C8.625 11.8787 8.12132 11.375 7.5 11.375C6.87868 11.375 6.375 11.8787 6.375 12.5C6.375 13.1213 6.87868 13.625 7.5 13.625Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DoubleArrowDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.85355 2.14645C3.65829 1.95118 3.34171 1.95118 3.14645 2.14645C2.95118 2.34171 2.95118 2.65829 3.14645 2.85355L7.14645 6.85355C7.34171 7.04882 7.65829 7.04882 7.85355 6.85355L11.8536 2.85355C12.0488 2.65829 12.0488 2.34171 11.8536 2.14645C11.6583 1.95118 11.3417 1.95118 11.1464 2.14645L7.5 5.79289L3.85355 2.14645ZM3.85355 8.14645C3.65829 7.95118 3.34171 7.95118 3.14645 8.14645C2.95118 8.34171 2.95118 8.65829 3.14645 8.85355L7.14645 12.8536C7.34171 13.0488 7.65829 13.0488 7.85355 12.8536L11.8536 8.85355C12.0488 8.65829 12.0488 8.34171 11.8536 8.14645C11.6583 7.95118 11.3417 7.95118 11.1464 8.14645L7.5 11.7929L3.85355 8.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DoubleArrowLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.85355 3.85355C7.04882 3.65829 7.04882 3.34171 6.85355 3.14645C6.65829 2.95118 6.34171 2.95118 6.14645 3.14645L2.14645 7.14645C1.95118 7.34171 1.95118 7.65829 2.14645 7.85355L6.14645 11.8536C6.34171 12.0488 6.65829 12.0488 6.85355 11.8536C7.04882 11.6583 7.04882 11.3417 6.85355 11.1464L3.20711 7.5L6.85355 3.85355ZM12.8536 3.85355C13.0488 3.65829 13.0488 3.34171 12.8536 3.14645C12.6583 2.95118 12.3417 2.95118 12.1464 3.14645L8.14645 7.14645C7.95118 7.34171 7.95118 7.65829 8.14645 7.85355L12.1464 11.8536C12.3417 12.0488 12.6583 12.0488 12.8536 11.8536C13.0488 11.6583 13.0488 11.3417 12.8536 11.1464L9.20711 7.5L12.8536 3.85355Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DoubleArrowRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.14645 11.1464C1.95118 11.3417 1.95118 11.6583 2.14645 11.8536C2.34171 12.0488 2.65829 12.0488 2.85355 11.8536L6.85355 7.85355C7.04882 7.65829 7.04882 7.34171 6.85355 7.14645L2.85355 3.14645C2.65829 2.95118 2.34171 2.95118 2.14645 3.14645C1.95118 3.34171 1.95118 3.65829 2.14645 3.85355L5.79289 7.5L2.14645 11.1464ZM8.14645 11.1464C7.95118 11.3417 7.95118 11.6583 8.14645 11.8536C8.34171 12.0488 8.65829 12.0488 8.85355 11.8536L12.8536 7.85355C13.0488 7.65829 13.0488 7.34171 12.8536 7.14645L8.85355 3.14645C8.65829 2.95118 8.34171 2.95118 8.14645 3.14645C7.95118 3.34171 7.95118 3.65829 8.14645 3.85355L11.7929 7.5L8.14645 11.1464Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DoubleArrowUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.1464 6.85355C11.3417 7.04882 11.6583 7.04882 11.8536 6.85355C12.0488 6.65829 12.0488 6.34171 11.8536 6.14645L7.85355 2.14645C7.65829 1.95118 7.34171 1.95118 7.14645 2.14645L3.14645 6.14645C2.95118 6.34171 2.95118 6.65829 3.14645 6.85355C3.34171 7.04882 3.65829 7.04882 3.85355 6.85355L7.5 3.20711L11.1464 6.85355ZM11.1464 12.8536C11.3417 13.0488 11.6583 13.0488 11.8536 12.8536C12.0488 12.6583 12.0488 12.3417 11.8536 12.1464L7.85355 8.14645C7.65829 7.95118 7.34171 7.95118 7.14645 8.14645L3.14645 12.1464C2.95118 12.3417 2.95118 12.6583 3.14645 12.8536C3.34171 13.0488 3.65829 13.0488 3.85355 12.8536L7.5 9.20711L11.1464 12.8536Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DownloadIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.50005 1.04999C7.74858 1.04999 7.95005 1.25146 7.95005 1.49999V8.41359L10.1819 6.18179C10.3576 6.00605 10.6425 6.00605 10.8182 6.18179C10.994 6.35753 10.994 6.64245 10.8182 6.81819L7.81825 9.81819C7.64251 9.99392 7.35759 9.99392 7.18185 9.81819L4.18185 6.81819C4.00611 6.64245 4.00611 6.35753 4.18185 6.18179C4.35759 6.00605 4.64251 6.00605 4.81825 6.18179L7.05005 8.41359V1.49999C7.05005 1.25146 7.25152 1.04999 7.50005 1.04999ZM2.5 10C2.77614 10 3 10.2239 3 10.5V12C3 12.5539 3.44565 13 3.99635 13H11.0012C11.5529 13 12 12.5528 12 12V10.5C12 10.2239 12.2239 10 12.5 10C12.7761 10 13 10.2239 13 10.5V12C13 13.1041 12.1062 14 11.0012 14H3.99635C2.89019 14 2 13.103 2 12V10.5C2 10.2239 2.22386 10 2.5 10Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DragHandleDots1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "2.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "4.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "6.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "8.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "10.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "4.5",
        cy: "12.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "2.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "4.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "6.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "8.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "10.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "6.5",
        cy: "12.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "2.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "4.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "6.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "8.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "10.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "8.499",
        cy: "12.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "2.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "4.5",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "6.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "8.499",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "10.498",
        r: ".6",
        fill: color
    }), _react.createElement("circle", {
        cx: "10.499",
        cy: "12.498",
        r: ".6",
        fill: color
    }));
});
var DragHandleDots2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.5 4.625C6.12132 4.625 6.625 4.12132 6.625 3.5C6.625 2.87868 6.12132 2.375 5.5 2.375C4.87868 2.375 4.375 2.87868 4.375 3.5C4.375 4.12132 4.87868 4.625 5.5 4.625ZM9.5 4.625C10.1213 4.625 10.625 4.12132 10.625 3.5C10.625 2.87868 10.1213 2.375 9.5 2.375C8.87868 2.375 8.375 2.87868 8.375 3.5C8.375 4.12132 8.87868 4.625 9.5 4.625ZM10.625 7.5C10.625 8.12132 10.1213 8.625 9.5 8.625C8.87868 8.625 8.375 8.12132 8.375 7.5C8.375 6.87868 8.87868 6.375 9.5 6.375C10.1213 6.375 10.625 6.87868 10.625 7.5ZM5.5 8.625C6.12132 8.625 6.625 8.12132 6.625 7.5C6.625 6.87868 6.12132 6.375 5.5 6.375C4.87868 6.375 4.375 6.87868 4.375 7.5C4.375 8.12132 4.87868 8.625 5.5 8.625ZM10.625 11.5C10.625 12.1213 10.1213 12.625 9.5 12.625C8.87868 12.625 8.375 12.1213 8.375 11.5C8.375 10.8787 8.87868 10.375 9.5 10.375C10.1213 10.375 10.625 10.8787 10.625 11.5ZM5.5 12.625C6.12132 12.625 6.625 12.1213 6.625 11.5C6.625 10.8787 6.12132 10.375 5.5 10.375C4.87868 10.375 4.375 10.8787 4.375 11.5C4.375 12.1213 4.87868 12.625 5.5 12.625Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DragHandleHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.49998 4.09998C2.27906 4.09998 2.09998 4.27906 2.09998 4.49998C2.09998 4.72089 2.27906 4.89998 2.49998 4.89998H12.5C12.7209 4.89998 12.9 4.72089 12.9 4.49998C12.9 4.27906 12.7209 4.09998 12.5 4.09998H2.49998ZM2.49998 6.09998C2.27906 6.09998 2.09998 6.27906 2.09998 6.49998C2.09998 6.72089 2.27906 6.89998 2.49998 6.89998H12.5C12.7209 6.89998 12.9 6.72089 12.9 6.49998C12.9 6.27906 12.7209 6.09998 12.5 6.09998H2.49998ZM2.09998 8.49998C2.09998 8.27906 2.27906 8.09998 2.49998 8.09998H12.5C12.7209 8.09998 12.9 8.27906 12.9 8.49998C12.9 8.72089 12.7209 8.89998 12.5 8.89998H2.49998C2.27906 8.89998 2.09998 8.72089 2.09998 8.49998ZM2.49998 10.1C2.27906 10.1 2.09998 10.2791 2.09998 10.5C2.09998 10.7209 2.27906 10.9 2.49998 10.9H12.5C12.7209 10.9 12.9 10.7209 12.9 10.5C12.9 10.2791 12.7209 10.1 12.5 10.1H2.49998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DragHandleVerticalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.09998 12.5C4.09998 12.7209 4.27906 12.9 4.49998 12.9C4.72089 12.9 4.89998 12.7209 4.89998 12.5L4.89998 2.50002C4.89998 2.27911 4.72089 2.10003 4.49998 2.10003C4.27906 2.10003 4.09998 2.27911 4.09998 2.50002L4.09998 12.5ZM6.09998 12.5C6.09998 12.7209 6.27906 12.9 6.49998 12.9C6.72089 12.9 6.89998 12.7209 6.89998 12.5L6.89998 2.50002C6.89998 2.27911 6.72089 2.10003 6.49998 2.10003C6.27906 2.10003 6.09998 2.27911 6.09998 2.50002L6.09998 12.5ZM8.49998 12.9C8.27906 12.9 8.09998 12.7209 8.09998 12.5L8.09998 2.50002C8.09998 2.27911 8.27906 2.10002 8.49998 2.10002C8.72089 2.10002 8.89998 2.27911 8.89998 2.50002L8.89998 12.5C8.89998 12.7209 8.72089 12.9 8.49998 12.9ZM10.1 12.5C10.1 12.7209 10.2791 12.9 10.5 12.9C10.7209 12.9 10.9 12.7209 10.9 12.5L10.9 2.50002C10.9 2.27911 10.7209 2.10002 10.5 2.10002C10.2791 2.10002 10.1 2.27911 10.1 2.50002L10.1 12.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DrawingPinIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.3285 1.13607C10.1332 0.940809 9.81662 0.940808 9.62136 1.13607C9.42609 1.33133 9.42609 1.64792 9.62136 1.84318L10.2744 2.49619L5.42563 6.13274L4.31805 5.02516C4.12279 4.8299 3.80621 4.8299 3.61095 5.02516C3.41569 5.22042 3.41569 5.537 3.61095 5.73226L5.02516 7.14648L6.08582 8.20714L2.81545 11.4775C2.62019 11.6728 2.62019 11.9894 2.81545 12.1846C3.01072 12.3799 3.3273 12.3799 3.52256 12.1846L6.79293 8.91425L7.85359 9.97491L9.2678 11.3891C9.46306 11.5844 9.77965 11.5844 9.97491 11.3891C10.1702 11.1939 10.1702 10.8773 9.97491 10.682L8.86733 9.57443L12.5039 4.7257L13.1569 5.37871C13.3522 5.57397 13.6687 5.57397 13.864 5.37871C14.0593 5.18345 14.0593 4.86687 13.864 4.6716L12.8033 3.61094L11.3891 2.19673L10.3285 1.13607ZM6.13992 6.84702L10.9887 3.21047L11.7896 4.01142L8.15305 8.86015L6.13992 6.84702Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DrawingPinFilledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.62129 1.13607C9.81656 0.940808 10.1331 0.940809 10.3284 1.13607L11.3891 2.19673L12.8033 3.61094L13.8639 4.6716C14.0592 4.86687 14.0592 5.18345 13.8639 5.37871C13.6687 5.57397 13.3521 5.57397 13.1568 5.37871L12.5038 4.7257L8.86727 9.57443L9.97485 10.682C10.1701 10.8773 10.1701 11.1939 9.97485 11.3891C9.77959 11.5844 9.463 11.5844 9.26774 11.3891L7.85353 9.97491L6.79287 8.91425L3.5225 12.1846C3.32724 12.3799 3.01065 12.3799 2.81539 12.1846C2.62013 11.9894 2.62013 11.6728 2.81539 11.4775L6.08576 8.20714L5.0251 7.14648L3.61089 5.73226C3.41563 5.537 3.41562 5.22042 3.61089 5.02516C3.80615 4.8299 4.12273 4.8299 4.31799 5.02516L5.42557 6.13274L10.2743 2.49619L9.62129 1.84318C9.42603 1.64792 9.42603 1.33133 9.62129 1.13607Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M9.62129 1.13607C9.81656 0.940808 10.1331 0.940809 10.3284 1.13607L11.3891 2.19673L12.8033 3.61094L13.8639 4.6716C14.0592 4.86687 14.0592 5.18345 13.8639 5.37871C13.6687 5.57397 13.3521 5.57397 13.1568 5.37871L12.5038 4.7257L8.86727 9.57443L9.97485 10.682C10.1701 10.8773 10.1701 11.1939 9.97485 11.3891C9.77959 11.5844 9.463 11.5844 9.26774 11.3891L7.85353 9.97491L6.79287 8.91425L3.5225 12.1846C3.32724 12.3799 3.01065 12.3799 2.81539 12.1846C2.62013 11.9894 2.62013 11.6728 2.81539 11.4775L6.08576 8.20714L5.0251 7.14648L3.61089 5.73226C3.41563 5.537 3.41562 5.22042 3.61089 5.02516C3.80615 4.8299 4.12273 4.8299 4.31799 5.02516L5.42557 6.13274L10.2743 2.49619L9.62129 1.84318C9.42603 1.64792 9.42603 1.33133 9.62129 1.13607Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var DropdownMenuIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49999 3.09998C7.27907 3.09998 7.09999 3.27906 7.09999 3.49998C7.09999 3.72089 7.27907 3.89998 7.49999 3.89998H14.5C14.7209 3.89998 14.9 3.72089 14.9 3.49998C14.9 3.27906 14.7209 3.09998 14.5 3.09998H7.49999ZM7.49998 5.1C7.27907 5.1 7.09998 5.27908 7.09998 5.5C7.09998 5.72091 7.27907 5.9 7.49998 5.9H14.5C14.7209 5.9 14.9 5.72091 14.9 5.5C14.9 5.27908 14.7209 5.1 14.5 5.1H7.49998ZM7.1 7.5C7.1 7.27908 7.27909 7.1 7.5 7.1H14.5C14.7209 7.1 14.9 7.27908 14.9 7.5C14.9 7.72091 14.7209 7.9 14.5 7.9H7.5C7.27909 7.9 7.1 7.72091 7.1 7.5ZM7.49998 9.1C7.27907 9.1 7.09998 9.27908 7.09998 9.5C7.09998 9.72091 7.27907 9.9 7.49998 9.9H14.5C14.7209 9.9 14.9 9.72091 14.9 9.5C14.9 9.27908 14.7209 9.1 14.5 9.1H7.49998ZM7.09998 11.5C7.09998 11.2791 7.27907 11.1 7.49998 11.1H14.5C14.7209 11.1 14.9 11.2791 14.9 11.5C14.9 11.7209 14.7209 11.9 14.5 11.9H7.49998C7.27907 11.9 7.09998 11.7209 7.09998 11.5ZM2.5 9.25003L5 6.00003H0L2.5 9.25003Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EnterIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.5 1C4.22386 1 4 1.22386 4 1.5C4 1.77614 4.22386 2 4.5 2H12V13H4.5C4.22386 13 4 13.2239 4 13.5C4 13.7761 4.22386 14 4.5 14H12C12.5523 14 13 13.5523 13 13V2C13 1.44772 12.5523 1 12 1H4.5ZM6.60355 4.89645C6.40829 4.70118 6.09171 4.70118 5.89645 4.89645C5.70118 5.09171 5.70118 5.40829 5.89645 5.60355L7.29289 7H0.5C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H7.29289L5.89645 9.39645C5.70118 9.59171 5.70118 9.90829 5.89645 10.1036C6.09171 10.2988 6.40829 10.2988 6.60355 10.1036L8.85355 7.85355C9.04882 7.65829 9.04882 7.34171 8.85355 7.14645L6.60355 4.89645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EnterFullScreenIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 2.5C2 2.22386 2.22386 2 2.5 2H5.5C5.77614 2 6 2.22386 6 2.5C6 2.77614 5.77614 3 5.5 3H3V5.5C3 5.77614 2.77614 6 2.5 6C2.22386 6 2 5.77614 2 5.5V2.5ZM9 2.5C9 2.22386 9.22386 2 9.5 2H12.5C12.7761 2 13 2.22386 13 2.5V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3H9.5C9.22386 3 9 2.77614 9 2.5ZM2.5 9C2.77614 9 3 9.22386 3 9.5V12H5.5C5.77614 12 6 12.2239 6 12.5C6 12.7761 5.77614 13 5.5 13H2.5C2.22386 13 2 12.7761 2 12.5V9.5C2 9.22386 2.22386 9 2.5 9ZM12.5 9C12.7761 9 13 9.22386 13 9.5V12.5C13 12.7761 12.7761 13 12.5 13H9.5C9.22386 13 9 12.7761 9 12.5C9 12.2239 9.22386 12 9.5 12H12V9.5C12 9.22386 12.2239 9 12.5 9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EnvelopeClosedIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 2C0.447715 2 0 2.44772 0 3V12C0 12.5523 0.447715 13 1 13H14C14.5523 13 15 12.5523 15 12V3C15 2.44772 14.5523 2 14 2H1ZM1 3L14 3V3.92494C13.9174 3.92486 13.8338 3.94751 13.7589 3.99505L7.5 7.96703L1.24112 3.99505C1.16621 3.94751 1.0826 3.92486 1 3.92494V3ZM1 4.90797V12H14V4.90797L7.74112 8.87995C7.59394 8.97335 7.40606 8.97335 7.25888 8.87995L1 4.90797Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EnvelopeOpenIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.94721 0.164594C7.66569 0.0238299 7.33431 0.0238302 7.05279 0.164594L0.552786 3.41459C0.214002 3.58399 0 3.93025 0 4.30902V12C0 12.5523 0.447715 13 1 13H14C14.5523 13 15 12.5523 15 12V4.30902C15 3.93025 14.786 3.58399 14.4472 3.41459L7.94721 0.164594ZM13.5689 4.09349L7.5 1.05902L1.43105 4.09349L7.5 7.29136L13.5689 4.09349ZM1 4.88366V12H14V4.88366L7.70977 8.19813C7.57848 8.26731 7.42152 8.26731 7.29023 8.19813L1 4.88366Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ExclamationTriangleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.4449 0.608765C8.0183 -0.107015 6.9817 -0.107015 6.55509 0.608766L0.161178 11.3368C-0.275824 12.07 0.252503 13 1.10608 13H13.8939C14.7475 13 15.2758 12.07 14.8388 11.3368L8.4449 0.608765ZM7.4141 1.12073C7.45288 1.05566 7.54712 1.05566 7.5859 1.12073L13.9798 11.8488C14.0196 11.9154 13.9715 12 13.8939 12H1.10608C1.02849 12 0.980454 11.9154 1.02018 11.8488L7.4141 1.12073ZM6.8269 4.48611C6.81221 4.10423 7.11783 3.78663 7.5 3.78663C7.88217 3.78663 8.18778 4.10423 8.1731 4.48612L8.01921 8.48701C8.00848 8.766 7.7792 8.98664 7.5 8.98664C7.2208 8.98664 6.99151 8.766 6.98078 8.48701L6.8269 4.48611ZM8.24989 10.476C8.24989 10.8902 7.9141 11.226 7.49989 11.226C7.08567 11.226 6.74989 10.8902 6.74989 10.476C6.74989 10.0618 7.08567 9.72599 7.49989 9.72599C7.9141 9.72599 8.24989 10.0618 8.24989 10.476Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ExitIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 1C2.44771 1 2 1.44772 2 2V13C2 13.5523 2.44772 14 3 14H10.5C10.7761 14 11 13.7761 11 13.5C11 13.2239 10.7761 13 10.5 13H3V2L10.5 2C10.7761 2 11 1.77614 11 1.5C11 1.22386 10.7761 1 10.5 1H3ZM12.6036 4.89645C12.4083 4.70118 12.0917 4.70118 11.8964 4.89645C11.7012 5.09171 11.7012 5.40829 11.8964 5.60355L13.2929 7H6.5C6.22386 7 6 7.22386 6 7.5C6 7.77614 6.22386 8 6.5 8H13.2929L11.8964 9.39645C11.7012 9.59171 11.7012 9.90829 11.8964 10.1036C12.0917 10.2988 12.4083 10.2988 12.6036 10.1036L14.8536 7.85355C15.0488 7.65829 15.0488 7.34171 14.8536 7.14645L12.6036 4.89645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ExitFullScreenIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.5 2C5.77614 2 6 2.22386 6 2.5V5.5C6 5.77614 5.77614 6 5.5 6H2.5C2.22386 6 2 5.77614 2 5.5C2 5.22386 2.22386 5 2.5 5H5V2.5C5 2.22386 5.22386 2 5.5 2ZM9.5 2C9.77614 2 10 2.22386 10 2.5V5H12.5C12.7761 5 13 5.22386 13 5.5C13 5.77614 12.7761 6 12.5 6H9.5C9.22386 6 9 5.77614 9 5.5V2.5C9 2.22386 9.22386 2 9.5 2ZM2 9.5C2 9.22386 2.22386 9 2.5 9H5.5C5.77614 9 6 9.22386 6 9.5V12.5C6 12.7761 5.77614 13 5.5 13C5.22386 13 5 12.7761 5 12.5V10H2.5C2.22386 10 2 9.77614 2 9.5ZM9 9.5C9 9.22386 9.22386 9 9.5 9H12.5C12.7761 9 13 9.22386 13 9.5C13 9.77614 12.7761 10 12.5 10H10V12.5C10 12.7761 9.77614 13 9.5 13C9.22386 13 9 12.7761 9 12.5V9.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ExternalLinkIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EyeClosedIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14.7649 6.07595C14.9991 6.22231 15.0703 6.53078 14.9239 6.76495C14.4849 7.46742 13.9632 8.10644 13.3702 8.66304L14.5712 9.86405C14.7664 10.0593 14.7664 10.3759 14.5712 10.5712C14.3759 10.7664 14.0593 10.7664 13.8641 10.5712L12.6011 9.30816C11.8049 9.90282 10.9089 10.3621 9.93374 10.651L10.383 12.3276C10.4544 12.5944 10.2961 12.8685 10.0294 12.94C9.76266 13.0115 9.4885 12.8532 9.41703 12.5864L8.95916 10.8775C8.48742 10.958 8.00035 10.9999 7.5 10.9999C6.99964 10.9999 6.51257 10.958 6.04082 10.8775L5.58299 12.5864C5.51153 12.8532 5.23737 13.0115 4.97063 12.94C4.7039 12.8685 4.5456 12.5944 4.61706 12.3277L5.06624 10.651C4.09111 10.3621 3.19503 9.90281 2.3989 9.30814L1.1359 10.5711C0.940638 10.7664 0.624058 10.7664 0.428797 10.5711C0.233537 10.3759 0.233537 10.0593 0.428797 9.86404L1.62982 8.66302C1.03682 8.10643 0.515113 7.46742 0.0760677 6.76495C-0.0702867 6.53078 0.000898544 6.22231 0.235064 6.07595C0.46923 5.9296 0.777703 6.00078 0.924057 6.23495C1.40354 7.00212 1.989 7.68056 2.66233 8.2427C2.67315 8.25096 2.6837 8.25971 2.69397 8.26897C4.00897 9.35527 5.65536 9.9999 7.5 9.9999C10.3078 9.9999 12.6563 8.50629 14.0759 6.23495C14.2223 6.00078 14.5308 5.9296 14.7649 6.07595Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EyeNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.3536 2.35355C13.5488 2.15829 13.5488 1.84171 13.3536 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L10.6828 3.61012C9.70652 3.21671 8.63759 3 7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C0.902945 9.08812 2.02314 10.1861 3.36061 10.9323L1.64645 12.6464C1.45118 12.8417 1.45118 13.1583 1.64645 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L4.31723 11.3899C5.29348 11.7833 6.36241 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C14.0971 5.9119 12.9769 4.81391 11.6394 4.06771L13.3536 2.35355ZM9.90428 4.38861C9.15332 4.1361 8.34759 4 7.5 4C4.80285 4 2.52952 5.37816 1.09622 7.50001C1.87284 8.6497 2.89609 9.58106 4.09974 10.1931L9.90428 4.38861ZM5.09572 10.6114L10.9003 4.80685C12.1039 5.41894 13.1272 6.35031 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11C6.65241 11 5.84668 10.8639 5.09572 10.6114Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var EyeOpenIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 11C4.80285 11 2.52952 9.62184 1.09622 7.50001C2.52952 5.37816 4.80285 4 7.5 4C10.1971 4 12.4705 5.37816 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11ZM7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C1.65639 10.2936 4.30786 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C13.3436 4.70638 10.6921 3 7.5 3ZM7.5 9.5C8.60457 9.5 9.5 8.60457 9.5 7.5C9.5 6.39543 8.60457 5.5 7.5 5.5C6.39543 5.5 5.5 6.39543 5.5 7.5C5.5 8.60457 6.39543 9.5 7.5 9.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FaceIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82708 7.49972C1.82708 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82708 10.6327 1.82708 7.49972ZM5.03747 9.21395C4.87949 8.98746 4.56782 8.93193 4.34133 9.08991C4.11484 9.24789 4.05931 9.55956 4.21729 9.78605C4.93926 10.8211 6.14033 11.5 7.50004 11.5C8.85974 11.5 10.0608 10.8211 10.7828 9.78605C10.9408 9.55956 10.8852 9.24789 10.6587 9.08991C10.4323 8.93193 10.1206 8.98746 9.9626 9.21395C9.41963 9.99238 8.51907 10.5 7.50004 10.5C6.481 10.5 5.58044 9.99238 5.03747 9.21395ZM5.37503 6.84998C5.85828 6.84998 6.25003 6.45815 6.25003 5.97498C6.25003 5.4918 5.85828 5.09998 5.37503 5.09998C4.89179 5.09998 4.50003 5.4918 4.50003 5.97498C4.50003 6.45815 4.89179 6.84998 5.37503 6.84998ZM10.5 5.97498C10.5 6.45815 10.1083 6.84998 9.62503 6.84998C9.14179 6.84998 8.75003 6.45815 8.75003 5.97498C8.75003 5.4918 9.14179 5.09998 9.62503 5.09998C10.1083 5.09998 10.5 5.4918 10.5 5.97498Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FigmaLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.00005 2.04999H5.52505C4.71043 2.04999 4.05005 2.71037 4.05005 3.52499C4.05005 4.33961 4.71043 4.99999 5.52505 4.99999H7.00005V2.04999ZM7.00005 1.04999H8.00005H9.47505C10.842 1.04999 11.95 2.15808 11.95 3.52499C11.95 4.33163 11.5642 5.04815 10.9669 5.49999C11.5642 5.95184 11.95 6.66836 11.95 7.475C11.95 8.8419 10.842 9.95 9.47505 9.95C8.92236 9.95 8.41198 9.76884 8.00005 9.46266V9.95L8.00005 11.425C8.00005 12.7919 6.89195 13.9 5.52505 13.9C4.15814 13.9 3.05005 12.7919 3.05005 11.425C3.05005 10.6183 3.43593 9.90184 4.03317 9.44999C3.43593 8.99814 3.05005 8.28163 3.05005 7.475C3.05005 6.66836 3.43594 5.95184 4.03319 5.5C3.43594 5.04815 3.05005 4.33163 3.05005 3.52499C3.05005 2.15808 4.15814 1.04999 5.52505 1.04999H7.00005ZM8.00005 2.04999V4.99999H9.47505C10.2897 4.99999 10.95 4.33961 10.95 3.52499C10.95 2.71037 10.2897 2.04999 9.47505 2.04999H8.00005ZM5.52505 8.94998H7.00005L7.00005 7.4788L7.00005 7.475L7.00005 7.4712V6H5.52505C4.71043 6 4.05005 6.66038 4.05005 7.475C4.05005 8.28767 4.70727 8.94684 5.5192 8.94999L5.52505 8.94998ZM4.05005 11.425C4.05005 10.6123 4.70727 9.95315 5.5192 9.94999L5.52505 9.95H7.00005L7.00005 11.425C7.00005 12.2396 6.33967 12.9 5.52505 12.9C4.71043 12.9 4.05005 12.2396 4.05005 11.425ZM8.00005 7.47206C8.00164 6.65879 8.66141 6 9.47505 6C10.2897 6 10.95 6.66038 10.95 7.475C10.95 8.28962 10.2897 8.95 9.47505 8.95C8.66141 8.95 8.00164 8.29121 8.00005 7.47794V7.47206Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FileIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.5 2C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V6H8.5C8.22386 6 8 5.77614 8 5.5V2H3.5ZM9 2.70711L11.2929 5H9V2.70711ZM2 2.5C2 1.67157 2.67157 1 3.5 1H8.5C8.63261 1 8.75979 1.05268 8.85355 1.14645L12.8536 5.14645C12.9473 5.24021 13 5.36739 13 5.5V12.5C13 13.3284 12.3284 14 11.5 14H3.5C2.67157 14 2 13.3284 2 12.5V2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FileMinusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 2.5C3 2.22386 3.22386 2 3.5 2H9.29289L12 4.70711V12.5C12 12.7761 11.7761 13 11.5 13H3.5C3.22386 13 3 12.7761 3 12.5V2.5ZM3.5 1C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V4.60355C13 4.40464 12.921 4.21388 12.7803 4.07322L9.85355 1.14645C9.75979 1.05268 9.63261 1 9.5 1H3.5ZM5.25 7C4.97386 7 4.75 7.22386 4.75 7.5C4.75 7.77614 4.97386 8 5.25 8H9.75C10.0261 8 10.25 7.77614 10.25 7.5C10.25 7.22386 10.0261 7 9.75 7H5.25Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FilePlusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.5 2C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V4.70711L9.29289 2H3.5ZM2 2.5C2 1.67157 2.67157 1 3.5 1H9.5C9.63261 1 9.75979 1.05268 9.85355 1.14645L12.7803 4.07322C12.921 4.21388 13 4.40464 13 4.60355V12.5C13 13.3284 12.3284 14 11.5 14H3.5C2.67157 14 2 13.3284 2 12.5V2.5ZM4.75 7.5C4.75 7.22386 4.97386 7 5.25 7H7V5.25C7 4.97386 7.22386 4.75 7.5 4.75C7.77614 4.75 8 4.97386 8 5.25V7H9.75C10.0261 7 10.25 7.22386 10.25 7.5C10.25 7.77614 10.0261 8 9.75 8H8V9.75C8 10.0261 7.77614 10.25 7.5 10.25C7.22386 10.25 7 10.0261 7 9.75V8H5.25C4.97386 8 4.75 7.77614 4.75 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FileTextIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 2.5C3 2.22386 3.22386 2 3.5 2H9.08579C9.21839 2 9.34557 2.05268 9.43934 2.14645L11.8536 4.56066C11.9473 4.65443 12 4.78161 12 4.91421V12.5C12 12.7761 11.7761 13 11.5 13H3.5C3.22386 13 3 12.7761 3 12.5V2.5ZM3.5 1C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V4.91421C13 4.51639 12.842 4.13486 12.5607 3.85355L10.1464 1.43934C9.86514 1.15804 9.48361 1 9.08579 1H3.5ZM4.5 4C4.22386 4 4 4.22386 4 4.5C4 4.77614 4.22386 5 4.5 5H7.5C7.77614 5 8 4.77614 8 4.5C8 4.22386 7.77614 4 7.5 4H4.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H10.5C10.7761 8 11 7.77614 11 7.5C11 7.22386 10.7761 7 10.5 7H4.5ZM4.5 10C4.22386 10 4 10.2239 4 10.5C4 10.7761 4.22386 11 4.5 11H10.5C10.7761 11 11 10.7761 11 10.5C11 10.2239 10.7761 10 10.5 10H4.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FontBoldIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.10505 12C4.70805 12 4.4236 11.912 4.25171 11.736C4.0839 11.5559 4 11.2715 4 10.8827V4.11733C4 3.72033 4.08595 3.43588 4.25784 3.26398C4.43383 3.08799 4.71623 3 5.10505 3C6.42741 3 8.25591 3 9.02852 3C10.1373 3 11.0539 3.98153 11.0539 5.1846C11.0539 6.08501 10.6037 6.81855 9.70327 7.23602C10.8657 7.44851 11.5176 8.62787 11.5176 9.48128C11.5176 10.5125 10.9902 12 9.27734 12C8.77742 12 6.42626 12 5.10505 12ZM8.37891 8.00341H5.8V10.631H8.37891C8.9 10.631 9.6296 10.1211 9.6296 9.29877C9.6296 8.47643 8.9 8.00341 8.37891 8.00341ZM5.8 4.36903V6.69577H8.17969C8.53906 6.69577 9.27734 6.35939 9.27734 5.50002C9.27734 4.64064 8.48047 4.36903 8.17969 4.36903H5.8Z",
        fill: color
    }));
});
var FontFamilyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.5 4.5C2.5 3.09886 3.59886 2 5 2H12.499C12.7752 2 13 2.22386 13 2.5C13 2.77614 12.7761 3 12.5 3H8.69244L8.40509 3.85458C8.18869 4.49752 7.89401 5.37197 7.58091 6.29794C7.50259 6.52956 7.42308 6.76453 7.34332 7H8.5C8.77614 7 9 7.22386 9 7.5C9 7.77614 8.77614 8 8.5 8H7.00407C6.56724 9.28543 6.16435 10.4613 5.95799 11.0386C5.63627 11.9386 5.20712 12.4857 4.66741 12.7778C4.16335 13.0507 3.64154 13.0503 3.28378 13.05L3.25 13.05C2.94624 13.05 2.7 12.8037 2.7 12.5C2.7 12.1962 2.94624 11.95 3.25 11.95C3.64182 11.95 3.9035 11.9405 4.14374 11.8105C4.36443 11.691 4.65532 11.4148 4.92217 10.6683C5.10695 10.1514 5.45375 9.14134 5.8422 8H4.5C4.22386 8 4 7.77614 4 7.5C4 7.22386 4.22386 7 4.5 7H6.18187C6.30127 6.64785 6.42132 6.29323 6.53887 5.94559C6.85175 5.02025 7.14627 4.14631 7.36256 3.50368L7.53192 3H5C4.15114 3 3.5 3.65114 3.5 4.5C3.5 4.77614 3.27614 5 3 5C2.72386 5 2.5 4.77614 2.5 4.5Z",
        fill: color
    }));
});
var FontItalicIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.67494 3.50017C5.67494 3.25164 5.87641 3.05017 6.12494 3.05017H10.6249C10.8735 3.05017 11.0749 3.25164 11.0749 3.50017C11.0749 3.7487 10.8735 3.95017 10.6249 3.95017H9.00587L7.2309 11.05H8.87493C9.12345 11.05 9.32493 11.2515 9.32493 11.5C9.32493 11.7486 9.12345 11.95 8.87493 11.95H4.37493C4.1264 11.95 3.92493 11.7486 3.92493 11.5C3.92493 11.2515 4.1264 11.05 4.37493 11.05H5.99397L7.76894 3.95017H6.12494C5.87641 3.95017 5.67494 3.7487 5.67494 3.50017Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FontRomanIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.79993 3.50017C4.79993 3.25164 5.0014 3.05017 5.24993 3.05017H9.74993C9.99845 3.05017 10.1999 3.25164 10.1999 3.50017C10.1999 3.7487 9.99845 3.95017 9.74993 3.95017H8.09993V11.05H9.74994C9.99847 11.05 10.1999 11.2515 10.1999 11.5C10.1999 11.7486 9.99847 11.95 9.74994 11.95H5.24994C5.00141 11.95 4.79994 11.7486 4.79994 11.5C4.79994 11.2515 5.00141 11.05 5.24994 11.05H6.89993V3.95017H5.24993C5.0014 3.95017 4.79993 3.7487 4.79993 3.50017Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FontSizeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.78233 2.21707C2.70732 2.14206 2.60557 2.09991 2.49949 2.09991C2.3934 2.09991 2.29166 2.14206 2.21664 2.21707L0.216645 4.21707C0.0604351 4.37328 0.0604351 4.62655 0.216645 4.78276C0.372855 4.93897 0.626121 4.93897 0.78233 4.78276L2.09949 3.4656L2.09949 11.5342L0.78233 10.2171C0.62612 10.0609 0.372854 10.0609 0.216645 10.2171C0.0604349 10.3733 0.0604349 10.6265 0.216645 10.7828L2.21664 12.7828C2.29166 12.8578 2.3934 12.8999 2.49949 12.8999C2.60557 12.8999 2.70731 12.8578 2.78233 12.7828L4.78233 10.7828C4.93854 10.6265 4.93854 10.3733 4.78233 10.2171C4.62612 10.0609 4.37285 10.0609 4.21664 10.2171L2.89949 11.5342L2.89949 3.4656L4.21664 4.78276C4.37285 4.93897 4.62612 4.93897 4.78233 4.78276C4.93854 4.62655 4.93854 4.37328 4.78233 4.21707L2.78233 2.21707ZM10.5 2.74997C10.7107 2.74997 10.8988 2.88211 10.9703 3.08036L13.9703 11.3999C14.064 11.6597 13.9293 11.9462 13.6696 12.0399C13.4098 12.1336 13.1233 11.9989 13.0296 11.7392L12.0477 9.016H8.95228L7.97033 11.7392C7.87666 11.9989 7.59013 12.1336 7.33036 12.0399C7.07059 11.9462 6.93595 11.6597 7.02962 11.3999L10.0296 3.08036C10.1011 2.88211 10.2892 2.74997 10.5 2.74997ZM10.5 4.72396L11.7412 8.166H9.25879L10.5 4.72396Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FontStyleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.03791 9.98075C0.934777 9.6583 1.11603 9.37719 1.40005 9.24871C1.68408 9.12022 2.09463 9.13412 2.27071 9.45426C2.85393 10.5147 3.64599 10.7282 4.48665 10.7282C5.52721 10.7282 6.29659 10.2615 6.29659 9.45426C6.29659 8.8047 5.9119 8.46416 4.87134 8.14253L4.15872 7.92181C2.64518 7.44883 1.88842 6.69206 1.88842 5.45601C1.88842 3.79743 3.27583 2.6875 5.24342 2.6875C6.91733 2.6875 7.97409 3.33536 8.43833 4.31065C8.57087 4.58909 8.57614 4.91294 8.22794 5.19114C7.87974 5.46934 7.52351 5.34799 7.23327 5.03839C6.47215 4.22653 5.99545 4.04968 5.25604 4.04968C4.1398 4.04968 3.547 4.63618 3.547 5.27943C3.547 5.86592 3.96322 6.23169 4.94702 6.5344L5.67856 6.76143C7.22994 7.23441 7.97409 7.95964 7.97409 9.17047C7.97409 10.7723 6.69389 12.0903 4.46143 12.0903C2.86612 12.0903 1.40005 11.1131 1.03791 9.98075ZM11.8491 8.77985C10.661 8.39543 10.1649 7.86114 10.1649 6.98805C10.1649 5.86736 11.1636 5.04639 12.6128 5.04639C13.8546 5.04639 14.6629 5.63345 14.9778 6.6346C15.0443 6.84599 14.9593 6.98006 14.7475 7.0491C14.5394 7.11697 14.3176 7.09974 14.238 6.89611C13.9356 6.12273 13.352 5.76311 12.5998 5.76311C11.6467 5.76311 11.0135 6.25178 11.0135 6.91638C11.0135 7.45066 11.3464 7.75038 12.2473 8.04358L12.8348 8.23254C14.062 8.62999 14.5516 9.13821 14.5516 10.0178C14.5516 11.1972 13.481 12.0442 11.9927 12.0442C10.6439 12.0442 9.65644 11.2809 9.41979 10.3361C9.36535 10.1188 9.41192 10.0287 9.70039 9.96184C9.98886 9.89499 10.0714 9.89918 10.1715 10.1369C10.4555 10.8114 11.1531 11.3275 12.0318 11.3275C12.9914 11.3275 13.6834 10.7802 13.6834 10.0634C13.6834 9.53567 13.3961 9.28807 12.4366 8.97532L11.8491 8.77985Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FrameIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11 1.5C11 1.22386 10.7761 1 10.5 1C10.2239 1 10 1.22386 10 1.5V4H5V1.5C5 1.22386 4.77614 1 4.5 1C4.22386 1 4 1.22386 4 1.5V4H1.5C1.22386 4 1 4.22386 1 4.5C1 4.77614 1.22386 5 1.5 5H4V10H1.5C1.22386 10 1 10.2239 1 10.5C1 10.7761 1.22386 11 1.5 11H4V13.5C4 13.7761 4.22386 14 4.5 14C4.77614 14 5 13.7761 5 13.5V11H10V13.5C10 13.7761 10.2239 14 10.5 14C10.7761 14 11 13.7761 11 13.5V11H13.5C13.7761 11 14 10.7761 14 10.5C14 10.2239 13.7761 10 13.5 10H11V5H13.5C13.7761 5 14 4.77614 14 4.5C14 4.22386 13.7761 4 13.5 4H11V1.5ZM10 10V5H5V10H10Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var FramerLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.3825 1.29567C3.46241 1.11432 3.64188 0.997284 3.84005 0.997284H11.5C11.7761 0.997284 12 1.22114 12 1.49728V5.5C12 5.77614 11.7761 6 11.5 6H8.63521L11.5288 9.16247C11.6626 9.3087 11.6974 9.52015 11.6175 9.70154C11.5376 9.88293 11.3582 10 11.16 10H8V13.5C8 13.7022 7.87818 13.8845 7.69134 13.9619C7.5045 14.0393 7.28945 13.9966 7.14645 13.8536L3.14645 9.85355C3.05268 9.75979 3 9.63261 3 9.5V5.5C3 5.22386 3.22386 5 3.5 5H6.36531L3.47105 1.83468C3.33732 1.68844 3.30259 1.47701 3.3825 1.29567ZM7.72032 5L4.97474 1.99728H11V5H7.72032ZM7.27978 6H4V9H7.5H10.0247L7.27978 6ZM4.70711 10L7 12.2929V10H4.70711Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var GearIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.07095 0.650238C6.67391 0.650238 6.32977 0.925096 6.24198 1.31231L6.0039 2.36247C5.6249 2.47269 5.26335 2.62363 4.92436 2.81013L4.01335 2.23585C3.67748 2.02413 3.23978 2.07312 2.95903 2.35386L2.35294 2.95996C2.0722 3.2407 2.0232 3.6784 2.23493 4.01427L2.80942 4.92561C2.62307 5.2645 2.47227 5.62594 2.36216 6.00481L1.31209 6.24287C0.924883 6.33065 0.650024 6.6748 0.650024 7.07183V7.92897C0.650024 8.32601 0.924883 8.67015 1.31209 8.75794L2.36228 8.99603C2.47246 9.375 2.62335 9.73652 2.80979 10.0755L2.2354 10.9867C2.02367 11.3225 2.07267 11.7602 2.35341 12.041L2.95951 12.6471C3.24025 12.9278 3.67795 12.9768 4.01382 12.7651L4.92506 12.1907C5.26384 12.377 5.62516 12.5278 6.0039 12.6379L6.24198 13.6881C6.32977 14.0753 6.67391 14.3502 7.07095 14.3502H7.92809C8.32512 14.3502 8.66927 14.0753 8.75705 13.6881L8.99505 12.6383C9.37411 12.5282 9.73573 12.3773 10.0748 12.1909L10.986 12.7653C11.3218 12.977 11.7595 12.928 12.0403 12.6473L12.6464 12.0412C12.9271 11.7604 12.9761 11.3227 12.7644 10.9869L12.1902 10.076C12.3768 9.73688 12.5278 9.37515 12.638 8.99596L13.6879 8.75794C14.0751 8.67015 14.35 8.32601 14.35 7.92897V7.07183C14.35 6.6748 14.0751 6.33065 13.6879 6.24287L12.6381 6.00488C12.528 5.62578 12.3771 5.26414 12.1906 4.92507L12.7648 4.01407C12.9766 3.6782 12.9276 3.2405 12.6468 2.95975L12.0407 2.35366C11.76 2.07292 11.3223 2.02392 10.9864 2.23565L10.0755 2.80989C9.73622 2.62328 9.37437 2.47229 8.99505 2.36209L8.75705 1.31231C8.66927 0.925096 8.32512 0.650238 7.92809 0.650238H7.07095ZM4.92053 3.81251C5.44724 3.44339 6.05665 3.18424 6.71543 3.06839L7.07095 1.50024H7.92809L8.28355 3.06816C8.94267 3.18387 9.5524 3.44302 10.0794 3.81224L11.4397 2.9547L12.0458 3.56079L11.1882 4.92117C11.5573 5.44798 11.8164 6.0575 11.9321 6.71638L13.5 7.07183V7.92897L11.932 8.28444C11.8162 8.94342 11.557 9.55301 11.1878 10.0798L12.0453 11.4402L11.4392 12.0462L10.0787 11.1886C9.55192 11.5576 8.94241 11.8166 8.28355 11.9323L7.92809 13.5002H7.07095L6.71543 11.932C6.0569 11.8162 5.44772 11.5572 4.92116 11.1883L3.56055 12.046L2.95445 11.4399L3.81213 10.0794C3.4431 9.55266 3.18403 8.94326 3.06825 8.2845L1.50002 7.92897V7.07183L3.06818 6.71632C3.18388 6.05765 3.44283 5.44833 3.81171 4.92165L2.95398 3.561L3.56008 2.95491L4.92053 3.81251ZM9.02496 7.50008C9.02496 8.34226 8.34223 9.02499 7.50005 9.02499C6.65786 9.02499 5.97513 8.34226 5.97513 7.50008C5.97513 6.65789 6.65786 5.97516 7.50005 5.97516C8.34223 5.97516 9.02496 6.65789 9.02496 7.50008ZM9.92496 7.50008C9.92496 8.83932 8.83929 9.92499 7.50005 9.92499C6.1608 9.92499 5.07513 8.83932 5.07513 7.50008C5.07513 6.16084 6.1608 5.07516 7.50005 5.07516C8.83929 5.07516 9.92496 6.16084 9.92496 7.50008Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var GitHubLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49936 0.850006C3.82767 0.850006 0.849976 3.8273 0.849976 7.50023C0.849976 10.4379 2.75523 12.9306 5.39775 13.8104C5.73047 13.8712 5.85171 13.6658 5.85171 13.4895C5.85171 13.3315 5.846 12.9135 5.84273 12.3587C3.99301 12.7604 3.60273 11.4671 3.60273 11.4671C3.30022 10.6988 2.86423 10.4942 2.86423 10.4942C2.26044 10.0819 2.90995 10.0901 2.90995 10.0901C3.57742 10.137 3.9285 10.7755 3.9285 10.7755C4.52167 11.7916 5.48512 11.4981 5.86396 11.3279C5.92438 10.8984 6.09625 10.6053 6.28608 10.4391C4.80948 10.2709 3.25695 9.70063 3.25695 7.15241C3.25695 6.42615 3.51618 5.83298 3.94157 5.368C3.87299 5.1998 3.64478 4.52375 4.00689 3.60807C4.00689 3.60807 4.56494 3.42926 5.83538 4.28941C6.36568 4.14204 6.93477 4.06856 7.50018 4.0657C8.06518 4.06856 8.63386 4.14204 9.16498 4.28941C10.4346 3.42926 10.9918 3.60807 10.9918 3.60807C11.3548 4.52375 11.1266 5.1998 11.0584 5.368C11.4846 5.83298 11.7418 6.42615 11.7418 7.15241C11.7418 9.70716 10.1868 10.2693 8.70571 10.4338C8.94412 10.6392 9.15681 11.045 9.15681 11.6655C9.15681 12.5542 9.14865 13.2715 9.14865 13.4895C9.14865 13.6675 9.26867 13.8745 9.60588 13.8095C12.2464 12.9282 14.15 10.4375 14.15 7.50023C14.15 3.8273 11.1723 0.850006 7.49936 0.850006Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var GlobeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49996 1.80002C4.35194 1.80002 1.79996 4.352 1.79996 7.50002C1.79996 10.648 4.35194 13.2 7.49996 13.2C10.648 13.2 13.2 10.648 13.2 7.50002C13.2 4.352 10.648 1.80002 7.49996 1.80002ZM0.899963 7.50002C0.899963 3.85494 3.85488 0.900024 7.49996 0.900024C11.145 0.900024 14.1 3.85494 14.1 7.50002C14.1 11.1451 11.145 14.1 7.49996 14.1C3.85488 14.1 0.899963 11.1451 0.899963 7.50002Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M13.4999 7.89998H1.49994V7.09998H13.4999V7.89998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M7.09991 13.5V1.5H7.89991V13.5H7.09991zM10.375 7.49998C10.375 5.32724 9.59364 3.17778 8.06183 1.75656L8.53793 1.24341C10.2396 2.82218 11.075 5.17273 11.075 7.49998 11.075 9.82724 10.2396 12.1778 8.53793 13.7566L8.06183 13.2434C9.59364 11.8222 10.375 9.67273 10.375 7.49998zM3.99969 7.5C3.99969 5.17611 4.80786 2.82678 6.45768 1.24719L6.94177 1.75281C5.4582 3.17323 4.69969 5.32389 4.69969 7.5 4.6997 9.67611 5.45822 11.8268 6.94179 13.2472L6.45769 13.7528C4.80788 12.1732 3.9997 9.8239 3.99969 7.5z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M7.49996 3.95801C9.66928 3.95801 11.8753 4.35915 13.3706 5.19448 13.5394 5.28875 13.5998 5.50197 13.5055 5.67073 13.4113 5.83948 13.198 5.89987 13.0293 5.8056 11.6794 5.05155 9.60799 4.65801 7.49996 4.65801 5.39192 4.65801 3.32052 5.05155 1.97064 5.8056 1.80188 5.89987 1.58866 5.83948 1.49439 5.67073 1.40013 5.50197 1.46051 5.28875 1.62927 5.19448 3.12466 4.35915 5.33063 3.95801 7.49996 3.95801zM7.49996 10.85C9.66928 10.85 11.8753 10.4488 13.3706 9.6135 13.5394 9.51924 13.5998 9.30601 13.5055 9.13726 13.4113 8.9685 13.198 8.90812 13.0293 9.00238 11.6794 9.75643 9.60799 10.15 7.49996 10.15 5.39192 10.15 3.32052 9.75643 1.97064 9.00239 1.80188 8.90812 1.58866 8.9685 1.49439 9.13726 1.40013 9.30601 1.46051 9.51924 1.62927 9.6135 3.12466 10.4488 5.33063 10.85 7.49996 10.85z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var GridIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.5 2H8V7H13V2.5C13 2.22386 12.7761 2 12.5 2ZM13 8H8V13H12.5C12.7761 13 13 12.7761 13 12.5V8ZM7 7V2H2.5C2.22386 2 2 2.22386 2 2.5V7H7ZM2 8V12.5C2 12.7761 2.22386 13 2.5 13H7V8H2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var GroupIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.44995 0.949951C1.31734 0.949951 1.19016 1.00263 1.0964 1.0964C1.00263 1.19017 0.949951 1.31735 0.949951 1.44995L0.949966 3.44995C0.949969 3.7261 1.17383 3.94995 1.44997 3.94995C1.72611 3.94995 1.94997 3.72609 1.94997 3.44995L1.94995 1.94995H3.44997C3.72611 1.94995 3.94997 1.72609 3.94997 1.44995C3.94997 1.17381 3.72611 0.949951 3.44997 0.949951H1.44995ZM5.94995 0.949951C5.67381 0.949951 5.44995 1.17381 5.44995 1.44995C5.44995 1.72609 5.67381 1.94995 5.94995 1.94995H8.94995C9.22609 1.94995 9.44995 1.72609 9.44995 1.44995C9.44995 1.17381 9.22609 0.949951 8.94995 0.949951H5.94995ZM5.44995 13.45C5.44995 13.1738 5.67381 12.95 5.94995 12.95H8.94995C9.22609 12.95 9.44995 13.1738 9.44995 13.45C9.44995 13.7261 9.22609 13.95 8.94995 13.95H5.94995C5.67381 13.95 5.44995 13.7261 5.44995 13.45ZM1.94995 5.94995C1.94995 5.67381 1.72609 5.44995 1.44995 5.44995C1.17381 5.44995 0.949951 5.67381 0.949951 5.94995V8.94995C0.949951 9.22609 1.17381 9.44995 1.44995 9.44995C1.72609 9.44995 1.94995 9.22609 1.94995 8.94995V5.94995ZM13.45 5.44995C13.7261 5.44995 13.95 5.67381 13.95 5.94995V8.94995C13.95 9.22609 13.7261 9.44995 13.45 9.44995C13.1738 9.44995 12.95 9.22609 12.95 8.94995V5.94995C12.95 5.67381 13.1738 5.44995 13.45 5.44995ZM11.45 0.949951C11.1738 0.949951 10.95 1.17381 10.95 1.44995C10.95 1.72609 11.1738 1.94995 11.45 1.94995H12.9499V3.44995C12.9499 3.72609 13.1738 3.94995 13.4499 3.94995C13.7261 3.94995 13.9499 3.72609 13.9499 3.44995V1.44995C13.9499 1.17381 13.7252 0.949951 13.449 0.949951H11.45ZM1.44995 10.95C1.72609 10.95 1.94995 11.1738 1.94995 11.45V12.95H3.44997C3.72611 12.95 3.94997 13.1738 3.94997 13.45C3.94997 13.7261 3.72611 13.95 3.44997 13.95H1.44995C1.17381 13.95 0.949951 13.7261 0.949951 13.45V11.45C0.949951 11.1738 1.17381 10.95 1.44995 10.95ZM13.95 11.45C13.95 11.1738 13.7261 10.95 13.45 10.95C13.1738 10.9499 12.95 11.1738 12.95 11.4499L12.9491 12.95H11.45C11.1738 12.95 10.95 13.1738 10.95 13.45C10.95 13.7261 11.1738 13.95 11.45 13.95H13.4499C13.7261 13.95 13.9499 13.7261 13.9499 13.45L13.95 11.45Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Half1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM7.00003 1.84861C4.10114 2.1017 1.82707 4.53515 1.82707 7.49972C1.82707 10.4643 4.10114 12.8977 7.00003 13.1508V1.84861ZM8.00003 13.1508C10.8988 12.8976 13.1727 10.4642 13.1727 7.49972C13.1727 4.53524 10.8988 2.10185 8.00003 1.84864V13.1508Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Half2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM7.49988 1.82689C4.36688 1.8269 1.82707 4.36672 1.82707 7.49972C1.82707 10.6327 4.36688 13.1725 7.49988 13.1726V1.82689Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var HamburgerMenuIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H13.5C13.7761 11 14 11.2239 14 11.5C14 11.7761 13.7761 12 13.5 12H1.5C1.22386 12 1 11.7761 1 11.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var HandIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.8113 1.64706C6.62188 2.87918 6.68268 3.88523 6.76848 5.30499C6.78415 5.56426 6.80065 5.83732 6.81661 6.12808C6.83111 6.39208 6.63758 6.62172 6.37495 6.65217C6.11232 6.68262 5.87138 6.50334 5.82509 6.24304L5.74754 5.80698C5.64402 5.16529 5.48355 4.25481 5.17807 3.44741C4.86241 2.61312 4.4486 2.04121 3.93436 1.86044C3.64994 1.76104 3.41901 1.84279 3.25868 2.01052C3.08746 2.18962 2.9976 2.47065 3.0627 2.75399C3.2146 3.34424 3.44627 3.9167 3.69836 4.51802C3.72082 4.57158 3.74346 4.62543 3.76621 4.67954C3.9954 5.22457 4.23619 5.7972 4.41644 6.39081L4.41691 6.39238C4.562 6.87586 4.65646 7.2595 4.73086 7.56165C4.76034 7.68138 4.78667 7.78831 4.81175 7.88359C4.86768 8.09606 4.77836 8.32014 4.59161 8.43588C4.40486 8.55161 4.16445 8.53188 3.99907 8.38725C3.73749 8.15848 3.515 7.92784 3.31817 7.71802C3.27627 7.67335 3.23602 7.63018 3.19705 7.58838C3.04777 7.42826 2.91712 7.28812 2.78334 7.16029C2.45989 6.85122 2.18398 6.68004 1.80585 6.64369L1.80324 6.64343C1.56117 6.61888 1.41402 6.66441 1.31756 6.72627C1.21899 6.78947 1.11988 6.90414 1.03784 7.1123C0.976576 7.28492 1.01515 7.62987 1.1929 7.96911L1.19728 7.97747C1.40086 8.38452 1.74475 8.81587 2.18141 9.29299C2.39739 9.52898 2.62872 9.76849 2.86934 10.0174L2.87966 10.0281C3.11546 10.2721 3.35962 10.5247 3.59713 10.7827C4.4288 11.6863 5.27706 12.7538 5.4627 14H11.5087C11.5636 12.4353 11.8756 11.268 12.2875 10.1346C12.4454 9.70041 12.6121 9.28412 12.7826 8.85829C13.1097 8.04139 13.4509 7.18937 13.7705 6.10824C14.0989 4.99737 14.0097 4.37033 13.8613 4.03984C13.717 3.71858 13.4914 3.61786 13.3816 3.59606C13.1381 3.54774 13.0384 3.60947 12.9698 3.67901C12.867 3.78316 12.7698 3.98273 12.6921 4.30269C12.6166 4.61345 12.5752 4.96517 12.533 5.32501L12.5298 5.35285C12.4924 5.67242 12.4505 6.03016 12.3665 6.30098C12.3383 6.40699 12.2819 6.50407 12.1979 6.57539C12.1382 6.6261 12.0104 6.70818 11.8309 6.69312C11.5424 6.66891 11.3712 6.42143 11.365 6.14783C11.356 5.75454 11.3883 5.35864 11.4074 4.96608C11.4428 4.23646 11.477 3.5337 11.4245 2.8342L11.4242 2.82934C11.3916 2.32997 11.0493 2.00228 10.7007 1.9228C10.5305 1.88401 10.369 1.90601 10.2347 1.9835C10.103 2.05946 9.95535 2.21318 9.8574 2.51394L9.85631 2.51726C9.81525 2.6404 9.77298 2.87753 9.73606 3.2124C9.70044 3.53542 9.67337 3.91279 9.65156 4.29418C9.6329 4.62033 9.61785 4.9584 9.60434 5.26194C9.58728 5.64529 9.57267 5.97357 9.55633 6.1532C9.54983 6.22459 9.52939 6.29493 9.49501 6.35785C9.47356 6.39711 9.36115 6.60947 9.07106 6.61843C8.77917 6.62744 8.63975 6.40057 8.61698 6.35919C8.55634 6.24899 8.55066 6.11807 8.54754 5.99283C8.54474 5.88064 8.54294 5.71798 8.54174 5.54767C8.53935 5.20582 8.53935 4.81919 8.53935 4.70952C8.53935 3.6657 8.53838 2.65372 8.44714 1.64372C8.39183 1.24127 8.06278 1.00455 7.6436 1.00005C7.22399 0.995552 6.87918 1.22704 6.8113 1.64706ZM9.41219 1.3617C9.21469 0.448484 8.39913 0.00810324 7.65433 0.00011154C6.86452 -0.00836308 5.98761 0.465881 5.82365 1.49037L5.82318 1.49334C5.78239 1.7584 5.75229 2.01481 5.7309 2.26652C5.39423 1.67364 4.92622 1.14894 4.2655 0.916859C3.58661 0.679312 2.9492 0.887087 2.53582 1.31952C2.13415 1.73971 1.94438 2.36742 2.09031 2.98746L2.09269 2.99713C2.26478 3.66808 2.52396 4.30316 2.77613 4.90465C2.79814 4.95717 2.8201 5.00941 2.84194 5.06139C3.02139 5.48842 3.19378 5.89866 3.33871 6.31256C2.96404 5.98142 2.51925 5.70796 1.90276 5.6484C1.48865 5.60663 1.10391 5.67536 0.777805 5.88444C0.454239 6.0919 0.240671 6.40405 0.104187 6.75406L0.100868 6.76281C-0.10184 7.31286 0.0663312 7.97157 0.304895 8.42897C0.573704 8.96474 0.996104 9.47904 1.44372 9.96813C1.67046 10.2159 1.91136 10.4652 2.15033 10.7124L2.15682 10.7191C2.39524 10.9658 2.63217 11.2109 2.86134 11.4599C3.80937 12.49 4.50002 13.4632 4.50002 14.5C4.50002 14.7761 4.72388 15 5.00002 15H12C12.2762 15 12.5 14.7761 12.5 14.5C12.5 12.8212 12.8021 11.6462 13.2274 10.4762C13.3653 10.0968 13.5216 9.70579 13.6868 9.29247C14.0238 8.44922 14.398 7.51298 14.7295 6.39175C15.0956 5.15324 15.0559 4.25904 14.7735 3.63017C14.487 2.99208 13.9798 2.6953 13.5763 2.6152C13.1276 2.52614 12.7367 2.60475 12.4268 2.83081C12.4253 2.80773 12.4236 2.78468 12.4219 2.76167C12.3587 1.8105 11.6907 1.12285 10.923 0.947821C10.5346 0.859287 10.1111 0.900393 9.73509 1.11724C9.61852 1.18446 9.51055 1.26623 9.41219 1.3617Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var HeadingIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.75432 2.0502C8.50579 2.0502 8.30432 2.25167 8.30432 2.5002C8.30432 2.74873 8.50579 2.9502 8.75432 2.9502H9.94997V7.05004H5.04997V2.9502H6.25432C6.50285 2.9502 6.70432 2.74873 6.70432 2.5002C6.70432 2.25167 6.50285 2.0502 6.25432 2.0502H2.75432C2.50579 2.0502 2.30432 2.25167 2.30432 2.5002C2.30432 2.74873 2.50579 2.9502 2.75432 2.9502H3.94997V12.0502H2.75432C2.50579 12.0502 2.30432 12.2517 2.30432 12.5002C2.30432 12.7487 2.50579 12.9502 2.75432 12.9502H6.25432C6.50285 12.9502 6.70432 12.7487 6.70432 12.5002C6.70432 12.2517 6.50285 12.0502 6.25432 12.0502H5.04997V7.95004H9.94997V12.0502H8.75432C8.50579 12.0502 8.30432 12.2517 8.30432 12.5002C8.30432 12.7487 8.50579 12.9502 8.75432 12.9502H12.2543C12.5028 12.9502 12.7043 12.7487 12.7043 12.5002C12.7043 12.2517 12.5028 12.0502 12.2543 12.0502H11.05V2.9502H12.2543C12.5028 2.9502 12.7043 2.74873 12.7043 2.5002C12.7043 2.25167 12.5028 2.0502 12.2543 2.0502H8.75432Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var HeightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.1813 1.68179C7.35704 1.50605 7.64196 1.50605 7.8177 1.68179L10.3177 4.18179C10.4934 4.35753 10.4934 4.64245 10.3177 4.81819C10.142 4.99392 9.85704 4.99392 9.6813 4.81819L7.9495 3.08638L7.9495 11.9136L9.6813 10.1818C9.85704 10.0061 10.142 10.0061 10.3177 10.1818C10.4934 10.3575 10.4934 10.6424 10.3177 10.8182L7.8177 13.3182C7.73331 13.4026 7.61885 13.45 7.4995 13.45C7.38015 13.45 7.26569 13.4026 7.1813 13.3182L4.6813 10.8182C4.50557 10.6424 4.50557 10.3575 4.6813 10.1818C4.85704 10.0061 5.14196 10.0061 5.3177 10.1818L7.0495 11.9136L7.0495 3.08638L5.3177 4.81819C5.14196 4.99392 4.85704 4.99392 4.6813 4.81819C4.50557 4.64245 4.50557 4.35753 4.6813 4.18179L7.1813 1.68179Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var HomeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.07926 0.222253C7.31275 -0.007434 7.6873 -0.007434 7.92079 0.222253L14.6708 6.86227C14.907 7.09465 14.9101 7.47453 14.6778 7.71076C14.4454 7.947 14.0655 7.95012 13.8293 7.71773L13 6.90201V12.5C13 12.7761 12.7762 13 12.5 13H2.50002C2.22388 13 2.00002 12.7761 2.00002 12.5V6.90201L1.17079 7.71773C0.934558 7.95012 0.554672 7.947 0.32229 7.71076C0.0899079 7.47453 0.0930283 7.09465 0.32926 6.86227L7.07926 0.222253ZM7.50002 1.49163L12 5.91831V12H10V8.49999C10 8.22385 9.77617 7.99999 9.50002 7.99999H6.50002C6.22388 7.99999 6.00002 8.22385 6.00002 8.49999V12H3.00002V5.91831L7.50002 1.49163ZM7.00002 12H9.00002V8.99999H7.00002V12Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var IconJarLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 0.0032959C6.80473 0.0032959 6.24953 0.281106 6.25 0.749995C6.25 0.997258 6.42446 1.12014 6.57687 1.22749C6.69507 1.31074 6.8 1.38465 6.8 1.5C6.8 1.7071 6.06224 1.74264 5.19789 1.78427C3.97553 1.84314 2.5 1.91421 2.5 2.5C2.5 2.77614 2.72386 3 3 3H12C12.2761 3 12.5 2.77614 12.5 2.5C12.5 1.91421 11.0245 1.84314 9.80211 1.78427C8.93776 1.74264 8.2 1.7071 8.2 1.5C8.2 1.38465 8.30493 1.31074 8.42313 1.22749C8.57554 1.12014 8.75 0.997258 8.75 0.749995C8.75047 0.281106 8.19527 0.0032959 7.5 0.0032959ZM2.89451 6.12266C2.25806 6.52471 1.90417 7.31118 2.02473 8.0556L2.83588 12.4772C3.00993 13.3562 3.7629 14 4.66061 14H10.3373C11.2354 14 11.9884 13.3562 12.1625 12.4772L12.9736 8.05607C13.089 7.32358 12.8284 6.53276 12.1331 6.09373C11.7283 5.83013 11.6412 5.33231 12.1331 5.12796C12.8284 4.86435 12.6948 4 12 4H10.3001H6.80005H2.99996C2.30469 4 2.19878 4.89328 2.89451 5.15689C3.38642 5.33231 3.29939 5.83013 2.89451 6.12266ZM8.20006 6.25C8.20006 5.81769 8.08572 5.37615 7.90635 5L4.11093 5C4.20626 5.21312 4.2419 5.43889 4.22904 5.65521C4.19522 6.22412 3.84587 6.66899 3.48016 6.93322L3.45492 6.95146L3.42858 6.9681C3.13407 7.15414 2.95801 7.53989 3.01058 7.88749L3.81797 12.2886C3.90513 12.7154 4.26148 13 4.66061 13H10.3373C10.737 13 11.0932 12.7153 11.1804 12.2886L11.9874 7.8898C12.048 7.48247 11.8954 7.12631 11.5992 6.93927L11.5875 6.93184L11.5875 6.93176C11.1947 6.67602 10.8331 6.22785 10.7986 5.64798C10.7846 5.412 10.8264 5.19397 10.9112 5H9.05517C9.01987 5.14611 9.00006 5.31201 9.00006 5.5C9.00006 5.9745 9.21679 6.37127 9.44367 6.78662C9.69284 7.24278 9.95425 7.72136 9.95425 8.34993C9.95425 9.2698 9.49868 9.84205 8.62189 9.84205C8.13206 9.84205 7.57818 9.46097 7.57818 8.75781C7.57818 8.35279 7.71558 8.01646 7.86121 7.65998C8.0254 7.25806 8.20006 6.83051 8.20006 6.25Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var IdCardIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14 11.0001V4.00006L1 4.00006L1 11.0001H14ZM15 4.00006V11.0001C15 11.5523 14.5523 12.0001 14 12.0001H1C0.447715 12.0001 0 11.5523 0 11.0001V4.00006C0 3.44778 0.447715 3.00006 1 3.00006H14C14.5523 3.00006 15 3.44778 15 4.00006ZM2 5.25C2 5.11193 2.11193 5 2.25 5H5.75C5.88807 5 6 5.11193 6 5.25V9.75C6 9.88807 5.88807 10 5.75 10H2.25C2.11193 10 2 9.88807 2 9.75V5.25ZM7.5 7C7.22386 7 7 7.22386 7 7.5C7 7.77614 7.22386 8 7.5 8H10.5C10.7761 8 11 7.77614 11 7.5C11 7.22386 10.7761 7 10.5 7H7.5ZM7 9.5C7 9.22386 7.22386 9 7.5 9H12.5C12.7761 9 13 9.22386 13 9.5C13 9.77614 12.7761 10 12.5 10H7.5C7.22386 10 7 9.77614 7 9.5ZM7.5 5C7.22386 5 7 5.22386 7 5.5C7 5.77614 7.22386 6 7.5 6H11.5C11.7761 6 12 5.77614 12 5.5C12 5.22386 11.7761 5 11.5 5H7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ImageIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5C1 1.67157 1.67157 1 2.5 1ZM2.5 2C2.22386 2 2 2.22386 2 2.5V8.3636L3.6818 6.6818C3.76809 6.59551 3.88572 6.54797 4.00774 6.55007C4.12975 6.55216 4.24568 6.60372 4.32895 6.69293L7.87355 10.4901L10.6818 7.6818C10.8575 7.50607 11.1425 7.50607 11.3182 7.6818L13 9.3636V2.5C13 2.22386 12.7761 2 12.5 2H2.5ZM2 12.5V9.6364L3.98887 7.64753L7.5311 11.4421L8.94113 13H2.5C2.22386 13 2 12.7761 2 12.5ZM12.5 13H10.155L8.48336 11.153L11 8.6364L13 10.6364V12.5C13 12.7761 12.7761 13 12.5 13ZM6.64922 5.5C6.64922 5.03013 7.03013 4.64922 7.5 4.64922C7.96987 4.64922 8.35078 5.03013 8.35078 5.5C8.35078 5.96987 7.96987 6.35078 7.5 6.35078C7.03013 6.35078 6.64922 5.96987 6.64922 5.5ZM7.5 3.74922C6.53307 3.74922 5.74922 4.53307 5.74922 5.5C5.74922 6.46693 6.53307 7.25078 7.5 7.25078C8.46693 7.25078 9.25078 6.46693 9.25078 5.5C9.25078 4.53307 8.46693 3.74922 7.5 3.74922Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var InfoCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var InputIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.5 1C6.22386 1 6 1.22386 6 1.5C6 1.77614 6.22386 2 6.5 2C7.12671 2 7.45718 2.20028 7.65563 2.47812C7.8781 2.78957 8 3.28837 8 4V11C8 11.7116 7.8781 12.2104 7.65563 12.5219C7.45718 12.7997 7.12671 13 6.5 13C6.22386 13 6 13.2239 6 13.5C6 13.7761 6.22386 14 6.5 14C7.37329 14 8.04282 13.7003 8.46937 13.1031C8.47976 13.0886 8.48997 13.0739 8.5 13.0591C8.51003 13.0739 8.52024 13.0886 8.53063 13.1031C8.95718 13.7003 9.62671 14 10.5 14C10.7761 14 11 13.7761 11 13.5C11 13.2239 10.7761 13 10.5 13C9.87329 13 9.54282 12.7997 9.34437 12.5219C9.1219 12.2104 9 11.7116 9 11V4C9 3.28837 9.1219 2.78957 9.34437 2.47812C9.54282 2.20028 9.87329 2 10.5 2C10.7761 2 11 1.77614 11 1.5C11 1.22386 10.7761 1 10.5 1C9.62671 1 8.95718 1.29972 8.53063 1.89688C8.52024 1.91143 8.51003 1.92611 8.5 1.9409C8.48997 1.92611 8.47976 1.91143 8.46937 1.89688C8.04282 1.29972 7.37329 1 6.5 1ZM14 5H11V4H14C14.5523 4 15 4.44772 15 5V10C15 10.5523 14.5523 11 14 11H11V10H14V5ZM6 4V5H1L1 10H6V11H1C0.447715 11 0 10.5523 0 10V5C0 4.44772 0.447715 4 1 4H6Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LapTimerIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.49998 0.5C5.49998 0.223858 5.72383 0 5.99998 0H7.49998H8.99998C9.27612 0 9.49998 0.223858 9.49998 0.5C9.49998 0.776142 9.27612 1 8.99998 1H7.99998V2.11922C9.09832 2.20409 10.119 2.56622 10.992 3.13572C11.0116 3.10851 11.0336 3.08252 11.058 3.05806L12.058 2.05806C12.3021 1.81398 12.6978 1.81398 12.9419 2.05806C13.186 2.30214 13.186 2.69786 12.9419 2.94194L11.967 3.91682C13.1595 5.07925 13.9 6.70314 13.9 8.49998C13.9 12.0346 11.0346 14.9 7.49998 14.9C3.96535 14.9 1.09998 12.0346 1.09998 8.49998C1.09998 5.13361 3.69904 2.3743 6.99998 2.11922V1H5.99998C5.72383 1 5.49998 0.776142 5.49998 0.5ZM2.09998 8.49998C2.09998 5.51764 4.51764 3.09998 7.49998 3.09998C10.4823 3.09998 12.9 5.51764 12.9 8.49998C12.9 11.4823 10.4823 13.9 7.49998 13.9C4.51764 13.9 2.09998 11.4823 2.09998 8.49998ZM7.49998 8.49998V4.09998C5.06992 4.09998 3.09998 6.06992 3.09998 8.49998C3.09998 10.93 5.06992 12.9 7.49998 12.9C8.715 12.9 9.815 12.4075 10.6112 11.6112L7.49998 8.49998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LayersIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.75432 0.819537C7.59742 0.726821 7.4025 0.726821 7.24559 0.819537L1.74559 4.06954C1.59336 4.15949 1.49996 4.32317 1.49996 4.5C1.49996 4.67683 1.59336 4.84051 1.74559 4.93046L7.24559 8.18046C7.4025 8.27318 7.59742 8.27318 7.75432 8.18046L13.2543 4.93046C13.4066 4.84051 13.5 4.67683 13.5 4.5C13.5 4.32317 13.4066 4.15949 13.2543 4.06954L7.75432 0.819537ZM7.49996 7.16923L2.9828 4.5L7.49996 1.83077L12.0171 4.5L7.49996 7.16923ZM1.5695 7.49564C1.70998 7.2579 2.01659 7.17906 2.25432 7.31954L7.49996 10.4192L12.7456 7.31954C12.9833 7.17906 13.2899 7.2579 13.4304 7.49564C13.5709 7.73337 13.4921 8.03998 13.2543 8.18046L7.75432 11.4305C7.59742 11.5232 7.4025 11.5232 7.24559 11.4305L1.74559 8.18046C1.50786 8.03998 1.42901 7.73337 1.5695 7.49564ZM1.56949 10.4956C1.70998 10.2579 2.01658 10.1791 2.25432 10.3195L7.49996 13.4192L12.7456 10.3195C12.9833 10.1791 13.2899 10.2579 13.4304 10.4956C13.5709 10.7334 13.4921 11.04 13.2543 11.1805L7.75432 14.4305C7.59742 14.5232 7.4025 14.5232 7.24559 14.4305L1.74559 11.1805C1.50785 11.04 1.42901 10.7334 1.56949 10.4956Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LayoutIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9 2H6V13H9V2ZM10 2V13H12.5C12.7761 13 13 12.7761 13 12.5V2.5C13 2.22386 12.7761 2 12.5 2H10ZM2.5 2H5V13H2.5C2.22386 13 2 12.7761 2 12.5V2.5C2 2.22386 2.22386 2 2.5 2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LetterCaseCapitalizeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.68979 2.75C3.89667 2.74979 4.08232 2.87701 4.15679 3.07003L7.36662 11.39C7.46602 11.6477 7.33774 11.9371 7.0801 12.0365C6.82247 12.1359 6.53304 12.0076 6.43365 11.75L5.3825 9.02537H2.01133L0.966992 11.749C0.868128 12.0068 0.578964 12.1357 0.321126 12.0369C0.0632878 11.938 -0.0655864 11.6488 0.0332774 11.391L3.22344 3.07099C3.29751 2.87782 3.4829 2.75021 3.68979 2.75ZM3.69174 4.64284L5.05458 8.17537H2.33724L3.69174 4.64284ZM10.8989 5.20703C9.25818 5.20703 8.00915 6.68569 8.00915 8.60972C8.00915 10.6337 9.35818 12.0124 10.8989 12.0124C11.7214 12.0124 12.5744 11.6692 13.1543 11.0219V11.53C13.1543 11.7785 13.3557 11.98 13.6043 11.98C13.8528 11.98 14.0543 11.7785 14.0543 11.53V5.72C14.0543 5.47147 13.8528 5.27 13.6043 5.27C13.3557 5.27 13.1543 5.47147 13.1543 5.72V6.22317C12.6054 5.60095 11.7924 5.20703 10.8989 5.20703ZM13.1543 9.79823V7.30195C12.7639 6.58101 11.9414 6.05757 11.0868 6.05757C10.1088 6.05757 9.03503 6.96581 9.03503 8.60955C9.03503 10.1533 10.0088 11.1615 11.0868 11.1615C11.9701 11.1615 12.7719 10.4952 13.1543 9.79823Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LetterCaseLowercaseIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.69899 5.20703C2.05823 5.20703 0.809204 6.68569 0.809204 8.60972C0.809204 10.6337 2.15823 12.0124 3.69899 12.0124C4.52126 12.0124 5.37402 11.6693 5.9539 11.0223V11.53C5.9539 11.7785 6.15537 11.98 6.4039 11.98C6.65243 11.98 6.8539 11.7785 6.8539 11.53V5.72001C6.8539 5.47149 6.65243 5.27001 6.4039 5.27001C6.15537 5.27001 5.9539 5.47149 5.9539 5.72001V6.22269C5.40506 5.60075 4.59218 5.20703 3.69899 5.20703ZM5.9539 9.799V7.30117C5.56339 6.58064 4.74118 6.05757 3.8868 6.05757C2.9089 6.05757 1.83508 6.96581 1.83508 8.60955C1.83508 10.1533 2.80889 11.1615 3.8868 11.1615C4.76984 11.1615 5.57141 10.4957 5.9539 9.799ZM10.799 5.20703C9.15823 5.20703 7.9092 6.68569 7.9092 8.60972C7.9092 10.6337 9.25823 12.0124 10.799 12.0124C11.6215 12.0124 12.4744 11.6692 13.0543 11.0218V11.53C13.0543 11.7785 13.2558 11.98 13.5043 11.98C13.7529 11.98 13.9543 11.7785 13.9543 11.53V5.72C13.9543 5.47147 13.7529 5.27 13.5043 5.27C13.2558 5.27 13.0543 5.47147 13.0543 5.72V6.22318C12.5055 5.60095 11.6924 5.20703 10.799 5.20703ZM13.0543 9.79822V7.30196C12.664 6.58102 11.8415 6.05757 10.9868 6.05757C10.0089 6.05757 8.93508 6.96581 8.93508 8.60955C8.93508 10.1533 9.90889 11.1615 10.9868 11.1615C11.8702 11.1615 12.672 10.4952 13.0543 9.79822Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LetterCaseToggleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.2895 2.75C11.4964 2.74979 11.6821 2.87701 11.7565 3.07003L14.9664 11.39C15.0657 11.6477 14.9375 11.9371 14.6798 12.0365C14.4222 12.1359 14.1328 12.0076 14.0334 11.75L12.9822 9.02537H9.61106L8.56672 11.749C8.46786 12.0068 8.1787 12.1357 7.92086 12.0369C7.66302 11.938 7.53414 11.6488 7.63301 11.391L10.8232 3.07099C10.8972 2.87782 11.0826 2.75021 11.2895 2.75ZM11.2915 4.64284L12.6543 8.17537H9.93698L11.2915 4.64284ZM2.89895 5.20703C1.25818 5.20703 0.00915527 6.68569 0.00915527 8.60972C0.00915527 10.6337 1.35818 12.0124 2.89895 12.0124C3.72141 12.0124 4.57438 11.6692 5.15427 11.0219V11.53C5.15427 11.7785 5.35574 11.98 5.60427 11.98C5.8528 11.98 6.05427 11.7785 6.05427 11.53V5.72C6.05427 5.47147 5.8528 5.27 5.60427 5.27C5.35574 5.27 5.15427 5.47147 5.15427 5.72V6.22317C4.60543 5.60095 3.79236 5.20703 2.89895 5.20703ZM5.15427 9.79823V7.30195C4.76393 6.58101 3.94144 6.05757 3.08675 6.05757C2.10885 6.05757 1.03503 6.96581 1.03503 8.60955C1.03503 10.1533 2.00885 11.1615 3.08675 11.1615C3.97011 11.1615 4.77195 10.4952 5.15427 9.79823Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LetterCaseUppercaseIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.6255 2.75C3.83478 2.75 4.02192 2.88034 4.09448 3.07664L7.16985 11.3962C7.2656 11.6552 7.13324 11.9428 6.87423 12.0386C6.61522 12.1343 6.32763 12.002 6.23188 11.7429L5.22387 9.01603H2.02712L1.01911 11.7429C0.923362 12.002 0.635774 12.1343 0.376762 12.0386C0.117749 11.9428 -0.0146052 11.6552 0.0811401 11.3962L3.15651 3.07664C3.22908 2.88034 3.41621 2.75 3.6255 2.75ZM3.6255 4.69207L4.90966 8.16603H2.34133L3.6255 4.69207ZM11.3719 2.75C11.5811 2.75 11.7683 2.88034 11.8408 3.07664L14.9162 11.3962C15.012 11.6552 14.8796 11.9428 14.6206 12.0386C14.3616 12.1343 14.074 12.002 13.9782 11.7429L12.9702 9.01603H9.77348L8.76547 11.7429C8.66972 12.002 8.38213 12.1343 8.12312 12.0386C7.86411 11.9428 7.73175 11.6552 7.8275 11.3962L10.9029 3.07664C10.9754 2.88034 11.1626 2.75 11.3719 2.75ZM11.3719 4.69207L12.656 8.16603H10.0877L11.3719 4.69207Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LetterSpacingIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.55293 0.999969C4.75295 0.999969 4.93372 1.11917 5.0125 1.30301L8.01106 8.29982C8.11984 8.55363 8.00226 8.84757 7.74844 8.95635C7.49463 9.06512 7.20069 8.94754 7.09191 8.69373L6.11613 6.41685H2.98973L2.01395 8.69373C1.90517 8.94754 1.61123 9.06512 1.35742 8.95635C1.1036 8.84757 0.986023 8.55363 1.0948 8.29982L4.09336 1.30301C4.17214 1.11917 4.35291 0.999969 4.55293 0.999969ZM4.55293 2.76929L5.75186 5.56685H3.354L4.55293 2.76929ZM11.0562 9.00214C11.2617 9.00214 11.4463 8.87633 11.5215 8.68502L14.2733 1.68299C14.3743 1.42598 14.2478 1.13575 13.9908 1.03475C13.7338 0.933747 13.4436 1.06021 13.3426 1.31722L11.0562 7.13514L8.76973 1.31722C8.66873 1.06021 8.3785 0.933747 8.1215 1.03475C7.86449 1.13575 7.73802 1.42598 7.83902 1.68299L10.5908 8.68502C10.666 8.87633 10.8506 9.00214 11.0562 9.00214ZM14.9537 12.4999C14.9537 12.606 14.9115 12.7077 14.8365 12.7828L12.8365 14.7828C12.6803 14.939 12.4271 14.939 12.2708 14.7828C12.1146 14.6265 12.1146 14.3733 12.2708 14.2171L13.588 12.8999H1.51937L2.83653 14.2171C2.99274 14.3733 2.99274 14.6265 2.83653 14.7828C2.68032 14.939 2.42705 14.939 2.27084 14.7828L0.270843 12.7828C0.195828 12.7077 0.153687 12.606 0.153687 12.4999C0.153687 12.3938 0.195828 12.2921 0.270843 12.2171L2.27084 10.2171C2.42705 10.0609 2.68032 10.0609 2.83653 10.2171C2.99274 10.3733 2.99274 10.6265 2.83653 10.7828L1.51937 12.0999L13.588 12.0999L12.2708 10.7828C12.1146 10.6265 12.1146 10.3733 12.2708 10.2171C12.4271 10.0609 12.6803 10.0609 12.8365 10.2171L14.8365 12.2171C14.9115 12.2921 14.9537 12.3938 14.9537 12.4999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LightningBoltIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.69666 0.040354C8.90859 0.131038 9.03105 0.354856 8.99315 0.582235L8.09019 6.00001H12.4999C12.6893 6.00001 12.8625 6.10701 12.9472 6.2764C13.0318 6.44579 13.0136 6.6485 12.8999 6.8L6.89997 14.8C6.76166 14.9844 6.5152 15.0503 6.30327 14.9596C6.09134 14.869 5.96888 14.6451 6.00678 14.4178L6.90974 8.99999H2.49999C2.31061 8.99999 2.13747 8.89299 2.05278 8.7236C1.96808 8.55421 1.98636 8.3515 2.09999 8.2L8.09996 0.200037C8.23827 0.0156255 8.48473 -0.0503301 8.69666 0.040354ZM3.49999 8H7.49996C7.64694 8 7.78647 8.06466 7.88147 8.17681C7.97647 8.28895 8.01732 8.43722 7.99316 8.58219L7.33026 12.5596L11.4999 7H7.49996C7.35299 7 7.21346 6.93534 7.11846 6.82319C7.02346 6.71105 6.98261 6.56278 7.00677 6.41781L7.66967 2.44042L3.49999 8Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LineHeightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.78233 2.21713C3.70732 2.14212 3.60557 2.09998 3.49949 2.09998C3.3934 2.09998 3.29166 2.14212 3.21664 2.21713L1.21664 4.21713C1.06044 4.37334 1.06044 4.62661 1.21664 4.78282C1.37285 4.93903 1.62612 4.93903 1.78233 4.78282L3.09949 3.46566L3.09949 11.5343L1.78233 10.2171C1.62612 10.0609 1.37285 10.0609 1.21664 10.2171C1.06043 10.3733 1.06043 10.6266 1.21664 10.7828L3.21664 12.7828C3.29166 12.8578 3.3934 12.9 3.49949 12.9C3.60557 12.9 3.70731 12.8578 3.78233 12.7828L5.78233 10.7828C5.93854 10.6266 5.93854 10.3733 5.78233 10.2171C5.62612 10.0609 5.37285 10.0609 5.21664 10.2171L3.89949 11.5343L3.89949 3.46566L5.21664 4.78282C5.37285 4.93903 5.62612 4.93903 5.78233 4.78282C5.93854 4.62661 5.93854 4.37334 5.78233 4.21713L3.78233 2.21713ZM8.49998 3.99997C8.22383 3.99997 7.99998 4.22382 7.99998 4.49997C7.99998 4.77611 8.22383 4.99997 8.49998 4.99997H14.5C14.7761 4.99997 15 4.77611 15 4.49997C15 4.22382 14.7761 3.99997 14.5 3.99997H8.49998ZM7.99998 7.49997C7.99998 7.22382 8.22383 6.99997 8.49998 6.99997H14.5C14.7761 6.99997 15 7.22382 15 7.49997C15 7.77611 14.7761 7.99997 14.5 7.99997H8.49998C8.22383 7.99997 7.99998 7.77611 7.99998 7.49997ZM8.49998 9.99997C8.22383 9.99997 7.99998 10.2238 7.99998 10.5C7.99998 10.7761 8.22383 11 8.49998 11H14.5C14.7761 11 15 10.7761 15 10.5C15 10.2238 14.7761 9.99997 14.5 9.99997H8.49998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Link1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.62471 4.00001L4.56402 4.00001C4.04134 3.99993 3.70687 3.99988 3.4182 4.055C2.2379 4.28039 1.29846 5.17053 1.05815 6.33035C0.999538 6.61321 0.999604 6.93998 0.999703 7.43689L0.999711 7.50001L0.999703 7.56313C0.999604 8.06004 0.999538 8.38681 1.05815 8.66967C1.29846 9.8295 2.2379 10.7196 3.4182 10.945C3.70688 11.0001 4.04135 11.0001 4.56403 11L4.62471 11H5.49971C5.77585 11 5.99971 10.7762 5.99971 10.5C5.99971 10.2239 5.77585 10 5.49971 10H4.62471C4.02084 10 3.78907 9.99777 3.60577 9.96277C2.80262 9.8094 2.19157 9.21108 2.03735 8.46678C2.00233 8.29778 1.99971 8.08251 1.99971 7.50001C1.99971 6.91752 2.00233 6.70225 2.03735 6.53324C2.19157 5.78895 2.80262 5.19062 3.60577 5.03725C3.78907 5.00225 4.02084 5.00001 4.62471 5.00001H5.49971C5.77585 5.00001 5.99971 4.77615 5.99971 4.50001C5.99971 4.22387 5.77585 4.00001 5.49971 4.00001H4.62471ZM10.3747 5.00001C10.9786 5.00001 11.2104 5.00225 11.3937 5.03725C12.1968 5.19062 12.8079 5.78895 12.9621 6.53324C12.9971 6.70225 12.9997 6.91752 12.9997 7.50001C12.9997 8.08251 12.9971 8.29778 12.9621 8.46678C12.8079 9.21108 12.1968 9.8094 11.3937 9.96277C11.2104 9.99777 10.9786 10 10.3747 10H9.49971C9.22357 10 8.99971 10.2239 8.99971 10.5C8.99971 10.7762 9.22357 11 9.49971 11H10.3747L10.4354 11C10.9581 11.0001 11.2925 11.0001 11.5812 10.945C12.7615 10.7196 13.701 9.8295 13.9413 8.66967C13.9999 8.38681 13.9998 8.06005 13.9997 7.56314L13.9997 7.50001L13.9997 7.43688C13.9998 6.93998 13.9999 6.61321 13.9413 6.33035C13.701 5.17053 12.7615 4.28039 11.5812 4.055C11.2925 3.99988 10.9581 3.99993 10.4354 4.00001L10.3747 4.00001H9.49971C9.22357 4.00001 8.99971 4.22387 8.99971 4.50001C8.99971 4.77615 9.22357 5.00001 9.49971 5.00001H10.3747ZM5.00038 7C4.72424 7 4.50038 7.22386 4.50038 7.5C4.50038 7.77614 4.72424 8 5.00038 8H10.0004C10.2765 8 10.5004 7.77614 10.5004 7.5C10.5004 7.22386 10.2765 7 10.0004 7H5.00038Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Link2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8.51194 3.00541C9.18829 2.54594 10.0435 2.53694 10.6788 2.95419C10.8231 3.04893 10.9771 3.1993 11.389 3.61119C11.8009 4.02307 11.9513 4.17714 12.046 4.32141C12.4633 4.95675 12.4543 5.81192 11.9948 6.48827C11.8899 6.64264 11.7276 6.80811 11.3006 7.23511L10.6819 7.85383C10.4867 8.04909 10.4867 8.36567 10.6819 8.56093C10.8772 8.7562 11.1938 8.7562 11.389 8.56093L12.0077 7.94221L12.0507 7.89929C12.4203 7.52976 12.6568 7.2933 12.822 7.0502C13.4972 6.05623 13.5321 4.76252 12.8819 3.77248C12.7233 3.53102 12.4922 3.30001 12.1408 2.94871L12.0961 2.90408L12.0515 2.85942C11.7002 2.508 11.4692 2.27689 11.2277 2.11832C10.2377 1.46813 8.94398 1.50299 7.95001 2.17822C7.70691 2.34336 7.47044 2.57991 7.1009 2.94955L7.058 2.99247L6.43928 3.61119C6.24401 3.80645 6.24401 4.12303 6.43928 4.31829C6.63454 4.51355 6.95112 4.51355 7.14638 4.31829L7.7651 3.69957C8.1921 3.27257 8.35757 3.11027 8.51194 3.00541ZM4.31796 7.14672C4.51322 6.95146 4.51322 6.63487 4.31796 6.43961C4.12269 6.24435 3.80611 6.24435 3.61085 6.43961L2.99213 7.05833L2.94922 7.10124C2.57957 7.47077 2.34303 7.70724 2.17788 7.95035C1.50265 8.94432 1.4678 10.238 2.11799 11.2281C2.27656 11.4695 2.50766 11.7005 2.8591 12.0518L2.90374 12.0965L2.94837 12.1411C3.29967 12.4925 3.53068 12.7237 3.77214 12.8822C4.76219 13.5324 6.05589 13.4976 7.04986 12.8223C7.29296 12.6572 7.52943 12.4206 7.89896 12.051L7.89897 12.051L7.94188 12.0081L8.5606 11.3894C8.75586 11.1941 8.75586 10.8775 8.5606 10.6823C8.36533 10.487 8.04875 10.487 7.85349 10.6823L7.23477 11.301C6.80777 11.728 6.6423 11.8903 6.48794 11.9951C5.81158 12.4546 4.95642 12.4636 4.32107 12.0464C4.17681 11.9516 4.02274 11.8012 3.61085 11.3894C3.19896 10.9775 3.0486 10.8234 2.95385 10.6791C2.53661 10.0438 2.54561 9.18863 3.00507 8.51227C3.10993 8.35791 3.27224 8.19244 3.69924 7.76544L4.31796 7.14672ZM9.62172 6.08558C9.81698 5.89032 9.81698 5.57373 9.62172 5.37847C9.42646 5.18321 9.10988 5.18321 8.91461 5.37847L5.37908 8.91401C5.18382 9.10927 5.18382 9.42585 5.37908 9.62111C5.57434 9.81637 5.89092 9.81637 6.08619 9.62111L9.62172 6.08558Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LinkBreak1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.3536 2.35355C13.5488 2.15829 13.5488 1.84171 13.3536 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L1.64645 12.6464C1.45118 12.8417 1.45118 13.1583 1.64645 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L13.3536 2.35355ZM2.03735 8.46678C2.17398 9.12619 2.66918 9.67103 3.33886 9.89338L2.57833 10.6539C1.80843 10.2534 1.23784 9.53693 1.05815 8.66967C0.999538 8.38681 0.999604 8.06004 0.999703 7.56313L0.999711 7.50001L0.999703 7.43689C0.999604 6.93998 0.999538 6.61321 1.05815 6.33035C1.29846 5.17053 2.2379 4.28039 3.4182 4.055C3.70687 3.99988 4.04134 3.99993 4.56402 4.00001L4.62471 4.00001H5.49971C5.77585 4.00001 5.99971 4.22387 5.99971 4.50001C5.99971 4.77615 5.77585 5.00001 5.49971 5.00001H4.62471C4.02084 5.00001 3.78907 5.00225 3.60577 5.03725C2.80262 5.19062 2.19157 5.78895 2.03735 6.53324C2.00233 6.70225 1.99971 6.91752 1.99971 7.50001C1.99971 8.08251 2.00233 8.29778 2.03735 8.46678ZM12.9621 6.53324C12.8255 5.87397 12.3304 5.32922 11.661 5.10679L12.4215 4.34631C13.1912 4.74686 13.7616 5.46323 13.9413 6.33035C13.9999 6.61321 13.9998 6.93998 13.9997 7.43688L13.9997 7.50001L13.9997 7.56314C13.9998 8.06005 13.9999 8.38681 13.9413 8.66967C13.701 9.8295 12.7615 10.7196 11.5812 10.945C11.2925 11.0001 10.9581 11.0001 10.4354 11L10.3747 11H9.49971C9.22357 11 8.99971 10.7762 8.99971 10.5C8.99971 10.2239 9.22357 10 9.49971 10H10.3747C10.9786 10 11.2104 9.99777 11.3937 9.96277C12.1968 9.8094 12.8079 9.21108 12.9621 8.46678C12.9971 8.29778 12.9997 8.08251 12.9997 7.50001C12.9997 6.91752 12.9971 6.70225 12.9621 6.53324Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LinkBreak2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.50021 0C4.77635 0 5.0002 0.223853 5.0002 0.49999V2.49995C5.0002 2.77609 4.77635 2.99994 4.50021 2.99994C4.22408 2.99994 4.00022 2.77609 4.00022 2.49995V0.49999C4.00022 0.223853 4.22408 0 4.50021 0ZM0.646451 0.64647C0.84171 0.451212 1.15829 0.451212 1.35354 0.64647L2.85351 2.14644C3.04877 2.3417 3.04877 2.65827 2.85351 2.85353C2.65826 3.04879 2.34168 3.04879 2.14642 2.85353L0.646452 1.35356C0.451193 1.1583 0.451193 0.841728 0.646451 0.64647ZM0.00030517 4.49991C0.00030517 4.22377 0.224158 3.99992 0.500295 3.99992H2.50025C2.77639 3.99992 3.00024 4.22377 3.00024 4.49991C3.00024 4.77605 2.77639 4.9999 2.50025 4.9999H0.500295C0.224158 4.9999 0.00030517 4.77605 0.00030517 4.49991ZM12.0001 10.4998C12.0001 10.2236 12.2239 9.9998 12.5001 9.9998H14.5C14.7761 9.9998 15 10.2236 15 10.4998C15 10.7759 14.7761 10.9998 14.5 10.9998H12.5001C12.2239 10.9998 12.0001 10.7759 12.0001 10.4998ZM10.5001 11.9998C10.7762 11.9998 11.0001 12.2236 11.0001 12.4997V14.4997C11.0001 14.7758 10.7762 14.9997 10.5001 14.9997C10.224 14.9997 10.0001 14.7758 10.0001 14.4997V12.4997C10.0001 12.2236 10.224 11.9998 10.5001 11.9998ZM12.1462 12.1462C12.3415 11.951 12.658 11.951 12.8533 12.1462L14.3533 13.6462C14.5485 13.8415 14.5485 14.158 14.3533 14.3533C14.158 14.5485 13.8414 14.5485 13.6462 14.3533L12.1462 12.8533C11.951 12.6581 11.951 12.3415 12.1462 12.1462ZM7.76478 3.69938C8.19177 3.27238 8.35724 3.11008 8.5116 3.00522C9.18794 2.54577 10.0431 2.53677 10.6784 2.95401C10.8227 3.04875 10.9767 3.19911 11.3886 3.61099C11.8005 4.02287 11.9509 4.17694 12.0456 4.3212C12.4628 4.95653 12.4539 5.81168 11.9944 6.48802C11.8895 6.64238 11.7272 6.80785 11.3002 7.23484L10.6815 7.85354C10.4863 8.0488 10.4863 8.36538 10.6815 8.56064C10.8768 8.75589 11.1934 8.75589 11.3886 8.56064L12.0073 7.94193L12.0502 7.89903C12.4199 7.5295 12.6564 7.29303 12.8216 7.04993C13.4968 6.05598 13.5316 4.7623 12.8815 3.77228C12.7229 3.53083 12.4918 3.29982 12.1404 2.94853L12.0957 2.9039L12.0511 2.85925C11.6998 2.50782 11.4688 2.27672 11.2273 2.11816C10.2373 1.46798 8.94364 1.50284 7.94968 2.17805C7.70659 2.34319 7.47012 2.57973 7.1006 2.94936L7.1006 2.94937L7.05769 2.99228L6.43898 3.61099C6.24372 3.80625 6.24372 4.12282 6.43898 4.31808C6.63424 4.51334 6.95081 4.51334 7.14607 4.31808L7.76478 3.69938ZM2.99191 7.05807L2.94899 7.10097C2.57935 7.4705 2.34282 7.70697 2.17767 7.95006C1.50246 8.94401 1.4676 10.2377 2.11778 11.2277C2.27634 11.4692 2.50744 11.7002 2.85886 12.0515L2.85888 12.0515L2.90352 12.0961L2.94815 12.1407L2.94815 12.1407L2.94817 12.1408C3.29945 12.4922 3.53045 12.7233 3.7719 12.8818C4.76193 13.532 6.0556 13.4972 7.04956 12.8219C7.29265 12.6568 7.52912 12.4203 7.89865 12.0506L7.94155 12.0077L8.56026 11.389C8.75552 11.1937 8.75552 10.8772 8.56026 10.6819C8.365 10.4867 8.04842 10.4867 7.85317 10.6819L7.23446 11.3006C6.80747 11.7276 6.642 11.8899 6.48764 11.9948C5.8113 12.4542 4.95615 12.4632 4.32082 12.046C4.17656 11.9512 4.02249 11.8009 3.61061 11.389C3.19873 10.9771 3.04837 10.8231 2.95363 10.6788C2.53639 10.0435 2.54539 9.18832 3.00484 8.51198C3.10971 8.35761 3.27201 8.19215 3.699 7.76516L4.3177 7.14645C4.51296 6.95119 4.51296 6.63462 4.3177 6.43936C4.12245 6.2441 3.80587 6.2441 3.61061 6.43936L2.99191 7.05807Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LinkNone1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.56427 3.99988C4.58422 3.99989 4.60445 3.99989 4.62496 3.99989H5.49996C5.7761 3.99989 5.99996 4.22375 5.99996 4.49989C5.99996 4.77603 5.7761 4.99989 5.49996 4.99989H4.62496C4.02108 4.99989 3.78932 5.00213 3.60601 5.03713C2.80287 5.1905 2.19181 5.78883 2.03759 6.53312C2.00257 6.70212 1.99996 6.91739 1.99996 7.49989C1.99996 8.08239 2.00257 8.29766 2.03759 8.46666C2.19181 9.21095 2.80287 9.80928 3.60601 9.96265C3.78932 9.99765 4.02108 9.99989 4.62496 9.99989H5.49996C5.7761 9.99989 5.99996 10.2237 5.99996 10.4999C5.99996 10.776 5.7761 10.9999 5.49996 10.9999H4.62496C4.60445 10.9999 4.58422 10.9999 4.56427 10.9999C4.04159 11 3.70712 11 3.41845 10.9449C2.23814 10.7195 1.29871 9.82937 1.05839 8.66955C0.999782 8.38669 0.999848 8.05992 0.999947 7.56301C0.999951 7.54227 0.999955 7.52123 0.999955 7.49989C0.999955 7.47855 0.999951 7.45751 0.999947 7.43677C0.999848 6.93986 0.999782 6.61309 1.05839 6.33023C1.29871 5.17041 2.23814 4.28027 3.41845 4.05488C3.70712 3.99976 4.04159 3.99981 4.56427 3.99988ZM11.3939 5.03713C11.2106 5.00213 10.9788 4.99989 10.375 4.99989H9.49996C9.22381 4.99989 8.99996 4.77603 8.99996 4.49989C8.99996 4.22375 9.22381 3.99989 9.49996 3.99989H10.375C10.3955 3.99989 10.4157 3.99989 10.4356 3.99988C10.9583 3.99981 11.2928 3.99976 11.5815 4.05488C12.7618 4.28027 13.7012 5.17041 13.9415 6.33023C14.0001 6.61309 14.0001 6.93985 14 7.43676C14 7.4575 14 7.47854 14 7.49989C14 7.52124 14 7.54228 14 7.56302C14.0001 8.05992 14.0001 8.38669 13.9415 8.66955C13.7012 9.82937 12.7618 10.7195 11.5815 10.9449C11.2928 11 10.9583 11 10.4356 10.9999C10.4157 10.9999 10.3955 10.9999 10.375 10.9999H9.49996C9.22381 10.9999 8.99996 10.776 8.99996 10.4999C8.99996 10.2237 9.22381 9.99989 9.49996 9.99989H10.375C10.9788 9.99989 11.2106 9.99765 11.3939 9.96265C12.197 9.80928 12.8081 9.21095 12.9623 8.46666C12.9973 8.29766 13 8.08239 13 7.49989C13 6.91739 12.9973 6.70212 12.9623 6.53312C12.8081 5.78883 12.197 5.1905 11.3939 5.03713Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LinkNone2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.6788 2.95419C10.0435 2.53694 9.18829 2.54594 8.51194 3.00541C8.35757 3.11027 8.1921 3.27257 7.7651 3.69957L7.14638 4.31829C6.95112 4.51355 6.63454 4.51355 6.43928 4.31829C6.24401 4.12303 6.24401 3.80645 6.43928 3.61119L7.058 2.99247C7.0725 2.97797 7.08679 2.96366 7.1009 2.94955C7.47044 2.57991 7.70691 2.34336 7.95001 2.17822C8.94398 1.50299 10.2377 1.46813 11.2277 2.11832C11.4692 2.27689 11.7002 2.508 12.0515 2.85942C12.0662 2.8741 12.081 2.88898 12.0961 2.90408C12.1112 2.91917 12.1261 2.93405 12.1408 2.94871C12.4922 3.30001 12.7233 3.53102 12.8819 3.77248C13.5321 4.76252 13.4972 6.05623 12.822 7.0502C12.6568 7.2933 12.4203 7.52976 12.0507 7.89929C12.0366 7.9134 12.0222 7.92771 12.0077 7.94221L11.389 8.56093C11.1938 8.7562 10.8772 8.7562 10.6819 8.56093C10.4867 8.36567 10.4867 8.04909 10.6819 7.85383L11.3006 7.23511C11.7276 6.80811 11.8899 6.64264 11.9948 6.48827C12.4543 5.81192 12.4633 4.95675 12.046 4.32141C11.9513 4.17714 11.8009 4.02307 11.389 3.61119C10.9771 3.1993 10.8231 3.04893 10.6788 2.95419ZM4.31796 6.43961C4.51322 6.63487 4.51322 6.95146 4.31796 7.14672L3.69924 7.76544C3.27224 8.19244 3.10993 8.35791 3.00507 8.51227C2.54561 9.18863 2.53661 10.0438 2.95385 10.6791C3.0486 10.8234 3.19896 10.9775 3.61085 11.3894C4.02274 11.8012 4.17681 11.9516 4.32107 12.0464C4.95642 12.4636 5.81158 12.4546 6.48794 11.9951C6.6423 11.8903 6.80777 11.728 7.23477 11.301L7.85349 10.6823C8.04875 10.487 8.36533 10.487 8.5606 10.6823C8.75586 10.8775 8.75586 11.1941 8.5606 11.3894L7.94188 12.0081C7.92738 12.0226 7.91307 12.0369 7.89897 12.051C7.52943 12.4206 7.29296 12.6572 7.04986 12.8223C6.05589 13.4976 4.76219 13.5324 3.77214 12.8822C3.53068 12.7237 3.29967 12.4925 2.94837 12.1411C2.93371 12.1264 2.91883 12.1116 2.90374 12.0965C2.88865 12.0814 2.87377 12.0665 2.8591 12.0518C2.50766 11.7005 2.27656 11.4695 2.11799 11.2281C1.4678 10.238 1.50265 8.94432 2.17788 7.95035C2.34303 7.70724 2.57957 7.47077 2.94922 7.10124C2.96333 7.08713 2.97763 7.07283 2.99213 7.05833L3.61085 6.43961C3.80611 6.24435 4.12269 6.24435 4.31796 6.43961Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ListBulletIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 5.25C1.91421 5.25 2.25 4.91421 2.25 4.5C2.25 4.08579 1.91421 3.75 1.5 3.75C1.08579 3.75 0.75 4.08579 0.75 4.5C0.75 4.91421 1.08579 5.25 1.5 5.25ZM4 4.5C4 4.22386 4.22386 4 4.5 4H13.5C13.7761 4 14 4.22386 14 4.5C14 4.77614 13.7761 5 13.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H13.5C13.7761 8 14 7.77614 14 7.5C14 7.22386 13.7761 7 13.5 7H4.5ZM4.5 10C4.22386 10 4 10.2239 4 10.5C4 10.7761 4.22386 11 4.5 11H13.5C13.7761 11 14 10.7761 14 10.5C14 10.2239 13.7761 10 13.5 10H4.5ZM2.25 7.5C2.25 7.91421 1.91421 8.25 1.5 8.25C1.08579 8.25 0.75 7.91421 0.75 7.5C0.75 7.08579 1.08579 6.75 1.5 6.75C1.91421 6.75 2.25 7.08579 2.25 7.5ZM1.5 11.25C1.91421 11.25 2.25 10.9142 2.25 10.5C2.25 10.0858 1.91421 9.75 1.5 9.75C1.08579 9.75 0.75 10.0858 0.75 10.5C0.75 10.9142 1.08579 11.25 1.5 11.25Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LockClosedIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LockOpen1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.4986 0C6.3257 0 5.36107 0.38943 4.73753 1.19361C4.23745 1.83856 4 2.68242 4 3.63325H5C5 2.84313 5.19691 2.23312 5.5278 1.80636C5.91615 1.30552 6.55152 1 7.4986 1C8.35683 1 8.96336 1.26502 9.35846 1.68623C9.75793 2.11211 10 2.76044 10 3.63601V6H3C2.44772 6 2 6.44772 2 7V13C2 13.5523 2.44772 14 3 14H12C12.5523 14 13 13.5523 13 13V7C13 6.44771 12.5523 6 12 6H11V3.63601C11 2.58135 10.7065 1.66167 10.0878 1.0021C9.46477 0.337871 8.57061 0 7.4986 0ZM3 7H12V13H3V7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LockOpen2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9 3.63601C9 2.76044 9.24207 2.11211 9.64154 1.68623C10.0366 1.26502 10.6432 1 11.5014 1C12.4485 1 13.0839 1.30552 13.4722 1.80636C13.8031 2.23312 14 2.84313 14 3.63325H15C15 2.68242 14.7626 1.83856 14.2625 1.19361C13.6389 0.38943 12.6743 0 11.5014 0C10.4294 0 9.53523 0.337871 8.91218 1.0021C8.29351 1.66167 8 2.58135 8 3.63601V6H1C0.447715 6 0 6.44772 0 7V13C0 13.5523 0.447715 14 1 14H10C10.5523 14 11 13.5523 11 13V7C11 6.44772 10.5523 6 10 6H9V3.63601ZM1 7H10V13H1V7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var LoopIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.35355 1.85355C3.54882 1.65829 3.54882 1.34171 3.35355 1.14645C3.15829 0.951184 2.84171 0.951184 2.64645 1.14645L0.646447 3.14645C0.451184 3.34171 0.451184 3.65829 0.646447 3.85355L2.64645 5.85355C2.84171 6.04882 3.15829 6.04882 3.35355 5.85355C3.54882 5.65829 3.54882 5.34171 3.35355 5.14645L2.20711 4H9.5C11.433 4 13 5.567 13 7.5C13 7.77614 13.2239 8 13.5 8C13.7761 8 14 7.77614 14 7.5C14 5.01472 11.9853 3 9.5 3H2.20711L3.35355 1.85355ZM2 7.5C2 7.22386 1.77614 7 1.5 7C1.22386 7 1 7.22386 1 7.5C1 9.98528 3.01472 12 5.5 12H12.7929L11.6464 13.1464C11.4512 13.3417 11.4512 13.6583 11.6464 13.8536C11.8417 14.0488 12.1583 14.0488 12.3536 13.8536L14.3536 11.8536C14.5488 11.6583 14.5488 11.3417 14.3536 11.1464L12.3536 9.14645C12.1583 8.95118 11.8417 8.95118 11.6464 9.14645C11.4512 9.34171 11.4512 9.65829 11.6464 9.85355L12.7929 11H5.5C3.567 11 2 9.433 2 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MagicWandIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.9 0.499976C13.9 0.279062 13.7209 0.0999756 13.5 0.0999756C13.2791 0.0999756 13.1 0.279062 13.1 0.499976V1.09998H12.5C12.2791 1.09998 12.1 1.27906 12.1 1.49998C12.1 1.72089 12.2791 1.89998 12.5 1.89998H13.1V2.49998C13.1 2.72089 13.2791 2.89998 13.5 2.89998C13.7209 2.89998 13.9 2.72089 13.9 2.49998V1.89998H14.5C14.7209 1.89998 14.9 1.72089 14.9 1.49998C14.9 1.27906 14.7209 1.09998 14.5 1.09998H13.9V0.499976ZM11.8536 3.14642C12.0488 3.34168 12.0488 3.65826 11.8536 3.85353L10.8536 4.85353C10.6583 5.04879 10.3417 5.04879 10.1465 4.85353C9.9512 4.65827 9.9512 4.34169 10.1465 4.14642L11.1464 3.14643C11.3417 2.95116 11.6583 2.95116 11.8536 3.14642ZM9.85357 5.14642C10.0488 5.34168 10.0488 5.65827 9.85357 5.85353L2.85355 12.8535C2.65829 13.0488 2.34171 13.0488 2.14645 12.8535C1.95118 12.6583 1.95118 12.3417 2.14645 12.1464L9.14646 5.14642C9.34172 4.95116 9.65831 4.95116 9.85357 5.14642ZM13.5 5.09998C13.7209 5.09998 13.9 5.27906 13.9 5.49998V6.09998H14.5C14.7209 6.09998 14.9 6.27906 14.9 6.49998C14.9 6.72089 14.7209 6.89998 14.5 6.89998H13.9V7.49998C13.9 7.72089 13.7209 7.89998 13.5 7.89998C13.2791 7.89998 13.1 7.72089 13.1 7.49998V6.89998H12.5C12.2791 6.89998 12.1 6.72089 12.1 6.49998C12.1 6.27906 12.2791 6.09998 12.5 6.09998H13.1V5.49998C13.1 5.27906 13.2791 5.09998 13.5 5.09998ZM8.90002 0.499976C8.90002 0.279062 8.72093 0.0999756 8.50002 0.0999756C8.2791 0.0999756 8.10002 0.279062 8.10002 0.499976V1.09998H7.50002C7.2791 1.09998 7.10002 1.27906 7.10002 1.49998C7.10002 1.72089 7.2791 1.89998 7.50002 1.89998H8.10002V2.49998C8.10002 2.72089 8.2791 2.89998 8.50002 2.89998C8.72093 2.89998 8.90002 2.72089 8.90002 2.49998V1.89998H9.50002C9.72093 1.89998 9.90002 1.72089 9.90002 1.49998C9.90002 1.27906 9.72093 1.09998 9.50002 1.09998H8.90002V0.499976Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MagnifyingGlassIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MarginIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.49988 2.00012C1.77602 2.00012 1.99988 1.77626 1.99988 1.50012C1.99988 1.22398 1.77602 1.00012 1.49988 1.00012C1.22374 1.00012 0.999878 1.22398 0.999878 1.50012C0.999878 1.77626 1.22374 2.00012 1.49988 2.00012ZM4.49988 2.00012C4.77602 2.00012 4.99988 1.77626 4.99988 1.50012C4.99988 1.22398 4.77602 1.00012 4.49988 1.00012C4.22374 1.00012 3.99988 1.22398 3.99988 1.50012C3.99988 1.77626 4.22374 2.00012 4.49988 2.00012ZM7.99988 1.50012C7.99988 1.77626 7.77602 2.00012 7.49988 2.00012C7.22374 2.00012 6.99988 1.77626 6.99988 1.50012C6.99988 1.22398 7.22374 1.00012 7.49988 1.00012C7.77602 1.00012 7.99988 1.22398 7.99988 1.50012ZM10.4999 2.00012C10.776 2.00012 10.9999 1.77626 10.9999 1.50012C10.9999 1.22398 10.776 1.00012 10.4999 1.00012C10.2237 1.00012 9.99988 1.22398 9.99988 1.50012C9.99988 1.77626 10.2237 2.00012 10.4999 2.00012ZM13.9999 1.50012C13.9999 1.77626 13.776 2.00012 13.4999 2.00012C13.2237 2.00012 12.9999 1.77626 12.9999 1.50012C12.9999 1.22398 13.2237 1.00012 13.4999 1.00012C13.776 1.00012 13.9999 1.22398 13.9999 1.50012ZM1.49988 14.0001C1.77602 14.0001 1.99988 13.7763 1.99988 13.5001C1.99988 13.224 1.77602 13.0001 1.49988 13.0001C1.22374 13.0001 0.999878 13.224 0.999878 13.5001C0.999878 13.7763 1.22374 14.0001 1.49988 14.0001ZM1.99988 10.5001C1.99988 10.7763 1.77602 11.0001 1.49988 11.0001C1.22374 11.0001 0.999878 10.7763 0.999878 10.5001C0.999878 10.224 1.22374 10.0001 1.49988 10.0001C1.77602 10.0001 1.99988 10.224 1.99988 10.5001ZM1.49988 8.00012C1.77602 8.00012 1.99988 7.77626 1.99988 7.50012C1.99988 7.22398 1.77602 7.00012 1.49988 7.00012C1.22374 7.00012 0.999878 7.22398 0.999878 7.50012C0.999878 7.77626 1.22374 8.00012 1.49988 8.00012ZM1.99988 4.50012C1.99988 4.77626 1.77602 5.00012 1.49988 5.00012C1.22374 5.00012 0.999878 4.77626 0.999878 4.50012C0.999878 4.22398 1.22374 4.00012 1.49988 4.00012C1.77602 4.00012 1.99988 4.22398 1.99988 4.50012ZM13.4999 11.0001C13.776 11.0001 13.9999 10.7763 13.9999 10.5001C13.9999 10.224 13.776 10.0001 13.4999 10.0001C13.2237 10.0001 12.9999 10.224 12.9999 10.5001C12.9999 10.7763 13.2237 11.0001 13.4999 11.0001ZM13.9999 7.50012C13.9999 7.77626 13.776 8.00012 13.4999 8.00012C13.2237 8.00012 12.9999 7.77626 12.9999 7.50012C12.9999 7.22398 13.2237 7.00012 13.4999 7.00012C13.776 7.00012 13.9999 7.22398 13.9999 7.50012ZM13.4999 5.00012C13.776 5.00012 13.9999 4.77626 13.9999 4.50012C13.9999 4.22398 13.776 4.00012 13.4999 4.00012C13.2237 4.00012 12.9999 4.22398 12.9999 4.50012C12.9999 4.77626 13.2237 5.00012 13.4999 5.00012ZM4.99988 13.5001C4.99988 13.7763 4.77602 14.0001 4.49988 14.0001C4.22374 14.0001 3.99988 13.7763 3.99988 13.5001C3.99988 13.224 4.22374 13.0001 4.49988 13.0001C4.77602 13.0001 4.99988 13.224 4.99988 13.5001ZM7.49988 14.0001C7.77602 14.0001 7.99988 13.7763 7.99988 13.5001C7.99988 13.224 7.77602 13.0001 7.49988 13.0001C7.22374 13.0001 6.99988 13.224 6.99988 13.5001C6.99988 13.7763 7.22374 14.0001 7.49988 14.0001ZM10.9999 13.5001C10.9999 13.7763 10.776 14.0001 10.4999 14.0001C10.2237 14.0001 9.99988 13.7763 9.99988 13.5001C9.99988 13.224 10.2237 13.0001 10.4999 13.0001C10.776 13.0001 10.9999 13.224 10.9999 13.5001ZM13.4999 14.0001C13.776 14.0001 13.9999 13.7763 13.9999 13.5001C13.9999 13.224 13.776 13.0001 13.4999 13.0001C13.2237 13.0001 12.9999 13.224 12.9999 13.5001C12.9999 13.7763 13.2237 14.0001 13.4999 14.0001ZM3.99988 5.00012C3.99988 4.44784 4.44759 4.00012 4.99988 4.00012H9.99988C10.5522 4.00012 10.9999 4.44784 10.9999 5.00012V10.0001C10.9999 10.5524 10.5522 11.0001 9.99988 11.0001H4.99988C4.44759 11.0001 3.99988 10.5524 3.99988 10.0001V5.00012ZM4.99988 5.00012H9.99988V10.0001H4.99988V5.00012Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MaskOffIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 2H14V13H1L1 2ZM0 2C0 1.44772 0.447715 1 1 1H14C14.5523 1 15 1.44772 15 2V13C15 13.5523 14.5523 14 14 14H1C0.447715 14 0 13.5523 0 13V2ZM4.875 7.5C4.875 6.05025 6.05025 4.875 7.5 4.875C8.94975 4.875 10.125 6.05025 10.125 7.5C10.125 8.94975 8.94975 10.125 7.5 10.125C6.05025 10.125 4.875 8.94975 4.875 7.5ZM7.5 3.875C5.49797 3.875 3.875 5.49797 3.875 7.5C3.875 9.50203 5.49797 11.125 7.5 11.125C9.50203 11.125 11.125 9.50203 11.125 7.5C11.125 5.49797 9.50203 3.875 7.5 3.875Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MaskOnIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 1C0.447715 1 0 1.44772 0 2V13C0 13.5523 0.447715 14 1 14H14C14.5523 14 15 13.5523 15 13V2C15 1.44772 14.5523 1 14 1H1ZM7.5 10.625C9.22589 10.625 10.625 9.22589 10.625 7.5C10.625 5.77411 9.22589 4.375 7.5 4.375C5.77411 4.375 4.375 5.77411 4.375 7.5C4.375 9.22589 5.77411 10.625 7.5 10.625Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MinusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.25 7.5C2.25 7.22386 2.47386 7 2.75 7H12.25C12.5261 7 12.75 7.22386 12.75 7.5C12.75 7.77614 12.5261 8 12.25 8H2.75C2.47386 8 2.25 7.77614 2.25 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MinusCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM4.50003 7C4.22389 7 4.00003 7.22386 4.00003 7.5C4.00003 7.77614 4.22389 8 4.50003 8H10.5C10.7762 8 11 7.77614 11 7.5C11 7.22386 10.7762 7 10.5 7H4.50003Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MixIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.14921 3.99996C2.14921 2.97778 2.97784 2.14915 4.00002 2.14915C5.02219 2.14915 5.85083 2.97778 5.85083 3.99996C5.85083 5.02213 5.02219 5.85077 4.00002 5.85077C2.97784 5.85077 2.14921 5.02213 2.14921 3.99996ZM4.00002 1.24915C2.48079 1.24915 1.24921 2.48073 1.24921 3.99996C1.24921 5.51919 2.48079 6.75077 4.00002 6.75077C5.51925 6.75077 6.75083 5.51919 6.75083 3.99996C6.75083 2.48073 5.51925 1.24915 4.00002 1.24915ZM5.82034 11.0001L2.49998 12.8369V9.16331L5.82034 11.0001ZM2.63883 8.21159C2.17228 7.9535 1.59998 8.29093 1.59998 8.82411V13.1761C1.59998 13.7093 2.17228 14.0467 2.63883 13.7886L6.57235 11.6126C7.05389 11.3462 7.05389 10.654 6.57235 10.3876L2.63883 8.21159ZM8.30001 9.00003C8.30001 8.61343 8.61341 8.30003 9.00001 8.30003H13C13.3866 8.30003 13.7 8.61343 13.7 9.00003V13C13.7 13.3866 13.3866 13.7 13 13.7H9.00001C8.61341 13.7 8.30001 13.3866 8.30001 13V9.00003ZM9.20001 9.20003V12.8H12.8V9.20003H9.20001ZM13.4432 2.19311C13.6189 2.01737 13.6189 1.73245 13.4432 1.55671C13.2675 1.38098 12.9826 1.38098 12.8068 1.55671L11 3.36353L9.19321 1.55674C9.01748 1.381 8.73255 1.381 8.55682 1.55674C8.38108 1.73247 8.38108 2.0174 8.55682 2.19313L10.3636 3.99992L8.55682 5.80671C8.38108 5.98245 8.38108 6.26737 8.55682 6.44311C8.73255 6.61885 9.01748 6.61885 9.19321 6.44311L11 4.63632L12.8068 6.44314C12.9826 6.61887 13.2675 6.61887 13.4432 6.44314C13.6189 6.2674 13.6189 5.98247 13.4432 5.80674L11.6364 3.99992L13.4432 2.19311Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MixerHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.5 3C4.67157 3 4 3.67157 4 4.5C4 5.32843 4.67157 6 5.5 6C6.32843 6 7 5.32843 7 4.5C7 3.67157 6.32843 3 5.5 3ZM3 5C3.01671 5 3.03323 4.99918 3.04952 4.99758C3.28022 6.1399 4.28967 7 5.5 7C6.71033 7 7.71978 6.1399 7.95048 4.99758C7.96677 4.99918 7.98329 5 8 5H13.5C13.7761 5 14 4.77614 14 4.5C14 4.22386 13.7761 4 13.5 4H8C7.98329 4 7.96677 4.00082 7.95048 4.00242C7.71978 2.86009 6.71033 2 5.5 2C4.28967 2 3.28022 2.86009 3.04952 4.00242C3.03323 4.00082 3.01671 4 3 4H1.5C1.22386 4 1 4.22386 1 4.5C1 4.77614 1.22386 5 1.5 5H3ZM11.9505 10.9976C11.7198 12.1399 10.7103 13 9.5 13C8.28967 13 7.28022 12.1399 7.04952 10.9976C7.03323 10.9992 7.01671 11 7 11H1.5C1.22386 11 1 10.7761 1 10.5C1 10.2239 1.22386 10 1.5 10H7C7.01671 10 7.03323 10.0008 7.04952 10.0024C7.28022 8.8601 8.28967 8 9.5 8C10.7103 8 11.7198 8.8601 11.9505 10.0024C11.9668 10.0008 11.9833 10 12 10H13.5C13.7761 10 14 10.2239 14 10.5C14 10.7761 13.7761 11 13.5 11H12C11.9833 11 11.9668 10.9992 11.9505 10.9976ZM8 10.5C8 9.67157 8.67157 9 9.5 9C10.3284 9 11 9.67157 11 10.5C11 11.3284 10.3284 12 9.5 12C8.67157 12 8 11.3284 8 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MixerVerticalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 1.5C5 1.22386 4.77614 1 4.5 1C4.22386 1 4 1.22386 4 1.5L4 7C4 7.01671 4.00082 7.03323 4.00242 7.04952C2.86009 7.28022 2 8.28967 2 9.5C2 10.7103 2.86009 11.7198 4.00242 11.9505C4.00082 11.9668 4 11.9833 4 12V13.5C4 13.7761 4.22386 14 4.5 14C4.77614 14 5 13.7761 5 13.5V12C5 11.9833 4.99918 11.9668 4.99758 11.9505C6.1399 11.7198 7 10.7103 7 9.5C7 8.28967 6.1399 7.28022 4.99758 7.04952C4.99918 7.03323 5 7.01671 5 7L5 1.5ZM11 1.5C11 1.22386 10.7761 1 10.5 1C10.2239 1 10 1.22386 10 1.5V3C10 3.01671 10.0008 3.03323 10.0024 3.04952C8.8601 3.28022 8 4.28967 8 5.5C8 6.71033 8.8601 7.71978 10.0024 7.95048C10.0008 7.96677 10 7.98329 10 8V13.5C10 13.7761 10.2239 14 10.5 14C10.7761 14 11 13.7761 11 13.5V8C11 7.98329 10.9992 7.96677 10.9976 7.95048C12.1399 7.71978 13 6.71033 13 5.5C13 4.28967 12.1399 3.28022 10.9976 3.04952C10.9992 3.03323 11 3.01671 11 3V1.5ZM4.5 8C3.67157 8 3 8.67157 3 9.5C3 10.3284 3.67157 11 4.5 11C5.32843 11 6 10.3284 6 9.5C6 8.67157 5.32843 8 4.5 8ZM9 5.5C9 4.67157 9.67157 4 10.5 4C11.3284 4 12 4.67157 12 5.5C12 6.32843 11.3284 7 10.5 7C9.67157 7 9 6.32843 9 5.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ModulzLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.25925 3.16667L4.37036 5.33333V1L7.25925 3.16667ZM1 8.22222L3.88889 6.05555L1 3.88889V8.22222ZM1 14L3.88889 11.8333L1 9.66666V14ZM7.74072 8.22222L10.6296 6.05555L7.74072 3.88889V8.22222ZM14 3.16667L11.1111 5.33333V1L14 3.16667ZM11.1111 11.1111L14 8.94444L11.1111 6.77777V11.1111ZM3.88889 11.1111L1 8.94444L3.88889 6.77777V11.1111ZM4.37036 6.05555L7.25925 8.22222V3.88889L4.37036 6.05555ZM3.88889 5.33333L1 3.16667L3.88889 1V5.33333ZM7.74072 3.16667L10.6296 5.33333V1L7.74072 3.16667ZM14 8.22222L11.1111 6.05555L14 3.88889V8.22222ZM11.1111 11.8333L14 14V9.66666L11.1111 11.8333Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MoonIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var MoveIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.81819 0.93179C7.64245 0.756054 7.35753 0.756054 7.18179 0.93179L5.43179 2.68179C5.25605 2.85753 5.25605 3.14245 5.43179 3.31819C5.60753 3.49392 5.89245 3.49392 6.06819 3.31819L6.99999 2.38638V5.49999C6.99999 5.77613 7.22385 5.99999 7.49999 5.99999C7.77613 5.99999 7.99999 5.77613 7.99999 5.49999V2.38638L8.93179 3.31819C9.10753 3.49392 9.39245 3.49392 9.56819 3.31819C9.74392 3.14245 9.74392 2.85753 9.56819 2.68179L7.81819 0.93179ZM7.99999 9.49999C7.99999 9.22385 7.77613 8.99999 7.49999 8.99999C7.22385 8.99999 6.99999 9.22385 6.99999 9.49999V12.6136L6.06819 11.6818C5.89245 11.5061 5.60753 11.5061 5.43179 11.6818C5.25605 11.8575 5.25605 12.1424 5.43179 12.3182L7.18179 14.0682C7.35753 14.2439 7.64245 14.2439 7.81819 14.0682L9.56819 12.3182C9.74392 12.1424 9.74392 11.8575 9.56819 11.6818C9.39245 11.5061 9.10753 11.5061 8.93179 11.6818L7.99999 12.6136V9.49999ZM8.99999 7.49999C8.99999 7.22385 9.22385 6.99999 9.49999 6.99999H12.6136L11.6818 6.06819C11.5061 5.89245 11.5061 5.60753 11.6818 5.43179C11.8575 5.25605 12.1424 5.25605 12.3182 5.43179L14.0682 7.18179C14.2439 7.35753 14.2439 7.64245 14.0682 7.81819L12.3182 9.56819C12.1424 9.74392 11.8575 9.74392 11.6818 9.56819C11.5061 9.39245 11.5061 9.10753 11.6818 8.93179L12.6136 7.99999H9.49999C9.22385 7.99999 8.99999 7.77613 8.99999 7.49999ZM3.31819 6.06819L2.38638 6.99999H5.49999C5.77613 6.99999 5.99999 7.22385 5.99999 7.49999C5.99999 7.77613 5.77613 7.99999 5.49999 7.99999H2.38638L3.31819 8.93179C3.49392 9.10753 3.49392 9.39245 3.31819 9.56819C3.14245 9.74392 2.85753 9.74392 2.68179 9.56819L0.93179 7.81819C0.756054 7.64245 0.756054 7.35753 0.93179 7.18179L2.68179 5.43179C2.85753 5.25605 3.14245 5.25605 3.31819 5.43179C3.49392 5.60753 3.49392 5.89245 3.31819 6.06819Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var NotionLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.25781 3.11684C3.67771 3.45796 3.83523 3.43193 4.62369 3.37933L12.0571 2.93299C12.2147 2.93299 12.0836 2.77571 12.0311 2.74957L10.7965 1.85711C10.56 1.67347 10.2448 1.46315 9.64083 1.51576L2.44308 2.04074C2.18059 2.06677 2.12815 2.19801 2.2327 2.30322L3.25781 3.11684ZM3.7041 4.84917V12.6704C3.7041 13.0907 3.91415 13.248 4.38693 13.222L12.5562 12.7493C13.0292 12.7233 13.0819 12.4341 13.0819 12.0927V4.32397C13.0819 3.98306 12.9508 3.79921 12.6612 3.82545L4.12422 4.32397C3.80918 4.35044 3.7041 4.50803 3.7041 4.84917ZM11.7688 5.26872C11.8212 5.50518 11.7688 5.74142 11.5319 5.76799L11.1383 5.84641V11.6205C10.7965 11.8042 10.4814 11.9092 10.2188 11.9092C9.79835 11.9092 9.69305 11.7779 9.37812 11.3844L6.80345 7.34249V11.2532L7.61816 11.437C7.61816 11.437 7.61816 11.9092 6.96086 11.9092L5.14879 12.0143C5.09615 11.9092 5.14879 11.647 5.33259 11.5944L5.80546 11.4634V6.29276L5.1489 6.24015C5.09625 6.00369 5.22739 5.66278 5.5954 5.63631L7.53935 5.50528L10.2188 9.5998V5.97765L9.53564 5.89924C9.4832 5.61018 9.69305 5.40028 9.95576 5.37425L11.7688 5.26872ZM1.83874 1.33212L9.32557 0.780787C10.245 0.701932 10.4815 0.754753 11.0594 1.17452L13.4492 2.85424C13.8436 3.14309 13.975 3.22173 13.975 3.53661V12.7493C13.975 13.3266 13.7647 13.6681 13.0293 13.7203L4.33492 14.2454C3.78291 14.2717 3.52019 14.193 3.23111 13.8253L1.47116 11.5419C1.1558 11.1216 1.02466 10.8071 1.02466 10.4392V2.25041C1.02466 1.77825 1.23504 1.38441 1.83874 1.33212Z",
        fill: color
    }));
});
var OpacityIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 1.5C4.5 4.25 3 6.5 3 9C3 11.4853 5.01472 13.5 7.5 13.5C9.98528 13.5 12 11.4853 12 9C12 6.5 10.5 4.25 7.5 1.5ZM11 9C11 7.11203 9.97315 5.27195 7.5 2.87357C5.02686 5.27195 4 7.11203 4 9C4 10.933 5.567 12.5 7.5 12.5C9.433 12.5 11 10.933 11 9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var OverlineIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.49985 1.10001C3.27894 1.10001 3.09985 1.27909 3.09985 1.50001C3.09985 1.72092 3.27894 1.90001 3.49985 1.90001H11.4999C11.7208 1.90001 11.8999 1.72092 11.8999 1.50001C11.8999 1.27909 11.7208 1.10001 11.4999 1.10001H3.49985ZM4.99995 4.25001C4.99995 3.97387 4.77609 3.75001 4.49995 3.75001C4.22381 3.75001 3.99995 3.97387 3.99995 4.25001V9.55001C3.99995 11.483 5.56695 13.05 7.49995 13.05C9.43295 13.05 11 11.483 11 9.55001V4.25001C11 3.97387 10.7761 3.75001 10.5 3.75001C10.2238 3.75001 9.99995 3.97387 9.99995 4.25001V9.55001C9.99995 10.9307 8.88066 12.05 7.49995 12.05C6.11924 12.05 4.99995 10.9307 4.99995 9.55001V4.25001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PaddingIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.85714 2H12.1429C12.6162 2 13 2.38376 13 2.85714V12.1429C13 12.6162 12.6162 13 12.1429 13H2.85714C2.38376 13 2 12.6162 2 12.1429V2.85714C2 2.38376 2.38376 2 2.85714 2ZM1 2.85714C1 1.83147 1.83147 1 2.85714 1H12.1429C13.1685 1 14 1.83147 14 2.85714V12.1429C14 13.1685 13.1685 14 12.1429 14H2.85714C1.83147 14 1 13.1685 1 12.1429V2.85714ZM7.49988 5.00012C7.77602 5.00012 7.99988 4.77626 7.99988 4.50012C7.99988 4.22398 7.77602 4.00012 7.49988 4.00012C7.22374 4.00012 6.99988 4.22398 6.99988 4.50012C6.99988 4.77626 7.22374 5.00012 7.49988 5.00012ZM4.49988 11.0001C4.77602 11.0001 4.99988 10.7763 4.99988 10.5001C4.99988 10.224 4.77602 10.0001 4.49988 10.0001C4.22374 10.0001 3.99988 10.224 3.99988 10.5001C3.99988 10.7763 4.22374 11.0001 4.49988 11.0001ZM4.99988 7.50012C4.99988 7.77626 4.77602 8.00012 4.49988 8.00012C4.22374 8.00012 3.99988 7.77626 3.99988 7.50012C3.99988 7.22398 4.22374 7.00012 4.49988 7.00012C4.77602 7.00012 4.99988 7.22398 4.99988 7.50012ZM4.49988 5.00012C4.77602 5.00012 4.99988 4.77626 4.99988 4.50012C4.99988 4.22398 4.77602 4.00012 4.49988 4.00012C4.22374 4.00012 3.99988 4.22398 3.99988 4.50012C3.99988 4.77626 4.22374 5.00012 4.49988 5.00012ZM10.9999 10.5001C10.9999 10.7763 10.776 11.0001 10.4999 11.0001C10.2237 11.0001 9.99988 10.7763 9.99988 10.5001C9.99988 10.224 10.2237 10.0001 10.4999 10.0001C10.776 10.0001 10.9999 10.224 10.9999 10.5001ZM10.4999 8.00012C10.776 8.00012 10.9999 7.77626 10.9999 7.50012C10.9999 7.22398 10.776 7.00012 10.4999 7.00012C10.2237 7.00012 9.99988 7.22398 9.99988 7.50012C9.99988 7.77626 10.2237 8.00012 10.4999 8.00012ZM10.9999 4.50012C10.9999 4.77626 10.776 5.00012 10.4999 5.00012C10.2237 5.00012 9.99988 4.77626 9.99988 4.50012C9.99988 4.22398 10.2237 4.00012 10.4999 4.00012C10.776 4.00012 10.9999 4.22398 10.9999 4.50012ZM7.49988 11.0001C7.77602 11.0001 7.99988 10.7763 7.99988 10.5001C7.99988 10.224 7.77602 10.0001 7.49988 10.0001C7.22374 10.0001 6.99988 10.224 6.99988 10.5001C6.99988 10.7763 7.22374 11.0001 7.49988 11.0001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PaperPlaneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.20307 1.04312C1.00481 0.954998 0.77234 1.0048 0.627577 1.16641C0.482813 1.32802 0.458794 1.56455 0.568116 1.75196L3.92115 7.50002L0.568116 13.2481C0.458794 13.4355 0.482813 13.672 0.627577 13.8336C0.77234 13.9952 1.00481 14.045 1.20307 13.9569L14.7031 7.95692C14.8836 7.87667 15 7.69761 15 7.50002C15 7.30242 14.8836 7.12336 14.7031 7.04311L1.20307 1.04312ZM4.84552 7.10002L2.21234 2.586L13.2689 7.50002L2.21234 12.414L4.84552 7.90002H9C9.22091 7.90002 9.4 7.72094 9.4 7.50002C9.4 7.27911 9.22091 7.10002 9 7.10002H4.84552Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PauseIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Pencil1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Pencil2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PersonIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 0.875C5.49797 0.875 3.875 2.49797 3.875 4.5C3.875 6.15288 4.98124 7.54738 6.49373 7.98351C5.2997 8.12901 4.27557 8.55134 3.50407 9.31167C2.52216 10.2794 2.02502 11.72 2.02502 13.5999C2.02502 13.8623 2.23769 14.0749 2.50002 14.0749C2.76236 14.0749 2.97502 13.8623 2.97502 13.5999C2.97502 11.8799 3.42786 10.7206 4.17091 9.9883C4.91536 9.25463 6.02674 8.87499 7.49995 8.87499C8.97317 8.87499 10.0846 9.25463 10.8291 9.98831C11.5721 10.7206 12.025 11.8799 12.025 13.5999C12.025 13.8623 12.2376 14.0749 12.5 14.0749C12.7623 14.075 12.975 13.8623 12.975 13.6C12.975 11.72 12.4778 10.2794 11.4959 9.31166C10.7244 8.55135 9.70025 8.12903 8.50625 7.98352C10.0187 7.5474 11.125 6.15289 11.125 4.5C11.125 2.49797 9.50203 0.875 7.5 0.875ZM4.825 4.5C4.825 3.02264 6.02264 1.825 7.5 1.825C8.97736 1.825 10.175 3.02264 10.175 4.5C10.175 5.97736 8.97736 7.175 7.5 7.175C6.02264 7.175 4.825 5.97736 4.825 4.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PieChartIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.85001 7.50043C1.85001 4.37975 4.37963 1.85001 7.50001 1.85001C10.6204 1.85001 13.15 4.37975 13.15 7.50043C13.15 10.6211 10.6204 13.1509 7.50001 13.1509C4.37963 13.1509 1.85001 10.6211 1.85001 7.50043ZM7.50001 0.850006C3.82728 0.850006 0.850006 3.82753 0.850006 7.50043C0.850006 11.1733 3.82728 14.1509 7.50001 14.1509C11.1727 14.1509 14.15 11.1733 14.15 7.50043C14.15 3.82753 11.1727 0.850006 7.50001 0.850006ZM7.00001 8.00001V3.12811C7.16411 3.10954 7.33094 3.10001 7.50001 3.10001C9.93006 3.10001 11.9 5.07014 11.9 7.50043C11.9 7.66935 11.8905 7.83604 11.872 8.00001H7.00001Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PilcrowIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3 5.5C3 7.983 4.99169 9 7 9V12.5C7 12.7761 7.22386 13 7.5 13C7.77614 13 8 12.7761 8 12.5V9V3.1H9V12.5C9 12.7761 9.22386 13 9.5 13C9.77614 13 10 12.7761 10 12.5V3.1H11.5C11.8038 3.1 12.05 2.85376 12.05 2.55C12.05 2.24624 11.8038 2 11.5 2H9.5H8H7.5H7C4.99169 2 3 3.017 3 5.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PinBottomIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.5 13.95C13.7485 13.95 13.95 13.7485 13.95 13.5C13.95 13.2514 13.7485 13.05 13.5 13.05L1.49995 13.05C1.25142 13.05 1.04995 13.2514 1.04995 13.5C1.04995 13.7485 1.25142 13.95 1.49995 13.95L13.5 13.95ZM11.0681 7.5683C11.2439 7.39257 11.2439 7.10764 11.0681 6.93191C10.8924 6.75617 10.6075 6.75617 10.4317 6.93191L7.94993 9.41371L7.94993 1.49998C7.94993 1.25146 7.74846 1.04998 7.49993 1.04998C7.2514 1.04998 7.04993 1.25146 7.04993 1.49998L7.04993 9.41371L4.56813 6.93191C4.39239 6.75617 4.10746 6.75617 3.93173 6.93191C3.75599 7.10764 3.75599 7.39257 3.93173 7.5683L7.18173 10.8183C7.35746 10.994 7.64239 10.994 7.81812 10.8183L11.0681 7.5683Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PinLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.05005 13.5C2.05005 13.7485 2.25152 13.95 2.50005 13.95C2.74858 13.95 2.95005 13.7485 2.95005 13.5L2.95005 1.49995C2.95005 1.25142 2.74858 1.04995 2.50005 1.04995C2.25152 1.04995 2.05005 1.25142 2.05005 1.49995L2.05005 13.5ZM8.4317 11.0681C8.60743 11.2439 8.89236 11.2439 9.06809 11.0681C9.24383 10.8924 9.24383 10.6075 9.06809 10.4317L6.58629 7.94993L14.5 7.94993C14.7485 7.94993 14.95 7.74846 14.95 7.49993C14.95 7.2514 14.7485 7.04993 14.5 7.04993L6.58629 7.04993L9.06809 4.56813C9.24383 4.39239 9.24383 4.10746 9.06809 3.93173C8.89236 3.75599 8.60743 3.75599 8.4317 3.93173L5.1817 7.18173C5.00596 7.35746 5.00596 7.64239 5.1817 7.81812L8.4317 11.0681Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PinRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.95 1.50005C12.95 1.25152 12.7485 1.05005 12.5 1.05005C12.2514 1.05005 12.05 1.25152 12.05 1.50005L12.05 13.5C12.05 13.7486 12.2514 13.95 12.5 13.95C12.7485 13.95 12.95 13.7486 12.95 13.5L12.95 1.50005ZM6.5683 3.93188C6.39257 3.75614 6.10764 3.75614 5.93191 3.93188C5.75617 4.10761 5.75617 4.39254 5.93191 4.56827L8.41371 7.05007L0.499984 7.05007C0.251456 7.05007 0.0499847 7.25155 0.0499847 7.50007C0.0499846 7.7486 0.251457 7.95007 0.499984 7.95007L8.41371 7.95007L5.93191 10.4319C5.75617 10.6076 5.75617 10.8925 5.93191 11.0683C6.10764 11.244 6.39257 11.244 6.56831 11.0683L9.8183 7.81827C9.99404 7.64254 9.99404 7.35761 9.8183 7.18188L6.5683 3.93188Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PinTopIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.50005 1.05005C1.25152 1.05005 1.05005 1.25152 1.05005 1.50005C1.05005 1.74858 1.25152 1.95005 1.50005 1.95005L13.5 1.95005C13.7486 1.95005 13.95 1.74858 13.95 1.50005C13.95 1.25152 13.7486 1.05005 13.5 1.05005H1.50005ZM3.93188 7.43169C3.75614 7.60743 3.75614 7.89236 3.93188 8.06809C4.10761 8.24383 4.39254 8.24383 4.56827 8.06809L7.05007 5.58629V13.5C7.05007 13.7485 7.25155 13.95 7.50007 13.95C7.7486 13.95 7.95007 13.7485 7.95007 13.5L7.95007 5.58629L10.4319 8.06809C10.6076 8.24383 10.8925 8.24383 11.0683 8.06809C11.244 7.89235 11.244 7.60743 11.0683 7.43169L7.81827 4.18169C7.64254 4.00596 7.35761 4.00596 7.18188 4.18169L3.93188 7.43169Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PlayIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PlusIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var PlusCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM7.50003 4C7.77617 4 8.00003 4.22386 8.00003 4.5V7H10.5C10.7762 7 11 7.22386 11 7.5C11 7.77614 10.7762 8 10.5 8H8.00003V10.5C8.00003 10.7761 7.77617 11 7.50003 11C7.22389 11 7.00003 10.7761 7.00003 10.5V8H4.50003C4.22389 8 4.00003 7.77614 4.00003 7.5C4.00003 7.22386 4.22389 7 4.50003 7H7.00003V4.5C7.00003 4.22386 7.22389 4 7.50003 4Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var QuestionMarkIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.07505 4.10001C5.07505 2.91103 6.25727 1.92502 7.50005 1.92502C8.74283 1.92502 9.92505 2.91103 9.92505 4.10001C9.92505 5.19861 9.36782 5.71436 8.61854 6.37884L8.58757 6.4063C7.84481 7.06467 6.92505 7.87995 6.92505 9.5C6.92505 9.81757 7.18248 10.075 7.50005 10.075C7.81761 10.075 8.07505 9.81757 8.07505 9.5C8.07505 8.41517 8.62945 7.90623 9.38156 7.23925L9.40238 7.22079C10.1496 6.55829 11.075 5.73775 11.075 4.10001C11.075 2.12757 9.21869 0.775024 7.50005 0.775024C5.7814 0.775024 3.92505 2.12757 3.92505 4.10001C3.92505 4.41758 4.18249 4.67501 4.50005 4.67501C4.81761 4.67501 5.07505 4.41758 5.07505 4.10001ZM7.50005 13.3575C7.9833 13.3575 8.37505 12.9657 8.37505 12.4825C8.37505 11.9992 7.9833 11.6075 7.50005 11.6075C7.0168 11.6075 6.62505 11.9992 6.62505 12.4825C6.62505 12.9657 7.0168 13.3575 7.50005 13.3575Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var QuestionMarkCircledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49972C0.877075 3.84204 3.84222 0.876892 7.49991 0.876892C11.1576 0.876892 14.1227 3.84204 14.1227 7.49972C14.1227 11.1574 11.1576 14.1226 7.49991 14.1226C3.84222 14.1226 0.877075 11.1574 0.877075 7.49972ZM7.49991 1.82689C4.36689 1.82689 1.82708 4.36671 1.82708 7.49972C1.82708 10.6327 4.36689 13.1726 7.49991 13.1726C10.6329 13.1726 13.1727 10.6327 13.1727 7.49972C13.1727 4.36671 10.6329 1.82689 7.49991 1.82689ZM8.24993 10.5C8.24993 10.9142 7.91414 11.25 7.49993 11.25C7.08571 11.25 6.74993 10.9142 6.74993 10.5C6.74993 10.0858 7.08571 9.75 7.49993 9.75C7.91414 9.75 8.24993 10.0858 8.24993 10.5ZM6.05003 6.25C6.05003 5.57211 6.63511 4.925 7.50003 4.925C8.36496 4.925 8.95003 5.57211 8.95003 6.25C8.95003 6.74118 8.68002 6.99212 8.21447 7.27494C8.16251 7.30651 8.10258 7.34131 8.03847 7.37854L8.03841 7.37858C7.85521 7.48497 7.63788 7.61119 7.47449 7.73849C7.23214 7.92732 6.95003 8.23198 6.95003 8.7C6.95004 9.00376 7.19628 9.25 7.50004 9.25C7.8024 9.25 8.04778 9.00601 8.05002 8.70417L8.05056 8.7033C8.05924 8.6896 8.08493 8.65735 8.15058 8.6062C8.25207 8.52712 8.36508 8.46163 8.51567 8.37436L8.51571 8.37433C8.59422 8.32883 8.68296 8.27741 8.78559 8.21506C9.32004 7.89038 10.05 7.35382 10.05 6.25C10.05 4.92789 8.93511 3.825 7.50003 3.825C6.06496 3.825 4.95003 4.92789 4.95003 6.25C4.95003 6.55376 5.19628 6.8 5.50003 6.8C5.80379 6.8 6.05003 6.55376 6.05003 6.25Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var QuoteIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9.42503 3.44136C10.0561 3.23654 10.7837 3.2402 11.3792 3.54623C12.7532 4.25224 13.3477 6.07191 12.7946 8C12.5465 8.8649 12.1102 9.70472 11.1861 10.5524C10.262 11.4 8.98034 11.9 8.38571 11.9C8.17269 11.9 8 11.7321 8 11.525C8 11.3179 8.17644 11.15 8.38571 11.15C9.06497 11.15 9.67189 10.7804 10.3906 10.236C10.9406 9.8193 11.3701 9.28633 11.608 8.82191C12.0628 7.93367 12.0782 6.68174 11.3433 6.34901C10.9904 6.73455 10.5295 6.95946 9.97725 6.95946C8.7773 6.95946 8.0701 5.99412 8.10051 5.12009C8.12957 4.28474 8.66032 3.68954 9.42503 3.44136ZM3.42503 3.44136C4.05614 3.23654 4.78366 3.2402 5.37923 3.54623C6.7532 4.25224 7.34766 6.07191 6.79462 8C6.54654 8.8649 6.11019 9.70472 5.1861 10.5524C4.26201 11.4 2.98034 11.9 2.38571 11.9C2.17269 11.9 2 11.7321 2 11.525C2 11.3179 2.17644 11.15 2.38571 11.15C3.06497 11.15 3.67189 10.7804 4.39058 10.236C4.94065 9.8193 5.37014 9.28633 5.60797 8.82191C6.06282 7.93367 6.07821 6.68174 5.3433 6.34901C4.99037 6.73455 4.52948 6.95946 3.97725 6.95946C2.7773 6.95946 2.0701 5.99412 2.10051 5.12009C2.12957 4.28474 2.66032 3.68954 3.42503 3.44136Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RadiobuttonIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49985 0.877045C3.84216 0.877045 0.877014 3.84219 0.877014 7.49988C0.877014 11.1575 3.84216 14.1227 7.49985 14.1227C11.1575 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1575 0.877045 7.49985 0.877045ZM1.82701 7.49988C1.82701 4.36686 4.36683 1.82704 7.49985 1.82704C10.6328 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6328 13.1727 7.49985 13.1727C4.36683 13.1727 1.82701 10.6329 1.82701 7.49988ZM7.49999 9.49999C8.60456 9.49999 9.49999 8.60456 9.49999 7.49999C9.49999 6.39542 8.60456 5.49999 7.49999 5.49999C6.39542 5.49999 5.49999 6.39542 5.49999 7.49999C5.49999 8.60456 6.39542 9.49999 7.49999 9.49999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ReaderIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.2 1H4.17741H4.1774C3.86936 0.999988 3.60368 0.999978 3.38609 1.02067C3.15576 1.04257 2.92825 1.09113 2.71625 1.22104C2.51442 1.34472 2.34473 1.51442 2.22104 1.71625C2.09113 1.92825 2.04257 2.15576 2.02067 2.38609C1.99998 2.60367 1.99999 2.86935 2 3.17738V3.1774V3.2V11.8V11.8226V11.8226C1.99999 12.1307 1.99998 12.3963 2.02067 12.6139C2.04257 12.8442 2.09113 13.0717 2.22104 13.2837C2.34473 13.4856 2.51442 13.6553 2.71625 13.779C2.92825 13.9089 3.15576 13.9574 3.38609 13.9793C3.60368 14 3.86937 14 4.17741 14H4.2H10.8H10.8226C11.1306 14 11.3963 14 11.6139 13.9793C11.8442 13.9574 12.0717 13.9089 12.2837 13.779C12.4856 13.6553 12.6553 13.4856 12.779 13.2837C12.9089 13.0717 12.9574 12.8442 12.9793 12.6139C13 12.3963 13 12.1306 13 11.8226V11.8V3.2V3.17741C13 2.86936 13 2.60368 12.9793 2.38609C12.9574 2.15576 12.9089 1.92825 12.779 1.71625C12.6553 1.51442 12.4856 1.34472 12.2837 1.22104C12.0717 1.09113 11.8442 1.04257 11.6139 1.02067C11.3963 0.999978 11.1306 0.999988 10.8226 1H10.8H4.2ZM3.23875 2.07368C3.26722 2.05623 3.32362 2.03112 3.48075 2.01618C3.64532 2.00053 3.86298 2 4.2 2H10.8C11.137 2 11.3547 2.00053 11.5193 2.01618C11.6764 2.03112 11.7328 2.05623 11.7613 2.07368C11.8285 2.11491 11.8851 2.17147 11.9263 2.23875C11.9438 2.26722 11.9689 2.32362 11.9838 2.48075C11.9995 2.64532 12 2.86298 12 3.2V11.8C12 12.137 11.9995 12.3547 11.9838 12.5193C11.9689 12.6764 11.9438 12.7328 11.9263 12.7613C11.8851 12.8285 11.8285 12.8851 11.7613 12.9263C11.7328 12.9438 11.6764 12.9689 11.5193 12.9838C11.3547 12.9995 11.137 13 10.8 13H4.2C3.86298 13 3.64532 12.9995 3.48075 12.9838C3.32362 12.9689 3.26722 12.9438 3.23875 12.9263C3.17147 12.8851 3.11491 12.8285 3.07368 12.7613C3.05624 12.7328 3.03112 12.6764 3.01618 12.5193C3.00053 12.3547 3 12.137 3 11.8V3.2C3 2.86298 3.00053 2.64532 3.01618 2.48075C3.03112 2.32362 3.05624 2.26722 3.07368 2.23875C3.11491 2.17147 3.17147 2.11491 3.23875 2.07368ZM5 10C4.72386 10 4.5 10.2239 4.5 10.5C4.5 10.7761 4.72386 11 5 11H8C8.27614 11 8.5 10.7761 8.5 10.5C8.5 10.2239 8.27614 10 8 10H5ZM4.5 7.5C4.5 7.22386 4.72386 7 5 7H10C10.2761 7 10.5 7.22386 10.5 7.5C10.5 7.77614 10.2761 8 10 8H5C4.72386 8 4.5 7.77614 4.5 7.5ZM5 4C4.72386 4 4.5 4.22386 4.5 4.5C4.5 4.77614 4.72386 5 5 5H10C10.2761 5 10.5 4.77614 10.5 4.5C10.5 4.22386 10.2761 4 10 4H5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ReloadIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.84998 7.49998C1.84998 4.66458 4.05979 1.84998 7.49998 1.84998C10.2783 1.84998 11.6515 3.9064 12.2367 5H10.5C10.2239 5 10 5.22386 10 5.5C10 5.77614 10.2239 6 10.5 6H13.5C13.7761 6 14 5.77614 14 5.5V2.5C14 2.22386 13.7761 2 13.5 2C13.2239 2 13 2.22386 13 2.5V4.31318C12.2955 3.07126 10.6659 0.849976 7.49998 0.849976C3.43716 0.849976 0.849976 4.18537 0.849976 7.49998C0.849976 10.8146 3.43716 14.15 7.49998 14.15C9.44382 14.15 11.0622 13.3808 12.2145 12.2084C12.8315 11.5806 13.3133 10.839 13.6418 10.0407C13.7469 9.78536 13.6251 9.49315 13.3698 9.38806C13.1144 9.28296 12.8222 9.40478 12.7171 9.66014C12.4363 10.3425 12.0251 10.9745 11.5013 11.5074C10.5295 12.4963 9.16504 13.15 7.49998 13.15C4.05979 13.15 1.84998 10.3354 1.84998 7.49998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ResetIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.85355 2.14645C5.04882 2.34171 5.04882 2.65829 4.85355 2.85355L3.70711 4H9C11.4853 4 13.5 6.01472 13.5 8.5C13.5 10.9853 11.4853 13 9 13H5C4.72386 13 4.5 12.7761 4.5 12.5C4.5 12.2239 4.72386 12 5 12H9C10.933 12 12.5 10.433 12.5 8.5C12.5 6.567 10.933 5 9 5H3.70711L4.85355 6.14645C5.04882 6.34171 5.04882 6.65829 4.85355 6.85355C4.65829 7.04882 4.34171 7.04882 4.14645 6.85355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645L4.14645 2.14645C4.34171 1.95118 4.65829 1.95118 4.85355 2.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ResumeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.04995 2.74995C3.04995 2.44619 2.80371 2.19995 2.49995 2.19995C2.19619 2.19995 1.94995 2.44619 1.94995 2.74995V12.25C1.94995 12.5537 2.19619 12.8 2.49995 12.8C2.80371 12.8 3.04995 12.5537 3.04995 12.25V2.74995ZM5.73333 2.30776C5.57835 2.22596 5.39185 2.23127 5.24177 2.32176C5.0917 2.41225 4.99995 2.57471 4.99995 2.74995V12.25C4.99995 12.4252 5.0917 12.5877 5.24177 12.6781C5.39185 12.7686 5.57835 12.7739 5.73333 12.6921L14.7333 7.94214C14.8973 7.85559 15 7.68539 15 7.49995C15 7.31452 14.8973 7.14431 14.7333 7.05776L5.73333 2.30776ZM5.99995 11.4207V3.5792L13.4287 7.49995L5.99995 11.4207Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RocketIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.85357 3.85355L7.65355 3.05353C8.2981 2.40901 9.42858 1.96172 10.552 1.80125C11.1056 1.72217 11.6291 1.71725 12.0564 1.78124C12.4987 1.84748 12.7698 1.97696 12.8965 2.10357C13.0231 2.23018 13.1526 2.50125 13.2188 2.94357C13.2828 3.37086 13.2779 3.89439 13.1988 4.44801C13.0383 5.57139 12.591 6.70188 11.9464 7.34645L7.49999 11.7929L6.35354 10.6465C6.15827 10.4512 5.84169 10.4512 5.64643 10.6465C5.45117 10.8417 5.45117 11.1583 5.64643 11.3536L7.14644 12.8536C7.34171 13.0488 7.65829 13.0488 7.85355 12.8536L8.40073 12.3064L9.57124 14.2572C9.65046 14.3893 9.78608 14.4774 9.9389 14.4963C10.0917 14.5151 10.2447 14.4624 10.3535 14.3536L12.3535 12.3536C12.4648 12.2423 12.5172 12.0851 12.495 11.9293L12.0303 8.67679L12.6536 8.05355C13.509 7.19808 14.0117 5.82855 14.1887 4.58943C14.2784 3.9618 14.2891 3.33847 14.2078 2.79546C14.1287 2.26748 13.9519 1.74482 13.6035 1.39645C13.2552 1.04809 12.7325 0.871332 12.2045 0.792264C11.6615 0.710945 11.0382 0.721644 10.4105 0.8113C9.17143 0.988306 7.80189 1.491 6.94644 2.34642L6.32322 2.96968L3.07071 2.50504C2.91492 2.48278 2.75773 2.53517 2.64645 2.64646L0.646451 4.64645C0.537579 4.75533 0.484938 4.90829 0.50375 5.0611C0.522563 5.21391 0.61073 5.34954 0.742757 5.42876L2.69364 6.59928L2.14646 7.14645C2.0527 7.24022 2.00002 7.3674 2.00002 7.50001C2.00002 7.63261 2.0527 7.75979 2.14646 7.85356L3.64647 9.35356C3.84173 9.54883 4.15831 9.54883 4.35357 9.35356C4.54884 9.1583 4.54884 8.84172 4.35357 8.64646L3.20712 7.50001L3.85357 6.85356L6.85357 3.85355ZM10.0993 13.1936L9.12959 11.5775L11.1464 9.56067L11.4697 11.8232L10.0993 13.1936ZM3.42251 5.87041L5.43935 3.85356L3.17678 3.53034L1.80638 4.90074L3.42251 5.87041ZM2.35356 10.3535C2.54882 10.1583 2.54882 9.8417 2.35356 9.64644C2.1583 9.45118 1.84171 9.45118 1.64645 9.64644L0.646451 10.6464C0.451188 10.8417 0.451188 11.1583 0.646451 11.3535C0.841713 11.5488 1.1583 11.5488 1.35356 11.3535L2.35356 10.3535ZM3.85358 11.8536C4.04884 11.6583 4.04885 11.3417 3.85359 11.1465C3.65833 10.9512 3.34175 10.9512 3.14648 11.1465L1.14645 13.1464C0.95119 13.3417 0.951187 13.6583 1.14645 13.8535C1.34171 14.0488 1.65829 14.0488 1.85355 13.8536L3.85358 11.8536ZM5.35356 13.3535C5.54882 13.1583 5.54882 12.8417 5.35356 12.6464C5.1583 12.4512 4.84171 12.4512 4.64645 12.6464L3.64645 13.6464C3.45119 13.8417 3.45119 14.1583 3.64645 14.3535C3.84171 14.5488 4.1583 14.5488 4.35356 14.3535L5.35356 13.3535ZM9.49997 6.74881C10.1897 6.74881 10.7488 6.1897 10.7488 5.5C10.7488 4.8103 10.1897 4.25118 9.49997 4.25118C8.81026 4.25118 8.25115 4.8103 8.25115 5.5C8.25115 6.1897 8.81026 6.74881 9.49997 6.74881Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RotateCounterClockwiseIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.59664 2.93628C7.76085 3.06401 8.00012 2.94698 8.00012 2.73895V1.99998C9.98143 2 11.1848 2.3637 11.9105 3.08945C12.6363 3.81522 13 5.0186 13 6.99998C13 7.27613 13.2239 7.49998 13.5 7.49998C13.7761 7.49998 14 7.27613 14 6.99998C14 4.9438 13.6325 3.39719 12.6176 2.38234C11.6028 1.36752 10.0562 0.999999 8.00012 0.999984V0.261266C8.00012 0.0532293 7.76085 -0.0637944 7.59664 0.063928L6.00384 1.30277C5.87516 1.40286 5.87516 1.59735 6.00384 1.69744L7.59664 2.93628ZM9.5 5H2.5C2.22386 5 2 5.22386 2 5.5V12.5C2 12.7761 2.22386 13 2.5 13H9.5C9.77614 13 10 12.7761 10 12.5V5.5C10 5.22386 9.77614 5 9.5 5ZM2.5 4C1.67157 4 1 4.67157 1 5.5V12.5C1 13.3284 1.67157 14 2.5 14H9.5C10.3284 14 11 13.3284 11 12.5V5.5C11 4.67157 10.3284 4 9.5 4H2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RowSpacingIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.81832 0.68179C7.64258 0.506054 7.35766 0.506054 7.18192 0.68179L5.18192 2.68179C5.00619 2.85753 5.00619 3.14245 5.18192 3.31819C5.35766 3.49392 5.64258 3.49392 5.81832 3.31819L7.05012 2.08638L7.05012 5.50023C7.05012 5.74876 7.25159 5.95023 7.50012 5.95023C7.74865 5.95023 7.95012 5.74876 7.95012 5.50023L7.95012 2.08638L9.18192 3.31819C9.35766 3.49392 9.64258 3.49392 9.81832 3.31819C9.99406 3.14245 9.99406 2.85753 9.81832 2.68179L7.81832 0.68179ZM7.95012 12.9136V9.50023C7.95012 9.2517 7.74865 9.05023 7.50012 9.05023C7.25159 9.05023 7.05012 9.2517 7.05012 9.50023V12.9136L5.81832 11.6818C5.64258 11.5061 5.35766 11.5061 5.18192 11.6818C5.00619 11.8575 5.00619 12.1424 5.18192 12.3182L7.18192 14.3182C7.26632 14.4026 7.38077 14.45 7.50012 14.45C7.61947 14.45 7.73393 14.4026 7.81832 14.3182L9.81832 12.3182C9.99406 12.1424 9.99406 11.8575 9.81832 11.6818C9.64258 11.5061 9.35766 11.5061 9.18192 11.6818L7.95012 12.9136ZM1.49994 7.00017C1.2238 7.00017 0.999939 7.22403 0.999939 7.50017C0.999939 7.77631 1.2238 8.00017 1.49994 8.00017L13.4999 8.00017C13.7761 8.00017 13.9999 7.77631 13.9999 7.50017C13.9999 7.22403 13.7761 7.00017 13.4999 7.00017L1.49994 7.00017Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RowsIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14 12.85L1 12.85L1 14.15L14 14.15L14 12.85ZM14 8.85002L1 8.85002L1 10.15L14 10.15L14 8.85002ZM1 4.85003L14 4.85003L14 6.15003L1 6.15002L1 4.85003ZM14 0.850025L1 0.850025L1 2.15002L14 2.15002L14 0.850025Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RulerHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.5 4C0.223858 4 0 4.22386 0 4.5V10.5C0 10.7761 0.223858 11 0.5 11H14.5C14.7761 11 15 10.7761 15 10.5V4.5C15 4.22386 14.7761 4 14.5 4H0.5ZM1 10V5H2.075V7.5C2.075 7.73472 2.26528 7.925 2.5 7.925C2.73472 7.925 2.925 7.73472 2.925 7.5V5H4.075V6.5C4.075 6.73472 4.26528 6.925 4.5 6.925C4.73472 6.925 4.925 6.73472 4.925 6.5V5H6.075V6.5C6.075 6.73472 6.26528 6.925 6.5 6.925C6.73472 6.925 6.925 6.73472 6.925 6.5V5H8.075V7.5C8.075 7.73472 8.26528 7.925 8.5 7.925C8.73472 7.925 8.925 7.73472 8.925 7.5V5H10.075V6.5C10.075 6.73472 10.2653 6.925 10.5 6.925C10.7347 6.925 10.925 6.73472 10.925 6.5V5H12.075V6.5C12.075 6.73472 12.2653 6.925 12.5 6.925C12.7347 6.925 12.925 6.73472 12.925 6.5V5H14V10H1Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var RulerSquareIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.5 0C0.223858 0 0 0.223858 0 0.5V14.5C0 14.7761 0.223858 15 0.5 15H4.5C4.77614 15 5 14.7761 5 14.5V5H14.5C14.7761 5 15 4.77614 15 4.5V0.5C15 0.223858 14.7761 0 14.5 0H0.5ZM1 4.07505L1 1H4.07502C4.07502 1 4.07502 1 4.07502 1L4.07505 4.07507L1 4.07505ZM0.999997 4.92505L1 14H4V12.925H2.75002C2.5153 12.925 2.32502 12.7348 2.32502 12.5C2.32502 12.2653 2.5153 12.075 2.75002 12.075H4V10.925H2.25002C2.0153 10.925 1.82502 10.7347 1.82502 10.5C1.82502 10.2653 2.0153 10.075 2.25002 10.075H4V8.92504L2.75002 8.92502C2.5153 8.92502 2.32502 8.73474 2.32502 8.50002C2.32503 8.26529 2.51531 8.07502 2.75003 8.07502L4 8.07504V6.92502L2.74999 6.925C2.51527 6.925 2.325 6.73472 2.325 6.5C2.325 6.26528 2.51529 6.075 2.75001 6.075L4 6.07502V4.92507L0.999997 4.92505ZM4.92505 4H6.075V2.75006C6.075 2.51534 6.26528 2.32506 6.5 2.32506C6.73472 2.32506 6.925 2.51534 6.925 2.75006V4H8.07502V2.75005C8.07502 2.51533 8.2653 2.32505 8.50002 2.32505C8.73474 2.32505 8.92502 2.51533 8.92502 2.75005V4H10.0751V2.25005C10.0751 2.01533 10.2653 1.82505 10.5001 1.82505C10.7348 1.82505 10.9251 2.01533 10.9251 2.25005V4H12.0751V2.75005C12.0751 2.51533 12.2654 2.32505 12.5001 2.32505C12.7348 2.32505 12.9251 2.51533 12.9251 2.75005V4H14V1H4.92502L4.92505 4Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SectionIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 1.5C2 1.77614 1.77614 2 1.5 2C1.22386 2 1 1.77614 1 1.5C1 1.22386 1.22386 1 1.5 1C1.77614 1 2 1.22386 2 1.5ZM2 5L2 10H13V5H2ZM2 4C1.44772 4 1 4.44772 1 5V10C1 10.5523 1.44772 11 2 11H13C13.5523 11 14 10.5523 14 10V5C14 4.44772 13.5523 4 13 4H2ZM1.5 14C1.77614 14 2 13.7761 2 13.5C2 13.2239 1.77614 13 1.5 13C1.22386 13 1 13.2239 1 13.5C1 13.7761 1.22386 14 1.5 14ZM4 1.5C4 1.77614 3.77614 2 3.5 2C3.22386 2 3 1.77614 3 1.5C3 1.22386 3.22386 1 3.5 1C3.77614 1 4 1.22386 4 1.5ZM3.5 14C3.77614 14 4 13.7761 4 13.5C4 13.2239 3.77614 13 3.5 13C3.22386 13 3 13.2239 3 13.5C3 13.7761 3.22386 14 3.5 14ZM6 1.5C6 1.77614 5.77614 2 5.5 2C5.22386 2 5 1.77614 5 1.5C5 1.22386 5.22386 1 5.5 1C5.77614 1 6 1.22386 6 1.5ZM5.5 14C5.77614 14 6 13.7761 6 13.5C6 13.2239 5.77614 13 5.5 13C5.22386 13 5 13.2239 5 13.5C5 13.7761 5.22386 14 5.5 14ZM8 1.5C8 1.77614 7.77614 2 7.5 2C7.22386 2 7 1.77614 7 1.5C7 1.22386 7.22386 1 7.5 1C7.77614 1 8 1.22386 8 1.5ZM7.5 14C7.77614 14 8 13.7761 8 13.5C8 13.2239 7.77614 13 7.5 13C7.22386 13 7 13.2239 7 13.5C7 13.7761 7.22386 14 7.5 14ZM10 1.5C10 1.77614 9.77614 2 9.5 2C9.22386 2 9 1.77614 9 1.5C9 1.22386 9.22386 1 9.5 1C9.77614 1 10 1.22386 10 1.5ZM9.5 14C9.77614 14 10 13.7761 10 13.5C10 13.2239 9.77614 13 9.5 13C9.22386 13 9 13.2239 9 13.5C9 13.7761 9.22386 14 9.5 14ZM12 1.5C12 1.77614 11.7761 2 11.5 2C11.2239 2 11 1.77614 11 1.5C11 1.22386 11.2239 1 11.5 1C11.7761 1 12 1.22386 12 1.5ZM11.5 14C11.7761 14 12 13.7761 12 13.5C12 13.2239 11.7761 13 11.5 13C11.2239 13 11 13.2239 11 13.5C11 13.7761 11.2239 14 11.5 14ZM14 1.5C14 1.77614 13.7761 2 13.5 2C13.2239 2 13 1.77614 13 1.5C13 1.22386 13.2239 1 13.5 1C13.7761 1 14 1.22386 14 1.5ZM13.5 14C13.7761 14 14 13.7761 14 13.5C14 13.2239 13.7761 13 13.5 13C13.2239 13 13 13.2239 13 13.5C13 13.7761 13.2239 14 13.5 14Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SewingPinIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6 3.5C6 2.67157 6.67157 2 7.5 2C8.32843 2 9 2.67157 9 3.5C9 4.32843 8.32843 5 7.5 5C6.67157 5 6 4.32843 6 3.5ZM8 5.94999C9.14112 5.71836 10 4.70948 10 3.5C10 2.11929 8.88071 1 7.5 1C6.11929 1 5 2.11929 5 3.5C5 4.70948 5.85888 5.71836 7 5.94999V13.5C7 13.7761 7.22386 14 7.5 14C7.77614 14 8 13.7761 8 13.5V5.94999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SewingPinFilledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10 3.5C10 4.70948 9.14112 5.71836 8 5.94999V13.5C8 13.7761 7.77614 14 7.5 14C7.22386 14 7 13.7761 7 13.5V5.94999C5.85888 5.71836 5 4.70948 5 3.5C5 2.11929 6.11929 1 7.5 1C8.88071 1 10 2.11929 10 3.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ShadowIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".05",
        d: "M6.78296 13.376C8.73904 9.95284 8.73904 5.04719 6.78296 1.62405L7.21708 1.37598C9.261 4.95283 9.261 10.0472 7.21708 13.624L6.78296 13.376Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".1",
        d: "M7.28204 13.4775C9.23929 9.99523 9.23929 5.00475 7.28204 1.52248L7.71791 1.2775C9.76067 4.9119 9.76067 10.0881 7.71791 13.7225L7.28204 13.4775Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".15",
        d: "M7.82098 13.5064C9.72502 9.99523 9.72636 5.01411 7.82492 1.50084L8.26465 1.26285C10.2465 4.92466 10.2451 10.085 8.26052 13.7448L7.82098 13.5064Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".2",
        d: "M8.41284 13.429C10.1952 9.92842 10.1957 5.07537 8.41435 1.57402L8.85999 1.34729C10.7139 4.99113 10.7133 10.0128 8.85841 13.6559L8.41284 13.429Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".25",
        d: "M9.02441 13.2956C10.6567 9.8379 10.6586 5.17715 9.03005 1.71656L9.48245 1.50366C11.1745 5.09919 11.1726 9.91629 9.47657 13.5091L9.02441 13.2956Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".3",
        d: "M9.66809 13.0655C11.1097 9.69572 11.1107 5.3121 9.67088 1.94095L10.1307 1.74457C11.6241 5.24121 11.6231 9.76683 10.1278 13.2622L9.66809 13.0655Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".35",
        d: "M10.331 12.7456C11.5551 9.52073 11.5564 5.49103 10.3347 2.26444L10.8024 2.0874C12.0672 5.42815 12.0659 9.58394 10.7985 12.9231L10.331 12.7456Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".4",
        d: "M11.0155 12.2986C11.9938 9.29744 11.9948 5.71296 11.0184 2.71067L11.4939 2.55603C12.503 5.6589 12.502 9.35178 11.4909 12.4535L11.0155 12.2986Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".45",
        d: "M11.7214 11.668C12.4254 9.01303 12.4262 5.99691 11.7237 3.34116L12.2071 3.21329C12.9318 5.95292 12.931 9.05728 12.2047 11.7961L11.7214 11.668Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".5",
        d: "M12.4432 10.752C12.8524 8.63762 12.8523 6.36089 12.4429 4.2466L12.9338 4.15155C13.3553 6.32861 13.3554 8.66985 12.9341 10.847L12.4432 10.752Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ShadowInnerIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".05",
        d: "M12.1619 3.85182C8.35817 4.88918 4.88936 8.358 3.85199 12.1617L3.3696 12.0301C4.45356 8.05564 8.05581 4.45339 12.0303 3.36943L12.1619 3.85182Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".1",
        d: "M11.8807 3.42707C8.03441 4.50542 4.50561 8.03422 3.42726 11.8805L2.94582 11.7456C4.07129 7.73121 7.7314 4.0711 11.7458 2.94563L11.8807 3.42707Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".15",
        d: "M11.5201 3.02556C7.69092 4.16199 4.16779 7.68323 3.02805 11.512L2.54883 11.3694C3.73676 7.37869 7.38659 3.73076 11.3778 2.54623L11.5201 3.02556Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".2",
        d: "M11.0468 2.66169C7.31117 3.87664 3.87918 7.3079 2.66298 11.0434L2.18754 10.8886C3.45324 7.00109 7.00445 3.45062 10.8921 2.18621L11.0468 2.66169Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".25",
        d: "M10.5201 2.32365C6.92091 3.61447 3.62391 6.90876 2.32845 10.5073L1.858 10.338C3.20398 6.59909 6.61155 3.19424 10.3513 1.85301L10.5201 2.32365Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".3",
        d: "M9.90222 2.03122C6.50003 3.39465 3.39968 6.49367 2.03399 9.89551L1.56998 9.70924C2.98651 6.18076 6.18728 2.98133 9.71622 1.5671L9.90222 2.03122Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".35",
        d: "M9.20727 1.78873C6.06136 3.20349 3.21103 6.05203 1.79331 9.19738L1.33747 8.99192C2.80536 5.73528 5.74485 2.7976 9.0022 1.33272L9.20727 1.78873Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".4",
        d: "M8.40713 1.62085C5.59323 3.05117 3.05794 5.58509 1.62544 8.39847L1.17987 8.1716C2.66036 5.26397 5.27232 2.6534 8.18057 1.17513L8.40713 1.62085Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".45",
        d: "M7.46207 1.56747C5.08689 2.94695 2.95362 5.07912 1.57249 7.45379L1.14028 7.20241C2.56503 4.75273 4.7607 2.55818 7.21096 1.1351L7.46207 1.56747Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".5",
        d: "M6.30407 1.70487C4.51964 2.91063 2.90983 4.52061 1.7043 6.30513L1.28998 6.02524C2.5313 4.18773 4.18673 2.53214 6.02413 1.29059L6.30407 1.70487Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ShadowNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 9.1488 1.47969 10.657 2.4767 11.8162L1.64647 12.6464C1.45121 12.8417 1.45121 13.1583 1.64647 13.3535C1.84173 13.5488 2.15832 13.5488 2.35358 13.3535L3.18383 12.5233C4.34302 13.5202 5.8511 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 5.85107 13.5202 4.34298 12.5233 3.1838L13.3536 2.35355C13.5488 2.15829 13.5488 1.8417 13.3536 1.64644C13.1583 1.45118 12.8417 1.45118 12.6465 1.64644L11.8162 2.47667C10.657 1.47966 9.14883 0.877045 7.49991 0.877045ZM11.1423 3.15065C10.1568 2.32449 8.88644 1.82704 7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 8.88641 2.32452 10.1568 3.15069 11.1422L11.1423 3.15065ZM3.85781 11.8493C4.84322 12.6753 6.11348 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 6.11345 12.6754 4.84319 11.8493 3.85778L3.85781 11.8493Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".05",
        d: "M6.78296 13.376C8.73904 9.95284 8.73904 5.04719 6.78296 1.62405L7.21708 1.37598C9.261 4.95283 9.261 10.0472 7.21708 13.624L6.78296 13.376Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".1",
        d: "M7.28204 13.4775C9.23929 9.99523 9.23929 5.00475 7.28204 1.52248L7.71791 1.2775C9.76067 4.9119 9.76067 10.0881 7.71791 13.7225L7.28204 13.4775Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".15",
        d: "M7.82098 13.5064C9.72502 9.99523 9.72636 5.01411 7.82492 1.50084L8.26465 1.26285C10.2465 4.92466 10.2451 10.085 8.26052 13.7448L7.82098 13.5064Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".2",
        d: "M8.41284 13.429C10.1952 9.92842 10.1957 5.07537 8.41435 1.57402L8.85999 1.34729C10.7139 4.99113 10.7133 10.0128 8.85841 13.6559L8.41284 13.429Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".25",
        d: "M9.02441 13.2956C10.6567 9.8379 10.6586 5.17715 9.03005 1.71656L9.48245 1.50366C11.1745 5.09919 11.1726 9.91629 9.47657 13.5091L9.02441 13.2956Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".3",
        d: "M9.66809 13.0655C11.1097 9.69572 11.1107 5.3121 9.67088 1.94095L10.1307 1.74457C11.6241 5.24121 11.6231 9.76683 10.1278 13.2622L9.66809 13.0655Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".35",
        d: "M10.331 12.7456C11.5551 9.52073 11.5564 5.49103 10.3347 2.26444L10.8024 2.0874C12.0672 5.42815 12.0659 9.58394 10.7985 12.9231L10.331 12.7456Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".4",
        d: "M11.0155 12.2986C11.9938 9.29744 11.9948 5.71296 11.0184 2.71067L11.4939 2.55603C12.503 5.6589 12.502 9.35178 11.4909 12.4535L11.0155 12.2986Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".45",
        d: "M11.7214 11.668C12.4254 9.01303 12.4262 5.99691 11.7237 3.34116L12.2071 3.21329C12.9318 5.95292 12.931 9.05728 12.2047 11.7961L11.7214 11.668Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".5",
        d: "M12.4432 10.752C12.8524 8.63762 12.8523 6.36089 12.4429 4.2466L12.9338 4.15155C13.3553 6.32861 13.3554 8.66985 12.9341 10.847L12.4432 10.752Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ShadowOuterIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        opacity: ".05",
        d: "M12.1398 3.88616C13.8553 4.94159 15 6.837 15 8.99999C15 12.3137 12.3137 15 9.00001 15C6.8435 15 4.95295 13.8621 3.89569 12.1552L4.32075 11.8919C5.29069 13.4578 7.02375 14.5 9.00001 14.5C12.0375 14.5 14.5 12.0375 14.5 8.99999C14.5 7.0178 13.4516 5.28026 11.8778 4.31202L12.1398 3.88616Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".2",
        d: "M12.851 5.0732C13.8684 6.07105 14.5 7.46198 14.5 8.99999C14.5 12.0375 12.0376 14.5 9.00002 14.5C7.46214 14.5 6.07131 13.8685 5.07348 12.8512L5.43042 12.5011C6.33809 13.4264 7.60185 14 9.00002 14C11.7614 14 14 11.7614 14 8.99999C14 7.6017 13.4264 6.33785 12.5009 5.43017L12.851 5.0732Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".35",
        d: "M13.3021 6.45071C13.7455 7.19737 14 8.06934 14 9C14 11.7614 11.7614 14 9.00001 14C8.04867 14 7.15867 13.7341 6.40118 13.2723L6.66141 12.8454C7.34274 13.2607 8.14305 13.5 9.00001 13.5C11.4853 13.5 13.5 11.4853 13.5 9C13.5 8.16164 13.271 7.37753 12.8722 6.70598L13.3021 6.45071Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".5",
        d: "M13.3744 7.94021C13.4566 8.2803 13.5 8.63524 13.5 9C13.5 11.4853 11.4853 13.5 9.00002 13.5C8.61103 13.5 8.23321 13.4506 7.87267 13.3576L7.99758 12.8734C8.31767 12.956 8.65352 13 9.00002 13C11.2091 13 13 11.2091 13 9C13 8.67507 12.9613 8.35952 12.8884 8.05756L13.3744 7.94021Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        opacity: ".65",
        d: "M12.9155 9.82132C12.5898 11.3813 11.3562 12.6072 9.79203 12.9215L9.69353 12.4313C11.0613 12.1565 12.1413 11.0833 12.4261 9.71913L12.9155 9.82132Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }), _react.createElement("path", {
        d: "M1.2771 7.50252C1.2771 4.06455 4.06413 1.27753 7.50209 1.27753C10.94 1.27753 13.7271 4.06455 13.7271 7.50252C13.7271 10.9405 10.94 13.7275 7.50209 13.7275C4.06412 13.7275 1.2771 10.9405 1.2771 7.50252ZM7.50209 2.22752C4.5888 2.22752 2.2271 4.58922 2.2271 7.50252C2.2271 10.4158 4.5888 12.7775 7.50209 12.7775C10.4154 12.7775 12.7771 10.4158 12.7771 7.50252C12.7771 4.58922 10.4154 2.22752 7.50209 2.22752Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Share1Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 7.50003C5 8.32845 4.32843 9.00003 3.5 9.00003C2.67157 9.00003 2 8.32845 2 7.50003C2 6.6716 2.67157 6.00003 3.5 6.00003C4.32843 6.00003 5 6.6716 5 7.50003ZM5.71313 8.66388C5.29445 9.45838 4.46048 10 3.5 10C2.11929 10 1 8.88074 1 7.50003C1 6.11931 2.11929 5.00003 3.5 5.00003C4.46048 5.00003 5.29445 5.54167 5.71313 6.33616L9.10424 4.21671C9.03643 3.98968 9 3.74911 9 3.50003C9 2.11932 10.1193 1.00003 11.5 1.00003C12.8807 1.00003 14 2.11932 14 3.50003C14 4.88074 12.8807 6.00003 11.5 6.00003C10.6915 6.00003 9.97264 5.61624 9.51566 5.0209L5.9853 7.22738C5.99502 7.31692 6 7.40789 6 7.50003C6 7.59216 5.99502 7.68312 5.9853 7.77267L9.51567 9.97915C9.97265 9.38382 10.6915 9.00003 11.5 9.00003C12.8807 9.00003 14 10.1193 14 11.5C14 12.8807 12.8807 14 11.5 14C10.1193 14 9 12.8807 9 11.5C9 11.2509 9.03643 11.0104 9.10425 10.7833L5.71313 8.66388ZM11.5 5.00003C12.3284 5.00003 13 4.32846 13 3.50003C13 2.6716 12.3284 2.00003 11.5 2.00003C10.6716 2.00003 10 2.6716 10 3.50003C10 4.32846 10.6716 5.00003 11.5 5.00003ZM13 11.5C13 12.3285 12.3284 13 11.5 13C10.6716 13 10 12.3285 10 11.5C10 10.6716 10.6716 10 11.5 10C12.3284 10 13 10.6716 13 11.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var Share2Icon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.5 5.00006C3.22386 5.00006 3 5.22392 3 5.50006L3 11.5001C3 11.7762 3.22386 12.0001 3.5 12.0001L11.5 12.0001C11.7761 12.0001 12 11.7762 12 11.5001L12 5.50006C12 5.22392 11.7761 5.00006 11.5 5.00006L10.25 5.00006C9.97386 5.00006 9.75 4.7762 9.75 4.50006C9.75 4.22392 9.97386 4.00006 10.25 4.00006L11.5 4.00006C12.3284 4.00006 13 4.67163 13 5.50006L13 11.5001C13 12.3285 12.3284 13.0001 11.5 13.0001L3.5 13.0001C2.67157 13.0001 2 12.3285 2 11.5001L2 5.50006C2 4.67163 2.67157 4.00006 3.5 4.00006L4.75 4.00006C5.02614 4.00006 5.25 4.22392 5.25 4.50006C5.25 4.7762 5.02614 5.00006 4.75 5.00006L3.5 5.00006ZM7 1.6364L5.5682 3.0682C5.39246 3.24393 5.10754 3.24393 4.9318 3.0682C4.75607 2.89246 4.75607 2.60754 4.9318 2.4318L7.1818 0.181802C7.26619 0.09741 7.38065 0.049999 7.5 0.049999C7.61935 0.049999 7.73381 0.09741 7.8182 0.181802L10.0682 2.4318C10.2439 2.60754 10.2439 2.89246 10.0682 3.0682C9.89246 3.24393 9.60754 3.24393 9.4318 3.0682L8 1.6364L8 8.5C8 8.77614 7.77614 9 7.5 9C7.22386 9 7 8.77614 7 8.5L7 1.6364Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ShuffleIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M12.3536 1.14645C12.1583 0.951184 11.8417 0.951184 11.6464 1.14645C11.4512 1.34171 11.4512 1.65829 11.6464 1.85355L12.7929 3H12C10.7037 3 9.71111 3.58423 8.87248 4.38931C8.20065 5.03427 7.59349 5.85684 6.99461 6.6682C6.86287 6.84668 6.73154 7.02462 6.6 7.2C5.10874 9.18835 3.49037 11 0.5 11C0.223858 11 0 11.2239 0 11.5C0 11.7761 0.223858 12 0.5 12C4.00963 12 5.89126 9.81165 7.4 7.8C7.54367 7.60845 7.6832 7.41962 7.81996 7.23454L7.82005 7.23443L7.82006 7.23441C8.41674 6.42695 8.96069 5.69085 9.56502 5.11069C10.2889 4.41577 11.0463 4 12 4H12.7929L11.6464 5.14645C11.4512 5.34171 11.4512 5.65829 11.6464 5.85355C11.8417 6.04882 12.1583 6.04882 12.3536 5.85355L14.3536 3.85355C14.5488 3.65829 14.5488 3.34171 14.3536 3.14645L12.3536 1.14645ZM0.5 3C3.35278 3 5.12992 4.44588 6.50548 6.06746L6.3762 6.24266C6.2483 6.4161 6.12293 6.58609 6 6.75C5.96397 6.79804 5.92798 6.84581 5.892 6.89331C4.57348 5.29306 3.02637 4 0.5 4C0.223858 4 0 3.77614 0 3.5C0 3.22386 0.223858 3 0.5 3ZM8.87248 10.6107C8.37284 10.131 7.90897 9.55314 7.45767 8.95468C7.64688 8.71693 7.82704 8.48061 8 8.25L8.08987 8.12987C8.58412 8.79402 9.05288 9.39766 9.56502 9.88931C10.2889 10.5842 11.0463 11 12 11H12.7929L11.6464 9.85355C11.4512 9.65829 11.4512 9.34171 11.6464 9.14645C11.8417 8.95118 12.1583 8.95118 12.3536 9.14645L14.3536 11.1464C14.5488 11.3417 14.5488 11.6583 14.3536 11.8536L12.3536 13.8536C12.1583 14.0488 11.8417 14.0488 11.6464 13.8536C11.4512 13.6583 11.4512 13.3417 11.6464 13.1464L12.7929 12H12C10.7037 12 9.71111 11.4158 8.87248 10.6107Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SizeIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M11.5 3.04999C11.7485 3.04999 11.95 3.25146 11.95 3.49999V7.49999C11.95 7.74852 11.7485 7.94999 11.5 7.94999C11.2515 7.94999 11.05 7.74852 11.05 7.49999V4.58639L4.58638 11.05H7.49999C7.74852 11.05 7.94999 11.2515 7.94999 11.5C7.94999 11.7485 7.74852 11.95 7.49999 11.95L3.49999 11.95C3.38064 11.95 3.26618 11.9026 3.18179 11.8182C3.0974 11.7338 3.04999 11.6193 3.04999 11.5L3.04999 7.49999C3.04999 7.25146 3.25146 7.04999 3.49999 7.04999C3.74852 7.04999 3.94999 7.25146 3.94999 7.49999L3.94999 10.4136L10.4136 3.94999L7.49999 3.94999C7.25146 3.94999 7.04999 3.74852 7.04999 3.49999C7.04999 3.25146 7.25146 3.04999 7.49999 3.04999L11.5 3.04999Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SketchLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.53731 0.826873C7.5125 0.824392 7.4875 0.824392 7.46269 0.826873L3.96269 1.17687C3.85672 1.18747 3.76025 1.24262 3.69736 1.32857L0.699771 5.42528C0.654046 5.48627 0.62647 5.56165 0.625057 5.6434C0.625019 5.6456 0.625 5.64781 0.625 5.65001C0.625 5.65052 0.625001 5.65103 0.625003 5.65153C0.625363 5.74237 0.658021 5.82559 0.712087 5.8903L7.21042 13.7883C7.28165 13.8749 7.38789 13.925 7.5 13.925C7.61211 13.925 7.71835 13.8749 7.78958 13.7883L14.2879 5.89031C14.342 5.8256 14.3746 5.74237 14.375 5.65153C14.375 5.65103 14.375 5.65052 14.375 5.65001C14.375 5.64849 14.375 5.64697 14.375 5.64545C14.3749 5.63963 14.3747 5.63382 14.3744 5.62801C14.37 5.55219 14.3431 5.48242 14.3002 5.42527L11.3026 1.32857C11.2397 1.24262 11.1433 1.18747 11.0373 1.17687L7.53731 0.826873ZM10.925 5.27501V5.25236L10.9223 5.27501H10.925ZM10.9342 5.17498H13.1877L11.2495 2.5261L10.9342 5.17498ZM10.5707 1.88395L8.04432 1.63131L10.1747 5.21034L10.5707 1.88395ZM6.95568 1.63131L4.42931 1.88395L4.82531 5.21034L6.95568 1.63131ZM3.75046 2.5261L1.81226 5.17498H4.0658L3.75046 2.5261ZM1.79416 6.02501L6.75861 12.0587L4.22371 6.0669C4.21787 6.0531 4.21314 6.0391 4.20949 6.02501H1.79416ZM5.15055 6.02501L7.49999 12.1085L9.84943 6.02501H9.78681H5.21319H5.15055ZM10.7905 6.02501C10.7869 6.0391 10.7821 6.0531 10.7763 6.0669L8.24139 12.0587L13.2058 6.02501H10.7905ZM7.5 2.18317L9.34038 5.27501H5.65962L7.5 2.18317Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SlashIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.10876 14L9.46582 1H10.8178L5.46074 14H4.10876Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SliderIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.3004 7.49991C10.3004 8.4943 9.49426 9.30041 8.49988 9.30041C7.50549 9.30041 6.69938 8.4943 6.69938 7.49991C6.69938 6.50553 7.50549 5.69942 8.49988 5.69942C9.49426 5.69942 10.3004 6.50553 10.3004 7.49991ZM11.205 8C10.9699 9.28029 9.84816 10.2504 8.49988 10.2504C7.1516 10.2504 6.0299 9.28029 5.79473 8H0.5C0.223858 8 0 7.77614 0 7.5C0 7.22386 0.223858 7 0.5 7H5.7947C6.0298 5.71962 7.15154 4.74942 8.49988 4.74942C9.84822 4.74942 10.9699 5.71962 11.2051 7H14.5C14.7761 7 15 7.22386 15 7.5C15 7.77614 14.7761 8 14.5 8H11.205Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpaceBetweenHorizontallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14.4999 0.999994C14.2237 0.999994 13.9999 1.22385 13.9999 1.49999L13.9999 5.99995L9.99992 5.99995C9.44764 5.99995 8.99993 6.44766 8.99993 6.99994L8.99993 7.99994C8.99993 8.55222 9.44764 8.99993 9.99992 8.99993L13.9999 8.99993L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999994 14.4999 0.999994ZM4.99996 5.99995L0.999992 5.99995L0.999992 1.49999C0.999992 1.22385 0.776136 0.999994 0.499996 0.999994C0.223856 0.999994 -9.7852e-09 1.22385 -2.18557e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 8.99993L4.99996 8.99993C5.55224 8.99993 5.99995 8.55222 5.99995 7.99993L5.99995 6.99994C5.99995 6.44766 5.55224 5.99995 4.99996 5.99995Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpaceBetweenVerticallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1L9 1V5C9 5.55228 8.55228 6 8 6H7C6.44772 6 6 5.55228 6 5V1H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM7 9C6.44772 9 6 9.44771 6 10V14H1.49988C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H9V10C9 9.44772 8.55228 9 8 9H7Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpaceEvenlyHorizontallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992ZM0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992ZM1.99998 6.99994C1.99998 6.44766 2.44769 5.99995 2.99998 5.99995L5.99995 5.99995C6.55223 5.99995 6.99994 6.44766 6.99994 6.99994L6.99994 7.99993C6.99994 8.55221 6.55223 8.99992 5.99995 8.99992L2.99998 8.99992C2.4477 8.99992 1.99998 8.55221 1.99998 7.99993L1.99998 6.99994ZM8.99993 5.99995C8.44765 5.99995 7.99993 6.44766 7.99993 6.99994L7.99993 7.99993C7.99993 8.55221 8.44765 8.99992 8.99993 8.99992L11.9999 8.99992C12.5522 8.99992 12.9999 8.55221 12.9999 7.99993L12.9999 6.99994C12.9999 6.44766 12.5522 5.99995 11.9999 5.99995L8.99993 5.99995Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpaceEvenlyVerticallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM7 2C6.44772 2 6 2.44772 6 3V6C6 6.55228 6.44772 7 7 7H8C8.55228 7 9 6.55228 9 6V3C9 2.44772 8.55228 2 8 2H7ZM7 8C6.44772 8 6 8.44771 6 9V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V9C9 8.44772 8.55228 8 8 8H7ZM1.49988 14C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H1.49988Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpeakerLoudIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.46968 1.05085C7.64122 1.13475 7.75 1.30904 7.75 1.5V13.5C7.75 13.691 7.64122 13.8653 7.46968 13.9492C7.29813 14.0331 7.09377 14.0119 6.94303 13.8947L3.2213 11H1.5C0.671571 11 0 10.3284 0 9.5V5.5C0 4.67158 0.671573 4 1.5 4H3.2213L6.94303 1.10533C7.09377 0.988085 7.29813 0.966945 7.46968 1.05085ZM6.75 2.52232L3.69983 4.89468C3.61206 4.96294 3.50405 5 3.39286 5H1.5C1.22386 5 1 5.22386 1 5.5V9.5C1 9.77615 1.22386 10 1.5 10H3.39286C3.50405 10 3.61206 10.0371 3.69983 10.1053L6.75 12.4777V2.52232ZM10.2784 3.84804C10.4623 3.72567 10.7106 3.77557 10.833 3.95949C12.2558 6.09798 12.2558 8.90199 10.833 11.0405C10.7106 11.2244 10.4623 11.2743 10.2784 11.1519C10.0944 11.0296 10.0445 10.7813 10.1669 10.5973C11.4111 8.72728 11.4111 6.27269 10.1669 4.40264C10.0445 4.21871 10.0944 3.97041 10.2784 3.84804ZM12.6785 1.43044C12.5356 1.2619 12.2832 1.24104 12.1147 1.38386C11.9462 1.52667 11.9253 1.77908 12.0681 1.94762C14.7773 5.14488 14.7773 9.85513 12.0681 13.0524C11.9253 13.2209 11.9462 13.4733 12.1147 13.6161C12.2832 13.759 12.5356 13.7381 12.6785 13.5696C15.6406 10.0739 15.6406 4.92612 12.6785 1.43044Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpeakerModerateIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8 1.5C8 1.31062 7.893 1.13749 7.72361 1.05279C7.55421 0.968093 7.35151 0.986371 7.2 1.1L3.33333 4H1.5C0.671573 4 0 4.67158 0 5.5V9.5C0 10.3284 0.671573 11 1.5 11H3.33333L7.2 13.9C7.35151 14.0136 7.55421 14.0319 7.72361 13.9472C7.893 13.8625 8 13.6894 8 13.5V1.5ZM3.8 4.9L7 2.5V12.5L3.8 10.1C3.71345 10.0351 3.60819 10 3.5 10H1.5C1.22386 10 1 9.77614 1 9.5V5.5C1 5.22386 1.22386 5 1.5 5H3.5C3.60819 5 3.71345 4.96491 3.8 4.9ZM10.833 3.95949C10.7106 3.77557 10.4623 3.72567 10.2784 3.84804C10.0944 3.97041 10.0445 4.21871 10.1669 4.40264C11.4111 6.27268 11.4111 8.72728 10.1669 10.5973C10.0445 10.7813 10.0944 11.0296 10.2784 11.1519C10.4623 11.2743 10.7106 11.2244 10.833 11.0405C12.2558 8.90199 12.2558 6.09798 10.833 3.95949Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpeakerOffIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.72361 1.05279C7.893 1.13749 8 1.31062 8 1.5V13.5C8 13.6894 7.893 13.8625 7.72361 13.9472C7.55421 14.0319 7.35151 14.0136 7.2 13.9L3.33333 11H1.5C0.671573 11 0 10.3284 0 9.5V5.5C0 4.67158 0.671573 4 1.5 4H3.33333L7.2 1.1C7.35151 0.986371 7.55421 0.968093 7.72361 1.05279ZM7 2.5L3.8 4.9C3.71345 4.96491 3.60819 5 3.5 5H1.5C1.22386 5 1 5.22386 1 5.5V9.5C1 9.77614 1.22386 10 1.5 10H3.5C3.60819 10 3.71345 10.0351 3.8 10.1L7 12.5V2.5ZM14.8536 5.14645C15.0488 5.34171 15.0488 5.65829 14.8536 5.85355L13.2071 7.5L14.8536 9.14645C15.0488 9.34171 15.0488 9.65829 14.8536 9.85355C14.6583 10.0488 14.3417 10.0488 14.1464 9.85355L12.5 8.20711L10.8536 9.85355C10.6583 10.0488 10.3417 10.0488 10.1464 9.85355C9.95118 9.65829 9.95118 9.34171 10.1464 9.14645L11.7929 7.5L10.1464 5.85355C9.95118 5.65829 9.95118 5.34171 10.1464 5.14645C10.3417 4.95118 10.6583 4.95118 10.8536 5.14645L12.5 6.79289L14.1464 5.14645C14.3417 4.95118 14.6583 4.95118 14.8536 5.14645Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SpeakerQuietIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8 1.5C8 1.31062 7.893 1.13749 7.72361 1.05279C7.55421 0.968093 7.35151 0.986371 7.2 1.1L3.33333 4H1.5C0.671573 4 0 4.67158 0 5.5V9.5C0 10.3284 0.671573 11 1.5 11H3.33333L7.2 13.9C7.35151 14.0136 7.55421 14.0319 7.72361 13.9472C7.893 13.8625 8 13.6894 8 13.5V1.5ZM3.8 4.9L7 2.5V12.5L3.8 10.1C3.71345 10.0351 3.60819 10 3.5 10H1.5C1.22386 10 1 9.77614 1 9.5V5.5C1 5.22386 1.22386 5 1.5 5H3.5C3.60819 5 3.71345 4.96491 3.8 4.9ZM10.083 5.05577C9.96066 4.87185 9.71235 4.82195 9.52843 4.94432C9.3445 5.06669 9.2946 5.31499 9.41697 5.49892C10.2207 6.70693 10.2207 8.29303 9.41697 9.50104C9.2946 9.68496 9.3445 9.93326 9.52843 10.0556C9.71235 10.178 9.96066 10.1281 10.083 9.94418C11.0653 8.46773 11.0653 6.53222 10.083 5.05577Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SquareIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 1H1.5H13.5H14V1.5V13.5V14H13.5H1.5H1V13.5V1.5V1ZM2 2V13H13V2H2Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StackIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.75432 1.81954C7.59742 1.72682 7.4025 1.72682 7.24559 1.81954L1.74559 5.06954C1.59336 5.15949 1.49996 5.32317 1.49996 5.5C1.49996 5.67683 1.59336 5.84051 1.74559 5.93046L7.24559 9.18046C7.4025 9.27318 7.59742 9.27318 7.75432 9.18046L13.2543 5.93046C13.4066 5.84051 13.5 5.67683 13.5 5.5C13.5 5.32317 13.4066 5.15949 13.2543 5.06954L7.75432 1.81954ZM7.49996 8.16923L2.9828 5.5L7.49996 2.83077L12.0171 5.5L7.49996 8.16923ZM2.25432 8.31954C2.01658 8.17906 1.70998 8.2579 1.56949 8.49564C1.42901 8.73337 1.50785 9.03998 1.74559 9.18046L7.24559 12.4305C7.4025 12.5232 7.59742 12.5232 7.75432 12.4305L13.2543 9.18046C13.4921 9.03998 13.5709 8.73337 13.4304 8.49564C13.2899 8.2579 12.9833 8.17906 12.7456 8.31954L7.49996 11.4192L2.25432 8.31954Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StarIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.97942 1.25171L6.9585 1.30199L5.58662 4.60039C5.54342 4.70426 5.44573 4.77523 5.3336 4.78422L1.7727 5.0697L1.71841 5.07405L1.38687 5.10063L1.08608 5.12475C0.820085 5.14607 0.712228 5.47802 0.914889 5.65162L1.14406 5.84793L1.39666 6.06431L1.43802 6.09974L4.15105 8.42374C4.23648 8.49692 4.2738 8.61176 4.24769 8.72118L3.41882 12.196L3.40618 12.249L3.32901 12.5725L3.25899 12.866C3.19708 13.1256 3.47945 13.3308 3.70718 13.1917L3.9647 13.0344L4.24854 12.861L4.29502 12.8326L7.34365 10.9705C7.43965 10.9119 7.5604 10.9119 7.6564 10.9705L10.705 12.8326L10.7515 12.861L11.0354 13.0344L11.2929 13.1917C11.5206 13.3308 11.803 13.1256 11.7411 12.866L11.671 12.5725L11.5939 12.249L11.5812 12.196L10.7524 8.72118C10.7263 8.61176 10.7636 8.49692 10.849 8.42374L13.562 6.09974L13.6034 6.06431L13.856 5.84793L14.0852 5.65162C14.2878 5.47802 14.18 5.14607 13.914 5.12475L13.6132 5.10063L13.2816 5.07405L13.2274 5.0697L9.66645 4.78422C9.55432 4.77523 9.45663 4.70426 9.41343 4.60039L8.04155 1.30199L8.02064 1.25171L7.89291 0.944609L7.77702 0.665992C7.67454 0.419604 7.32551 0.419604 7.22303 0.665992L7.10715 0.944609L6.97942 1.25171ZM7.50003 2.60397L6.50994 4.98442C6.32273 5.43453 5.89944 5.74207 5.41351 5.78103L2.84361 5.98705L4.8016 7.66428C5.17183 7.98142 5.33351 8.47903 5.2204 8.95321L4.62221 11.461L6.8224 10.1171C7.23842 9.86302 7.76164 9.86302 8.17766 10.1171L10.3778 11.461L9.77965 8.95321C9.66654 8.47903 9.82822 7.98142 10.1984 7.66428L12.1564 5.98705L9.58654 5.78103C9.10061 5.74207 8.67732 5.43453 8.49011 4.98442L7.50003 2.60397Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StarFilledIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.22303 0.665992C7.32551 0.419604 7.67454 0.419604 7.77702 0.665992L9.41343 4.60039C9.45663 4.70426 9.55432 4.77523 9.66645 4.78422L13.914 5.12475C14.18 5.14607 14.2878 5.47802 14.0852 5.65162L10.849 8.42374C10.7636 8.49692 10.7263 8.61176 10.7524 8.72118L11.7411 12.866C11.803 13.1256 11.5206 13.3308 11.2929 13.1917L7.6564 10.9705C7.5604 10.9119 7.43965 10.9119 7.34365 10.9705L3.70718 13.1917C3.47945 13.3308 3.19708 13.1256 3.25899 12.866L4.24769 8.72118C4.2738 8.61176 4.23648 8.49692 4.15105 8.42374L0.914889 5.65162C0.712228 5.47802 0.820086 5.14607 1.08608 5.12475L5.3336 4.78422C5.44573 4.77523 5.54342 4.70426 5.58662 4.60039L7.22303 0.665992Z",
        fill: color
    }));
});
var StitchesLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.84998 7.49998C1.84998 7.21321 1.87134 6.93143 1.91256 6.65615L9.56374 2.23875C9.86311 2.35627 10.15 2.49861 10.4219 2.66322L3.77065 6.50332C3.73669 6.52183 3.70482 6.5449 3.67602 6.57238C3.5911 6.65308 3.54245 6.76286 3.53682 6.87658C3.53359 6.9418 3.54451 7.00831 3.57086 7.07137C3.58927 7.1157 3.6149 7.15742 3.64744 7.19458C3.67306 7.22396 3.702 7.24941 3.73337 7.27069L7.32533 9.83813L3.87232 11.8317C2.63604 10.7953 1.84998 9.23944 1.84998 7.49998ZM8.36843 10.2751C8.37682 10.2706 8.38509 10.2659 8.39322 10.2608L9.84091 9.42499C9.84706 9.42163 9.85314 9.41812 9.85915 9.41446L11.3101 8.57677C11.3655 8.54649 11.4154 8.504 11.4554 8.44995C11.6034 8.25031 11.5616 7.96848 11.362 7.82046L7.82779 5.20017L11.2161 3.24393C12.4013 4.27963 13.15 5.80237 13.15 7.49998C13.15 7.83546 13.1207 8.16411 13.0647 8.48353L5.56875 12.8113C5.26138 12.6995 4.96646 12.5618 4.68662 12.4008L8.36843 10.2751ZM8.18149 9.34383L4.81659 6.93868L5.50918 6.53881L8.80604 8.98324L8.18149 9.34383ZM6.35875 6.04832L6.97822 5.69067L10.2751 8.13506L9.6556 8.49275L6.35875 6.04832ZM8.3318 1.91078L2.24263 5.42636C3.06941 3.33188 5.11164 1.84998 7.49998 1.84998C7.78258 1.84998 8.06033 1.87072 8.3318 1.91078ZM6.84684 13.1126C7.06114 13.1373 7.27908 13.15 7.49998 13.15C9.8246 13.15 11.8213 11.7461 12.6886 9.7399L6.84684 13.1126ZM7.49998 0.849976C3.82728 0.849976 0.849976 3.82728 0.849976 7.49998C0.849976 11.1727 3.82728 14.15 7.49998 14.15C11.1727 14.15 14.15 11.1727 14.15 7.49998C14.15 3.82728 11.1727 0.849976 7.49998 0.849976Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StopIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 3C2 2.44772 2.44772 2 3 2H12C12.5523 2 13 2.44772 13 3V12C13 12.5523 12.5523 13 12 13H3C2.44772 13 2 12.5523 2 12V3ZM12 3H3V12H12V3Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StopwatchIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.49998 0.5C5.49998 0.223858 5.72383 0 5.99998 0H7.49998H8.99998C9.27612 0 9.49998 0.223858 9.49998 0.5C9.49998 0.776142 9.27612 1 8.99998 1H7.99998V2.11922C9.09832 2.20409 10.119 2.56622 10.992 3.13572C11.0116 3.10851 11.0336 3.08252 11.058 3.05806L11.858 2.25806C12.1021 2.01398 12.4978 2.01398 12.7419 2.25806C12.986 2.50214 12.986 2.89786 12.7419 3.14194L11.967 3.91682C13.1595 5.07925 13.9 6.70314 13.9 8.49998C13.9 12.0346 11.0346 14.9 7.49998 14.9C3.96535 14.9 1.09998 12.0346 1.09998 8.49998C1.09998 5.13362 3.69904 2.3743 6.99998 2.11922V1H5.99998C5.72383 1 5.49998 0.776142 5.49998 0.5ZM2.09998 8.49998C2.09998 5.51764 4.51764 3.09998 7.49998 3.09998C10.4823 3.09998 12.9 5.51764 12.9 8.49998C12.9 11.4823 10.4823 13.9 7.49998 13.9C4.51764 13.9 2.09998 11.4823 2.09998 8.49998ZM7.99998 4.5C7.99998 4.22386 7.77612 4 7.49998 4C7.22383 4 6.99998 4.22386 6.99998 4.5V9.5C6.99998 9.77614 7.22383 10 7.49998 10C7.77612 10 7.99998 9.77614 7.99998 9.5V4.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StretchHorizontallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 5.99995L0.999992 5.99995L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 8.99992L13.9999 8.99992L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StretchVerticallyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H6H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM9 14V1L6 1V14H1.49988C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var StrikethroughIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.00003 3.25C5.00003 2.97386 4.77617 2.75 4.50003 2.75C4.22389 2.75 4.00003 2.97386 4.00003 3.25V7.10003H2.49998C2.27906 7.10003 2.09998 7.27912 2.09998 7.50003C2.09998 7.72094 2.27906 7.90003 2.49998 7.90003H4.00003V8.55C4.00003 10.483 5.56703 12.05 7.50003 12.05C9.43303 12.05 11 10.483 11 8.55V7.90003H12.5C12.7209 7.90003 12.9 7.72094 12.9 7.50003C12.9 7.27912 12.7209 7.10003 12.5 7.10003H11V3.25C11 2.97386 10.7762 2.75 10.5 2.75C10.2239 2.75 10 2.97386 10 3.25V7.10003H5.00003V3.25ZM5.00003 7.90003V8.55C5.00003 9.93071 6.11932 11.05 7.50003 11.05C8.88074 11.05 10 9.93071 10 8.55V7.90003H5.00003Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SunIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SwitchIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10.5 4C8.567 4 7 5.567 7 7.5C7 9.433 8.567 11 10.5 11C12.433 11 14 9.433 14 7.5C14 5.567 12.433 4 10.5 4ZM7.67133 11C6.65183 10.175 6 8.91363 6 7.5C6 6.08637 6.65183 4.82498 7.67133 4H4.5C2.567 4 1 5.567 1 7.5C1 9.433 2.567 11 4.5 11H7.67133ZM0 7.5C0 5.01472 2.01472 3 4.5 3H10.5C12.9853 3 15 5.01472 15 7.5C15 9.98528 12.9853 12 10.5 12H4.5C2.01472 12 0 9.98528 0 7.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var SymbolIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.90321 7.29677C1.90321 10.341 4.11041 12.4147 6.58893 12.8439C6.87255 12.893 7.06266 13.1627 7.01355 13.4464C6.96444 13.73 6.69471 13.9201 6.41109 13.871C3.49942 13.3668 0.86084 10.9127 0.86084 7.29677C0.860839 5.76009 1.55996 4.55245 2.37639 3.63377C2.96124 2.97568 3.63034 2.44135 4.16846 2.03202L2.53205 2.03202C2.25591 2.03202 2.03205 1.80816 2.03205 1.53202C2.03205 1.25588 2.25591 1.03202 2.53205 1.03202L5.53205 1.03202C5.80819 1.03202 6.03205 1.25588 6.03205 1.53202L6.03205 4.53202C6.03205 4.80816 5.80819 5.03202 5.53205 5.03202C5.25591 5.03202 5.03205 4.80816 5.03205 4.53202L5.03205 2.68645L5.03054 2.68759L5.03045 2.68766L5.03044 2.68767L5.03043 2.68767C4.45896 3.11868 3.76059 3.64538 3.15554 4.3262C2.44102 5.13021 1.90321 6.10154 1.90321 7.29677ZM13.0109 7.70321C13.0109 4.69115 10.8505 2.6296 8.40384 2.17029C8.12093 2.11718 7.93465 1.84479 7.98776 1.56188C8.04087 1.27898 8.31326 1.0927 8.59616 1.14581C11.4704 1.68541 14.0532 4.12605 14.0532 7.70321C14.0532 9.23988 13.3541 10.4475 12.5377 11.3662C11.9528 12.0243 11.2837 12.5586 10.7456 12.968L12.3821 12.968C12.6582 12.968 12.8821 13.1918 12.8821 13.468C12.8821 13.7441 12.6582 13.968 12.3821 13.968L9.38205 13.968C9.10591 13.968 8.88205 13.7441 8.88205 13.468L8.88205 10.468C8.88205 10.1918 9.10591 9.96796 9.38205 9.96796C9.65819 9.96796 9.88205 10.1918 9.88205 10.468L9.88205 12.3135L9.88362 12.3123C10.4551 11.8813 11.1535 11.3546 11.7585 10.6738C12.4731 9.86976 13.0109 8.89844 13.0109 7.70321Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TableIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8 2H12.5C12.7761 2 13 2.22386 13 2.5V5H8V2ZM7 5V2H2.5C2.22386 2 2 2.22386 2 2.5V5H7ZM2 6V9H7V6H2ZM8 6H13V9H8V6ZM8 10H13V12.5C13 12.7761 12.7761 13 12.5 13H8V10ZM2 12.5V10H7V13H2.5C2.22386 13 2 12.7761 2 12.5ZM1 2.5C1 1.67157 1.67157 1 2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TargetIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.900024 7.50002C0.900024 3.85495 3.85495 0.900024 7.50002 0.900024C11.1451 0.900024 14.1 3.85495 14.1 7.50002C14.1 11.1451 11.1451 14.1 7.50002 14.1C3.85495 14.1 0.900024 11.1451 0.900024 7.50002ZM7.50002 1.80002C4.35201 1.80002 1.80002 4.35201 1.80002 7.50002C1.80002 10.648 4.35201 13.2 7.50002 13.2C10.648 13.2 13.2 10.648 13.2 7.50002C13.2 4.35201 10.648 1.80002 7.50002 1.80002ZM3.07504 7.50002C3.07504 5.05617 5.05618 3.07502 7.50004 3.07502C9.94388 3.07502 11.925 5.05617 11.925 7.50002C11.925 9.94386 9.94388 11.925 7.50004 11.925C5.05618 11.925 3.07504 9.94386 3.07504 7.50002ZM7.50004 3.92502C5.52562 3.92502 3.92504 5.52561 3.92504 7.50002C3.92504 9.47442 5.52563 11.075 7.50004 11.075C9.47444 11.075 11.075 9.47442 11.075 7.50002C11.075 5.52561 9.47444 3.92502 7.50004 3.92502ZM7.50004 5.25002C6.2574 5.25002 5.25004 6.25739 5.25004 7.50002C5.25004 8.74266 6.2574 9.75002 7.50004 9.75002C8.74267 9.75002 9.75004 8.74266 9.75004 7.50002C9.75004 6.25738 8.74267 5.25002 7.50004 5.25002ZM6.05004 7.50002C6.05004 6.69921 6.69923 6.05002 7.50004 6.05002C8.30084 6.05002 8.95004 6.69921 8.95004 7.50002C8.95004 8.30083 8.30084 8.95002 7.50004 8.95002C6.69923 8.95002 6.05004 8.30083 6.05004 7.50002Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextAlignCenterIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H10.5C10.7761 7 11 7.22386 11 7.5C11 7.77614 10.7761 8 10.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM3 10.5C3 10.2239 3.22386 10 3.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H3.5C3.22386 11 3 10.7761 3 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextAlignJustifyIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2.5 4C2.22386 4 2 4.22386 2 4.5C2 4.77614 2.22386 5 2.5 5H12.5C12.7761 5 13 4.77614 13 4.5C13 4.22386 12.7761 4 12.5 4H2.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextAlignLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H7.5C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H10.5C10.7761 10 11 10.2239 11 10.5C11 10.7761 10.7761 11 10.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextAlignRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM7 7.5C7 7.22386 7.22386 7 7.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H7.5C7.22386 8 7 7.77614 7 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H4.5C4.22386 11 4 10.7761 4 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TextNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.3536 2.35355C13.5488 2.15829 13.5488 1.84171 13.3536 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L11.9291 2.36383C11.9159 2.32246 11.897 2.28368 11.8732 2.24845C11.7923 2.12875 11.6554 2.05005 11.5001 2.05005H3.50005C3.29909 2.05005 3.1289 2.18178 3.07111 2.3636C3.05743 2.40665 3.05005 2.45249 3.05005 2.50007V4.50001C3.05005 4.74854 3.25152 4.95001 3.50005 4.95001C3.74858 4.95001 3.95005 4.74854 3.95005 4.50001V2.95005H6.95006V7.34284L1.64645 12.6464C1.45118 12.8417 1.45118 13.1583 1.64645 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L6.95006 8.75705V12.0501H5.7544C5.50587 12.0501 5.3044 12.2515 5.3044 12.5001C5.3044 12.7486 5.50587 12.9501 5.7544 12.9501H9.2544C9.50293 12.9501 9.7044 12.7486 9.7044 12.5001C9.7044 12.2515 9.50293 12.0501 9.2544 12.0501H8.05006V7.65705L13.3536 2.35355ZM8.05006 6.24284L11.0501 3.24283V2.95005H8.05006V6.24284Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ThickArrowDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5 3.5C5 3.22386 5.22386 3 5.5 3H9.5C9.77614 3 10 3.22386 10 3.5V6H12.5C12.6873 6 12.8589 6.10467 12.9446 6.27121C13.0303 6.43774 13.0157 6.63821 12.9069 6.79062L7.90687 13.7906C7.81301 13.922 7.66148 14 7.5 14C7.33853 14 7.18699 13.922 7.09314 13.7906L2.09314 6.79062C1.98427 6.63821 1.96972 6.43774 2.05542 6.27121C2.14112 6.10467 2.31271 6 2.5 6H5V3.5ZM6 4V6.5C6 6.77614 5.77614 7 5.5 7H3.4716L7.5 12.6398L11.5284 7H9.5C9.22386 7 9 6.77614 9 6.5V4H6Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ThickArrowLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1 7.5C1 7.66148 1.07798 7.81301 1.20938 7.90687L8.20938 12.9069C8.36179 13.0157 8.56226 13.0303 8.72879 12.9446C8.89533 12.8589 9 12.6873 9 12.5L9 10L11.5 10C11.7761 10 12 9.77614 12 9.5L12 5.5C12 5.22386 11.7761 5 11.5 5L9 5L9 2.5C9 2.31271 8.89533 2.14112 8.72879 2.05542C8.56226 1.96972 8.36179 1.98427 8.20938 2.09313L1.20938 7.09314C1.07798 7.18699 1 7.33853 1 7.5ZM8 3.4716L8 5.5C8 5.77614 8.22386 6 8.5 6L11 6L11 9L8.5 9C8.22386 9 8 9.22386 8 9.5L8 11.5284L2.36023 7.5L8 3.4716Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ThickArrowRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14 7.5C14 7.66148 13.922 7.81301 13.7906 7.90687L6.79062 12.9069C6.63821 13.0157 6.43774 13.0303 6.27121 12.9446C6.10467 12.8589 6 12.6873 6 12.5L6 10L3.5 10C3.22386 10 3 9.77614 3 9.5L3 5.5C3 5.22386 3.22386 5 3.5 5L6 5L6 2.5C6 2.31271 6.10467 2.14112 6.27121 2.05542C6.43774 1.96972 6.63821 1.98427 6.79062 2.09313L13.7906 7.09314C13.922 7.18699 14 7.33853 14 7.5ZM7 3.4716L7 5.5C7 5.77614 6.77614 6 6.5 6L4 6L4 9L6.5 9C6.77614 9 7 9.22386 7 9.5L7 11.5284L12.6398 7.5L7 3.4716Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ThickArrowUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.5 1C7.66148 1 7.81301 1.07798 7.90687 1.20938L12.9069 8.20938C13.0157 8.36179 13.0303 8.56226 12.9446 8.72879C12.8589 8.89533 12.6873 9 12.5 9H10V11.5C10 11.7761 9.77614 12 9.5 12H5.5C5.22386 12 5 11.7761 5 11.5V9H2.5C2.31271 9 2.14112 8.89533 2.05542 8.72879C1.96972 8.56226 1.98427 8.36179 2.09314 8.20938L7.09314 1.20938C7.18699 1.07798 7.33853 1 7.5 1ZM3.4716 8H5.5C5.77614 8 6 8.22386 6 8.5V11H9V8.5C9 8.22386 9.22386 8 9.5 8H11.5284L7.5 2.36023L3.4716 8Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TimerIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49998 0.849976C7.22383 0.849976 6.99998 1.07383 6.99998 1.34998V3.52234C6.99998 3.79848 7.22383 4.02234 7.49998 4.02234C7.77612 4.02234 7.99998 3.79848 7.99998 3.52234V1.8718C10.8862 2.12488 13.15 4.54806 13.15 7.49998C13.15 10.6204 10.6204 13.15 7.49998 13.15C4.37957 13.15 1.84998 10.6204 1.84998 7.49998C1.84998 6.10612 2.35407 4.83128 3.19049 3.8459C3.36919 3.63538 3.34339 3.31985 3.13286 3.14115C2.92234 2.96245 2.60681 2.98825 2.42811 3.19877C1.44405 4.35808 0.849976 5.86029 0.849976 7.49998C0.849976 11.1727 3.82728 14.15 7.49998 14.15C11.1727 14.15 14.15 11.1727 14.15 7.49998C14.15 3.82728 11.1727 0.849976 7.49998 0.849976ZM6.74049 8.08072L4.22363 4.57237C4.15231 4.47295 4.16346 4.33652 4.24998 4.25C4.33649 4.16348 4.47293 4.15233 4.57234 4.22365L8.08069 6.74051C8.56227 7.08599 8.61906 7.78091 8.19998 8.2C7.78089 8.61909 7.08597 8.56229 6.74049 8.08072Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TokensIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.5 2C3.11929 2 2 3.11929 2 4.5C2 5.88072 3.11929 7 4.5 7C5.88072 7 7 5.88072 7 4.5C7 3.11929 5.88072 2 4.5 2ZM3 4.5C3 3.67157 3.67157 3 4.5 3C5.32843 3 6 3.67157 6 4.5C6 5.32843 5.32843 6 4.5 6C3.67157 6 3 5.32843 3 4.5ZM10.5 2C9.11929 2 8 3.11929 8 4.5C8 5.88072 9.11929 7 10.5 7C11.8807 7 13 5.88072 13 4.5C13 3.11929 11.8807 2 10.5 2ZM9 4.5C9 3.67157 9.67157 3 10.5 3C11.3284 3 12 3.67157 12 4.5C12 5.32843 11.3284 6 10.5 6C9.67157 6 9 5.32843 9 4.5ZM2 10.5C2 9.11929 3.11929 8 4.5 8C5.88072 8 7 9.11929 7 10.5C7 11.8807 5.88072 13 4.5 13C3.11929 13 2 11.8807 2 10.5ZM4.5 9C3.67157 9 3 9.67157 3 10.5C3 11.3284 3.67157 12 4.5 12C5.32843 12 6 11.3284 6 10.5C6 9.67157 5.32843 9 4.5 9ZM10.5 8C9.11929 8 8 9.11929 8 10.5C8 11.8807 9.11929 13 10.5 13C11.8807 13 13 11.8807 13 10.5C13 9.11929 11.8807 8 10.5 8ZM9 10.5C9 9.67157 9.67157 9 10.5 9C11.3284 9 12 9.67157 12 10.5C12 11.3284 11.3284 12 10.5 12C9.67157 12 9 11.3284 9 10.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TrackNextIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M13.0502 2.74989C13.0502 2.44613 12.804 2.19989 12.5002 2.19989C12.1965 2.19989 11.9502 2.44613 11.9502 2.74989V7.2825C11.9046 7.18802 11.8295 7.10851 11.7334 7.05776L2.73338 2.30776C2.5784 2.22596 2.3919 2.23127 2.24182 2.32176C2.09175 2.41225 2 2.57471 2 2.74995V12.25C2 12.4252 2.09175 12.5877 2.24182 12.6781C2.3919 12.7686 2.5784 12.7739 2.73338 12.6921L11.7334 7.94214C11.8295 7.89139 11.9046 7.81188 11.9502 7.7174V12.2499C11.9502 12.5536 12.1965 12.7999 12.5002 12.7999C12.804 12.7999 13.0502 12.5536 13.0502 12.2499V2.74989ZM3 11.4207V3.5792L10.4288 7.49995L3 11.4207Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TrackPreviousIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.94976 2.74989C1.94976 2.44613 2.196 2.19989 2.49976 2.19989C2.80351 2.19989 3.04976 2.44613 3.04976 2.74989V7.2825C3.0954 7.18802 3.17046 7.10851 3.26662 7.05776L12.2666 2.30776C12.4216 2.22596 12.6081 2.23127 12.7582 2.32176C12.9083 2.41225 13 2.57471 13 2.74995V12.25C13 12.4252 12.9083 12.5877 12.7582 12.6781C12.6081 12.7686 12.4216 12.7739 12.2666 12.6921L3.26662 7.94214C3.17046 7.89139 3.0954 7.81188 3.04976 7.7174V12.2499C3.04976 12.5536 2.80351 12.7999 2.49976 12.7999C2.196 12.7999 1.94976 12.5536 1.94976 12.2499V2.74989ZM4.57122 7.49995L12 11.4207V3.5792L4.57122 7.49995Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TransparencyGridIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        opacity: ".25",
        d: "M0 0H3V3H0V0ZM6 3H3V6H0V9H3V12H0V15H3V12H6V15H9V12H12V15H15V12H12V9H15V6H12V3H15V0H12V3H9V0H6V3ZM6 6V3H9V6H6ZM6 9H3V6H6V9ZM9 9V6H12V9H9ZM9 9H6V12H9V9Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TrashIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.5 1C5.22386 1 5 1.22386 5 1.5C5 1.77614 5.22386 2 5.5 2H9.5C9.77614 2 10 1.77614 10 1.5C10 1.22386 9.77614 1 9.5 1H5.5ZM3 3.5C3 3.22386 3.22386 3 3.5 3H5H10H11.5C11.7761 3 12 3.22386 12 3.5C12 3.77614 11.7761 4 11.5 4H11V12C11 12.5523 10.5523 13 10 13H5C4.44772 13 4 12.5523 4 12V4L3.5 4C3.22386 4 3 3.77614 3 3.5ZM5 4H10V12H5V4Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var TriangleDownIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4 6H11L7.5 10.5L4 6Z",
        fill: color
    }));
});
var TriangleLeftIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M9 4L9 11L4.5 7.5L9 4Z",
        fill: color
    }));
});
var TriangleRightIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6 11L6 4L10.5 7.5L6 11Z",
        fill: color
    }));
});
var TriangleUpIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4 9H11L7.5 4.5L4 9Z",
        fill: color
    }));
});
var TwitterLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.23336 4.69629C7.23336 2.96884 8.63335 1.56857 10.36 1.56857C11.3736 1.56857 12.183 2.04804 12.7254 2.74385C13.3079 2.62467 13.8557 2.40913 14.3513 2.11508C14.1559 2.72598 13.7424 3.2396 13.2033 3.56463C13.2038 3.56568 13.2042 3.56674 13.2047 3.56779C13.7334 3.50361 14.2364 3.36302 14.7048 3.15546L14.7037 3.15715C14.3667 3.66183 13.9431 4.10736 13.4561 4.47034C13.4823 4.64672 13.4956 4.82427 13.4956 5.00079C13.4956 8.6871 10.6873 12.9746 5.52122 12.9746C3.93906 12.9746 2.46544 12.511 1.22505 11.7152C0.992632 11.5661 0.925108 11.2568 1.07423 11.0244C1.0874 11.0038 1.10183 10.9846 1.11734 10.9666C1.20582 10.8202 1.37438 10.7309 1.5554 10.7522C2.47066 10.8601 3.38568 10.7485 4.19219 10.3962C3.39226 10.0434 2.77129 9.35975 2.50204 8.51974C2.45359 8.3686 2.48835 8.20311 2.59351 8.08422C2.59716 8.0801 2.60087 8.07606 2.60464 8.0721C1.96391 7.50819 1.55973 6.68208 1.55973 5.76143V5.72759C1.55973 5.56814 1.64411 5.42059 1.78155 5.33974C1.82671 5.31317 1.87537 5.29511 1.92532 5.28558C1.70549 4.86154 1.58116 4.37984 1.58116 3.86958C1.58116 3.40165 1.58384 2.81192 1.91332 2.28081C1.98718 2.16175 2.10758 2.08915 2.2364 2.07195C2.42588 2.01237 2.64087 2.06969 2.77406 2.23302C3.86536 3.57126 5.44066 4.49583 7.23366 4.73961L7.23336 4.69629ZM5.52122 11.9746C4.73387 11.9746 3.97781 11.8435 3.27248 11.6023C4.13012 11.4538 4.95307 11.1159 5.66218 10.5602C5.81211 10.4427 5.87182 10.2435 5.81126 10.0629C5.7507 9.88234 5.583 9.75943 5.39255 9.75607C4.68968 9.74366 4.06712 9.39716 3.67793 8.86845C3.86828 8.85306 4.05428 8.82039 4.23445 8.77167C4.43603 8.71716 4.57363 8.53114 4.56674 8.32243C4.55985 8.11372 4.41029 7.93718 4.20555 7.89607C3.42694 7.73977 2.79883 7.16764 2.56169 6.42174C2.76255 6.47025 2.97102 6.4991 3.18482 6.5061C3.38563 6.51267 3.56646 6.38533 3.62795 6.19405C3.68943 6.00277 3.61666 5.79391 3.44963 5.68224C2.86523 5.29155 2.48116 4.62464 2.48116 3.86958C2.48116 3.70213 2.48352 3.55268 2.49355 3.41719C3.85115 4.79913 5.70873 5.68931 7.77588 5.79338C7.93225 5.80126 8.08328 5.73543 8.18395 5.61553C8.28463 5.49562 8.32332 5.33548 8.28851 5.18284C8.25255 5.02517 8.23336 4.86284 8.23336 4.69629C8.23336 3.52085 9.18591 2.56857 10.36 2.56857C11.5943 2.56857 12.4956 3.71208 12.4956 5.00079C12.4956 8.25709 10.0202 11.9746 5.52122 11.9746Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var UnderlineIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M5.00001 2.75C5.00001 2.47386 4.77615 2.25 4.50001 2.25C4.22387 2.25 4.00001 2.47386 4.00001 2.75V8.05C4.00001 9.983 5.56702 11.55 7.50001 11.55C9.43301 11.55 11 9.983 11 8.05V2.75C11 2.47386 10.7762 2.25 10.5 2.25C10.2239 2.25 10 2.47386 10 2.75V8.05C10 9.43071 8.88072 10.55 7.50001 10.55C6.1193 10.55 5.00001 9.43071 5.00001 8.05V2.75ZM3.49998 13.1001C3.27906 13.1001 3.09998 13.2791 3.09998 13.5001C3.09998 13.721 3.27906 13.9001 3.49998 13.9001H11.5C11.7209 13.9001 11.9 13.721 11.9 13.5001C11.9 13.2791 11.7209 13.1001 11.5 13.1001H3.49998Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var UpdateIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.90321 7.29677C1.90321 10.341 4.11041 12.4147 6.58893 12.8439C6.87255 12.893 7.06266 13.1627 7.01355 13.4464C6.96444 13.73 6.69471 13.9201 6.41109 13.871C3.49942 13.3668 0.86084 10.9127 0.86084 7.29677C0.860839 5.76009 1.55996 4.55245 2.37639 3.63377C2.96124 2.97568 3.63034 2.44135 4.16846 2.03202L2.53205 2.03202C2.25591 2.03202 2.03205 1.80816 2.03205 1.53202C2.03205 1.25588 2.25591 1.03202 2.53205 1.03202L5.53205 1.03202C5.80819 1.03202 6.03205 1.25588 6.03205 1.53202L6.03205 4.53202C6.03205 4.80816 5.80819 5.03202 5.53205 5.03202C5.25591 5.03202 5.03205 4.80816 5.03205 4.53202L5.03205 2.68645L5.03054 2.68759L5.03045 2.68766L5.03044 2.68767L5.03043 2.68767C4.45896 3.11868 3.76059 3.64538 3.15554 4.3262C2.44102 5.13021 1.90321 6.10154 1.90321 7.29677ZM13.0109 7.70321C13.0109 4.69115 10.8505 2.6296 8.40384 2.17029C8.12093 2.11718 7.93465 1.84479 7.98776 1.56188C8.04087 1.27898 8.31326 1.0927 8.59616 1.14581C11.4704 1.68541 14.0532 4.12605 14.0532 7.70321C14.0532 9.23988 13.3541 10.4475 12.5377 11.3662C11.9528 12.0243 11.2837 12.5586 10.7456 12.968L12.3821 12.968C12.6582 12.968 12.8821 13.1918 12.8821 13.468C12.8821 13.7441 12.6582 13.968 12.3821 13.968L9.38205 13.968C9.10591 13.968 8.88205 13.7441 8.88205 13.468L8.88205 10.468C8.88205 10.1918 9.10591 9.96796 9.38205 9.96796C9.65819 9.96796 9.88205 10.1918 9.88205 10.468L9.88205 12.3135L9.88362 12.3123C10.4551 11.8813 11.1535 11.3546 11.7585 10.6738C12.4731 9.86976 13.0109 8.89844 13.0109 7.70321Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var UploadIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.81825 1.18188C7.64251 1.00615 7.35759 1.00615 7.18185 1.18188L4.18185 4.18188C4.00611 4.35762 4.00611 4.64254 4.18185 4.81828C4.35759 4.99401 4.64251 4.99401 4.81825 4.81828L7.05005 2.58648V9.49996C7.05005 9.74849 7.25152 9.94996 7.50005 9.94996C7.74858 9.94996 7.95005 9.74849 7.95005 9.49996V2.58648L10.1819 4.81828C10.3576 4.99401 10.6425 4.99401 10.8182 4.81828C10.994 4.64254 10.994 4.35762 10.8182 4.18188L7.81825 1.18188ZM2.5 9.99997C2.77614 9.99997 3 10.2238 3 10.5V12C3 12.5538 3.44565 13 3.99635 13H11.0012C11.5529 13 12 12.5528 12 12V10.5C12 10.2238 12.2239 9.99997 12.5 9.99997C12.7761 9.99997 13 10.2238 13 10.5V12C13 13.104 12.1062 14 11.0012 14H3.99635C2.89019 14 2 13.103 2 12V10.5C2 10.2238 2.22386 9.99997 2.5 9.99997Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ValueIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ValueNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49985 0.877045C3.84216 0.877045 0.877014 3.84219 0.877014 7.49988C0.877014 9.1488 1.47963 10.657 2.47665 11.8162L1.64643 12.6464C1.45117 12.8417 1.45117 13.1583 1.64643 13.3535C1.8417 13.5488 2.15828 13.5488 2.35354 13.3535L3.18377 12.5233C4.34296 13.5202 5.85104 14.1227 7.49985 14.1227C11.1575 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 5.85107 13.5202 4.34299 12.5233 3.1838L13.3535 2.35354C13.5488 2.15827 13.5488 1.84169 13.3535 1.64643C13.1583 1.45117 12.8417 1.45117 12.6464 1.64643L11.8162 2.47668C10.657 1.47966 9.14877 0.877045 7.49985 0.877045ZM11.1422 3.15066C10.1567 2.32449 8.88639 1.82704 7.49985 1.82704C4.36683 1.82704 1.82701 4.36686 1.82701 7.49988C1.82701 8.88642 2.32446 10.1568 3.15063 11.1422L11.1422 3.15066ZM3.85776 11.8493C4.84317 12.6753 6.11343 13.1727 7.49985 13.1727C10.6328 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 6.11346 12.6753 4.8432 11.8493 3.85779L3.85776 11.8493Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var VercelLogoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7.49998 1L6.92321 2.00307L1.17498 12L0.599976 13H1.7535H13.2464H14.4L13.825 12L8.07674 2.00307L7.49998 1ZM7.49998 3.00613L2.3285 12H12.6714L7.49998 3.00613Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var VideoIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.76447 3.12199C5.63151 3.04859 6.56082 3 7.5 3C8.43918 3 9.36849 3.04859 10.2355 3.12199C11.2796 3.21037 11.9553 3.27008 12.472 3.39203C12.9425 3.50304 13.2048 3.64976 13.4306 3.88086C13.4553 3.90618 13.4902 3.94414 13.5133 3.97092C13.7126 4.20149 13.8435 4.4887 13.918 5.03283C13.9978 5.6156 14 6.37644 14 7.52493C14 8.66026 13.9978 9.41019 13.9181 9.98538C13.8439 10.5206 13.7137 10.8061 13.5125 11.0387C13.4896 11.0651 13.4541 11.1038 13.4296 11.1287C13.2009 11.3625 12.9406 11.5076 12.4818 11.6164C11.9752 11.7365 11.3143 11.7942 10.2878 11.8797C9.41948 11.9521 8.47566 12 7.5 12C6.52434 12 5.58052 11.9521 4.7122 11.8797C3.68572 11.7942 3.02477 11.7365 2.51816 11.6164C2.05936 11.5076 1.7991 11.3625 1.57037 11.1287C1.54593 11.1038 1.51035 11.0651 1.48748 11.0387C1.28628 10.8061 1.15612 10.5206 1.08193 9.98538C1.00221 9.41019 1 8.66026 1 7.52493C1 6.37644 1.00216 5.6156 1.082 5.03283C1.15654 4.4887 1.28744 4.20149 1.48666 3.97092C1.5098 3.94414 1.54468 3.90618 1.56942 3.88086C1.7952 3.64976 2.05752 3.50304 2.52796 3.39203C3.04473 3.27008 3.7204 3.21037 4.76447 3.12199ZM0 7.52493C0 5.28296 0 4.16198 0.729985 3.31713C0.766457 3.27491 0.815139 3.22194 0.854123 3.18204C1.63439 2.38339 2.64963 2.29744 4.68012 2.12555C5.56923 2.05028 6.52724 2 7.5 2C8.47276 2 9.43077 2.05028 10.3199 2.12555C12.3504 2.29744 13.3656 2.38339 14.1459 3.18204C14.1849 3.22194 14.2335 3.27491 14.27 3.31713C15 4.16198 15 5.28296 15 7.52493C15 9.74012 15 10.8477 14.2688 11.6929C14.2326 11.7348 14.1832 11.7885 14.1444 11.8281C13.3629 12.6269 12.3655 12.71 10.3709 12.8763C9.47971 12.9505 8.50782 13 7.5 13C6.49218 13 5.52028 12.9505 4.62915 12.8763C2.63446 12.71 1.63712 12.6269 0.855558 11.8281C0.816844 11.7885 0.767442 11.7348 0.731221 11.6929C0 10.8477 0 9.74012 0 7.52493ZM5.25 5.38264C5.25 5.20225 5.43522 5.08124 5.60041 5.15369L10.428 7.27105C10.6274 7.35853 10.6274 7.64147 10.428 7.72895L5.60041 9.84631C5.43522 9.91876 5.25 9.79775 5.25 9.61736V5.38264Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ViewGridIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M7 2H1.5C1.22386 2 1 2.22386 1 2.5V7H7V2ZM8 2V7H14V2.5C14 2.22386 13.7761 2 13.5 2H8ZM7 8H1V12.5C1 12.7761 1.22386 13 1.5 13H7V8ZM8 13V8H14V12.5C14 12.7761 13.7761 13 13.5 13H8ZM1.5 1C0.671573 1 0 1.67157 0 2.5V12.5C0 13.3284 0.671573 14 1.5 14H13.5C14.3284 14 15 13.3284 15 12.5V2.5C15 1.67157 14.3284 1 13.5 1H1.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ViewHorizontalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M1.5 2H13.5C13.7761 2 14 2.22386 14 2.5V7H1V2.5C1 2.22386 1.22386 2 1.5 2ZM1 8V12.5C1 12.7761 1.22386 13 1.5 13H13.5C13.7761 13 14 12.7761 14 12.5V8H1ZM0 2.5C0 1.67157 0.671573 1 1.5 1H13.5C14.3284 1 15 1.67157 15 2.5V12.5C15 13.3284 14.3284 14 13.5 14H1.5C0.671573 14 0 13.3284 0 12.5V2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ViewNoneIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M14 2.58711L1.85163 13H13.5C13.7761 13 14 12.7761 14 12.5V2.58711ZM0.762879 13.8067L0.825396 13.8796L0.854717 13.8545C1.05017 13.9478 1.26899 14 1.5 14H13.5C14.3284 14 15 13.3284 15 12.5V2.5C15 1.93949 14.6926 1.45078 14.2371 1.19331L14.1746 1.12037L14.1453 1.1455C13.9498 1.05222 13.731 1 13.5 1H1.5C0.671573 1 0 1.67157 0 2.5V12.5C0 13.0605 0.307435 13.5492 0.762879 13.8067ZM1 12.4129L13.1484 2H1.5C1.22386 2 1 2.22386 1 2.5V12.4129Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ViewVerticalIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M8 2H13.5C13.7761 2 14 2.22386 14 2.5V12.5C14 12.7761 13.7761 13 13.5 13H8V2ZM7 2H1.5C1.22386 2 1 2.22386 1 2.5V12.5C1 12.7761 1.22386 13 1.5 13H7V2ZM0 2.5C0 1.67157 0.671573 1 1.5 1H13.5C14.3284 1 15 1.67157 15 2.5V12.5C15 13.3284 14.3284 14 13.5 14H1.5C0.671573 14 0 13.3284 0 12.5V2.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var WidthIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M4.81812 4.68161C4.99386 4.85734 4.99386 5.14227 4.81812 5.318L3.08632 7.0498H11.9135L10.1817 5.318C10.006 5.14227 10.006 4.85734 10.1817 4.68161C10.3575 4.50587 10.6424 4.50587 10.8181 4.68161L13.3181 7.18161C13.4939 7.35734 13.4939 7.64227 13.3181 7.818L10.8181 10.318C10.6424 10.4937 10.3575 10.4937 10.1817 10.318C10.006 10.1423 10.006 9.85734 10.1817 9.68161L11.9135 7.9498H3.08632L4.81812 9.68161C4.99386 9.85734 4.99386 10.1423 4.81812 10.318C4.64239 10.4937 4.35746 10.4937 4.18173 10.318L1.68173 7.818C1.50599 7.64227 1.50599 7.35734 1.68173 7.18161L4.18173 4.68161C4.35746 4.50587 4.64239 4.50587 4.81812 4.68161Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ZoomInIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159ZM4.25 6.5C4.25 6.22386 4.47386 6 4.75 6H6V4.75C6 4.47386 6.22386 4.25 6.5 4.25C6.77614 4.25 7 4.47386 7 4.75V6H8.25C8.52614 6 8.75 6.22386 8.75 6.5C8.75 6.77614 8.52614 7 8.25 7H7V8.25C7 8.52614 6.77614 8.75 6.5 8.75C6.22386 8.75 6 8.52614 6 8.25V7H4.75C4.47386 7 4.25 6.77614 4.25 6.5Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});
var ZoomOutIcon = /*#__PURE__*/ _react.forwardRef(function(_ref, forwardedRef) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? 'currentColor' : _ref$color, props = _objectWithoutPropertiesLoose(_ref, [
        "color"
    ]);
    return _react.createElement("svg", Object.assign({
        width: "15",
        height: "15",
        viewBox: "0 0 15 15",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
    }, props, {
        ref: forwardedRef
    }), _react.createElement("path", {
        d: "M6.5 10C8.433 10 10 8.433 10 6.5C10 4.567 8.433 3 6.5 3C4.567 3 3 4.567 3 6.5C3 8.433 4.567 10 6.5 10ZM6.5 11C7.56251 11 8.53901 10.6318 9.30884 10.0159L12.1464 12.8536C12.3417 13.0488 12.6583 13.0488 12.8536 12.8536C13.0488 12.6583 13.0488 12.3417 12.8536 12.1464L10.0159 9.30884C10.6318 8.53901 11 7.56251 11 6.5C11 4.01472 8.98528 2 6.5 2C4.01472 2 2 4.01472 2 6.5C2 8.98528 4.01472 11 6.5 11ZM4.75 6C4.47386 6 4.25 6.22386 4.25 6.5C4.25 6.77614 4.47386 7 4.75 7H8.25C8.52614 7 8.75 6.77614 8.75 6.5C8.75 6.22386 8.52614 6 8.25 6H4.75Z",
        fill: color,
        fillRule: "evenodd",
        clipRule: "evenodd"
    }));
});

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gOjDB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Checkbox", ()=>Checkbox
);
parcelHelpers.export(exports, "CheckboxIndicator", ()=>CheckboxIndicator
);
parcelHelpers.export(exports, "Root", ()=>Root
);
parcelHelpers.export(exports, "Indicator", ()=>Indicator
);
var _reactPrimitive = require("@radix-ui/react-primitive");
var _reactPresence = require("@radix-ui/react-presence");
var _reactLabel = require("@radix-ui/react-label");
var _reactUseSize = require("@radix-ui/react-use-size");
var _reactUsePrevious = require("@radix-ui/react-use-previous");
var _reactUseControllableState = require("@radix-ui/react-use-controllable-state");
var _primitive = require("@radix-ui/primitive");
var _reactContext = require("@radix-ui/react-context");
var _reactComposeRefs = require("@radix-ui/react-compose-refs");
var _react = require("react");
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const u = "button", [p, m] = _reactContext.createContext("Checkbox");
const Checkbox = /*#__PURE__*/ _react.forwardRef((t, o)=>{
    const { as: a = u , "aria-labelledby": c , name: m1 , checked: b , defaultChecked: k , required: C , disabled: v , value: y = "on" , onCheckedChange: E , ...g } = t, [w, I] = _react.useState(null), R = _reactComposeRefs.useComposedRefs(o, (e)=>I(e)
    ), P = _reactLabel.useLabelContext(w), q = c || P, M = _react.useRef(!1), O = !w || Boolean(w.closest("form")), [S = !1, j] = _reactUseControllableState.useControllableState({
        prop: b,
        defaultProp: k,
        onChange: E
    }); /*#__PURE__*/ 
    return _react.createElement(p, {
        state: S,
        disabled: v
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        type: "button",
        role: "checkbox",
        "aria-checked": x(S) ? "mixed" : S,
        "aria-labelledby": q,
        "aria-required": C,
        "data-state": h(S),
        "data-disabled": v ? "" : void 0,
        disabled: v,
        value: y
    }, g, {
        as: a,
        ref: R,
        onClick: _primitive.composeEventHandlers(t.onClick, (e)=>{
            j((e1)=>!!x(e1) || !e1
            ), O && (M.current = e.isPropagationStopped(), M.current || e.stopPropagation());
        })
    })), O && /*#__PURE__*/ _react.createElement(f, {
        control: w,
        bubbles: !M.current,
        name: m1,
        value: y,
        checked: S,
        required: C,
        disabled: v,
        style: {
            transform: "translateX(-100%)"
        }
    }));
}); /*#__PURE__*/ 
const b = "span";
const CheckboxIndicator = /*#__PURE__*/ _react.forwardRef((r, o)=>{
    const { as: a = b , forceMount: n , ...i } = r, c = m("CheckboxIndicator"); /*#__PURE__*/ 
    return _react.createElement(_reactPresence.Presence, {
        present: n || x(c.state) || !0 === c.state
    }, /*#__PURE__*/ _react.createElement(_reactPrimitive.Primitive, _extendsDefault.default({
        "data-state": h(c.state),
        "data-disabled": c.disabled ? "" : void 0
    }, i, {
        as: a,
        ref: o,
        style: {
            pointerEvents: "none",
            ...r.style
        }
    })));
}); /*#__PURE__*/ 
const f = (e)=>{
    const { control: t , checked: r , bubbles: n = !0 , ...i } = e, c = _react.useRef(null), s = _reactUsePrevious.usePrevious(r), u1 = _reactUseSize.useSize(t);
    return _react.useEffect(()=>{
        const e1 = c.current, t1 = window.HTMLInputElement.prototype, o = Object.getOwnPropertyDescriptor(t1, "checked").set;
        if (s !== r && o) {
            const t2 = new Event("click", {
                bubbles: n
            });
            e1.indeterminate = x(r), o.call(e1, !x(r) && r), e1.dispatchEvent(t2);
        }
    }, [
        s,
        r,
        n
    ]), /*#__PURE__*/ _react.createElement("input", _extendsDefault.default({
        type: "checkbox",
        defaultChecked: !x(r) && r
    }, i, {
        tabIndex: -1,
        ref: c,
        style: {
            ...e.style,
            ...u1,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
        }
    }));
};
function x(e) {
    return "indeterminate" === e;
}
function h(e) {
    return x(e) ? "indeterminate" : e ? "checked" : "unchecked";
}
const Root = Checkbox;
const Indicator = CheckboxIndicator;

},{"@radix-ui/react-primitive":"50mzH","@radix-ui/react-presence":"lIJsD","@radix-ui/react-label":"2G67W","@radix-ui/react-use-size":"dYwud","@radix-ui/react-use-previous":"i2JhE","@radix-ui/react-use-controllable-state":"iZM9F","@radix-ui/primitive":"dbLQ2","@radix-ui/react-context":"hrkBZ","@radix-ui/react-compose-refs":"kiFIZ","react":"2vIKB","@babel/runtime/helpers/esm/extends":"cF5UA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ln5YW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function create$1(createState) {
    let state;
    const listeners = new Set();
    const setState = (partial, replace)=>{
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (nextState !== state) {
            const previousState = state;
            state = replace ? nextState : Object.assign({
            }, state, nextState);
            listeners.forEach((listener)=>listener(state, previousState)
            );
        }
    };
    const getState = ()=>state
    ;
    const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is)=>{
        let currentSlice = selector(state);
        function listenerToAdd() {
            const nextSlice = selector(state);
            if (!equalityFn(currentSlice, nextSlice)) {
                const previousSlice = currentSlice;
                listener(currentSlice = nextSlice, previousSlice);
            }
        }
        listeners.add(listenerToAdd);
        return ()=>listeners.delete(listenerToAdd)
        ;
    };
    const subscribe = (listener, selector, equalityFn)=>{
        if (selector || equalityFn) return subscribeWithSelector(listener, selector, equalityFn);
        listeners.add(listener);
        return ()=>listeners.delete(listener)
        ;
    };
    const destroy = ()=>listeners.clear()
    ;
    const api = {
        setState,
        getState,
        subscribe,
        destroy
    };
    state = createState(setState, getState, api);
    return api;
}
const isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
const useIsomorphicLayoutEffect = isSSR ? _react.useEffect : _react.useLayoutEffect;
function create(createState) {
    const api = typeof createState === "function" ? create$1(createState) : createState;
    const useStore = (selector = api.getState, equalityFn = Object.is)=>{
        const [, forceUpdate] = _react.useReducer((c)=>c + 1
        , 0);
        const state = api.getState();
        const stateRef = _react.useRef(state);
        const selectorRef = _react.useRef(selector);
        const equalityFnRef = _react.useRef(equalityFn);
        const erroredRef = _react.useRef(false);
        const currentSliceRef = _react.useRef();
        if (currentSliceRef.current === void 0) currentSliceRef.current = selector(state);
        let newStateSlice;
        let hasNewStateSlice = false;
        if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
            newStateSlice = selector(state);
            hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
        }
        useIsomorphicLayoutEffect(()=>{
            if (hasNewStateSlice) currentSliceRef.current = newStateSlice;
            stateRef.current = state;
            selectorRef.current = selector;
            equalityFnRef.current = equalityFn;
            erroredRef.current = false;
        });
        const stateBeforeSubscriptionRef = _react.useRef(state);
        useIsomorphicLayoutEffect(()=>{
            const listener = ()=>{
                try {
                    const nextState = api.getState();
                    const nextStateSlice = selectorRef.current(nextState);
                    if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
                        stateRef.current = nextState;
                        currentSliceRef.current = nextStateSlice;
                        forceUpdate();
                    }
                } catch (error) {
                    erroredRef.current = true;
                    forceUpdate();
                }
            };
            const unsubscribe = api.subscribe(listener);
            if (api.getState() !== stateBeforeSubscriptionRef.current) listener();
            return unsubscribe;
        }, []);
        return hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    };
    Object.assign(useStore, api);
    useStore[Symbol.iterator] = function() {
        console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
        const items = [
            useStore,
            api
        ];
        return {
            next () {
                const done = items.length <= 0;
                return {
                    value: items.shift(),
                    done
                };
            }
        };
    };
    return useStore;
}
exports.default = create;

},{"react":"2vIKB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}]},["aMN3l","6mQMX"], "6mQMX", "parcelRequiree752")

//# sourceMappingURL=index.a2b4c36f.js.map
