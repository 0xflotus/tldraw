/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_editor_tsx";
exports.ids = ["components_editor_tsx"];
exports.modules = {

/***/ "./components/editor.tsx":
/*!*******************************!*\
  !*** ./components/editor.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Editor; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tldraw/tldraw */ \"../packages/tldraw/dist/index.js\");\n/* harmony import */ var _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _hooks_usePersistence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/usePersistence */ \"./hooks/usePersistence.tsx\");\n\nvar _jsxFileName = \"/Users/steve/Developer/Github/tldraw/www/components/editor.tsx\";\n\n\n\n\nconst initialDoc = {\n  id: 'doc',\n  pages: {\n    page1: {\n      id: 'page1',\n      shapes: {\n        rect1: {\n          id: 'rect1',\n          parentId: 'page1',\n          name: 'Rectangle',\n          childIndex: 1,\n          type: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.TLDrawShapeType.Rectangle,\n          point: [32, 32],\n          size: [100, 100],\n          style: {\n            dash: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.DashStyle.Draw,\n            size: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.SizeStyle.Medium,\n            color: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.ColorStyle.Blue\n          }\n        },\n        ellipse1: {\n          id: 'ellipse1',\n          parentId: 'page1',\n          name: 'Ellipse',\n          childIndex: 2,\n          type: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.TLDrawShapeType.Ellipse,\n          point: [132, 132],\n          radius: [50, 50],\n          style: {\n            dash: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.DashStyle.Draw,\n            size: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.SizeStyle.Medium,\n            color: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.ColorStyle.Cyan\n          }\n        },\n        draw1: {\n          id: 'draw1',\n          parentId: 'page1',\n          name: 'Draw',\n          childIndex: 3,\n          type: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.TLDrawShapeType.Draw,\n          point: [232, 232],\n          points: [[50, 0], [100, 100], [0, 100], [50, 0], [100, 100], [0, 100], [50, 0], [56, 5]],\n          style: {\n            dash: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.DashStyle.Draw,\n            size: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.SizeStyle.Medium,\n            color: _tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.ColorStyle.Green\n          }\n        }\n      },\n      bindings: {}\n    }\n  },\n  pageStates: {\n    page1: {\n      id: 'page1',\n      selectedIds: [],\n      currentParentId: 'page1',\n      camera: {\n        point: [0, 0],\n        zoom: 1\n      }\n    }\n  }\n};\nfunction Editor() {\n  const {\n    value,\n    setValue,\n    status\n  } = (0,_hooks_usePersistence__WEBPACK_IMPORTED_MODULE_3__.usePersistence)('doc', initialDoc);\n  const handleChange = react__WEBPACK_IMPORTED_MODULE_1__.useCallback((tlstate, reason) => {\n    if (reason.startsWith('session')) {\n      return;\n    }\n\n    setValue(tlstate.document);\n  }, [setValue]);\n\n  if (status === 'loading' || value === null) {\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tldraw_tldraw__WEBPACK_IMPORTED_MODULE_2__.TLDraw, {\n    document: value,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGxkcmF3L3d3dy8uL2NvbXBvbmVudHMvZWRpdG9yLnRzeD84NWFkIl0sIm5hbWVzIjpbImluaXRpYWxEb2MiLCJpZCIsInBhZ2VzIiwicGFnZTEiLCJzaGFwZXMiLCJyZWN0MSIsInBhcmVudElkIiwibmFtZSIsImNoaWxkSW5kZXgiLCJ0eXBlIiwiVExEcmF3U2hhcGVUeXBlIiwicG9pbnQiLCJzaXplIiwic3R5bGUiLCJkYXNoIiwiRGFzaFN0eWxlIiwiU2l6ZVN0eWxlIiwiY29sb3IiLCJDb2xvclN0eWxlIiwiQmx1ZSIsImVsbGlwc2UxIiwicmFkaXVzIiwiQ3lhbiIsImRyYXcxIiwicG9pbnRzIiwiR3JlZW4iLCJiaW5kaW5ncyIsInBhZ2VTdGF0ZXMiLCJzZWxlY3RlZElkcyIsImN1cnJlbnRQYXJlbnRJZCIsImNhbWVyYSIsInpvb20iLCJFZGl0b3IiLCJ2YWx1ZSIsInNldFZhbHVlIiwic3RhdHVzIiwidXNlUGVyc2lzdGVuY2UiLCJoYW5kbGVDaGFuZ2UiLCJSZWFjdCIsInRsc3RhdGUiLCJyZWFzb24iLCJzdGFydHNXaXRoIiwiZG9jdW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE1BQU1BLFVBQTBCLEdBQUc7QUFDakNDLElBQUUsRUFBRSxLQUQ2QjtBQUVqQ0MsT0FBSyxFQUFFO0FBQ0xDLFNBQUssRUFBRTtBQUNMRixRQUFFLEVBQUUsT0FEQztBQUVMRyxZQUFNLEVBQUU7QUFDTkMsYUFBSyxFQUFFO0FBQ0xKLFlBQUUsRUFBRSxPQURDO0FBRUxLLGtCQUFRLEVBQUUsT0FGTDtBQUdMQyxjQUFJLEVBQUUsV0FIRDtBQUlMQyxvQkFBVSxFQUFFLENBSlA7QUFLTEMsY0FBSSxFQUFFQyxxRUFMRDtBQU1MQyxlQUFLLEVBQUUsQ0FBQyxFQUFELEVBQUssRUFBTCxDQU5GO0FBT0xDLGNBQUksRUFBRSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBUEQ7QUFRTEMsZUFBSyxFQUFFO0FBQ0xDLGdCQUFJLEVBQUVDLDBEQUREO0FBRUxILGdCQUFJLEVBQUVJLDREQUZEO0FBR0xDLGlCQUFLLEVBQUVDLDJEQUFlQztBQUhqQjtBQVJGLFNBREQ7QUFlTkMsZ0JBQVEsRUFBRTtBQUNSbkIsWUFBRSxFQUFFLFVBREk7QUFFUkssa0JBQVEsRUFBRSxPQUZGO0FBR1JDLGNBQUksRUFBRSxTQUhFO0FBSVJDLG9CQUFVLEVBQUUsQ0FKSjtBQUtSQyxjQUFJLEVBQUVDLG1FQUxFO0FBTVJDLGVBQUssRUFBRSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBTkM7QUFPUlUsZ0JBQU0sRUFBRSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBUEE7QUFRUlIsZUFBSyxFQUFFO0FBQ0xDLGdCQUFJLEVBQUVDLDBEQUREO0FBRUxILGdCQUFJLEVBQUVJLDREQUZEO0FBR0xDLGlCQUFLLEVBQUVDLDJEQUFlSTtBQUhqQjtBQVJDLFNBZko7QUE2Qk5DLGFBQUssRUFBRTtBQUNMdEIsWUFBRSxFQUFFLE9BREM7QUFFTEssa0JBQVEsRUFBRSxPQUZMO0FBR0xDLGNBQUksRUFBRSxNQUhEO0FBSUxDLG9CQUFVLEVBQUUsQ0FKUDtBQUtMQyxjQUFJLEVBQUVDLGdFQUxEO0FBTUxDLGVBQUssRUFBRSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBTkY7QUFPTGEsZ0JBQU0sRUFBRSxDQUNOLENBQUMsRUFBRCxFQUFLLENBQUwsQ0FETSxFQUVOLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FGTSxFQUdOLENBQUMsQ0FBRCxFQUFJLEdBQUosQ0FITSxFQUlOLENBQUMsRUFBRCxFQUFLLENBQUwsQ0FKTSxFQUtOLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FMTSxFQU1OLENBQUMsQ0FBRCxFQUFJLEdBQUosQ0FOTSxFQU9OLENBQUMsRUFBRCxFQUFLLENBQUwsQ0FQTSxFQVFOLENBQUMsRUFBRCxFQUFLLENBQUwsQ0FSTSxDQVBIO0FBaUJMWCxlQUFLLEVBQUU7QUFDTEMsZ0JBQUksRUFBRUMsMERBREQ7QUFFTEgsZ0JBQUksRUFBRUksNERBRkQ7QUFHTEMsaUJBQUssRUFBRUMsNERBQWdCTztBQUhsQjtBQWpCRjtBQTdCRCxPQUZIO0FBdURMQyxjQUFRLEVBQUU7QUF2REw7QUFERixHQUYwQjtBQTZEakNDLFlBQVUsRUFBRTtBQUNWeEIsU0FBSyxFQUFFO0FBQ0xGLFFBQUUsRUFBRSxPQURDO0FBRUwyQixpQkFBVyxFQUFFLEVBRlI7QUFHTEMscUJBQWUsRUFBRSxPQUhaO0FBSUxDLFlBQU0sRUFBRTtBQUNObkIsYUFBSyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FERDtBQUVOb0IsWUFBSSxFQUFFO0FBRkE7QUFKSDtBQURHO0FBN0RxQixDQUFuQztBQTBFZSxTQUFTQyxNQUFULEdBQWtCO0FBQy9CLFFBQU07QUFBRUMsU0FBRjtBQUFTQyxZQUFUO0FBQW1CQztBQUFuQixNQUE4QkMscUVBQWMsQ0FBQyxLQUFELEVBQVFwQyxVQUFSLENBQWxEO0FBRUEsUUFBTXFDLFlBQVksR0FBR0MsOENBQUEsQ0FDbkIsQ0FBQ0MsT0FBRCxFQUF1QkMsTUFBdkIsS0FBMEM7QUFDeEMsUUFBSUEsTUFBTSxDQUFDQyxVQUFQLENBQWtCLFNBQWxCLENBQUosRUFBa0M7QUFDaEM7QUFDRDs7QUFFRFAsWUFBUSxDQUFDSyxPQUFPLENBQUNHLFFBQVQsQ0FBUjtBQUNELEdBUGtCLEVBUW5CLENBQUNSLFFBQUQsQ0FSbUIsQ0FBckI7O0FBV0EsTUFBSUMsTUFBTSxLQUFLLFNBQVgsSUFBd0JGLEtBQUssS0FBSyxJQUF0QyxFQUE0QztBQUMxQyx3QkFBTztBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQVA7QUFDRDs7QUFFRCxzQkFBTyw4REFBQyxrREFBRDtBQUFRLFlBQVEsRUFBRUEsS0FBbEI7QUFBeUIsWUFBUSxFQUFFSTtBQUFuQztBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQVA7QUFDRCIsImZpbGUiOiIuL2NvbXBvbmVudHMvZWRpdG9yLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ29sb3JTdHlsZSwgRGFzaFN0eWxlLCBTaXplU3R5bGUsIFRMRHJhd1NoYXBlVHlwZSwgVExEcmF3U3RhdGUgfSBmcm9tICdAdGxkcmF3L3RsZHJhdydcbmltcG9ydCB7IFRMRHJhdywgVExEcmF3RG9jdW1lbnQgfSBmcm9tICdAdGxkcmF3L3RsZHJhdydcbmltcG9ydCB7IHVzZVBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vaG9va3MvdXNlUGVyc2lzdGVuY2UnXG5cbmNvbnN0IGluaXRpYWxEb2M6IFRMRHJhd0RvY3VtZW50ID0ge1xuICBpZDogJ2RvYycsXG4gIHBhZ2VzOiB7XG4gICAgcGFnZTE6IHtcbiAgICAgIGlkOiAncGFnZTEnLFxuICAgICAgc2hhcGVzOiB7XG4gICAgICAgIHJlY3QxOiB7XG4gICAgICAgICAgaWQ6ICdyZWN0MScsXG4gICAgICAgICAgcGFyZW50SWQ6ICdwYWdlMScsXG4gICAgICAgICAgbmFtZTogJ1JlY3RhbmdsZScsXG4gICAgICAgICAgY2hpbGRJbmRleDogMSxcbiAgICAgICAgICB0eXBlOiBUTERyYXdTaGFwZVR5cGUuUmVjdGFuZ2xlLFxuICAgICAgICAgIHBvaW50OiBbMzIsIDMyXSxcbiAgICAgICAgICBzaXplOiBbMTAwLCAxMDBdLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBkYXNoOiBEYXNoU3R5bGUuRHJhdyxcbiAgICAgICAgICAgIHNpemU6IFNpemVTdHlsZS5NZWRpdW0sXG4gICAgICAgICAgICBjb2xvcjogQ29sb3JTdHlsZS5CbHVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGVsbGlwc2UxOiB7XG4gICAgICAgICAgaWQ6ICdlbGxpcHNlMScsXG4gICAgICAgICAgcGFyZW50SWQ6ICdwYWdlMScsXG4gICAgICAgICAgbmFtZTogJ0VsbGlwc2UnLFxuICAgICAgICAgIGNoaWxkSW5kZXg6IDIsXG4gICAgICAgICAgdHlwZTogVExEcmF3U2hhcGVUeXBlLkVsbGlwc2UsXG4gICAgICAgICAgcG9pbnQ6IFsxMzIsIDEzMl0sXG4gICAgICAgICAgcmFkaXVzOiBbNTAsIDUwXSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZGFzaDogRGFzaFN0eWxlLkRyYXcsXG4gICAgICAgICAgICBzaXplOiBTaXplU3R5bGUuTWVkaXVtLFxuICAgICAgICAgICAgY29sb3I6IENvbG9yU3R5bGUuQ3lhbixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBkcmF3MToge1xuICAgICAgICAgIGlkOiAnZHJhdzEnLFxuICAgICAgICAgIHBhcmVudElkOiAncGFnZTEnLFxuICAgICAgICAgIG5hbWU6ICdEcmF3JyxcbiAgICAgICAgICBjaGlsZEluZGV4OiAzLFxuICAgICAgICAgIHR5cGU6IFRMRHJhd1NoYXBlVHlwZS5EcmF3LFxuICAgICAgICAgIHBvaW50OiBbMjMyLCAyMzJdLFxuICAgICAgICAgIHBvaW50czogW1xuICAgICAgICAgICAgWzUwLCAwXSxcbiAgICAgICAgICAgIFsxMDAsIDEwMF0sXG4gICAgICAgICAgICBbMCwgMTAwXSxcbiAgICAgICAgICAgIFs1MCwgMF0sXG4gICAgICAgICAgICBbMTAwLCAxMDBdLFxuICAgICAgICAgICAgWzAsIDEwMF0sXG4gICAgICAgICAgICBbNTAsIDBdLFxuICAgICAgICAgICAgWzU2LCA1XSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBkYXNoOiBEYXNoU3R5bGUuRHJhdyxcbiAgICAgICAgICAgIHNpemU6IFNpemVTdHlsZS5NZWRpdW0sXG4gICAgICAgICAgICBjb2xvcjogQ29sb3JTdHlsZS5HcmVlbixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICB9LFxuICB9LFxuICBwYWdlU3RhdGVzOiB7XG4gICAgcGFnZTE6IHtcbiAgICAgIGlkOiAncGFnZTEnLFxuICAgICAgc2VsZWN0ZWRJZHM6IFtdLFxuICAgICAgY3VycmVudFBhcmVudElkOiAncGFnZTEnLFxuICAgICAgY2FtZXJhOiB7XG4gICAgICAgIHBvaW50OiBbMCwgMF0sXG4gICAgICAgIHpvb206IDEsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVkaXRvcigpIHtcbiAgY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUsIHN0YXR1cyB9ID0gdXNlUGVyc2lzdGVuY2UoJ2RvYycsIGluaXRpYWxEb2MpXG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHRsc3RhdGU6IFRMRHJhd1N0YXRlLCByZWFzb246IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHJlYXNvbi5zdGFydHNXaXRoKCdzZXNzaW9uJykpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHNldFZhbHVlKHRsc3RhdGUuZG9jdW1lbnQpXG4gICAgfSxcbiAgICBbc2V0VmFsdWVdXG4gIClcblxuICBpZiAoc3RhdHVzID09PSAnbG9hZGluZycgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gPGRpdiAvPlxuICB9XG5cbiAgcmV0dXJuIDxUTERyYXcgZG9jdW1lbnQ9e3ZhbHVlfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPlxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/editor.tsx\n");

/***/ }),

/***/ "./hooks/usePersistence.tsx":
/*!**********************************!*\
  !*** ./hooks/usePersistence.tsx ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"usePersistence\": function() { return /* binding */ usePersistence; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb */ \"idb\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(idb__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction getId(id) {\n  return '0.0.0-' + id;\n}\n\n/**\n * Persist a value in indexdb. This hook is designed to be used primarily through\n * its methods, `setValue` and `forceUpdate`. The `setValue` method will update the\n * value in the database, howeever it will NOT cause the hook's component to update.\n * The `forceUpdate` method will cause the component to update with the latest value\n * in the database.\n *\n * ### Example\n *\n *```ts\n * const {status, value, setValue, forceUpdate} = usePersistence()\n *```\n */\nfunction usePersistence(id, doc) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState('loading');\n  const [value, _setValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null); // A function that other parts of the program can use to manually update\n  // the state to the latest value in the database.\n\n  const forceUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    _setValue(null);\n\n    setStatus('loading');\n    (0,idb__WEBPACK_IMPORTED_MODULE_1__.openDB)('db', 1).then(db => db.get('documents', id).then(v => {\n      if (!v) throw Error(`Could not find document with id: ${id}`);\n\n      _setValue(v);\n\n      setStatus('ready');\n    }));\n  }, [id]); // A function that other parts of the program can use to manually set the\n  // value in the database.\n\n  const setValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(doc => {\n    (0,idb__WEBPACK_IMPORTED_MODULE_1__.openDB)('db', 1).then(db => db.put('documents', doc, id));\n  }, [id]); // Whenever the id or doc changes, save the new value to the database and update\n  // the state.\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    async function handleLoad() {\n      const db = await (0,idb__WEBPACK_IMPORTED_MODULE_1__.openDB)('db', 1, {\n        upgrade(db) {\n          db.createObjectStore('documents');\n        }\n\n      });\n      let savedDoc;\n\n      try {\n        const restoredDoc = await db.get('documents', id);\n        if (!restoredDoc) throw Error('No document');\n        savedDoc = restoredDoc;\n      } catch (e) {\n        await db.put('documents', doc, id);\n        savedDoc = doc;\n      }\n\n      _setValue(savedDoc);\n\n      setStatus('ready');\n    }\n\n    handleLoad();\n  }, [id, doc]);\n  return {\n    value,\n    status,\n    setValue,\n    forceUpdate\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGxkcmF3L3d3dy8uL2hvb2tzL3VzZVBlcnNpc3RlbmNlLnRzeD9hNWVlIl0sIm5hbWVzIjpbImdldElkIiwiaWQiLCJ1c2VQZXJzaXN0ZW5jZSIsImRvYyIsInN0YXR1cyIsInNldFN0YXR1cyIsIlJlYWN0IiwidmFsdWUiLCJfc2V0VmFsdWUiLCJmb3JjZVVwZGF0ZSIsIm9wZW5EQiIsInRoZW4iLCJkYiIsImdldCIsInYiLCJFcnJvciIsInNldFZhbHVlIiwicHV0IiwiaGFuZGxlTG9hZCIsInVwZ3JhZGUiLCJjcmVhdGVPYmplY3RTdG9yZSIsInNhdmVkRG9jIiwicmVzdG9yZWREb2MiLCJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7O0FBR0EsU0FBU0EsS0FBVCxDQUFlQyxFQUFmLEVBQTJCO0FBQ3pCLFNBQU8sV0FBV0EsRUFBbEI7QUFDRDs7QUFTRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGNBQVQsQ0FBd0JELEVBQXhCLEVBQW9DRSxHQUFwQyxFQUF5RDtBQUM5RDtBQUNBLFFBQU0sQ0FBQ0MsTUFBRCxFQUFTQyxTQUFULElBQXNCQywyQ0FBQSxDQUFvQyxTQUFwQyxDQUE1QjtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxTQUFSLElBQXFCRiwyQ0FBQSxDQUFzQyxJQUF0QyxDQUEzQixDQUg4RCxDQUs5RDtBQUNBOztBQUNBLFFBQU1HLFdBQVcsR0FBR0gsOENBQUEsQ0FBa0IsTUFBTTtBQUMxQ0UsYUFBUyxDQUFDLElBQUQsQ0FBVDs7QUFDQUgsYUFBUyxDQUFDLFNBQUQsQ0FBVDtBQUVBSywrQ0FBTSxDQUFhLElBQWIsRUFBbUIsQ0FBbkIsQ0FBTixDQUE0QkMsSUFBNUIsQ0FBaUNDLEVBQUUsSUFDakNBLEVBQUUsQ0FBQ0MsR0FBSCxDQUFPLFdBQVAsRUFBb0JaLEVBQXBCLEVBQXdCVSxJQUF4QixDQUE2QkcsQ0FBQyxJQUFJO0FBQ2hDLFVBQUksQ0FBQ0EsQ0FBTCxFQUFRLE1BQU1DLEtBQUssQ0FBRSxvQ0FBbUNkLEVBQUcsRUFBeEMsQ0FBWDs7QUFDUk8sZUFBUyxDQUFDTSxDQUFELENBQVQ7O0FBQ0FULGVBQVMsQ0FBQyxPQUFELENBQVQ7QUFDRCxLQUpELENBREY7QUFPRCxHQVhtQixFQVdqQixDQUFDSixFQUFELENBWGlCLENBQXBCLENBUDhELENBb0I5RDtBQUNBOztBQUNBLFFBQU1lLFFBQVEsR0FBR1YsOENBQUEsQ0FDZEgsR0FBRCxJQUF5QjtBQUN2Qk8sK0NBQU0sQ0FBYSxJQUFiLEVBQW1CLENBQW5CLENBQU4sQ0FBNEJDLElBQTVCLENBQWlDQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ0ssR0FBSCxDQUFPLFdBQVAsRUFBb0JkLEdBQXBCLEVBQXlCRixFQUF6QixDQUF2QztBQUNELEdBSGMsRUFJZixDQUFDQSxFQUFELENBSmUsQ0FBakIsQ0F0QjhELENBNkI5RDtBQUNBOztBQUNBSyw4Q0FBQSxDQUFnQixNQUFNO0FBQ3BCLG1CQUFlWSxVQUFmLEdBQTRCO0FBQzFCLFlBQU1OLEVBQUUsR0FBRyxNQUFNRiwyQ0FBTSxDQUFhLElBQWIsRUFBbUIsQ0FBbkIsRUFBc0I7QUFDM0NTLGVBQU8sQ0FBQ1AsRUFBRCxFQUFLO0FBQ1ZBLFlBQUUsQ0FBQ1EsaUJBQUgsQ0FBcUIsV0FBckI7QUFDRDs7QUFIMEMsT0FBdEIsQ0FBdkI7QUFNQSxVQUFJQyxRQUFKOztBQUVBLFVBQUk7QUFDRixjQUFNQyxXQUFXLEdBQUcsTUFBTVYsRUFBRSxDQUFDQyxHQUFILENBQU8sV0FBUCxFQUFvQlosRUFBcEIsQ0FBMUI7QUFDQSxZQUFJLENBQUNxQixXQUFMLEVBQWtCLE1BQU1QLEtBQUssQ0FBQyxhQUFELENBQVg7QUFDbEJNLGdCQUFRLEdBQUdDLFdBQVg7QUFDRCxPQUpELENBSUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsY0FBTVgsRUFBRSxDQUFDSyxHQUFILENBQU8sV0FBUCxFQUFvQmQsR0FBcEIsRUFBeUJGLEVBQXpCLENBQU47QUFDQW9CLGdCQUFRLEdBQUdsQixHQUFYO0FBQ0Q7O0FBRURLLGVBQVMsQ0FBQ2EsUUFBRCxDQUFUOztBQUNBaEIsZUFBUyxDQUFDLE9BQUQsQ0FBVDtBQUNEOztBQUVEYSxjQUFVO0FBQ1gsR0F4QkQsRUF3QkcsQ0FBQ2pCLEVBQUQsRUFBS0UsR0FBTCxDQXhCSDtBQTBCQSxTQUFPO0FBQUVJLFNBQUY7QUFBU0gsVUFBVDtBQUFpQlksWUFBakI7QUFBMkJQO0FBQTNCLEdBQVA7QUFDRCIsImZpbGUiOiIuL2hvb2tzL3VzZVBlcnNpc3RlbmNlLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgb3BlbkRCLCBkZWxldGVEQiwgd3JhcCwgdW53cmFwLCBJREJQRGF0YWJhc2UsIERCU2NoZW1hIH0gZnJvbSAnaWRiJ1xuaW1wb3J0IHsgVExEcmF3RG9jdW1lbnQgfSBmcm9tICdAdGxkcmF3L3RsZHJhdydcblxuZnVuY3Rpb24gZ2V0SWQoaWQ6IHN0cmluZykge1xuICByZXR1cm4gJzAuMC4wLScgKyBpZFxufVxuXG5pbnRlcmZhY2UgVExEYXRhYmFzZSBleHRlbmRzIERCU2NoZW1hIHtcbiAgZG9jdW1lbnRzOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogVExEcmF3RG9jdW1lbnRcbiAgfVxufVxuXG4vKipcbiAqIFBlcnNpc3QgYSB2YWx1ZSBpbiBpbmRleGRiLiBUaGlzIGhvb2sgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBwcmltYXJpbHkgdGhyb3VnaFxuICogaXRzIG1ldGhvZHMsIGBzZXRWYWx1ZWAgYW5kIGBmb3JjZVVwZGF0ZWAuIFRoZSBgc2V0VmFsdWVgIG1ldGhvZCB3aWxsIHVwZGF0ZSB0aGVcbiAqIHZhbHVlIGluIHRoZSBkYXRhYmFzZSwgaG93ZWV2ZXIgaXQgd2lsbCBOT1QgY2F1c2UgdGhlIGhvb2sncyBjb21wb25lbnQgdG8gdXBkYXRlLlxuICogVGhlIGBmb3JjZVVwZGF0ZWAgbWV0aG9kIHdpbGwgY2F1c2UgdGhlIGNvbXBvbmVudCB0byB1cGRhdGUgd2l0aCB0aGUgbGF0ZXN0IHZhbHVlXG4gKiBpbiB0aGUgZGF0YWJhc2UuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKmBgYHRzXG4gKiBjb25zdCB7c3RhdHVzLCB2YWx1ZSwgc2V0VmFsdWUsIGZvcmNlVXBkYXRlfSA9IHVzZVBlcnNpc3RlbmNlKClcbiAqYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQZXJzaXN0ZW5jZShpZDogc3RyaW5nLCBkb2M6IFRMRHJhd0RvY3VtZW50KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IFJlYWN0LnVzZVN0YXRlPCdsb2FkaW5nJyB8ICdyZWFkeSc+KCdsb2FkaW5nJylcbiAgY29uc3QgW3ZhbHVlLCBfc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGU8VExEcmF3RG9jdW1lbnQgfCBudWxsPihudWxsKVxuXG4gIC8vIEEgZnVuY3Rpb24gdGhhdCBvdGhlciBwYXJ0cyBvZiB0aGUgcHJvZ3JhbSBjYW4gdXNlIHRvIG1hbnVhbGx5IHVwZGF0ZVxuICAvLyB0aGUgc3RhdGUgdG8gdGhlIGxhdGVzdCB2YWx1ZSBpbiB0aGUgZGF0YWJhc2UuXG4gIGNvbnN0IGZvcmNlVXBkYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIF9zZXRWYWx1ZShudWxsKVxuICAgIHNldFN0YXR1cygnbG9hZGluZycpXG5cbiAgICBvcGVuREI8VExEYXRhYmFzZT4oJ2RiJywgMSkudGhlbihkYiA9PlxuICAgICAgZGIuZ2V0KCdkb2N1bWVudHMnLCBpZCkudGhlbih2ID0+IHtcbiAgICAgICAgaWYgKCF2KSB0aHJvdyBFcnJvcihgQ291bGQgbm90IGZpbmQgZG9jdW1lbnQgd2l0aCBpZDogJHtpZH1gKVxuICAgICAgICBfc2V0VmFsdWUodilcbiAgICAgICAgc2V0U3RhdHVzKCdyZWFkeScpXG4gICAgICB9KVxuICAgIClcbiAgfSwgW2lkXSlcblxuICAvLyBBIGZ1bmN0aW9uIHRoYXQgb3RoZXIgcGFydHMgb2YgdGhlIHByb2dyYW0gY2FuIHVzZSB0byBtYW51YWxseSBzZXQgdGhlXG4gIC8vIHZhbHVlIGluIHRoZSBkYXRhYmFzZS5cbiAgY29uc3Qgc2V0VmFsdWUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZG9jOiBUTERyYXdEb2N1bWVudCkgPT4ge1xuICAgICAgb3BlbkRCPFRMRGF0YWJhc2U+KCdkYicsIDEpLnRoZW4oZGIgPT4gZGIucHV0KCdkb2N1bWVudHMnLCBkb2MsIGlkKSlcbiAgICB9LFxuICAgIFtpZF1cbiAgKVxuXG4gIC8vIFdoZW5ldmVyIHRoZSBpZCBvciBkb2MgY2hhbmdlcywgc2F2ZSB0aGUgbmV3IHZhbHVlIHRvIHRoZSBkYXRhYmFzZSBhbmQgdXBkYXRlXG4gIC8vIHRoZSBzdGF0ZS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgY29uc3QgZGIgPSBhd2FpdCBvcGVuREI8VExEYXRhYmFzZT4oJ2RiJywgMSwge1xuICAgICAgICB1cGdyYWRlKGRiKSB7XG4gICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2RvY3VtZW50cycpXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBsZXQgc2F2ZWREb2M6IFRMRHJhd0RvY3VtZW50XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3RvcmVkRG9jID0gYXdhaXQgZGIuZ2V0KCdkb2N1bWVudHMnLCBpZClcbiAgICAgICAgaWYgKCFyZXN0b3JlZERvYykgdGhyb3cgRXJyb3IoJ05vIGRvY3VtZW50JylcbiAgICAgICAgc2F2ZWREb2MgPSByZXN0b3JlZERvY1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhd2FpdCBkYi5wdXQoJ2RvY3VtZW50cycsIGRvYywgaWQpXG4gICAgICAgIHNhdmVkRG9jID0gZG9jXG4gICAgICB9XG5cbiAgICAgIF9zZXRWYWx1ZShzYXZlZERvYylcbiAgICAgIHNldFN0YXR1cygncmVhZHknKVxuICAgIH1cblxuICAgIGhhbmRsZUxvYWQoKVxuICB9LCBbaWQsIGRvY10pXG5cbiAgcmV0dXJuIHsgdmFsdWUsIHN0YXR1cywgc2V0VmFsdWUsIGZvcmNlVXBkYXRlIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/usePersistence.tsx\n");

/***/ }),

/***/ "../packages/core/dist/core.cjs.development.js":
/*!*****************************************************!*\
  !*** ../packages/core/dist/core.cjs.development.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = __webpack_require__(/*! react */ \"react\");\nvar reactErrorBoundary = __webpack_require__(/*! react-error-boundary */ \"react-error-boundary\");\nvar deepmerge = _interopDefault(__webpack_require__(/*! deepmerge */ \"deepmerge\"));\nvar reactUseGesture = __webpack_require__(/*! react-use-gesture */ \"react-use-gesture\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar TLContext = /*#__PURE__*/React.createContext({});\nfunction useTLContext() {\n  var context = React.useContext(TLContext);\n  return context;\n}\n\n(function (TLBoundsEdge) {\n  TLBoundsEdge[\"Top\"] = \"top_edge\";\n  TLBoundsEdge[\"Right\"] = \"right_edge\";\n  TLBoundsEdge[\"Bottom\"] = \"bottom_edge\";\n  TLBoundsEdge[\"Left\"] = \"left_edge\";\n})(exports.TLBoundsEdge || (exports.TLBoundsEdge = {}));\n\n(function (TLBoundsCorner) {\n  TLBoundsCorner[\"TopLeft\"] = \"top_left_corner\";\n  TLBoundsCorner[\"TopRight\"] = \"top_right_corner\";\n  TLBoundsCorner[\"BottomRight\"] = \"bottom_right_corner\";\n  TLBoundsCorner[\"BottomLeft\"] = \"bottom_left_corner\";\n})(exports.TLBoundsCorner || (exports.TLBoundsCorner = {}));\n/* -------------------------------------------------- */\n\n/*                   Shape Utility                    */\n\n/* -------------------------------------------------- */\n\n\nvar TLShapeUtil = /*#__PURE__*/function () {\n  function TLShapeUtil() {\n    this.boundsCache = new WeakMap();\n    this.isEditableText = false;\n    this.isAspectRatioLocked = false;\n    this.canEdit = false;\n  }\n\n  var _proto = TLShapeUtil.prototype;\n\n  _proto.transformSingle = function transformSingle(shape, bounds, info) {\n    return this.transform(shape, bounds, info);\n  };\n\n  _proto.shouldRender = function shouldRender(_prev, _next) {\n    return true;\n  };\n\n  _proto.shouldDelete = function shouldDelete(_shape) {\n    return false;\n  };\n\n  _proto.getCenter = function getCenter(shape) {\n    var bounds = this.getBounds(shape);\n    return [bounds.width / 2, bounds.height / 2];\n  };\n\n  _proto.create = function create(props) {\n    return _extends({}, this.defaultProps, props);\n  };\n\n  _proto.mutate = function mutate(shape, props) {\n    return _extends({}, shape, props);\n  };\n\n  _proto.updateChildren = function updateChildren(_shape, _children) {\n    return;\n  };\n\n  _proto.onChildrenChange = function onChildrenChange(_shape, _children) {\n    return;\n  };\n\n  _proto.onBindingChange = function onBindingChange(_shape, _binding, _target, _targetBounds) {\n    return;\n  };\n\n  _proto.onHandleChange = function onHandleChange(_shape, _handle, _info) {\n    return;\n  };\n\n  _proto.onRightPointHandle = function onRightPointHandle(_shape, _handle, _info) {\n    return;\n  };\n\n  _proto.onDoubleClickHandle = function onDoubleClickHandle(_shape, _handle, _info) {\n    return;\n  };\n\n  _proto.onSessionComplete = function onSessionComplete(_shape) {\n    return;\n  };\n\n  _proto.onBoundsReset = function onBoundsReset(_shape) {\n    return;\n  };\n\n  return TLShapeUtil;\n}();\n\n// A big collection of vector utilities. Collected into a class to improve logging / packaging.\n\n/* ----------------- Start Copy Here ---------------- */\nvar Vec = /*#__PURE__*/function () {\n  function Vec() {}\n\n  Vec.clamp = function clamp(n, min, max) {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n);\n  }\n  /**\r\n   * Negate a vector.\r\n   * @param A\r\n   */\n  ;\n\n  return Vec;\n}();\n\nVec.neg = function (A) {\n  return [-A[0], -A[1]];\n};\n\nVec.add = function (A, B) {\n  return [A[0] + B[0], A[1] + B[1]];\n};\n\nVec.addScalar = function (A, n) {\n  return [A[0] + n, A[1] + n];\n};\n\nVec.sub = function (A, B) {\n  return [A[0] - B[0], A[1] - B[1]];\n};\n\nVec.subScalar = function (A, n) {\n  return [A[0] - n, A[1] - n];\n};\n\nVec.vec = function (A, B) {\n  // A, B as vectors get the vector from A to B\n  return [B[0] - A[0], B[1] - A[1]];\n};\n\nVec.mul = function (A, n) {\n  return [A[0] * n, A[1] * n];\n};\n\nVec.mulV = function (A, B) {\n  return [A[0] * B[0], A[1] * B[1]];\n};\n\nVec.div = function (A, n) {\n  return [A[0] / n, A[1] / n];\n};\n\nVec.divV = function (A, B) {\n  return [A[0] / B[0], A[1] / B[1]];\n};\n\nVec.per = function (A) {\n  return [A[1], -A[0]];\n};\n\nVec.dpr = function (A, B) {\n  return A[0] * B[0] + A[1] * B[1];\n};\n\nVec.cpr = function (A, B) {\n  return A[0] * B[1] - B[0] * A[1];\n};\n\nVec.len2 = function (A) {\n  return A[0] * A[0] + A[1] * A[1];\n};\n\nVec.len = function (A) {\n  return Math.hypot(A[0], A[1]);\n};\n\nVec.pry = function (A, B) {\n  return Vec.dpr(A, B) / Vec.len(B);\n};\n\nVec.uni = function (A) {\n  return Vec.div(A, Vec.len(A));\n};\n\nVec.normalize = function (A) {\n  return Vec.uni(A);\n};\n\nVec.tangent = function (A, B) {\n  return Vec.normalize(Vec.sub(A, B));\n};\n\nVec.dist2 = function (A, B) {\n  return Vec.len2(Vec.sub(A, B));\n};\n\nVec.dist = function (A, B) {\n  return Math.hypot(A[1] - B[1], A[0] - B[0]);\n};\n\nVec.fastDist = function (A, B) {\n  var V = [B[0] - A[0], B[1] - A[1]];\n  var aV = [Math.abs(V[0]), Math.abs(V[1])];\n  var r = 1 / Math.max(aV[0], aV[1]);\n  r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289);\n  return [V[0] * r, V[1] * r];\n};\n\nVec.ang = function (A, B) {\n  return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B));\n};\n\nVec.angle = function (A, B) {\n  return Math.atan2(B[1] - A[1], B[0] - A[0]);\n};\n\nVec.med = function (A, B) {\n  return Vec.mul(Vec.add(A, B), 0.5);\n};\n\nVec.rot = function (A, r) {\n  return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)];\n};\n\nVec.rotWith = function (A, C, r) {\n  if (r === 0) return A;\n  var s = Math.sin(r);\n  var c = Math.cos(r);\n  var px = A[0] - C[0];\n  var py = A[1] - C[1];\n  var nx = px * c - py * s;\n  var ny = px * s + py * c;\n  return [nx + C[0], ny + C[1]];\n};\n\nVec.isEqual = function (A, B) {\n  return A[0] === B[0] && A[1] === B[1];\n};\n\nVec.lrp = function (A, B, t) {\n  return Vec.add(A, Vec.mul(Vec.vec(A, B), t));\n};\n\nVec[\"int\"] = function (A, B, from, to, s) {\n  if (s === void 0) {\n    s = 1;\n  }\n\n  var t = (Vec.clamp(from, to) - from) / (to - from);\n  return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s));\n};\n\nVec.ang3 = function (p1, pc, p2) {\n  // this,\n  var v1 = Vec.vec(pc, p1);\n  var v2 = Vec.vec(pc, p2);\n  return Vec.ang(v1, v2);\n};\n\nVec.abs = function (A) {\n  return [Math.abs(A[0]), Math.abs(A[1])];\n};\n\nVec.rescale = function (a, n) {\n  var l = Vec.len(a);\n  return [n * a[0] / l, n * a[1] / l];\n};\n\nVec.isLeft = function (p1, pc, p2) {\n  //  isLeft: >0 for counterclockwise\n  //          =0 for none (degenerate)\n  //          <0 for clockwise\n  return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1]);\n};\n\nVec.clockwise = function (p1, pc, p2) {\n  return Vec.isLeft(p1, pc, p2) > 0;\n};\n\nVec.round = function (a, d) {\n  if (d === void 0) {\n    d = 5;\n  }\n\n  return a.map(function (v) {\n    return +v.toPrecision(d);\n  });\n};\n\nVec.nearestPointOnLineThroughPoint = function (A, u, P) {\n  return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));\n};\n\nVec.distanceToLineThroughPoint = function (A, u, P) {\n  return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P));\n};\n\nVec.nearestPointOnLineSegment = function (A, B, P, clamp) {\n  if (clamp === void 0) {\n    clamp = true;\n  }\n\n  var delta = Vec.sub(B, A);\n  var length = Vec.len(delta);\n  var u = Vec.div(delta, length);\n  var pt = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));\n\n  if (clamp) {\n    var da = Vec.dist(A, pt);\n    var db = Vec.dist(B, pt);\n    if (db < da && da > length) return B;\n    if (da < db && db > length) return A;\n  }\n\n  return pt;\n};\n\nVec.distanceToLineSegment = function (A, B, P, clamp) {\n  if (clamp === void 0) {\n    clamp = true;\n  }\n\n  return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp));\n};\n\nVec.nudge = function (A, B, d) {\n  return Vec.add(A, Vec.mul(Vec.uni(Vec.vec(A, B)), d));\n};\n\nVec.nudgeAtAngle = function (A, a, d) {\n  return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]];\n};\n\nVec.toPrecision = function (a, n) {\n  if (n === void 0) {\n    n = 4;\n  }\n\n  return [+a[0].toPrecision(n), +a[1].toPrecision(n)];\n};\n\nVec.pointsBetween = function (a, b, steps) {\n  if (steps === void 0) {\n    steps = 6;\n  }\n\n  return Array.from(Array(steps)).map(function (_, i) {\n    var t = i / steps;\n    return t * t * t;\n  }).map(function (t) {\n    return Vec.round([].concat(Vec.lrp(a, b, t), [(1 - t) / 2]));\n  });\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\n/* eslint-disable no-extend-native */\n\n/**\r\n * String.prototype.replaceAll() polyfill\r\n * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\nif (!String.prototype.replaceAll) {\n  // @ts-ignore\n  String.prototype.replaceAll = function (str, newStr) {\n    // If a regex pattern\n    if (Object.prototype.toString.call(str).toLowerCase() === '[object regexp]') {\n      return this.replace(str, newStr);\n    } // If a string\n\n\n    return this.replace(new RegExp(str, 'g'), newStr);\n  };\n}\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {}\n\n  /* -------------------------------------------------- */\n\n  /*                    Math & Geometry                 */\n\n  /* -------------------------------------------------- */\n  Utils.filterObject = function filterObject(obj, fn) {\n    return Object.fromEntries(Object.entries(obj).filter(fn));\n  };\n\n  Utils.deepMerge = function deepMerge(a, b) {\n    return deepmerge(a, b, {\n      arrayMerge: function arrayMerge(_a, b) {\n        return b;\n      }\n    });\n  }\n  /**\r\n   * Linear interpolation betwen two numbers.\r\n   * @param y1\r\n   * @param y2\r\n   * @param mu\r\n   */\n  ;\n\n  Utils.lerp = function lerp(y1, y2, mu) {\n    mu = Utils.clamp(mu, 0, 1);\n    return y1 * (1 - mu) + y2 * mu;\n  }\n  /**\r\n   * Linear interpolation between two colors.\r\n   *\r\n   * ### Example\r\n   *\r\n   *```ts\r\n   * lerpColor(\"#000000\", \"#0099FF\", .25)\r\n   *```\r\n   */\n  ;\n\n  Utils.lerpColor = function lerpColor(color1, color2, factor) {\n    if (factor === void 0) {\n      factor = 0.5;\n    }\n\n    function h2r(hex) {\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n    }\n\n    function r2h(rgb) {\n      return '#' + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n    }\n\n    var c1 = h2r(color1);\n    var c2 = h2r(color2);\n    if (!(c1 && c2)) return;\n    var result = c1.slice();\n\n    for (var i = 0; i < 3; i++) {\n      result[i] = Math.round(result[i] + factor * (c2[i] - c1[i]));\n    }\n\n    return r2h(result);\n  }\n  /**\r\n   * Modulate a value between two ranges.\r\n   * @param value\r\n   * @param rangeA from [low, high]\r\n   * @param rangeB to [low, high]\r\n   * @param clamp\r\n   */\n  ;\n\n  Utils.modulate = function modulate(value, rangeA, rangeB, clamp) {\n    if (clamp === void 0) {\n      clamp = false;\n    }\n\n    var fromLow = rangeA[0],\n        fromHigh = rangeA[1];\n    var v0 = rangeB[0],\n        v1 = rangeB[1];\n    var result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);\n    return clamp ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;\n  };\n\n  Utils.clamp = function clamp(n, min, max) {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n);\n  } // TODO: replace with a string compression algorithm\n  ;\n\n  Utils.compress = function compress(s) {\n    return s;\n  } // TODO: replace with a string decompression algorithm\n  ;\n\n  Utils.decompress = function decompress(s) {\n    return s;\n  }\n  /**\r\n   * Recursively clone an object or array.\r\n   * @param obj\r\n   */\n  ;\n\n  Utils.deepClone = function deepClone(obj) {\n    if (obj === null) return obj;\n\n    if (Array.isArray(obj)) {\n      return [].concat(obj);\n    }\n\n    if (typeof obj === 'object') {\n      var clone = _extends({}, obj);\n\n      Object.keys(clone).forEach(function (key) {\n        return clone[key] = typeof obj[key] === 'object' ? Utils.deepClone(obj[key]) : obj[key];\n      });\n      return clone;\n    }\n\n    return obj;\n  }\n  /**\r\n   * Seeded random number generator, using [xorshift](https://en.wikipedia.org/wiki/Xorshift).\r\n   * The result will always be betweeen -1 and 1.\r\n   *\r\n   * Adapted from [seedrandom](https://github.com/davidbau/seedrandom).\r\n   */\n  ;\n\n  Utils.rng = function rng(seed) {\n    if (seed === void 0) {\n      seed = '';\n    }\n\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var w = 0;\n\n    function next() {\n      var t = x ^ x << 11;\n      x = y;\n      y = z;\n      z = w;\n      w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;\n      return w / 0x100000000;\n    }\n\n    for (var k = 0; k < seed.length + 64; k++) {\n      x ^= seed.charCodeAt(k) | 0;\n      next();\n    }\n\n    return next;\n  }\n  /* ---------------------- Boxes --------------------- */\n  ;\n\n  Utils.getRectangleSides = function getRectangleSides(point, size) {\n    var tl = point;\n    var tr = Vec.add(point, [size[0], 0]);\n    var br = Vec.add(point, size);\n    var bl = Vec.add(point, [0, size[1]]);\n    return [['top', [tl, tr]], ['right', [tr, br]], ['bottom', [br, bl]], ['left', [bl, tl]]];\n  };\n\n  Utils.getBoundsSides = function getBoundsSides(bounds) {\n    return this.getRectangleSides([bounds.minX, bounds.minY], [bounds.width, bounds.height]);\n  };\n\n  Utils.shallowEqual = function shallowEqual(objA, objB) {\n    if (objA === objB) return true;\n    if (!objA || !objB) return false;\n    var aKeys = Object.keys(objA);\n    var bKeys = Object.keys(objB);\n    var len = aKeys.length;\n    if (bKeys.length !== len) return false;\n\n    for (var i = 0; i < len; i++) {\n      var key = aKeys[i];\n\n      if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /* --------------- Circles and Angles --------------- */\n\n  /**\r\n   * Get the outer of between a circle and a point.\r\n   * @param C The circle's center.\r\n   * @param r The circle's radius.\r\n   * @param P The point.\r\n   * @param side\r\n   */\n  ;\n\n  Utils.getCircleTangentToPoint = function getCircleTangentToPoint(C, r, P, side) {\n    var B = Vec.lrp(C, P, 0.5);\n    var r1 = Vec.dist(C, B);\n    var delta = Vec.sub(B, C);\n    var d = Vec.len(delta);\n\n    if (!(d <= r + r1 && d >= Math.abs(r - r1))) {\n      return null;\n    }\n\n    var a = (r * r - r1 * r1 + d * d) / (2.0 * d);\n    var n = 1 / d;\n    var p = Vec.add(C, Vec.mul(delta, a * n));\n    var h = Math.sqrt(r * r - a * a);\n    var k = Vec.mul(Vec.per(delta), h * n);\n    return side === 0 ? Vec.add(p, k) : Vec.sub(p, k);\n  }\n  /**\r\n   * Get outer tangents of two circles.\r\n   * @param x0\r\n   * @param y0\r\n   * @param r0\r\n   * @param x1\r\n   * @param y1\r\n   * @param r1\r\n   * @returns [lx0, ly0, lx1, ly1, rx0, ry0, rx1, ry1]\r\n   */\n  ;\n\n  Utils.getOuterTangentsOfCircles = function getOuterTangentsOfCircles(C0, r0, C1, r1) {\n    var a0 = Vec.angle(C0, C1);\n    var d = Vec.dist(C0, C1); // Circles are overlapping, no tangents\n\n    if (d < Math.abs(r1 - r0)) {\n      return null;\n    }\n\n    var a1 = Math.acos((r0 - r1) / d);\n    var t0 = a0 + a1;\n    var t1 = a0 - a1;\n    return [[C0[0] + r0 * Math.cos(t1), C0[1] + r0 * Math.sin(t1)], [C1[0] + r1 * Math.cos(t1), C1[1] + r1 * Math.sin(t1)], [C0[0] + r0 * Math.cos(t0), C0[1] + r0 * Math.sin(t0)], [C1[0] + r1 * Math.cos(t0), C1[1] + r1 * Math.sin(t0)]];\n  }\n  /**\r\n   * Get the closest point on the perimeter of a circle to a given point.\r\n   * @param C The circle's center.\r\n   * @param r The circle's radius.\r\n   * @param P The point.\r\n   */\n  ;\n\n  Utils.getClosestPointOnCircle = function getClosestPointOnCircle(C, r, P) {\n    var v = Vec.sub(C, P);\n    return Vec.sub(C, Vec.mul(Vec.div(v, Vec.len(v)), r));\n  }\n  /**\r\n   * Get a circle from three points.\r\n   * @param A\r\n   * @param B\r\n   * @param C\r\n   * @returns [x, y, r]\r\n   */\n  ;\n\n  Utils.circleFromThreePoints = function circleFromThreePoints(A, B, C) {\n    var x1 = A[0],\n        y1 = A[1];\n    var x2 = B[0],\n        y2 = B[1];\n    var x3 = C[0],\n        y3 = C[1];\n    var a = x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - x3 * y2;\n    var b = (x1 * x1 + y1 * y1) * (y3 - y2) + (x2 * x2 + y2 * y2) * (y1 - y3) + (x3 * x3 + y3 * y3) * (y2 - y1);\n    var c = (x1 * x1 + y1 * y1) * (x2 - x3) + (x2 * x2 + y2 * y2) * (x3 - x1) + (x3 * x3 + y3 * y3) * (x1 - x2);\n    var x = -b / (2 * a);\n    var y = -c / (2 * a);\n    return [x, y, Math.hypot(x - x1, y - y1)];\n  }\n  /**\r\n   * Find the approximate perimeter of an ellipse.\r\n   * @param rx\r\n   * @param ry\r\n   */\n  ;\n\n  Utils.perimeterOfEllipse = function perimeterOfEllipse(rx, ry) {\n    var h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);\n    var p = Math.PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));\n    return p;\n  }\n  /**\r\n   * Get the short angle distance between two angles.\r\n   * @param a0\r\n   * @param a1\r\n   */\n  ;\n\n  Utils.shortAngleDist = function shortAngleDist(a0, a1) {\n    var max = Math.PI * 2;\n    var da = (a1 - a0) % max;\n    return 2 * da % max - da;\n  }\n  /**\r\n   * Get the long angle distance between two angles.\r\n   * @param a0\r\n   * @param a1\r\n   */\n  ;\n\n  Utils.longAngleDist = function longAngleDist(a0, a1) {\n    return Math.PI * 2 - Utils.shortAngleDist(a0, a1);\n  }\n  /**\r\n   * Interpolate an angle between two angles.\r\n   * @param a0\r\n   * @param a1\r\n   * @param t\r\n   */\n  ;\n\n  Utils.lerpAngles = function lerpAngles(a0, a1, t) {\n    return a0 + Utils.shortAngleDist(a0, a1) * t;\n  }\n  /**\r\n   * Get the short distance between two angles.\r\n   * @param a0\r\n   * @param a1\r\n   */\n  ;\n\n  Utils.angleDelta = function angleDelta(a0, a1) {\n    return Utils.shortAngleDist(a0, a1);\n  }\n  /**\r\n   * Get the \"sweep\" or short distance between two points on a circle's perimeter.\r\n   * @param C\r\n   * @param A\r\n   * @param B\r\n   */\n  ;\n\n  Utils.getSweep = function getSweep(C, A, B) {\n    return Utils.angleDelta(Vec.angle(C, A), Vec.angle(C, B));\n  }\n  /**\r\n   * Rotate a point around a center.\r\n   * @param x The x-axis coordinate of the point.\r\n   * @param y The y-axis coordinate of the point.\r\n   * @param cx The x-axis coordinate of the point to rotate round.\r\n   * @param cy The y-axis coordinate of the point to rotate round.\r\n   * @param angle The distance (in radians) to rotate.\r\n   */\n  ;\n\n  Utils.rotatePoint = function rotatePoint(A, B, angle) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    var px = A[0] - B[0];\n    var py = A[1] - B[1];\n    var nx = px * c - py * s;\n    var ny = px * s + py * c;\n    return [nx + B[0], ny + B[1]];\n  }\n  /**\r\n   * Clamp radians within 0 and 2PI\r\n   * @param r\r\n   */\n  ;\n\n  Utils.clampRadians = function clampRadians(r) {\n    return (Math.PI * 2 + r) % (Math.PI * 2);\n  }\n  /**\r\n   * Clamp rotation to even segments.\r\n   * @param r\r\n   * @param segments\r\n   */\n  ;\n\n  Utils.clampToRotationToSegments = function clampToRotationToSegments(r, segments) {\n    var seg = Math.PI * 2 / segments;\n    return Math.floor((Utils.clampRadians(r) + seg / 2) / seg) * seg;\n  }\n  /**\r\n   * Is angle c between angles a and b?\r\n   * @param a\r\n   * @param b\r\n   * @param c\r\n   */\n  ;\n\n  Utils.isAngleBetween = function isAngleBetween(a, b, c) {\n    if (c === a || c === b) return true;\n    var PI2 = Math.PI * 2;\n    var AB = (b - a + PI2) % PI2;\n    var AC = (c - a + PI2) % PI2;\n    return AB <= Math.PI !== AC > AB;\n  }\n  /**\r\n   * Convert degrees to radians.\r\n   * @param d\r\n   */\n  ;\n\n  Utils.degreesToRadians = function degreesToRadians(d) {\n    return d * Math.PI / 180;\n  }\n  /**\r\n   * Convert radians to degrees.\r\n   * @param r\r\n   */\n  ;\n\n  Utils.radiansToDegrees = function radiansToDegrees(r) {\n    return r * 180 / Math.PI;\n  }\n  /**\r\n   * Get the length of an arc between two points on a circle's perimeter.\r\n   * @param C\r\n   * @param r\r\n   * @param A\r\n   * @param B\r\n   */\n  ;\n\n  Utils.getArcLength = function getArcLength(C, r, A, B) {\n    var sweep = Utils.getSweep(C, A, B);\n    return r * (2 * Math.PI) * (sweep / (2 * Math.PI));\n  }\n  /**\r\n   * Get a dash offset for an arc, based on its length.\r\n   * @param C\r\n   * @param r\r\n   * @param A\r\n   * @param B\r\n   * @param step\r\n   */\n  ;\n\n  Utils.getArcDashOffset = function getArcDashOffset(C, r, A, B, step) {\n    var del0 = Utils.getSweep(C, A, B);\n    var len0 = Utils.getArcLength(C, r, A, B);\n    var off0 = del0 < 0 ? len0 : 2 * Math.PI * C[2] - len0;\n    return -off0 / 2 + step;\n  }\n  /**\r\n   * Get a dash offset for an ellipse, based on its length.\r\n   * @param A\r\n   * @param step\r\n   */\n  ;\n\n  Utils.getEllipseDashOffset = function getEllipseDashOffset(A, step) {\n    var c = 2 * Math.PI * A[2];\n    return -c / 2 + -step;\n  }\n  /* --------------- Curves and Splines --------------- */\n\n  /**\r\n   * Get bezier curve segments that pass through an array of points.\r\n   * @param points\r\n   * @param tension\r\n   */\n  ;\n\n  Utils.getTLBezierCurveSegments = function getTLBezierCurveSegments(points, tension) {\n    if (tension === void 0) {\n      tension = 0.4;\n    }\n\n    var len = points.length;\n    var cpoints = [].concat(points);\n\n    if (len < 2) {\n      throw Error('Curve must have at least two points.');\n    }\n\n    for (var i = 1; i < len - 1; i++) {\n      var p0 = points[i - 1];\n      var p1 = points[i];\n      var p2 = points[i + 1];\n      var pdx = p2[0] - p0[0];\n      var pdy = p2[1] - p0[1];\n      var pd = Math.hypot(pdx, pdy);\n      var nx = pdx / pd; // normalized x\n\n      var ny = pdy / pd; // normalized y\n\n      var dp = Math.hypot(p1[0] - p0[0], p1[1] - p0[1]); // Distance to previous\n\n      var dn = Math.hypot(p1[0] - p2[0], p1[1] - p2[1]); // Distance to next\n\n      cpoints[i] = [// tangent start\n      p1[0] - nx * dp * tension, p1[1] - ny * dp * tension, // tangent end\n      p1[0] + nx * dn * tension, p1[1] + ny * dn * tension, // normal\n      nx, ny];\n    } // TODO: Reflect the nearest control points, not average them\n\n\n    var d0 = Math.hypot(points[0][0] + cpoints[1][0]);\n    cpoints[0][2] = (points[0][0] + cpoints[1][0]) / 2;\n    cpoints[0][3] = (points[0][1] + cpoints[1][1]) / 2;\n    cpoints[0][4] = (cpoints[1][0] - points[0][0]) / d0;\n    cpoints[0][5] = (cpoints[1][1] - points[0][1]) / d0;\n    var d1 = Math.hypot(points[len - 1][1] + cpoints[len - 1][1]);\n    cpoints[len - 1][0] = (points[len - 1][0] + cpoints[len - 2][2]) / 2;\n    cpoints[len - 1][1] = (points[len - 1][1] + cpoints[len - 2][3]) / 2;\n    cpoints[len - 1][4] = (cpoints[len - 2][2] - points[len - 1][0]) / -d1;\n    cpoints[len - 1][5] = (cpoints[len - 2][3] - points[len - 1][1]) / -d1;\n    var results = [];\n\n    for (var _i = 1; _i < cpoints.length; _i++) {\n      results.push({\n        start: points[_i - 1].slice(0, 2),\n        tangentStart: cpoints[_i - 1].slice(2, 4),\n        normalStart: cpoints[_i - 1].slice(4, 6),\n        pressureStart: 2 + ((_i - 1) % 2 === 0 ? 1.5 : 0),\n        end: points[_i].slice(0, 2),\n        tangentEnd: cpoints[_i].slice(0, 2),\n        normalEnd: cpoints[_i].slice(4, 6),\n        pressureEnd: 2 + (_i % 2 === 0 ? 1.5 : 0)\n      });\n    }\n\n    return results;\n  }\n  /**\r\n   * Find a point along a curve segment, via pomax.\r\n   * @param t\r\n   * @param points [cpx1, cpy1, cpx2, cpy2, px, py][]\r\n   */\n  ;\n\n  Utils.computePointOnCurve = function computePointOnCurve(t, points) {\n    // shortcuts\n    if (t === 0) {\n      return points[0];\n    }\n\n    var order = points.length - 1;\n\n    if (t === 1) {\n      return points[order];\n    }\n\n    var mt = 1 - t;\n    var p = points; // constant?\n\n    if (order === 0) {\n      return points[0];\n    } // linear?\n\n\n    if (order === 1) {\n      return [mt * p[0][0] + t * p[1][0], mt * p[0][1] + t * p[1][1]];\n    } // quadratic/cubic curve?\n    // if (order < 4) {\n\n\n    var mt2 = mt * mt;\n    var t2 = t * t;\n    var a;\n    var b;\n    var c;\n    var d = 0;\n\n    if (order === 2) {\n      p = [p[0], p[1], p[2], [0, 0]];\n      a = mt2;\n      b = mt * t * 2;\n      c = t2; // } else if (order === 3) {\n    } else {\n      a = mt2 * mt;\n      b = mt2 * t * 3;\n      c = mt * t2 * 3;\n      d = t * t2;\n    }\n\n    return [a * p[0][0] + b * p[1][0] + c * p[2][0] + d * p[3][0], a * p[0][1] + b * p[1][1] + c * p[2][1] + d * p[3][1]]; // } // higher order curves: use de Casteljau's computation\n  }\n  /**\r\n   * Evaluate a 2d cubic bezier at a point t on the x axis.\r\n   * @param tx\r\n   * @param x1\r\n   * @param y1\r\n   * @param x2\r\n   * @param y2\r\n   */\n  ;\n\n  Utils.cubicBezier = function cubicBezier(tx, x1, y1, x2, y2) {\n    // Inspired by Don Lancaster's two articles\n    // http://www.tinaja.com/glib/cubemath.pdf\n    // http://www.tinaja.com/text/bezmath.html\n    // Set start and end point\n    var x0 = 0;\n    var y0 = 0;\n    var x3 = 1;\n    var y3 = 1; // Convert the coordinates to equation space\n\n    var A = x3 - 3 * x2 + 3 * x1 - x0;\n    var B = 3 * x2 - 6 * x1 + 3 * x0;\n    var C = 3 * x1 - 3 * x0;\n    var D = x0;\n    var E = y3 - 3 * y2 + 3 * y1 - y0;\n    var F = 3 * y2 - 6 * y1 + 3 * y0;\n    var G = 3 * y1 - 3 * y0;\n    var H = y0; // Variables for the loop below\n\n    var iterations = 5;\n    var i;\n    var slope;\n    var x;\n    var t = tx; // Loop through a few times to get a more accurate time value, according to the Newton-Raphson method\n    // http://en.wikipedia.org/wiki/Newton's_method\n\n    for (i = 0; i < iterations; i++) {\n      // The curve's x equation for the current time value\n      x = A * t * t * t + B * t * t + C * t + D; // The slope we want is the inverse of the derivate of x\n\n      slope = 1 / (3 * A * t * t + 2 * B * t + C); // Get the next estimated time value, which will be more accurate than the one before\n\n      t -= (x - tx) * slope;\n      t = t > 1 ? 1 : t < 0 ? 0 : t;\n    } // Find the y value through the curve's y equation, with the now more accurate time value\n\n\n    return Math.abs(E * t * t * t + F * t * t + G * t * H);\n  }\n  /**\r\n   * Get a bezier curve data for a spline that fits an array of points.\r\n   * @param points An array of points formatted as [x, y]\r\n   * @param k Tension\r\n   */\n  ;\n\n  Utils.getSpline = function getSpline(pts, k) {\n    if (k === void 0) {\n      k = 0.5;\n    }\n\n    var p0;\n    var p1 = pts[0],\n        p2 = pts[1],\n        p3 = pts[2];\n    var results = [];\n\n    for (var i = 1, len = pts.length; i < len; i++) {\n      p0 = p1;\n      p1 = p2;\n      p2 = p3;\n      p3 = pts[i + 2] ? pts[i + 2] : p2;\n      results.push({\n        cp1x: p1[0] + (p2[0] - p0[0]) / 6 * k,\n        cp1y: p1[1] + (p2[1] - p0[1]) / 6 * k,\n        cp2x: p2[0] - (p3[0] - p1[0]) / 6 * k,\n        cp2y: p2[1] - (p3[1] - p1[1]) / 6 * k,\n        px: pts[i][0],\n        py: pts[i][1]\n      });\n    }\n\n    return results;\n  }\n  /**\r\n   * Get a bezier curve data for a spline that fits an array of points.\r\n   * @param pts\r\n   * @param tension\r\n   * @param isClosed\r\n   * @param numOfSegments\r\n   */\n  ;\n\n  Utils.getCurvePoints = function getCurvePoints(pts, tension, isClosed, numOfSegments) {\n    if (tension === void 0) {\n      tension = 0.5;\n    }\n\n    if (isClosed === void 0) {\n      isClosed = false;\n    }\n\n    if (numOfSegments === void 0) {\n      numOfSegments = 3;\n    }\n\n    var _pts = [].concat(pts);\n\n    var len = pts.length;\n    var res = []; // results\n\n    var t1x, // tension vectors\n    t2x, t1y, t2y, c1, // cardinal points\n    c2, c3, c4, st, st2, st3; // The algorithm require a previous and next point to the actual point array.\n    // Check if we will draw closed or open curve.\n    // If closed, copy end points to beginning and first points to end\n    // If open, duplicate first points to befinning, end points to end\n\n    if (isClosed) {\n      _pts.unshift(_pts[len - 1]);\n\n      _pts.push(_pts[0]);\n    } else {\n      // copy 1. point and insert at beginning\n      _pts.unshift(_pts[0]);\n\n      _pts.push(_pts[len - 1]); // _pts.push(_pts[len - 1])\n\n    } // For each point, calculate a segment\n\n\n    for (var i = 1; i < _pts.length - 2; i++) {\n      // Calculate points along segment and add to results\n      for (var t = 0; t <= numOfSegments; t++) {\n        // Step\n        st = t / numOfSegments;\n        st2 = Math.pow(st, 2);\n        st3 = Math.pow(st, 3); // Cardinals\n\n        c1 = 2 * st3 - 3 * st2 + 1;\n        c2 = -(2 * st3) + 3 * st2;\n        c3 = st3 - 2 * st2 + st;\n        c4 = st3 - st2; // Tension\n\n        t1x = (_pts[i + 1][0] - _pts[i - 1][0]) * tension;\n        t2x = (_pts[i + 2][0] - _pts[i][0]) * tension;\n        t1y = (_pts[i + 1][1] - _pts[i - 1][1]) * tension;\n        t2y = (_pts[i + 2][1] - _pts[i][1]) * tension; // Control points\n\n        res.push([c1 * _pts[i][0] + c2 * _pts[i + 1][0] + c3 * t1x + c4 * t2x, c1 * _pts[i][1] + c2 * _pts[i + 1][1] + c3 * t1y + c4 * t2y]);\n      }\n    }\n\n    res.push(pts[pts.length - 1]);\n    return res;\n  }\n  /**\r\n   * Simplify a line (using Ramer-Douglas-Peucker algorithm).\r\n   * @param points An array of points as [x, y, ...][]\r\n   * @param tolerance The minimum line distance (also called epsilon).\r\n   * @returns Simplified array as [x, y, ...][]\r\n   */\n  ;\n\n  Utils.simplify = function simplify(points, tolerance) {\n    if (tolerance === void 0) {\n      tolerance = 1;\n    }\n\n    var len = points.length;\n    var a = points[0];\n    var b = points[len - 1];\n    var x1 = a[0],\n        y1 = a[1];\n    var x2 = b[0],\n        y2 = b[1];\n\n    if (len > 2) {\n      var distance = 0;\n      var index = 0;\n      var max = Math.hypot(y2 - y1, x2 - x1);\n\n      for (var i = 1; i < len - 1; i++) {\n        var _points$i = points[i],\n            x0 = _points$i[0],\n            y0 = _points$i[1];\n        var d = Math.abs((y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1) / max;\n        if (distance > d) continue;\n        distance = d;\n        index = i;\n      }\n\n      if (distance > tolerance) {\n        var l0 = Utils.simplify(points.slice(0, index + 1), tolerance);\n        var l1 = Utils.simplify(points.slice(index + 1), tolerance);\n        return l0.concat(l1.slice(1));\n      }\n    }\n\n    return [a, b];\n  }\n  /**\r\n   * Get whether a point is inside of a circle.\r\n   * @param A\r\n   * @param b\r\n   * @returns\r\n   */\n  ;\n\n  Utils.pointInCircle = function pointInCircle(A, C, r) {\n    return Vec.dist(A, C) <= r;\n  }\n  /**\r\n   * Get whether a point is inside of an ellipse.\r\n   * @param point\r\n   * @param center\r\n   * @param rx\r\n   * @param ry\r\n   * @param rotation\r\n   * @returns\r\n   */\n  ;\n\n  Utils.pointInEllipse = function pointInEllipse(A, C, rx, ry, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    rotation = rotation || 0;\n    var cos = Math.cos(rotation);\n    var sin = Math.sin(rotation);\n    var delta = Vec.sub(A, C);\n    var tdx = cos * delta[0] + sin * delta[1];\n    var tdy = sin * delta[0] - cos * delta[1];\n    return tdx * tdx / (rx * rx) + tdy * tdy / (ry * ry) <= 1;\n  }\n  /**\r\n   * Get whether a point is inside of a rectangle.\r\n   * @param point\r\n   * @param size\r\n   */\n  ;\n\n  Utils.pointInRect = function pointInRect(point, size) {\n    return !(point[0] < size[0] || point[0] > point[0] + size[0] || point[1] < size[1] || point[1] > point[1] + size[1]);\n  }\n  /* --------------------- Bounds --------------------- */\n\n  /**\r\n   * Expand a bounding box by a delta.\r\n   *\r\n   * ### Example\r\n   *\r\n   *```ts\r\n   * expandBounds(myBounds, [100, 100])\r\n   *```\r\n   */\n  ;\n\n  Utils.expandBounds = function expandBounds(bounds, delta) {\n    return {\n      minX: bounds.minX - delta,\n      minY: bounds.minY - delta,\n      maxX: bounds.maxX + delta,\n      maxY: bounds.maxY + delta,\n      width: bounds.width + delta * 2,\n      height: bounds.height + delta * 2\n    };\n  }\n  /**\r\n   * Get whether a point is inside of a bounds.\r\n   * @param A\r\n   * @param b\r\n   * @returns\r\n   */\n  ;\n\n  Utils.pointInBounds = function pointInBounds(A, b) {\n    return !(A[0] < b.minX || A[0] > b.maxX || A[1] < b.minY || A[1] > b.maxY);\n  }\n  /**\r\n   * Get whether two bounds collide.\r\n   * @param a Bounds\r\n   * @param b Bounds\r\n   * @returns\r\n   */\n  ;\n\n  Utils.boundsCollide = function boundsCollide(a, b) {\n    return !(a.maxX < b.minX || a.minX > b.maxX || a.maxY < b.minY || a.minY > b.maxY);\n  }\n  /**\r\n   * Get whether the bounds of A contain the bounds of B. A perfect match will return true.\r\n   * @param a Bounds\r\n   * @param b Bounds\r\n   * @returns\r\n   */\n  ;\n\n  Utils.boundsContain = function boundsContain(a, b) {\n    return a.minX < b.minX && a.minY < b.minY && a.maxY > b.maxY && a.maxX > b.maxX;\n  }\n  /**\r\n   * Get whether the bounds of A are contained by the bounds of B.\r\n   * @param a Bounds\r\n   * @param b Bounds\r\n   * @returns\r\n   */\n  ;\n\n  Utils.boundsContained = function boundsContained(a, b) {\n    return Utils.boundsContain(b, a);\n  }\n  /**\r\n   * Get whether two bounds are identical.\r\n   * @param a Bounds\r\n   * @param b Bounds\r\n   * @returns\r\n   */\n  ;\n\n  Utils.boundsAreEqual = function boundsAreEqual(a, b) {\n    return !(b.maxX !== a.maxX || b.minX !== a.minX || b.maxY !== a.maxY || b.minY !== a.minY);\n  }\n  /**\r\n   * Find a bounding box from an array of points.\r\n   * @param points\r\n   * @param rotation (optional) The bounding box's rotation.\r\n   */\n  ;\n\n  Utils.getBoundsFromPoints = function getBoundsFromPoints(points, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    if (points.length < 2) {\n      minX = 0;\n      minY = 0;\n      maxX = 1;\n      maxY = 1;\n    } else {\n      for (var _iterator = _createForOfIteratorHelperLoose(points), _step; !(_step = _iterator()).done;) {\n        var _step$value = _step.value,\n            x = _step$value[0],\n            y = _step$value[1];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n      }\n    }\n\n    if (rotation !== 0) {\n      return Utils.getBoundsFromPoints(points.map(function (pt) {\n        return Vec.rotWith(pt, [(minX + maxX) / 2, (minY + maxY) / 2], rotation);\n      }));\n    }\n\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: Math.max(1, maxX - minX),\n      height: Math.max(1, maxY - minY)\n    };\n  }\n  /**\r\n   * Move a bounding box without recalculating it.\r\n   * @param bounds\r\n   * @param delta\r\n   * @returns\r\n   */\n  ;\n\n  Utils.translateBounds = function translateBounds(bounds, delta) {\n    return {\n      minX: bounds.minX + delta[0],\n      minY: bounds.minY + delta[1],\n      maxX: bounds.maxX + delta[0],\n      maxY: bounds.maxY + delta[1],\n      width: bounds.width,\n      height: bounds.height\n    };\n  }\n  /**\r\n   * Rotate a bounding box.\r\n   * @param bounds\r\n   * @param center\r\n   * @param rotation\r\n   */\n  ;\n\n  Utils.rotateBounds = function rotateBounds(bounds, center, rotation) {\n    var _vec$rotWith = Vec.rotWith([bounds.minX, bounds.minY], center, rotation),\n        minX = _vec$rotWith[0],\n        minY = _vec$rotWith[1];\n\n    var _vec$rotWith2 = Vec.rotWith([bounds.maxX, bounds.maxY], center, rotation),\n        maxX = _vec$rotWith2[0],\n        maxY = _vec$rotWith2[1];\n\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: bounds.width,\n      height: bounds.height\n    };\n  }\n  /**\r\n   * Get the rotated bounds of an ellipse.\r\n   * @param x\r\n   * @param y\r\n   * @param rx\r\n   * @param ry\r\n   * @param rotation\r\n   */\n  ;\n\n  Utils.getRotatedEllipseBounds = function getRotatedEllipseBounds(x, y, rx, ry, rotation) {\n    var c = Math.cos(rotation);\n    var s = Math.sin(rotation);\n    var w = Math.hypot(rx * c, ry * s);\n    var h = Math.hypot(rx * s, ry * c);\n    return {\n      minX: x + rx - w,\n      minY: y + ry - h,\n      maxX: x + rx + w,\n      maxY: y + ry + h,\n      width: w * 2,\n      height: h * 2\n    };\n  }\n  /**\r\n   * Get a bounding box that includes two bounding boxes.\r\n   * @param a Bounding box\r\n   * @param b Bounding box\r\n   * @returns\r\n   */\n  ;\n\n  Utils.getExpandedBounds = function getExpandedBounds(a, b) {\n    var minX = Math.min(a.minX, b.minX);\n    var minY = Math.min(a.minY, b.minY);\n    var maxX = Math.max(a.maxX, b.maxX);\n    var maxY = Math.max(a.maxY, b.maxY);\n    var width = Math.abs(maxX - minX);\n    var height = Math.abs(maxY - minY);\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: width,\n      height: height\n    };\n  }\n  /**\r\n   * Get the common bounds of a group of bounds.\r\n   * @returns\r\n   */\n  ;\n\n  Utils.getCommonBounds = function getCommonBounds(bounds) {\n    if (bounds.length < 2) return bounds[0];\n    var result = bounds[0];\n\n    for (var i = 1; i < bounds.length; i++) {\n      result = Utils.getExpandedBounds(result, bounds[i]);\n    }\n\n    return result;\n  };\n\n  Utils.getRotatedCorners = function getRotatedCorners(b, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var center = [b.minX + b.width / 2, b.minY + b.height / 2];\n    return [[b.minX, b.minY], [b.maxX, b.minY], [b.maxX, b.maxY], [b.minX, b.maxY]].map(function (point) {\n      return Vec.rotWith(point, center, rotation);\n    });\n  };\n\n  Utils.getTransformedBoundingBox = function getTransformedBoundingBox(bounds, handle, delta, rotation, isAspectRatioLocked) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    if (isAspectRatioLocked === void 0) {\n      isAspectRatioLocked = false;\n    }\n\n    // Create top left and bottom right corners.\n    var _ref = [bounds.minX, bounds.minY],\n        ax0 = _ref[0],\n        ay0 = _ref[1];\n    var _ref2 = [bounds.maxX, bounds.maxY],\n        ax1 = _ref2[0],\n        ay1 = _ref2[1]; // Create a second set of corners for the new box.\n\n    var _ref3 = [bounds.minX, bounds.minY],\n        bx0 = _ref3[0],\n        by0 = _ref3[1];\n    var _ref4 = [bounds.maxX, bounds.maxY],\n        bx1 = _ref4[0],\n        by1 = _ref4[1]; // If the drag is on the center, just translate the bounds.\n\n    if (handle === 'center') {\n      return {\n        minX: bx0 + delta[0],\n        minY: by0 + delta[1],\n        maxX: bx1 + delta[0],\n        maxY: by1 + delta[1],\n        width: bx1 - bx0,\n        height: by1 - by0,\n        scaleX: 1,\n        scaleY: 1\n      };\n    } // Counter rotate the delta. This lets us make changes as if\n    // the (possibly rotated) boxes were axis aligned.\n\n\n    var _vec$rot = Vec.rot(delta, -rotation),\n        dx = _vec$rot[0],\n        dy = _vec$rot[1];\n    /*\r\n    1. Delta\r\n     Use the delta to adjust the new box by changing its corners.\r\n    The dragging handle (corner or edge) will determine which\r\n    corners should change.\r\n    */\n\n\n    switch (handle) {\n      case exports.TLBoundsEdge.Top:\n      case exports.TLBoundsCorner.TopLeft:\n      case exports.TLBoundsCorner.TopRight:\n        {\n          by0 += dy;\n          break;\n        }\n\n      case exports.TLBoundsEdge.Bottom:\n      case exports.TLBoundsCorner.BottomLeft:\n      case exports.TLBoundsCorner.BottomRight:\n        {\n          by1 += dy;\n          break;\n        }\n    }\n\n    switch (handle) {\n      case exports.TLBoundsEdge.Left:\n      case exports.TLBoundsCorner.TopLeft:\n      case exports.TLBoundsCorner.BottomLeft:\n        {\n          bx0 += dx;\n          break;\n        }\n\n      case exports.TLBoundsEdge.Right:\n      case exports.TLBoundsCorner.TopRight:\n      case exports.TLBoundsCorner.BottomRight:\n        {\n          bx1 += dx;\n          break;\n        }\n    }\n\n    var aw = ax1 - ax0;\n    var ah = ay1 - ay0;\n    var scaleX = (bx1 - bx0) / aw;\n    var scaleY = (by1 - by0) / ah;\n    var flipX = scaleX < 0;\n    var flipY = scaleY < 0;\n    var bw = Math.abs(bx1 - bx0);\n    var bh = Math.abs(by1 - by0);\n    /*\r\n    2. Aspect ratio\r\n     If the aspect ratio is locked, adjust the corners so that the\r\n    new box's aspect ratio matches the original aspect ratio.\r\n    */\n\n    if (isAspectRatioLocked) {\n      var ar = aw / ah;\n      var isTall = ar < bw / bh;\n      var tw = bw * (scaleY < 0 ? 1 : -1) * (1 / ar);\n      var th = bh * (scaleX < 0 ? 1 : -1) * ar;\n\n      switch (handle) {\n        case exports.TLBoundsCorner.TopLeft:\n          {\n            if (isTall) by0 = by1 + tw;else bx0 = bx1 + th;\n            break;\n          }\n\n        case exports.TLBoundsCorner.TopRight:\n          {\n            if (isTall) by0 = by1 + tw;else bx1 = bx0 - th;\n            break;\n          }\n\n        case exports.TLBoundsCorner.BottomRight:\n          {\n            if (isTall) by1 = by0 - tw;else bx1 = bx0 - th;\n            break;\n          }\n\n        case exports.TLBoundsCorner.BottomLeft:\n          {\n            if (isTall) by1 = by0 - tw;else bx0 = bx1 + th;\n            break;\n          }\n\n        case exports.TLBoundsEdge.Bottom:\n        case exports.TLBoundsEdge.Top:\n          {\n            var m = (bx0 + bx1) / 2;\n            var w = bh * ar;\n            bx0 = m - w / 2;\n            bx1 = m + w / 2;\n            break;\n          }\n\n        case exports.TLBoundsEdge.Left:\n        case exports.TLBoundsEdge.Right:\n          {\n            var _m = (by0 + by1) / 2;\n\n            var h = bw / ar;\n            by0 = _m - h / 2;\n            by1 = _m + h / 2;\n            break;\n          }\n      }\n    }\n    /*\r\n    3. Rotation\r\n     If the bounds are rotated, get a vector from the rotated anchor\r\n    corner in the inital bounds to the rotated anchor corner in the\r\n    result's bounds. Subtract this vector from the result's corners,\r\n    so that the two anchor points (initial and result) will be equal.\r\n    */\n\n\n    if (rotation % (Math.PI * 2) !== 0) {\n      var cv = [0, 0];\n      var c0 = Vec.med([ax0, ay0], [ax1, ay1]);\n      var c1 = Vec.med([bx0, by0], [bx1, by1]);\n\n      switch (handle) {\n        case exports.TLBoundsCorner.TopLeft:\n          {\n            cv = Vec.sub(Vec.rotWith([bx1, by1], c1, rotation), Vec.rotWith([ax1, ay1], c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsCorner.TopRight:\n          {\n            cv = Vec.sub(Vec.rotWith([bx0, by1], c1, rotation), Vec.rotWith([ax0, ay1], c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsCorner.BottomRight:\n          {\n            cv = Vec.sub(Vec.rotWith([bx0, by0], c1, rotation), Vec.rotWith([ax0, ay0], c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsCorner.BottomLeft:\n          {\n            cv = Vec.sub(Vec.rotWith([bx1, by0], c1, rotation), Vec.rotWith([ax1, ay0], c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsEdge.Top:\n          {\n            cv = Vec.sub(Vec.rotWith(Vec.med([bx0, by1], [bx1, by1]), c1, rotation), Vec.rotWith(Vec.med([ax0, ay1], [ax1, ay1]), c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsEdge.Left:\n          {\n            cv = Vec.sub(Vec.rotWith(Vec.med([bx1, by0], [bx1, by1]), c1, rotation), Vec.rotWith(Vec.med([ax1, ay0], [ax1, ay1]), c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsEdge.Bottom:\n          {\n            cv = Vec.sub(Vec.rotWith(Vec.med([bx0, by0], [bx1, by0]), c1, rotation), Vec.rotWith(Vec.med([ax0, ay0], [ax1, ay0]), c0, rotation));\n            break;\n          }\n\n        case exports.TLBoundsEdge.Right:\n          {\n            cv = Vec.sub(Vec.rotWith(Vec.med([bx0, by0], [bx0, by1]), c1, rotation), Vec.rotWith(Vec.med([ax0, ay0], [ax0, ay1]), c0, rotation));\n            break;\n          }\n      }\n\n      var _vec$sub = Vec.sub([bx0, by0], cv);\n\n      bx0 = _vec$sub[0];\n      by0 = _vec$sub[1];\n\n      var _vec$sub2 = Vec.sub([bx1, by1], cv);\n\n      bx1 = _vec$sub2[0];\n      by1 = _vec$sub2[1];\n    }\n    /*\r\n    4. Flips\r\n     If the axes are flipped (e.g. if the right edge has been dragged\r\n    left past the initial left edge) then swap points on that axis.\r\n    */\n\n\n    if (bx1 < bx0) {\n      var _ref5 = [bx0, bx1];\n      bx1 = _ref5[0];\n      bx0 = _ref5[1];\n    }\n\n    if (by1 < by0) {\n      var _ref6 = [by0, by1];\n      by1 = _ref6[0];\n      by0 = _ref6[1];\n    }\n\n    return {\n      minX: bx0,\n      minY: by0,\n      maxX: bx1,\n      maxY: by1,\n      width: bx1 - bx0,\n      height: by1 - by0,\n      scaleX: (bx1 - bx0) / (ax1 - ax0 || 1) * (flipX ? -1 : 1),\n      scaleY: (by1 - by0) / (ay1 - ay0 || 1) * (flipY ? -1 : 1)\n    };\n  };\n\n  Utils.getTransformAnchor = function getTransformAnchor(type, isFlippedX, isFlippedY) {\n    var anchor = type; // Change corner anchors if flipped\n\n    switch (type) {\n      case exports.TLBoundsCorner.TopLeft:\n        {\n          if (isFlippedX && isFlippedY) {\n            anchor = exports.TLBoundsCorner.BottomRight;\n          } else if (isFlippedX) {\n            anchor = exports.TLBoundsCorner.TopRight;\n          } else if (isFlippedY) {\n            anchor = exports.TLBoundsCorner.BottomLeft;\n          } else {\n            anchor = exports.TLBoundsCorner.BottomRight;\n          }\n\n          break;\n        }\n\n      case exports.TLBoundsCorner.TopRight:\n        {\n          if (isFlippedX && isFlippedY) {\n            anchor = exports.TLBoundsCorner.BottomLeft;\n          } else if (isFlippedX) {\n            anchor = exports.TLBoundsCorner.TopLeft;\n          } else if (isFlippedY) {\n            anchor = exports.TLBoundsCorner.BottomRight;\n          } else {\n            anchor = exports.TLBoundsCorner.BottomLeft;\n          }\n\n          break;\n        }\n\n      case exports.TLBoundsCorner.BottomRight:\n        {\n          if (isFlippedX && isFlippedY) {\n            anchor = exports.TLBoundsCorner.TopLeft;\n          } else if (isFlippedX) {\n            anchor = exports.TLBoundsCorner.BottomLeft;\n          } else if (isFlippedY) {\n            anchor = exports.TLBoundsCorner.TopRight;\n          } else {\n            anchor = exports.TLBoundsCorner.TopLeft;\n          }\n\n          break;\n        }\n\n      case exports.TLBoundsCorner.BottomLeft:\n        {\n          if (isFlippedX && isFlippedY) {\n            anchor = exports.TLBoundsCorner.TopRight;\n          } else if (isFlippedX) {\n            anchor = exports.TLBoundsCorner.BottomRight;\n          } else if (isFlippedY) {\n            anchor = exports.TLBoundsCorner.TopLeft;\n          } else {\n            anchor = exports.TLBoundsCorner.TopRight;\n          }\n\n          break;\n        }\n    }\n\n    return anchor;\n  }\n  /**\r\n   * Get the relative bounds (usually a child) within a transformed bounding box.\r\n   * @param bounds\r\n   * @param initialBounds\r\n   * @param initialShapeBounds\r\n   * @param isFlippedX\r\n   * @param isFlippedY\r\n   */\n  ;\n\n  Utils.getRelativeTransformedBoundingBox = function getRelativeTransformedBoundingBox(bounds, initialBounds, initialShapeBounds, isFlippedX, isFlippedY) {\n    var nx = (isFlippedX ? initialBounds.maxX - initialShapeBounds.maxX : initialShapeBounds.minX - initialBounds.minX) / initialBounds.width;\n    var ny = (isFlippedY ? initialBounds.maxY - initialShapeBounds.maxY : initialShapeBounds.minY - initialBounds.minY) / initialBounds.height;\n    var nw = initialShapeBounds.width / initialBounds.width;\n    var nh = initialShapeBounds.height / initialBounds.height;\n    var minX = bounds.minX + bounds.width * nx;\n    var minY = bounds.minY + bounds.height * ny;\n    var width = bounds.width * nw;\n    var height = bounds.height * nh;\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: minX + width,\n      maxY: minY + height,\n      width: width,\n      height: height\n    };\n  }\n  /**\r\n   * Get the size of a rotated box.\r\n   * @param size : ;\r\n   * @param rotation\r\n   */\n  ;\n\n  Utils.getRotatedSize = function getRotatedSize(size, rotation) {\n    var center = Vec.div(size, 2);\n    var points = [[0, 0], [size[0], 0], size, [0, size[1]]].map(function (point) {\n      return Vec.rotWith(point, center, rotation);\n    });\n    var bounds = Utils.getBoundsFromPoints(points);\n    return [bounds.width, bounds.height];\n  }\n  /**\r\n   * Get the center of a bounding box.\r\n   * @param bounds\r\n   */\n  ;\n\n  Utils.getBoundsCenter = function getBoundsCenter(bounds) {\n    return [bounds.minX + bounds.width / 2, bounds.minY + bounds.height / 2];\n  }\n  /* -------------------------------------------------- */\n\n  /*                Lists and Collections               */\n\n  /* -------------------------------------------------- */\n\n  /**\r\n   *\r\n   *\r\n   * ### Example\r\n   *\r\n   *```ts\r\n   * example\r\n   *```\r\n   */\n  ;\n\n  Utils.removeDuplicatePoints = function removeDuplicatePoints(points) {\n    return points.reduce(function (acc, pt, i) {\n      if (i === 0 || !Vec.isEqual(pt, acc[i - 1])) {\n        acc.push(pt);\n      }\n\n      return acc;\n    }, []);\n  }\n  /**\r\n  // points =\r\n   \n  /**\r\n  * Get a value from a cache (a WeakMap), filling the value if it is not present.\r\n  *\r\n  * ### Example\r\n  *\r\n  *```ts\r\n  * getFromCache(boundsCache, shape, (cache) => cache.set(shape, \"value\"))\r\n  *```\r\n  */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ;\n\n  Utils.getFromCache = function getFromCache(cache, item, getNext) {\n    var value = cache.get(item);\n\n    if (value === undefined) {\n      cache.set(item, getNext());\n      value = cache.get(item);\n\n      if (value === undefined) {\n        throw Error('Cache did not include item!');\n      }\n    }\n\n    return value;\n  }\n  /**\r\n   * Get a unique string id.\r\n   */\n  ;\n\n  Utils.uniqueId = function uniqueId(a) {\n    if (a === void 0) {\n      a = '';\n    }\n\n    return a ?\n    /* eslint-disable no-bitwise */\n    ((Number(a) ^ Math.random() * 16) >> Number(a) / 4).toString(16) : (1e7 + \"-\" + 1e3 + \"-\" + 4e3 + \"-\" + 8e3 + \"-\" + 1e11).replace(/[018]/g, Utils.uniqueId);\n  }\n  /**\r\n   * Shuffle the contents of an array.\r\n   * @param arr\r\n   * @param offset\r\n   */\n  ;\n\n  Utils.shuffleArr = function shuffleArr(arr, offset) {\n    return arr.map(function (_, i) {\n      return arr[(i + offset) % arr.length];\n    });\n  }\n  /**\r\n   * Deep compare two arrays.\r\n   * @param a\r\n   * @param b\r\n   */\n  ;\n\n  Utils.deepCompareArrays = function deepCompareArrays(a, b) {\n    if ((a == null ? void 0 : a.length) !== (b == null ? void 0 : b.length)) return false;\n    return Utils.deepCompare(a, b);\n  }\n  /**\r\n   * Deep compare any values.\r\n   * @param a\r\n   * @param b\r\n   */\n  ;\n\n  Utils.deepCompare = function deepCompare(a, b) {\n    return a === b || JSON.stringify(a) === JSON.stringify(b);\n  };\n\n  Utils.arrsIntersect = function arrsIntersect(a, b, fn) {\n    return a.some(function (item) {\n      return b.includes(fn ? fn(item) : item);\n    });\n  }\n  /**\r\n   * Get the unique values from an array of strings or numbers.\r\n   * @param items\r\n   */\n  ;\n\n  Utils.uniqueArray = function uniqueArray() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return Array.from(new Set(items).values());\n  }\n  /**\r\n   * Convert a set to an array.\r\n   * @param set\r\n   */\n  ;\n\n  Utils.setToArray = function setToArray(set) {\n    return Array.from(set.values());\n  }\n  /**\r\n   * Debounce a function.\r\n   */\n  ;\n\n  Utils.debounce = function debounce(fn, ms) {\n    if (ms === void 0) {\n      ms = 0;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId;\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(function () {\n        return fn.apply(args);\n      }, ms);\n    };\n  }\n  /**\r\n   * Turn an array of points into a path of quadradic curves.\r\n   * @param stroke ;\r\n   */\n  ;\n\n  Utils.getSvgPathFromStroke = function getSvgPathFromStroke(stroke) {\n    if (!stroke.length) return '';\n    var d = stroke.reduce(function (acc, _ref7, i, arr) {\n      var x0 = _ref7[0],\n          y0 = _ref7[1];\n      var _arr = arr[(i + 1) % arr.length],\n          x1 = _arr[0],\n          y1 = _arr[1];\n      acc.push(\" \" + x0 + \",\" + y0 + \" \" + (x0 + x1) / 2 + \",\" + (y0 + y1) / 2);\n      return acc;\n    }, ['M ', stroke[0][0] + \",\" + stroke[0][1], ' Q']);\n    d.push(' Z');\n    return d.join('').replaceAll(/(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)/g, '$1');\n  }\n  /* -------------------------------------------------- */\n\n  /*                   Browser and DOM                  */\n\n  /* -------------------------------------------------- */\n\n  /**\r\n   * Find whether the current display is a touch display.\r\n   */\n  ;\n\n  Utils.isTouchDisplay = function isTouchDisplay() {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n  }\n  /**\r\n   * Find whether the current device is a Mac / iOS / iPadOS.\r\n   */\n  ;\n\n  Utils.isDarwin = function isDarwin() {\n    return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n  }\n  /**\r\n   * Get whether the current device is a mobile device.\r\n   */\n  ;\n\n  Utils.isMobile = function isMobile() {\n    return false; // _isMobile().any\n  }\n  /**\r\n   * Get whether an event is command (mac) or control (pc).\r\n   * @param e\r\n   */\n  ;\n\n  Utils.metaKey = function metaKey(e) {\n    return Utils.isDarwin() ? e.metaKey : e.ctrlKey;\n  }\n  /**\r\n   * Find the closest point on a SVG path to an off-path point.\r\n   * @param pathNode\r\n   * @param point\r\n   * @returns\r\n   */\n  ;\n\n  Utils.getClosestPointOnSVGPath = function getClosestPointOnSVGPath(pathNode, point) {\n    function distance2(p, point) {\n      var dx = p.x - point[0];\n      var dy = p.y - point[1];\n      return dx * dx + dy * dy;\n    }\n\n    var pathLen = pathNode.getTotalLength();\n    var p = 8;\n    var best = {};\n    var bestLen = Infinity;\n    var bestDist = Infinity;\n    var bl = 0;\n    var al = 0; // linear scan for coarse approximation\n\n    for (var scan, scanLen = 0, scanDist; scanLen <= pathLen; scanLen += p) {\n      if ((scanDist = distance2(scan = pathNode.getPointAtLength(scanLen), point)) < bestDist) {\n        best = scan;\n        bestLen = scanLen;\n        bestDist = scanDist;\n      }\n    } // binary search for precise estimate\n\n\n    p /= 2;\n\n    while (p > 0.5) {\n      var before = void 0,\n          after = void 0,\n          bd = void 0,\n          ad = void 0;\n\n      if ((bl = bestLen - p) >= 0 && (bd = distance2(before = pathNode.getPointAtLength(bl), point)) < bestDist) {\n        best = before;\n        bestLen = bl;\n        bestDist = bd;\n      } else if ((al = bestLen + p) <= pathLen && (ad = distance2(after = pathNode.getPointAtLength(al), point)) < bestDist) {\n        best = after;\n        bestLen = al;\n        bestDist = ad;\n      } else {\n        p /= 2;\n      }\n    }\n\n    return {\n      point: [best.x, best.y],\n      distance: bestDist,\n      length: (bl + al) / 2,\n      t: (bl + al) / 2 / pathLen\n    };\n  };\n\n  return Utils;\n}();\n\n/* ----------------- Start Copy Here ---------------- */\n\nfunction getIntersection(message) {\n  for (var _len = arguments.length, points = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    points[_key - 1] = arguments[_key];\n  }\n\n  var didIntersect = points.length > 0;\n  return {\n    didIntersect: didIntersect,\n    message: message,\n    points: points\n  };\n}\n\nvar Intersect = function Intersect() {};\nIntersect.ray = {\n  // Intersect a ray with a ray.\n  ray: function ray(p0, n0, p1, n1) {\n    var dx = p1[0] - p0[0];\n    var dy = p1[1] - p0[1];\n    var det = n1[0] * n0[1] - n1[1] * n0[0];\n    var u = (dy * n1[0] - dx * n1[1]) / det;\n    var v = (dy * n0[0] - dx * n0[1]) / det;\n    if (u < 0 || v < 0) return getIntersection('miss');\n    var m0 = n0[1] / n0[0];\n    var m1 = n1[1] / n1[0];\n    var b0 = p0[1] - m0 * p0[0];\n    var b1 = p1[1] - m1 * p1[0];\n    var x = (b1 - b0) / (m0 - m1);\n    var y = m0 * x + b0;\n    return Number.isFinite(x) ? getIntersection('intersection', [x, y]) : getIntersection('parallel');\n  },\n  // Interseg a ray with a line segment.\n  lineSegment: function lineSegment(origin, direction, a1, a2) {\n    var x = origin[0],\n        y = origin[1];\n    var dx = direction[0],\n        dy = direction[1];\n    var x1 = a1[0],\n        y1 = a1[1];\n    var x2 = a2[0],\n        y2 = a2[1];\n\n    if (dy / dx !== (y2 - y1) / (x2 - x1)) {\n      var d = dx * (y2 - y1) - dy * (x2 - x1);\n\n      if (d !== 0) {\n        var r = ((y - y1) * (x2 - x1) - (x - x1) * (y2 - y1)) / d;\n        var s = ((y - y1) * dx - (x - x1) * dy) / d;\n\n        if (r >= 0 && s >= 0 && s <= 1) {\n          return getIntersection('intersection', [x + r * dx, y + r * dy]);\n        }\n      }\n    }\n\n    return getIntersection('no intersection');\n  },\n  // Intersect a ray with a rectangle.\n  rectangle: function rectangle(origin, direction, point, size) {\n    return Intersect.rectangle.ray(point, size, origin, direction);\n  },\n  // Intersect a ray with an ellipse.\n  ellipse: function ellipse(origin, direction, center, rx, ry, rotation) {\n    var a1 = origin;\n    var a2 = Vec.mul(direction, 999999999);\n    return Intersect.lineSegment.ellipse(a1, a2, center, rx, ry, rotation);\n  },\n  // Intersect a ray with a bounding box.\n  bounds: function bounds(origin, direction, _bounds) {\n    var minX = _bounds.minX,\n        minY = _bounds.minY,\n        width = _bounds.width,\n        height = _bounds.height;\n    return Intersect.ray.rectangle(origin, direction, [minX, minY], [width, height]);\n  }\n};\nIntersect.lineSegment = {\n  // Intersect a line segment with a ray.\n  ray: function ray(a1, a2, origin, direction) {\n    return Intersect.ray.lineSegment(origin, direction, a1, a2);\n  },\n  // Intersect a line segment with a line segment.\n  lineSegment: function lineSegment(a1, a2, b1, b2) {\n    var AB = Vec.sub(a1, b1);\n    var BV = Vec.sub(b2, b1);\n    var AV = Vec.sub(a2, a1);\n    var ua_t = BV[0] * AB[1] - BV[1] * AB[0];\n    var ub_t = AV[0] * AB[1] - AV[1] * AB[0];\n    var u_b = BV[1] * AV[0] - BV[0] * AV[1];\n\n    if (ua_t === 0 || ub_t === 0) {\n      return getIntersection('coincident');\n    }\n\n    if (u_b === 0) {\n      return getIntersection('parallel');\n    }\n\n    if (u_b !== 0) {\n      var ua = ua_t / u_b;\n      var ub = ub_t / u_b;\n\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        return getIntersection('intersection', Vec.add(a1, Vec.mul(AV, ua)));\n      }\n    }\n\n    return getIntersection('no intersection');\n  },\n  // Intersect a line segment with a rectangle\n  rectangle: function rectangle(a1, a2, point, size) {\n    return Intersect.rectangle.lineSegment(point, size, a1, a2);\n  },\n  // Intersect a line segment with an arc.\n  arc: function arc(a1, a2, center, radius, start, end) {\n    var sa = Vec.angle(center, start);\n    var ea = Vec.angle(center, end);\n    var ellipseTest = Intersect.ellipse.lineSegment(center, radius, radius, 0, a1, a2);\n    if (!ellipseTest.didIntersect) return getIntersection('No intersection');\n    var points = ellipseTest.points.filter(function (point) {\n      return Utils.isAngleBetween(sa, ea, Vec.angle(center, point));\n    });\n\n    if (points.length === 0) {\n      return getIntersection('No intersection');\n    }\n\n    return getIntersection.apply(void 0, ['intersection'].concat(points));\n  },\n  // Intersect a line segment with a circle.\n  circle: function circle(a1, a2, c, r) {\n    var a = (a2[0] - a1[0]) * (a2[0] - a1[0]) + (a2[1] - a1[1]) * (a2[1] - a1[1]);\n    var b = 2 * ((a2[0] - a1[0]) * (a1[0] - c[0]) + (a2[1] - a1[1]) * (a1[1] - c[1]));\n    var cc = c[0] * c[0] + c[1] * c[1] + a1[0] * a1[0] + a1[1] * a1[1] - 2 * (c[0] * a1[0] + c[1] * a1[1]) - r * r;\n    var deter = b * b - 4 * a * cc;\n\n    if (deter < 0) {\n      return getIntersection('outside');\n    }\n\n    if (deter === 0) {\n      return getIntersection('tangent');\n    }\n\n    var e = Math.sqrt(deter);\n    var u1 = (-b + e) / (2 * a);\n    var u2 = (-b - e) / (2 * a);\n\n    if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n      if (u1 < 0 && u2 < 0 || u1 > 1 && u2 > 1) {\n        return getIntersection('outside');\n      } else {\n        return getIntersection('inside');\n      }\n    }\n\n    var results = [];\n    if (0 <= u1 && u1 <= 1) results.push(Vec.lrp(a1, a2, u1));\n    if (0 <= u2 && u2 <= 1) results.push(Vec.lrp(a1, a2, u2));\n    return getIntersection.apply(void 0, ['intersection'].concat(results));\n  },\n  // Intersect a line segment with an ellipse.\n  ellipse: function ellipse(a1, a2, center, rx, ry, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    // If the ellipse or line segment are empty, return no tValues.\n    if (rx === 0 || ry === 0 || Vec.isEqual(a1, a2)) {\n      return getIntersection('No intersection');\n    } // Get the semimajor and semiminor axes.\n\n\n    rx = rx < 0 ? rx : -rx;\n    ry = ry < 0 ? ry : -ry; // Rotate points and translate so the ellipse is centered at the origin.\n\n    a1 = Vec.sub(Vec.rotWith(a1, center, -rotation), center);\n    a2 = Vec.sub(Vec.rotWith(a2, center, -rotation), center); // Calculate the quadratic parameters.\n\n    var diff = Vec.sub(a2, a1);\n    var A = diff[0] * diff[0] / rx / rx + diff[1] * diff[1] / ry / ry;\n    var B = 2 * a1[0] * diff[0] / rx / rx + 2 * a1[1] * diff[1] / ry / ry;\n    var C = a1[0] * a1[0] / rx / rx + a1[1] * a1[1] / ry / ry - 1; // Make a list of t values (normalized points on the line where intersections occur).\n\n    var tValues = []; // Calculate the discriminant.\n\n    var discriminant = B * B - 4 * A * C;\n\n    if (discriminant === 0) {\n      // One real solution.\n      tValues.push(-B / 2 / A);\n    } else if (discriminant > 0) {\n      var root = Math.sqrt(discriminant); // Two real solutions.\n\n      tValues.push((-B + root) / 2 / A);\n      tValues.push((-B - root) / 2 / A);\n    } // Filter to only points that are on the segment.\n    // Solve for points, then counter-rotate points.\n\n\n    var points = tValues.filter(function (t) {\n      return t >= 0 && t <= 1;\n    }).map(function (t) {\n      return Vec.add(center, Vec.add(a1, Vec.mul(Vec.sub(a2, a1), t)));\n    }).map(function (p) {\n      return Vec.rotWith(p, center, rotation);\n    });\n    return getIntersection.apply(void 0, ['intersection'].concat(points));\n  },\n  // Intersect a line segment with a bounding box.\n  bounds: function bounds(a1, a2, _bounds2) {\n    return Intersect.bounds.lineSegment(_bounds2, a1, a2);\n  },\n  // Intersect a line segment with a polyline\n  polyline: function polyline(a1, a2, points) {\n    var intersections = [];\n\n    for (var i = 1; i < points.length + 1; i++) {\n      var _int = Intersect.lineSegment.lineSegment(a1, a2, points[i - 1], points[i % points.length]);\n\n      if (_int) {\n        intersections.push(_int);\n      }\n    }\n\n    return intersections;\n  }\n};\nIntersect.rectangle = {\n  // Intersect a rectangle with a ray.\n  ray: function ray(point, size, origin, direction) {\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref) {\n      var message = _ref[0],\n          _ref$ = _ref[1],\n          a1 = _ref$[0],\n          a2 = _ref$[1];\n      var intersection = Intersect.ray.lineSegment(origin, direction, a1, a2);\n\n      if (intersection) {\n        acc.push(getIntersection.apply(void 0, [message].concat(intersection.points)));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int2) {\n      return _int2.didIntersect;\n    });\n  },\n  // Intersect a rectangle with a line segment.\n  lineSegment: function lineSegment(point, size, a1, a2) {\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref2) {\n      var message = _ref2[0],\n          _ref2$ = _ref2[1],\n          b1 = _ref2$[0],\n          b2 = _ref2$[1];\n      var intersection = Intersect.lineSegment.lineSegment(a1, a2, b1, b2);\n\n      if (intersection) {\n        acc.push(getIntersection.apply(void 0, [message].concat(intersection.points)));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int3) {\n      return _int3.didIntersect;\n    });\n  },\n  // Intersect a rectangle with a rectangle.\n  rectangle: function rectangle(point1, size1, point2, size2) {\n    var sideIntersections = Utils.getRectangleSides(point1, size1).reduce(function (acc, _ref3) {\n      var message = _ref3[0],\n          _ref3$ = _ref3[1],\n          a1 = _ref3$[0],\n          a2 = _ref3$[1];\n      var intersections = Intersect.rectangle.lineSegment(point2, size2, a1, a2);\n      acc.push.apply(acc, intersections.map(function (_int4) {\n        return getIntersection.apply(void 0, [message + \" \" + _int4.message].concat(_int4.points));\n      }));\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int5) {\n      return _int5.didIntersect;\n    });\n  },\n  // Intersect a rectangle with an arc.\n  arc: function arc(point, size, center, radius, start, end) {\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref4) {\n      var message = _ref4[0],\n          _ref4$ = _ref4[1],\n          a1 = _ref4$[0],\n          a2 = _ref4$[1];\n      var intersection = Intersect.arc.lineSegment(center, radius, start, end, a1, a2);\n\n      if (intersection) {\n        acc.push(_extends({}, intersection, {\n          message: message\n        }));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int6) {\n      return _int6.didIntersect;\n    });\n  },\n  // Intersect a rectangle with a circle.\n  circle: function circle(point, size, c, r) {\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref5) {\n      var message = _ref5[0],\n          _ref5$ = _ref5[1],\n          a1 = _ref5$[0],\n          a2 = _ref5$[1];\n      var intersection = Intersect.lineSegment.circle(a1, a2, c, r);\n\n      if (intersection) {\n        acc.push(_extends({}, intersection, {\n          message: message\n        }));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int7) {\n      return _int7.didIntersect;\n    });\n  },\n  // Intersect a rectangle with an ellipse.\n  ellipse: function ellipse(point, size, c, rx, ry, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref6) {\n      var message = _ref6[0],\n          _ref6$ = _ref6[1],\n          a1 = _ref6$[0],\n          a2 = _ref6$[1];\n      var intersection = Intersect.lineSegment.ellipse(a1, a2, c, rx, ry, rotation);\n\n      if (intersection) {\n        acc.push(_extends({}, intersection, {\n          message: message\n        }));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int8) {\n      return _int8.didIntersect;\n    });\n  },\n  // Intersect a rectangle with a bounding box.\n  bounds: function bounds(point, size, _bounds3) {\n    var minX = _bounds3.minX,\n        minY = _bounds3.minY,\n        width = _bounds3.width,\n        height = _bounds3.height;\n    return Intersect.rectangle.rectangle(point, size, [minX, minY], [width, height]);\n  },\n  // Intersect a rectangle with a polyline\n  polyline: function polyline(point, size, points) {\n    var sideIntersections = Utils.getRectangleSides(point, size).reduce(function (acc, _ref7) {\n      var message = _ref7[0],\n          _ref7$ = _ref7[1],\n          a1 = _ref7$[0],\n          a2 = _ref7$[1];\n      var intersections = Intersect.lineSegment.polyline(a1, a2, points);\n\n      if (intersections.length > 0) {\n        acc.push(getIntersection.apply(void 0, [message].concat(intersections.flatMap(function (i) {\n          return i.points;\n        }))));\n      }\n\n      return acc;\n    }, []);\n    return sideIntersections.filter(function (_int9) {\n      return _int9.didIntersect;\n    });\n  }\n};\nIntersect.arc = {\n  // Intersect an arc with a line segment.\n  lineSegment: function lineSegment(center, radius, start, end, a1, a2) {\n    return Intersect.lineSegment.arc(a1, a2, center, radius, start, end);\n  },\n  // Intersect an arc with a rectangle.\n  rectangle: function rectangle(center, radius, start, end, point, size) {\n    return Intersect.rectangle.arc(point, size, center, radius, start, end);\n  },\n  // Intersect an arc with a bounding box.\n  bounds: function bounds(center, radius, start, end, _bounds4) {\n    var minX = _bounds4.minX,\n        minY = _bounds4.minY,\n        width = _bounds4.width,\n        height = _bounds4.height;\n    return Intersect.arc.rectangle(center, radius, start, end, [minX, minY], [width, height]);\n  }\n};\nIntersect.circle = {\n  // Intersect a circle with a line segment.\n  lineSegment: function lineSegment(c, r, a1, a2) {\n    return Intersect.lineSegment.circle(a1, a2, c, r);\n  },\n  // Intersect a circle with a circle.\n  circle: function circle(c1, r1, c2, r2) {\n    var dx = c2[0] - c1[0],\n        dy = c2[1] - c1[1];\n    var d = Math.sqrt(dx * dx + dy * dy),\n        x = (d * d - r2 * r2 + r1 * r1) / (2 * d),\n        y = Math.sqrt(r1 * r1 - x * x);\n    dx /= d;\n    dy /= d;\n    return getIntersection('intersection', [c1[0] + dx * x - dy * y, c1[1] + dy * x + dx * y], [c1[0] + dx * x + dy * y, c1[1] + dy * x - dx * y]);\n  },\n  // Intersect a circle with a rectangle.\n  rectangle: function rectangle(c, r, point, size) {\n    return Intersect.rectangle.circle(point, size, c, r);\n  },\n  // Intersect a circle with a bounding box.\n  bounds: function bounds(c, r, _bounds5) {\n    var minX = _bounds5.minX,\n        minY = _bounds5.minY,\n        width = _bounds5.width,\n        height = _bounds5.height;\n    return Intersect.circle.rectangle(c, r, [minX, minY], [width, height]);\n  }\n};\nIntersect.ellipse = {\n  // Intersect an ellipse with a ray.\n  ray: function ray(center, rx, ry, rotation, point, direction) {\n    return Intersect.ray.ellipse(point, direction, center, rx, ry, rotation);\n  },\n  // Intersect an ellipse with a line segment.\n  lineSegment: function lineSegment(center, rx, ry, rotation, a1, a2) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    if (rx === ry) {\n      return Intersect.lineSegment.circle(a1, a2, center, rx);\n    }\n\n    return Intersect.lineSegment.ellipse(a1, a2, center, rx, ry, rotation);\n  },\n  // Intersect an ellipse with a rectangle.\n  rectangle: function rectangle(center, rx, ry, rotation, point, size) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    if (rx === ry) {\n      return Intersect.rectangle.circle(point, size, center, rx);\n    }\n\n    return Intersect.rectangle.ellipse(point, size, center, rx, ry, rotation);\n  },\n  // Get an intersection between an ellipse and a second ellipse.\n  // Adapted from https://gist.github.com/drawable/92792f59b6ff8869d8b1\n  ellipse: function ellipse(_c1, _rx1, _ry1, _r1, _c2, _rx2, _ry2, _r2) {\n    // TODO\n    return getIntersection('no intersection');\n  },\n  circle: function circle(c, rx, ry, rotation, c2, r2) {\n    return Intersect.ellipse.ellipse(c, rx, ry, rotation, c2, r2, r2, 0);\n  },\n  // Intersect an ellipse with a bounding box.\n  bounds: function bounds(c, rx, ry, rotation, _bounds6) {\n    var minX = _bounds6.minX,\n        minY = _bounds6.minY,\n        width = _bounds6.width,\n        height = _bounds6.height;\n    return Intersect.ellipse.rectangle(c, rx, ry, rotation, [minX, minY], [width, height]);\n  }\n};\nIntersect.bounds = {\n  ray: function ray(bounds, origin, direction) {\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.ray.rectangle(origin, direction, [minX, minY], [width, height]);\n  },\n  lineSegment: function lineSegment(bounds, a1, a2) {\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.lineSegment.rectangle(a1, a2, [minX, minY], [width, height]);\n  },\n  rectangle: function rectangle(bounds, point, size) {\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.rectangle.rectangle(point, size, [minX, minY], [width, height]);\n  },\n  bounds: function bounds(bounds1, bounds2) {\n    return Intersect.rectangle.rectangle([bounds1.minX, bounds1.minY], [bounds1.width, bounds1.height], [bounds2.minX, bounds2.minY], [bounds2.width, bounds2.height]);\n  },\n  arc: function arc(bounds, center, radius, start, end) {\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.arc.rectangle(center, radius, start, end, [minX, minY], [width, height]);\n  },\n  circle: function circle(bounds, c, r) {\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.circle.rectangle(c, r, [minX, minY], [width, height]);\n  },\n  ellipse: function ellipse(bounds, c, rx, ry, rotation) {\n    if (rotation === void 0) {\n      rotation = 0;\n    }\n\n    var minX = bounds.minX,\n        minY = bounds.minY,\n        width = bounds.width,\n        height = bounds.height;\n    return Intersect.ellipse.rectangle(c, rx, ry, rotation, [minX, minY], [width, height]);\n  },\n  polyline: function polyline(bounds, points) {\n    return Intersect.polyline.bounds(points, bounds);\n  }\n};\nIntersect.polyline = {\n  // Intersect a polyline with a line segment.\n  lineSegment: function lineSegment(points, a1, a2) {\n    return Intersect.lineSegment.polyline(a1, a2, points);\n  },\n  // Interesct a polyline with a rectangle.\n  rectangle: function rectangle(points, point, size) {\n    return Intersect.rectangle.polyline(point, size, points);\n  },\n  // Intersect a polyline with a bounding box.\n  bounds: function bounds(points, _bounds7) {\n    return Intersect.rectangle.polyline([_bounds7.minX, _bounds7.minY], [_bounds7.width, _bounds7.height], points);\n  }\n};\n\nvar Svg = function Svg() {};\n\nSvg.ellipse = function (A, r) {\n  return \"M \" + (A[0] - r) + \",\" + A[1] + \"\\n      a \" + r + \",\" + r + \" 0 1,0 \" + r * 2 + \",0\\n      a \" + r + \",\" + r + \" 0 1,0 -\" + r * 2 + \",0 \";\n};\n\nSvg.moveTo = function (v) {\n  return \"M \" + v[0] + \",\" + v[1] + \" \";\n};\n\nSvg.lineTo = function (v) {\n  return \"L \" + v[0] + \",\" + v[1] + \" \";\n};\n\nSvg.line = function (a) {\n  for (var _len = arguments.length, pts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pts[_key - 1] = arguments[_key];\n  }\n\n  return Svg.moveTo(a) + pts.map(function (p) {\n    return Svg.lineTo(p);\n  }).join();\n};\n\nSvg.hLineTo = function (v) {\n  return \"H \" + v[0] + \",\" + v[1] + \" \";\n};\n\nSvg.vLineTo = function (v) {\n  return \"V \" + v[0] + \",\" + v[1] + \" \";\n};\n\nSvg.bezierTo = function (A, B, C) {\n  return \"C \" + A[0] + \",\" + A[1] + \" \" + B[0] + \",\" + B[1] + \" \" + C[0] + \",\" + C[1] + \" \";\n};\n\nSvg.arcTo = function (C, r, A, B) {\n  return [Svg.moveTo(A), 'A', r, r, 0, Utils.getSweep(C, A, B) > 0 ? '1' : '0', 0, B[0], B[1]].join(' ');\n};\n\nSvg.closePath = function () {\n  return 'Z';\n};\n\nSvg.rectTo = function (A) {\n  return ['R', A[0], A[1]].join(' ');\n};\n\nSvg.getPointAtLength = function (path, length) {\n  var point = path.getPointAtLength(length);\n  return [point.x, point.y];\n};\n\nvar DOUBLE_CLICK_DURATION = 250;\n\nvar Inputs = /*#__PURE__*/function () {\n  function Inputs() {\n    var _this = this;\n\n    this.pointer = void 0;\n    this.keyboard = void 0;\n    this.keys = {};\n    this.pointerUpTime = 0;\n\n    this.panStart = function (e) {\n      var _this$pointer, _this$pointer2;\n\n      var shiftKey = e.shiftKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          altKey = e.altKey;\n      var info = {\n        target: 'wheel',\n        pointerId: ((_this$pointer = _this.pointer) == null ? void 0 : _this$pointer.pointerId) || 0,\n        origin: ((_this$pointer2 = _this.pointer) == null ? void 0 : _this$pointer2.origin) || [0, 0],\n        delta: [0, 0],\n        pressure: 0.5,\n        point: Inputs.getPoint(e),\n        shiftKey: shiftKey,\n        ctrlKey: ctrlKey,\n        metaKey: metaKey,\n        altKey: altKey\n      };\n      _this.pointer = info;\n      return info;\n    };\n\n    this.pan = function (delta, e) {\n      if (!_this.pointer || _this.pointer.target !== 'wheel') {\n        return _this.panStart(e);\n      }\n\n      var shiftKey = e.shiftKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          altKey = e.altKey;\n      var prev = _this.pointer;\n      var point = Inputs.getPoint(e);\n\n      var info = _extends({}, prev, {\n        target: 'wheel',\n        delta: delta,\n        point: Vec.sub(point, delta),\n        shiftKey: shiftKey,\n        ctrlKey: ctrlKey,\n        metaKey: metaKey,\n        altKey: altKey\n      });\n\n      _this.pointer = info;\n      return info;\n    };\n\n    this.canAccept = function (_pointerId) {\n      return true; //   return (\n      //     this.activePointerId === undefined || this.activePointerId === pointerId\n      //   )\n    };\n\n    this.keydown = function (e) {\n      var _this$pointer3, _this$pointer4;\n\n      var shiftKey = e.shiftKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          altKey = e.altKey;\n      _this.keys[e.key] = true;\n      return {\n        point: ((_this$pointer3 = _this.pointer) == null ? void 0 : _this$pointer3.point) || [0, 0],\n        origin: ((_this$pointer4 = _this.pointer) == null ? void 0 : _this$pointer4.origin) || [0, 0],\n        key: e.key,\n        keys: Object.keys(_this.keys),\n        shiftKey: shiftKey,\n        ctrlKey: ctrlKey,\n        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n        altKey: altKey\n      };\n    };\n\n    this.keyup = function (e) {\n      var _this$pointer5, _this$pointer6;\n\n      var shiftKey = e.shiftKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          altKey = e.altKey;\n      delete _this.keys[e.key];\n      return {\n        point: ((_this$pointer5 = _this.pointer) == null ? void 0 : _this$pointer5.point) || [0, 0],\n        origin: ((_this$pointer6 = _this.pointer) == null ? void 0 : _this$pointer6.origin) || [0, 0],\n        key: e.key,\n        keys: Object.keys(_this.keys),\n        shiftKey: shiftKey,\n        ctrlKey: ctrlKey,\n        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n        altKey: altKey\n      };\n    };\n  }\n\n  var _proto = Inputs.prototype;\n\n  _proto.touchStart = function touchStart(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    e.preventDefault();\n    var touch = e.changedTouches[0];\n    var info = {\n      target: target,\n      pointerId: touch.identifier,\n      origin: Inputs.getPoint(touch),\n      delta: [0, 0],\n      point: Inputs.getPoint(touch),\n      pressure: Inputs.getPressure(touch),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    };\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.touchMove = function touchMove(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    e.preventDefault();\n    var touch = e.changedTouches[0];\n    var prev = this.pointer;\n    var point = Inputs.getPoint(touch);\n    var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [0, 0];\n\n    var info = _extends({\n      origin: point\n    }, prev, {\n      target: target,\n      pointerId: touch.identifier,\n      point: point,\n      delta: delta,\n      pressure: Inputs.getPressure(touch),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    });\n\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.pointerDown = function pointerDown(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    var point = Inputs.getPoint(e);\n    var info = {\n      target: target,\n      pointerId: e.pointerId,\n      origin: point,\n      point: point,\n      delta: [0, 0],\n      pressure: Inputs.getPressure(e),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    };\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.pointerEnter = function pointerEnter(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    var point = Inputs.getPoint(e);\n    var info = {\n      target: target,\n      pointerId: e.pointerId,\n      origin: point,\n      delta: [0, 0],\n      point: point,\n      pressure: Inputs.getPressure(e),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    };\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.pointerMove = function pointerMove(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    var prev = this.pointer;\n    var point = Inputs.getPoint(e);\n    var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [0, 0];\n\n    var info = _extends({\n      origin: point\n    }, prev, {\n      target: target,\n      pointerId: e.pointerId,\n      point: point,\n      delta: delta,\n      pressure: Inputs.getPressure(e),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    });\n\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.pointerUp = function pointerUp(e, target) {\n    var shiftKey = e.shiftKey,\n        ctrlKey = e.ctrlKey,\n        metaKey = e.metaKey,\n        altKey = e.altKey;\n    var prev = this.pointer;\n    var point = Inputs.getPoint(e);\n    var delta = prev != null && prev.point ? Vec.sub(point, prev.point) : [0, 0];\n\n    var info = _extends({\n      origin: point\n    }, prev, {\n      target: target,\n      pointerId: e.pointerId,\n      point: point,\n      delta: delta,\n      pressure: Inputs.getPressure(e),\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    });\n\n    this.pointer = info;\n    this.pointerUpTime = Date.now();\n    return info;\n  };\n\n  _proto.isDoubleClick = function isDoubleClick() {\n    if (!this.pointer) return;\n    var _this$pointer7 = this.pointer,\n        origin = _this$pointer7.origin,\n        point = _this$pointer7.point;\n    return Date.now() - this.pointerUpTime < DOUBLE_CLICK_DURATION && Vec.dist(origin, point) < 4;\n  };\n\n  _proto.clear = function clear() {\n    this.pointer = undefined;\n  };\n\n  _proto.resetDoubleClick = function resetDoubleClick() {\n    this.pointerUpTime = 0;\n  };\n\n  _proto.pinch = function pinch(point, origin) {\n    var _this$keys = this.keys,\n        shiftKey = _this$keys.shiftKey,\n        ctrlKey = _this$keys.ctrlKey,\n        metaKey = _this$keys.metaKey,\n        altKey = _this$keys.altKey;\n    var prev = this.pointer;\n    var delta = Vec.sub(origin, point);\n    var info = {\n      pointerId: 0,\n      target: 'pinch',\n      origin: (prev == null ? void 0 : prev.origin) || Vec.round(point),\n      delta: delta,\n      point: Vec.round(point),\n      pressure: 0.5,\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,\n      altKey: altKey\n    };\n    this.pointer = info;\n    return info;\n  };\n\n  _proto.reset = function reset() {\n    this.pointerUpTime = 0;\n    this.pointer = undefined;\n    this.keyboard = undefined;\n    this.keys = {};\n  };\n\n  Inputs.getPoint = function getPoint(e) {\n    return [Number(e.clientX.toPrecision(5)), Number(e.clientY.toPrecision(5))];\n  };\n\n  Inputs.getPressure = function getPressure(e) {\n    return 'pressure' in e ? Number(e.pressure.toPrecision(5)) || 0.5 : 0.5;\n  };\n\n  Inputs.commandKey = function commandKey() {\n    return Utils.isDarwin() ? '⌘' : 'Ctrl';\n  };\n\n  return Inputs;\n}();\n\nvar inputs = /*#__PURE__*/new Inputs();\n\nfunction useZoomEvents() {\n  var rPinchDa = React.useRef(undefined);\n  var rPinchPoint = React.useRef(undefined);\n\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  reactUseGesture.useGesture({\n    onWheel: function onWheel(_ref) {\n      var e = _ref.event,\n          delta = _ref.delta;\n      var info = inputs.pan(delta, e);\n\n      if (e.ctrlKey) {\n        callbacks.onZoom == null ? void 0 : callbacks.onZoom(info, e);\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      callbacks.onPan == null ? void 0 : callbacks.onPan(info, e);\n    },\n    onPinch: function onPinch(_ref2) {\n      var pinching = _ref2.pinching,\n          da = _ref2.da,\n          origin = _ref2.origin,\n          e = _ref2.event;\n\n      if (!pinching) {\n        var _info = inputs.pinch(origin, origin);\n\n        callbacks.onPinchEnd == null ? void 0 : callbacks.onPinchEnd(_info, e);\n        rPinchDa.current = undefined;\n        rPinchPoint.current = undefined;\n        return;\n      }\n\n      if (rPinchPoint.current === undefined) {\n        var _info2 = inputs.pinch(origin, origin);\n\n        callbacks.onPinchStart == null ? void 0 : callbacks.onPinchStart(_info2, e);\n        rPinchDa.current = da;\n        rPinchPoint.current = origin;\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      var _Vec$sub = Vec.sub(rPinchDa.current, da),\n          distanceDelta = _Vec$sub[0];\n\n      var info = inputs.pinch(rPinchPoint.current, origin); // Naming things is hard\n\n      callbacks.onPinch == null ? void 0 : callbacks.onPinch(_extends({}, info, {\n        point: origin,\n        origin: rPinchPoint.current,\n        delta: [].concat(info.delta, [distanceDelta])\n      }), e);\n      rPinchDa.current = da;\n      rPinchPoint.current = origin;\n    }\n  }, {\n    domTarget: typeof document === 'undefined' ? undefined : document.body,\n    eventOptions: {\n      passive: false\n    }\n  });\n}\n\nfunction useSafariFocusOutFix() {\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  React.useEffect(function () {\n    function handleFocusOut() {\n      callbacks.onBlurEditingShape == null ? void 0 : callbacks.onBlurEditingShape();\n    }\n\n    if (!Utils.isMobile()) return;\n    document.addEventListener('focusout', handleFocusOut);\n    return function () {\n      return document.removeEventListener('focusout', handleFocusOut);\n    };\n  }, [callbacks]);\n}\n\nfunction useCanvasEvents() {\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  var onPointerDown = React.useCallback(function (e) {\n    e.currentTarget.setPointerCapture(e.pointerId);\n\n    if (e.button === 0) {\n      var info = inputs.pointerDown(e, 'canvas');\n      callbacks.onPointCanvas == null ? void 0 : callbacks.onPointCanvas(info, e);\n      callbacks.onPointerDown == null ? void 0 : callbacks.onPointerDown(info, e);\n    }\n  }, [callbacks]);\n  var onPointerMove = React.useCallback(function (e) {\n    e.stopPropagation();\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _info = inputs.pointerMove(e, 'canvas');\n\n      callbacks.onDragCanvas == null ? void 0 : callbacks.onDragCanvas(_info, e);\n    }\n\n    var info = inputs.pointerMove(e, 'canvas');\n    callbacks.onPointerMove == null ? void 0 : callbacks.onPointerMove(info, e);\n  }, [callbacks]);\n  var onPointerUp = React.useCallback(function (e) {\n    e.stopPropagation();\n    var isDoubleClick = inputs.isDoubleClick();\n    var info = inputs.pointerUp(e, 'canvas');\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _e$currentTarget;\n\n      (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.releasePointerCapture(e.pointerId);\n    }\n\n    if (isDoubleClick && !(info.altKey || info.metaKey)) {\n      callbacks.onDoubleClickCanvas == null ? void 0 : callbacks.onDoubleClickCanvas(info, e);\n    }\n\n    callbacks.onReleaseCanvas == null ? void 0 : callbacks.onReleaseCanvas(info, e);\n    callbacks.onPointerUp == null ? void 0 : callbacks.onPointerUp(info, e);\n  }, [callbacks]);\n  return {\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp\n  };\n}\n\nfunction useShapeEvents(id, disable) {\n  if (disable === void 0) {\n    disable = false;\n  }\n\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  var onPointerDown = React.useCallback(function (e) {\n    var _e$currentTarget;\n\n    if (disable) return;\n    e.stopPropagation();\n    (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.setPointerCapture(e.pointerId);\n    var info = inputs.pointerDown(e, id);\n    callbacks.onPointShape == null ? void 0 : callbacks.onPointShape(info, e);\n    callbacks.onPointerDown == null ? void 0 : callbacks.onPointerDown(info, e);\n  }, [callbacks, id, disable]);\n  var onPointerUp = React.useCallback(function (e) {\n    if (disable) return;\n    e.stopPropagation();\n    var isDoubleClick = inputs.isDoubleClick();\n    var info = inputs.pointerUp(e, id);\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _e$currentTarget2;\n\n      (_e$currentTarget2 = e.currentTarget) == null ? void 0 : _e$currentTarget2.releasePointerCapture(e.pointerId);\n    }\n\n    if (isDoubleClick && !(info.altKey || info.metaKey)) {\n      callbacks.onDoubleClickShape == null ? void 0 : callbacks.onDoubleClickShape(info, e);\n    }\n\n    callbacks.onReleaseShape == null ? void 0 : callbacks.onReleaseShape(info, e);\n    callbacks.onPointerUp == null ? void 0 : callbacks.onPointerUp(info, e);\n  }, [callbacks, id, disable]);\n  var onPointerMove = React.useCallback(function (e) {\n    if (disable) return;\n    e.stopPropagation();\n    if (inputs.pointer && e.pointerId !== inputs.pointer.pointerId) return;\n    var info = inputs.pointerMove(e, id);\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      callbacks.onDragShape == null ? void 0 : callbacks.onDragShape(info, e);\n    }\n\n    callbacks.onPointerMove == null ? void 0 : callbacks.onPointerMove(info, e);\n  }, [callbacks, id, disable]);\n  var onPointerEnter = React.useCallback(function (e) {\n    if (disable) return;\n    var info = inputs.pointerEnter(e, id);\n    callbacks.onHoverShape == null ? void 0 : callbacks.onHoverShape(info, e);\n  }, [callbacks, id, disable]);\n  var onPointerLeave = React.useCallback(function (e) {\n    if (disable) return;\n    var info = inputs.pointerEnter(e, id);\n    callbacks.onUnhoverShape == null ? void 0 : callbacks.onUnhoverShape(info, e);\n  }, [callbacks, id, disable]);\n  var onTouchStart = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  var onTouchEnd = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  return {\n    onPointerDown: onPointerDown,\n    onPointerUp: onPointerUp,\n    onPointerEnter: onPointerEnter,\n    onPointerMove: onPointerMove,\n    onPointerLeave: onPointerLeave,\n    onTouchStart: onTouchStart,\n    onTouchEnd: onTouchEnd\n  };\n}\n\nfunction addToShapeTree(shape, branch, shapes, selectedIds, info) {\n  var node = {\n    shape: shape,\n    isHovered: info.hoveredId === shape.id,\n    isCurrentParent: info.currentParentId === shape.id,\n    isEditing: info.editingId === shape.id,\n    isBinding: info.bindingId === shape.id,\n    isDarkMode: info.isDarkMode || false,\n    isSelected: selectedIds.includes(shape.id)\n  };\n  branch.push(node);\n\n  if (shape.children) {\n    node.children = [];\n    shape.children.map(function (id) {\n      return shapes[id];\n    }).sort(function (a, b) {\n      return a.childIndex - b.childIndex;\n    }).forEach(function (childShape) {\n      return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        addToShapeTree(childShape, node.children, shapes, selectedIds, info)\n      );\n    });\n  }\n}\n\nfunction useShapeTree(page, pageState, shapeUtils, info, onChange) {\n  if (info === void 0) {\n    info = {};\n  }\n\n  var rPreviousCount = React.useRef(0);\n  if (typeof window === 'undefined') return [];\n  var selectedIds = pageState.selectedIds,\n      camera = pageState.camera; // Find viewport\n\n  var _Vec$sub = Vec.sub(Vec.div([0, 0], camera.zoom), camera.point),\n      minX = _Vec$sub[0],\n      minY = _Vec$sub[1];\n\n  var _Vec$sub2 = Vec.sub(Vec.div([window.innerWidth, window.innerHeight], camera.zoom), camera.point),\n      maxX = _Vec$sub2[0],\n      maxY = _Vec$sub2[1];\n\n  var viewport = {\n    minX: minX,\n    minY: minY,\n    maxX: maxX,\n    maxY: maxY,\n    height: maxX - minX,\n    width: maxY - minY\n  }; // Filter shapes that are in view\n\n  var shapesToRender = Object.values(page.shapes).filter(function (shape) {\n    if (shape.parentId !== page.id) return false; // Don't hide selected shapes (this breaks certain drag interactions)\n\n    if (pageState.selectedIds.includes(shape.id)) return true;\n    var shapeBounds = shapeUtils[shape.type].getBounds(shape);\n    return (// TODO: Some shapes should always render (lines, rays)\n      Utils.boundsContain(viewport, shapeBounds) || Utils.boundsCollide(viewport, shapeBounds)\n    );\n  }); // Call onChange callback when number of rendering shapes changes\n\n  if (shapesToRender.length !== rPreviousCount.current) {\n    setTimeout(function () {\n      return onChange == null ? void 0 : onChange(shapesToRender.map(function (shape) {\n        return shape.id;\n      }));\n    }, 0);\n    rPreviousCount.current = shapesToRender.length;\n  } // Populate the shape tree\n\n\n  var tree = [];\n  shapesToRender.sort(function (a, b) {\n    return a.childIndex - b.childIndex;\n  }).forEach(function (shape) {\n    return addToShapeTree(shape, tree, page.shapes, selectedIds, info);\n  });\n  return tree;\n}\n\nvar _templateObject;\nvar styles = /*#__PURE__*/new Map();\n\nfunction makeCssTheme(prefix, theme) {\n  return Object.keys(theme).reduce(function (acc, key) {\n    var value = theme[key];\n\n    if (value) {\n      return acc + (\"--\" + prefix + \"-\" + key + \": \" + value + \";\\n\");\n    }\n\n    return acc;\n  }, '');\n}\n\nfunction useTheme(prefix, theme, selector) {\n  if (selector === void 0) {\n    selector = ':root';\n  }\n\n  React.useLayoutEffect(function () {\n    var style = document.createElement('style');\n    var cssTheme = makeCssTheme(prefix, theme);\n    style.setAttribute('id', prefix + \"-theme\");\n    style.setAttribute('data-selector', selector);\n    style.innerHTML = \"\\n        \" + selector + \" {\\n          \" + cssTheme + \"\\n        }\\n      \";\n    document.head.appendChild(style);\n    return function () {\n      if (style && document.head.contains(style)) {\n        document.head.removeChild(style);\n      }\n    };\n  }, [prefix, theme, selector]);\n}\n\nfunction useStyle(uid, rules) {\n  React.useLayoutEffect(function () {\n    if (styles.get(uid)) {\n      return;\n    }\n\n    var style = document.createElement('style');\n    style.innerHTML = rules;\n    style.setAttribute('id', uid);\n    document.head.appendChild(style);\n    styles.set(uid, style);\n    return function () {\n      if (style && document.head.contains(style)) {\n        document.head.removeChild(style);\n        styles[\"delete\"](uid);\n      }\n    };\n  }, [uid, rules]);\n}\n\nvar css = function css(strings) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return strings.reduce(function (acc, string, index) {\n    return acc + string + (index < args.length ? args[index] : '');\n  }, '');\n};\n\nvar defaultTheme = {\n  brushFill: 'rgba(0,0,0,.05)',\n  brushStroke: 'rgba(0,0,0,.25)',\n  selectStroke: 'rgb(66, 133, 244)',\n  selectFill: 'rgba(65, 132, 244, 0.05)',\n  background: 'rgb(248, 249, 250)',\n  foreground: 'rgb(51, 51, 51)'\n};\nvar tlcss = /*#__PURE__*/css(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteralLoose([\"\\n  :root {\\n    --tl-zoom: 1;\\n    --tl-scale: calc(1 / var(--tl-zoom));\\n  }\\n\\n  .tl-counter-scaled {\\n    transform: scale(var(--tl-scale));\\n  }\\n\\n  .tl-dashed {\\n    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));\\n  }\\n\\n  .tl-transparent {\\n    fill: transparent;\\n    stroke: transparent;\\n  }\\n\\n  .tl-cursor-ns {\\n    cursor: ns-resize;\\n  }\\n\\n  .tl-cursor-ew {\\n    cursor: ew-resize;\\n  }\\n\\n  .tl-cursor-nesw {\\n    cursor: nesw-resize;\\n  }\\n\\n  .tl-cursor-nwse {\\n    cursor: nwse-resize;\\n  }\\n\\n  .tl-corner-handle {\\n    stroke: var(--tl-selectStroke);\\n    fill: var(--tl-background);\\n    stroke-width: calc(1.5px * var(--tl-scale));\\n  }\\n\\n  .tl-rotate-handle {\\n    stroke: var(--tl-selectStroke);\\n    fill: var(--tl-background);\\n    stroke-width: calc(1.5px * var(--tl-scale));\\n    cursor: grab;\\n  }\\n\\n  .tl-handle {\\n    transform: scale(var(--tl-scale));\\n    fill: var(--tl-background);\\n    stroke: var(--tl-stroke);\\n    stroke-width: calc(2px * var(--tl-scale));\\n    pointer-events: all;\\n  }\\n\\n  .tl-binding {\\n    fill: var(--tl-selectFill);\\n    stroke: var(--tl-selectStroke);\\n    stroke-width: calc(1px * var(--tl-scale));\\n    pointer-events: none;\\n  }\\n\\n  .tl-bounds-center {\\n    fill: transparent;\\n    stroke: var(--tl-selectStroke);\\n    stroke-width: calc(1.5px * var(--tl-scale));\\n  }\\n\\n  .tl-bounds-bg {\\n    stroke: none;\\n    fill: var(--tl-selectFill);\\n    pointer-events: all;\\n  }\\n\\n  .tl-brush {\\n    fill: var(--tl-brushFill);\\n    stroke: var(--tl-brushStroke);\\n    stroke-width: calc(1px * var(--tl-scale));\\n    pointer-events: none;\\n  }\\n\\n  .tl-canvas {\\n    position: fixed;\\n    overflow: hidden;\\n    top: 0px;\\n    left: 0px;\\n    width: 100%;\\n    height: 100%;\\n    touch-action: none;\\n    z-index: 100;\\n    pointer-events: all;\\n  }\\n\\n  .tl-container {\\n    position: relative;\\n    box-sizing: border-box;\\n    width: 100%;\\n    height: 100%;\\n    padding: 0px;\\n    margin: 0px;\\n    overscroll-behavior: none;\\n    overscroll-behavior-x: none;\\n    background-color: var(--tl-background);\\n  }\\n\\n  .tl-container * {\\n    user-select: none;\\n  }\\n\\n  .tl-dot {\\n    fill: var(--tl-background);\\n    stroke: var(--tl-foreground);\\n    stroke-width: 2px;\\n  }\\n\\n  .tl-handle {\\n    fill: var(--tl-background);\\n    stroke: var(--tl-selectStroke);\\n    stroke-width: calc(1.5px * var(--tl-scale));\\n  }\\n\\n  .tl-handle-bg {\\n    fill: transparent;\\n    stroke: none;\\n    opacity: 0.2;\\n    pointer-events: all;\\n  }\\n\\n  .tl-handle-bg:hover {\\n    fill: var(--tl-selected-fill);\\n  }\\n\\n  .tl-handle-bg:hover > * {\\n    stroke: var(--tl-selected-fill);\\n  }\\n\\n  .tl-handle-bg:active {\\n    fill: var(--tl-selected-fill);\\n    stroke: var(--tl-selected-fill);\\n  }\\n\\n  .tl-binding-indicator {\\n    stroke-width: calc(3px * var(--tl-scale));\\n    fill: none;\\n    stroke: var(--tl-selected);\\n  }\\n\\n  .tl-shape-group {\\n    outline: none;\\n  }\\n\\n  .tl-shape-group > *[data-shy='true'] {\\n    opacity: 0;\\n  }\\n\\n  .tl-shape-group:hover > *[data-shy='true'] {\\n    opacity: 1;\\n  }\\n\\n  .tl-current-parent > *[data-shy='true'] {\\n    opacity: 1;\\n  }\\n\"])));\nfunction useTLTheme(theme) {\n  var _React$useState = React.useState(function () {\n    return _extends({}, defaultTheme, theme);\n  }),\n      tltheme = _React$useState[0];\n\n  useTheme('tl', tltheme);\n  useStyle('tl-canvas', tlcss);\n}\n\nfunction useBoundsHandleEvents(id) {\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  var onPointerDown = React.useCallback(function (e) {\n    var _e$currentTarget;\n\n    e.stopPropagation();\n    (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.setPointerCapture(e.pointerId);\n    var info = inputs.pointerDown(e, id);\n    callbacks.onPointBoundsHandle == null ? void 0 : callbacks.onPointBoundsHandle(info, e);\n    callbacks.onPointerDown == null ? void 0 : callbacks.onPointerDown(info, e);\n  }, [callbacks, id]);\n  var onPointerUp = React.useCallback(function (e) {\n    e.stopPropagation();\n    var isDoubleClick = inputs.isDoubleClick();\n    var info = inputs.pointerUp(e, id);\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _e$currentTarget2;\n\n      (_e$currentTarget2 = e.currentTarget) == null ? void 0 : _e$currentTarget2.releasePointerCapture(e.pointerId);\n    }\n\n    if (isDoubleClick && !(info.altKey || info.metaKey)) {\n      callbacks.onDoubleClickBoundsHandle == null ? void 0 : callbacks.onDoubleClickBoundsHandle(info, e);\n    }\n\n    callbacks.onReleaseBoundsHandle == null ? void 0 : callbacks.onReleaseBoundsHandle(info, e);\n    callbacks.onPointerUp == null ? void 0 : callbacks.onPointerUp(info, e);\n  }, [callbacks, id]);\n  var onPointerMove = React.useCallback(function (e) {\n    // e.stopPropagation()\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      callbacks.onDragBoundsHandle == null ? void 0 : callbacks.onDragBoundsHandle(inputs.pointerMove(e, id), e);\n    }\n\n    var info = inputs.pointerMove(e, id);\n    callbacks.onPointerMove == null ? void 0 : callbacks.onPointerMove(info, e);\n    e.stopPropagation();\n  }, [callbacks, id]);\n  var onPointerEnter = React.useCallback(function (e) {\n    callbacks.onHoverBoundsHandle == null ? void 0 : callbacks.onHoverBoundsHandle(inputs.pointerEnter(e, id), e);\n  }, [callbacks, id]);\n  var onPointerLeave = React.useCallback(function (e) {\n    callbacks.onUnhoverBoundsHandle == null ? void 0 : callbacks.onUnhoverBoundsHandle(inputs.pointerEnter(e, id), e);\n  }, [callbacks, id]);\n  var onTouchStart = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  var onTouchEnd = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  return {\n    onPointerDown: onPointerDown,\n    onPointerUp: onPointerUp,\n    onPointerEnter: onPointerEnter,\n    onPointerMove: onPointerMove,\n    onPointerLeave: onPointerLeave,\n    onTouchStart: onTouchStart,\n    onTouchEnd: onTouchEnd\n  };\n}\n\nfunction useCameraCss(pageState) {\n  var rGroup = React.useRef(null); // Update the tl-zoom CSS variable when the zoom changes\n\n  React.useEffect(function () {\n    document.documentElement.style.setProperty('--tl-zoom', pageState.camera.zoom.toString());\n  }, [pageState.camera.zoom]); // Update the group's position when the camera moves or zooms\n\n  React.useEffect(function () {\n    var _rGroup$current;\n\n    var _pageState$camera = pageState.camera,\n        zoom = _pageState$camera.zoom,\n        point = _pageState$camera.point;\n    (_rGroup$current = rGroup.current) == null ? void 0 : _rGroup$current.setAttribute('transform', \"scale(\" + zoom + \") translate(\" + point[0] + \" \" + point[1] + \")\");\n  }, [pageState.camera]);\n  return rGroup;\n}\n\nfunction useRenderOnResize() {\n  var forceUpdate = React.useReducer(function (x) {\n    return x + 1;\n  }, 0)[1];\n  React.useEffect(function () {\n    var debouncedUpdate = Utils.debounce(forceUpdate, 96);\n    window.addEventListener('resize', debouncedUpdate);\n    return function () {\n      window.removeEventListener('resize', debouncedUpdate);\n    };\n  }, [forceUpdate]);\n}\n\nfunction useSelection(page, pageState, shapeUtils) {\n  var selectedIds = pageState.selectedIds;\n  var bounds = undefined;\n  var rotation = 0;\n  var isLocked = false;\n\n  if (selectedIds.length === 1) {\n    var id = selectedIds[0];\n    var shape = page.shapes[id];\n    rotation = shape.rotation || 0;\n    isLocked = shape.isLocked || false;\n    bounds = shapeUtils[shape.type].getBounds(shape);\n  } else if (selectedIds.length > 1) {\n    var selectedShapes = selectedIds.map(function (id) {\n      return page.shapes[id];\n    });\n    rotation = 0;\n    isLocked = selectedShapes.every(function (shape) {\n      return shape.isLocked;\n    });\n    bounds = selectedShapes.reduce(function (acc, shape, i) {\n      if (i === 0) {\n        return shapeUtils[shape.type].getRotatedBounds(shape);\n      }\n\n      return Utils.getExpandedBounds(acc, shapeUtils[shape.type].getRotatedBounds(shape));\n    }, {});\n  }\n\n  return {\n    bounds: bounds,\n    rotation: rotation,\n    isLocked: isLocked\n  };\n}\n\nfunction useHandleEvents(id) {\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  var onPointerDown = React.useCallback(function (e) {\n    var _e$currentTarget;\n\n    e.stopPropagation();\n    (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.setPointerCapture(e.pointerId);\n    var info = inputs.pointerDown(e, id);\n    callbacks.onPointHandle == null ? void 0 : callbacks.onPointHandle(info, e);\n    callbacks.onPointerDown == null ? void 0 : callbacks.onPointerDown(info, e);\n  }, [callbacks, id]);\n  var onPointerUp = React.useCallback(function (e) {\n    e.stopPropagation();\n    var isDoubleClick = inputs.isDoubleClick();\n    var info = inputs.pointerUp(e, 'bounds');\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _e$currentTarget2;\n\n      (_e$currentTarget2 = e.currentTarget) == null ? void 0 : _e$currentTarget2.releasePointerCapture(e.pointerId);\n\n      if (isDoubleClick && !(info.altKey || info.metaKey)) {\n        callbacks.onDoubleClickHandle == null ? void 0 : callbacks.onDoubleClickHandle(info, e);\n      }\n\n      callbacks.onReleaseHandle == null ? void 0 : callbacks.onReleaseHandle(info, e);\n    }\n\n    callbacks.onPointerUp == null ? void 0 : callbacks.onPointerUp(info, e);\n  }, [callbacks]);\n  var onPointerMove = React.useCallback(function (e) {\n    // e.stopPropagation()\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _info = inputs.pointerMove(e, id);\n\n      callbacks.onDragHandle == null ? void 0 : callbacks.onDragHandle(_info, e);\n    }\n\n    var info = inputs.pointerMove(e, id);\n    callbacks.onPointerMove == null ? void 0 : callbacks.onPointerMove(info, e);\n    e.stopPropagation();\n  }, [callbacks, id]);\n  var onPointerEnter = React.useCallback(function (e) {\n    var info = inputs.pointerEnter(e, id);\n    callbacks.onHoverHandle == null ? void 0 : callbacks.onHoverHandle(info, e);\n  }, [callbacks, id]);\n  var onPointerLeave = React.useCallback(function (e) {\n    var info = inputs.pointerEnter(e, id);\n    callbacks.onUnhoverHandle == null ? void 0 : callbacks.onUnhoverHandle(info, e);\n  }, [callbacks, id]);\n  var onTouchStart = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  var onTouchEnd = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  return {\n    onPointerDown: onPointerDown,\n    onPointerUp: onPointerUp,\n    onPointerEnter: onPointerEnter,\n    onPointerMove: onPointerMove,\n    onPointerLeave: onPointerLeave,\n    onTouchStart: onTouchStart,\n    onTouchEnd: onTouchEnd\n  };\n}\n\nfunction useHandles(page, pageState) {\n  var selectedIds = pageState.selectedIds;\n  var shapeWithHandles = undefined;\n\n  if (selectedIds.length === 1) {\n    var id = selectedIds[0];\n    var shape = page.shapes[id];\n\n    if (shape.handles !== undefined) {\n      shapeWithHandles = shape;\n    }\n  }\n\n  return {\n    shapeWithHandles: shapeWithHandles\n  };\n}\n\nvar ErrorFallback = /*#__PURE__*/React.memo(function (_ref) {\n  var error = _ref.error,\n      resetErrorBoundary = _ref.resetErrorBoundary;\n\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  React.useEffect(function () {\n    callbacks.onError == null ? void 0 : callbacks.onError(error);\n    console.error(error);\n  }, [error, resetErrorBoundary, callbacks]);\n  return null;\n});\n\nvar BrushUpdater = /*#__PURE__*/function () {\n  function BrushUpdater() {\n    this.ref = React.createRef();\n    this.isControlled = false;\n  }\n\n  var _proto = BrushUpdater.prototype;\n\n  _proto.set = function set(bounds) {\n    var _this$ref;\n\n    if (!this.isControlled) this.isControlled = true;\n\n    if (!bounds) {\n      this.clear();\n      return;\n    }\n\n    var elm = (_this$ref = this.ref) == null ? void 0 : _this$ref.current;\n    if (!elm) return;\n    elm.setAttribute('opacity', '1');\n    elm.setAttribute('x', bounds.minX.toString());\n    elm.setAttribute('y', bounds.minY.toString());\n    elm.setAttribute('width', bounds.width.toString());\n    elm.setAttribute('height', bounds.height.toString());\n  };\n\n  _proto.clear = function clear() {\n    var _this$ref2;\n\n    var elm = (_this$ref2 = this.ref) == null ? void 0 : _this$ref2.current;\n    if (!elm) return;\n    elm.setAttribute('opacity', '0');\n    elm.setAttribute('width', '0');\n    elm.setAttribute('height', '0');\n  };\n\n  return BrushUpdater;\n}();\n\nvar brushUpdater = /*#__PURE__*/new BrushUpdater();\nvar Brush = /*#__PURE__*/React.memo(function (_ref) {\n  return React.createElement(\"rect\", {\n    ref: brushUpdater.ref,\n    className: \"tl-brush\",\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n}, // Once the brush is controlled, never update again from props\nfunction (prev, next) {\n  return true;\n});\n\nfunction Defs(_ref) {\n  var zoom = _ref.zoom;\n  return React.createElement(\"defs\", null, React.createElement(\"circle\", {\n    id: \"dot\",\n    className: \"tl-counter-scaled tl-dot\",\n    r: 4\n  }), React.createElement(\"circle\", {\n    id: \"handle\",\n    className: \"tl-counter-scaled tl-handle\",\n    r: 4\n  }), React.createElement(\"g\", {\n    id: \"cross\",\n    className: \"tl-binding-indicator\"\n  }, React.createElement(\"line\", {\n    x1: -6,\n    y1: -6,\n    x2: 6,\n    y2: 6\n  }), React.createElement(\"line\", {\n    x1: 6,\n    y1: -6,\n    x2: -6,\n    y2: 6\n  })), React.createElement(\"filter\", {\n    id: \"expand\"\n  }, React.createElement(\"feMorphology\", {\n    operator: \"dilate\",\n    radius: 0.5 / zoom\n  })));\n}\n\nvar RenderedShape = /*#__PURE__*/React.memo(function RenderedShape(_ref) {\n  var shape = _ref.shape,\n      utils = _ref.utils,\n      isEditing = _ref.isEditing,\n      isHovered = _ref.isHovered,\n      isBinding = _ref.isBinding,\n      isSelected = _ref.isSelected,\n      isDarkMode = _ref.isDarkMode,\n      isCurrentParent = _ref.isCurrentParent;\n  return utils.render(shape, {\n    isEditing: isEditing,\n    isHovered: isHovered,\n    isSelected: isSelected,\n    isBinding: isBinding,\n    isDarkMode: isDarkMode,\n    isCurrentParent: isCurrentParent\n  });\n}, function (prev, next) {\n  if (prev.isEditing !== next.isEditing || prev.isHovered !== next.isHovered || prev.isSelected !== next.isSelected || prev.isDarkMode !== next.isDarkMode || prev.isBinding !== next.isBinding || prev.isCurrentParent !== next.isCurrentParent) {\n    return false;\n  }\n\n  if (next.shape !== prev.shape) {\n    return !next.utils.shouldRender(next.shape, prev.shape);\n  }\n\n  return true;\n});\n\nfunction EditingTextShape(_ref) {\n  var shape = _ref.shape,\n      utils = _ref.utils,\n      isEditing = _ref.isEditing,\n      isHovered = _ref.isHovered,\n      isBinding = _ref.isBinding,\n      isSelected = _ref.isSelected,\n      isDarkMode = _ref.isDarkMode,\n      isCurrentParent = _ref.isCurrentParent;\n  var ref = React.useRef(null);\n  return utils.render(shape, {\n    ref: ref,\n    isEditing: isEditing,\n    isHovered: isHovered,\n    isSelected: isSelected,\n    isCurrentParent: isCurrentParent,\n    isBinding: isBinding,\n    isDarkMode: isDarkMode\n  });\n}\n\nvar Shape = /*#__PURE__*/React.memo(function (_ref) {\n  var shape = _ref.shape,\n      isEditing = _ref.isEditing,\n      isHovered = _ref.isHovered,\n      isSelected = _ref.isSelected,\n      isBinding = _ref.isBinding,\n      isDarkMode = _ref.isDarkMode,\n      isCurrentParent = _ref.isCurrentParent;\n\n  var _useTLContext = useTLContext(),\n      shapeUtils = _useTLContext.shapeUtils;\n\n  var events = useShapeEvents(shape.id, isCurrentParent);\n  var utils = shapeUtils[shape.type];\n  var center = utils.getCenter(shape);\n  var rotation = (shape.rotation || 0) * (180 / Math.PI);\n  var transform = \"rotate(\" + rotation + \", \" + center + \") translate(\" + shape.point + \")\";\n  return React.createElement(\"g\", _extends({\n    className: isCurrentParent ? 'tl-shape-group tl-current-parent' : 'tl-shape-group',\n    id: shape.id,\n    transform: transform,\n    filter: isHovered ? 'url(#expand)' : 'none'\n  }, events), isEditing && utils.isEditableText ? React.createElement(EditingTextShape, {\n    shape: shape,\n    isBinding: false,\n    isCurrentParent: false,\n    isDarkMode: isDarkMode,\n    isEditing: true,\n    isHovered: false,\n    isSelected: false,\n    utils: utils\n  }) : React.createElement(RenderedShape, {\n    shape: shape,\n    utils: utils,\n    isBinding: isBinding,\n    isCurrentParent: isCurrentParent,\n    isDarkMode: isDarkMode,\n    isEditing: isEditing,\n    isHovered: isHovered,\n    isSelected: isSelected\n  }));\n});\n\nvar CenterHandle = /*#__PURE__*/React.memo(function (_ref) {\n  var bounds = _ref.bounds,\n      isLocked = _ref.isLocked;\n  return React.createElement(\"rect\", {\n    className: isLocked ? 'tl-bounds-center tl-dashed' : 'tl-bounds-center',\n    x: -1,\n    y: -1,\n    width: bounds.width + 2,\n    height: bounds.height + 2,\n    pointerEvents: \"none\"\n  });\n});\n\nvar RotateHandle = /*#__PURE__*/React.memo(function (_ref) {\n  var bounds = _ref.bounds,\n      size = _ref.size;\n  var events = useBoundsHandleEvents('rotate');\n  return React.createElement(\"g\", {\n    cursor: \"grab\"\n  }, React.createElement(\"circle\", _extends({\n    cx: bounds.width / 2,\n    cy: size * -2,\n    r: size * 2,\n    fill: \"transparent\",\n    stroke: \"none\",\n    pointerEvents: \"all\"\n  }, events)), React.createElement(\"circle\", {\n    className: \"tl-rotate-handle\",\n    cx: bounds.width / 2,\n    cy: size * -2,\n    r: size / 2,\n    pointerEvents: \"none\"\n  }));\n});\n\nvar _cornerBgClassnames;\nvar cornerBgClassnames = (_cornerBgClassnames = {}, _cornerBgClassnames[exports.TLBoundsCorner.TopLeft] = 'tl-transparent tl-cursor-nwse', _cornerBgClassnames[exports.TLBoundsCorner.TopRight] = 'tl-transparent tl-cursor-nesw', _cornerBgClassnames[exports.TLBoundsCorner.BottomRight] = 'tl-transparent tl-cursor-nwse', _cornerBgClassnames[exports.TLBoundsCorner.BottomLeft] = 'tl-transparent tl-cursor-nesw', _cornerBgClassnames);\nvar CornerHandle = /*#__PURE__*/React.memo(function (_ref) {\n  var size = _ref.size,\n      corner = _ref.corner,\n      bounds = _ref.bounds;\n  var events = useBoundsHandleEvents(corner);\n  var isTop = corner === exports.TLBoundsCorner.TopLeft || corner === exports.TLBoundsCorner.TopRight;\n  var isLeft = corner === exports.TLBoundsCorner.TopLeft || corner === exports.TLBoundsCorner.BottomLeft;\n  return React.createElement(\"g\", null, React.createElement(\"rect\", _extends({\n    className: cornerBgClassnames[corner],\n    x: (isLeft ? -1 : bounds.width + 1) - size,\n    y: (isTop ? -1 : bounds.height + 1) - size,\n    width: size * 2,\n    height: size * 2,\n    pointerEvents: \"all\"\n  }, events)), React.createElement(\"rect\", {\n    className: \"tl-corner-handle\",\n    x: (isLeft ? -1 : bounds.width + 1) - size / 2,\n    y: (isTop ? -1 : bounds.height + 1) - size / 2,\n    width: size,\n    height: size,\n    pointerEvents: \"none\"\n  }));\n});\n\nvar _edgeClassnames;\nvar edgeClassnames = (_edgeClassnames = {}, _edgeClassnames[exports.TLBoundsEdge.Top] = 'tl-transparent tl-cursor-ns', _edgeClassnames[exports.TLBoundsEdge.Right] = 'tl-transparent tl-cursor-ew', _edgeClassnames[exports.TLBoundsEdge.Bottom] = 'tl-transparent tl-cursor-ns', _edgeClassnames[exports.TLBoundsEdge.Left] = 'tl-transparent tl-cursor-ew', _edgeClassnames);\nvar EdgeHandle = /*#__PURE__*/React.memo(function (_ref) {\n  var size = _ref.size,\n      bounds = _ref.bounds,\n      edge = _ref.edge;\n  var events = useBoundsHandleEvents(edge);\n  var isHorizontal = edge === exports.TLBoundsEdge.Top || edge === exports.TLBoundsEdge.Bottom;\n  var isFarEdge = edge === exports.TLBoundsEdge.Right || edge === exports.TLBoundsEdge.Bottom;\n  var height = bounds.height,\n      width = bounds.width;\n  return React.createElement(\"rect\", _extends({\n    className: edgeClassnames[edge],\n    x: isHorizontal ? size / 2 : (isFarEdge ? width + 1 : -1) - size / 2,\n    y: isHorizontal ? (isFarEdge ? height + 1 : -1) - size / 2 : size / 2,\n    width: isHorizontal ? Math.max(0, width + 1 - size) : size,\n    height: isHorizontal ? size : Math.max(0, height + 1 - size)\n  }, events));\n});\n\nfunction Bounds(_ref) {\n  var zoom = _ref.zoom,\n      bounds = _ref.bounds,\n      rotation = _ref.rotation,\n      isLocked = _ref.isLocked;\n  var size = (Utils.isMobile() ? 10 : 8) / zoom; // Touch target size\n\n  var center = Utils.getBoundsCenter(bounds);\n  return React.createElement(\"g\", {\n    pointerEvents: \"all\",\n    transform: \"\\n        rotate(\" + rotation * (180 / Math.PI) + \",\" + center + \")\\n        translate(\" + bounds.minX + \",\" + bounds.minY + \")\\n        rotate(\" + (bounds.rotation || 0) * (180 / Math.PI) + \", 0, 0)\"\n  }, React.createElement(CenterHandle, {\n    bounds: bounds,\n    isLocked: isLocked\n  }), !isLocked && React.createElement(React.Fragment, null, React.createElement(EdgeHandle, {\n    size: size,\n    bounds: bounds,\n    edge: exports.TLBoundsEdge.Top\n  }), React.createElement(EdgeHandle, {\n    size: size,\n    bounds: bounds,\n    edge: exports.TLBoundsEdge.Right\n  }), React.createElement(EdgeHandle, {\n    size: size,\n    bounds: bounds,\n    edge: exports.TLBoundsEdge.Bottom\n  }), React.createElement(EdgeHandle, {\n    size: size,\n    bounds: bounds,\n    edge: exports.TLBoundsEdge.Left\n  }), React.createElement(CornerHandle, {\n    size: size,\n    bounds: bounds,\n    corner: exports.TLBoundsCorner.TopLeft\n  }), React.createElement(CornerHandle, {\n    size: size,\n    bounds: bounds,\n    corner: exports.TLBoundsCorner.TopRight\n  }), React.createElement(CornerHandle, {\n    size: size,\n    bounds: bounds,\n    corner: exports.TLBoundsCorner.BottomRight\n  }), React.createElement(CornerHandle, {\n    size: size,\n    bounds: bounds,\n    corner: exports.TLBoundsCorner.BottomLeft\n  }), React.createElement(RotateHandle, {\n    size: size,\n    bounds: bounds\n  })));\n}\n\nfunction useBoundsEvents() {\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks;\n\n  var onPointerDown = React.useCallback(function (e) {\n    var _e$currentTarget;\n\n    e.stopPropagation();\n    (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.setPointerCapture(e.pointerId);\n    var info = inputs.pointerDown(e, 'bounds');\n    callbacks.onPointBounds == null ? void 0 : callbacks.onPointBounds(info, e);\n    callbacks.onPointerDown == null ? void 0 : callbacks.onPointerDown(info, e);\n  }, [callbacks]);\n  var onPointerUp = React.useCallback(function (e) {\n    e.stopPropagation();\n    var isDoubleClick = inputs.isDoubleClick();\n    var info = inputs.pointerUp(e, 'bounds');\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      var _e$currentTarget2;\n\n      (_e$currentTarget2 = e.currentTarget) == null ? void 0 : _e$currentTarget2.releasePointerCapture(e.pointerId);\n    }\n\n    if (isDoubleClick && !(info.altKey || info.metaKey)) {\n      callbacks.onDoubleClickBounds == null ? void 0 : callbacks.onDoubleClickBounds(info, e);\n    }\n\n    callbacks.onReleaseBounds == null ? void 0 : callbacks.onReleaseBounds(info, e);\n    callbacks.onPointerUp == null ? void 0 : callbacks.onPointerUp(info, e);\n  }, [callbacks]);\n  var onPointerMove = React.useCallback(function (e) {\n    e.stopPropagation();\n    if (inputs.pointer && e.pointerId !== inputs.pointer.pointerId) return;\n\n    if (e.currentTarget.hasPointerCapture(e.pointerId)) {\n      callbacks.onDragBounds == null ? void 0 : callbacks.onDragBounds(inputs.pointerMove(e, 'bounds'), e);\n    }\n\n    var info = inputs.pointerMove(e, 'bounds');\n    callbacks.onPointerMove == null ? void 0 : callbacks.onPointerMove(info, e);\n  }, [callbacks]);\n  var onPointerEnter = React.useCallback(function (e) {\n    callbacks.onHoverBounds == null ? void 0 : callbacks.onHoverBounds(inputs.pointerEnter(e, 'bounds'), e);\n  }, [callbacks]);\n  var onPointerLeave = React.useCallback(function (e) {\n    callbacks.onUnhoverBounds == null ? void 0 : callbacks.onUnhoverBounds(inputs.pointerEnter(e, 'bounds'), e);\n  }, [callbacks]);\n  var onTouchStart = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  var onTouchEnd = React.useCallback(function (e) {\n    e.preventDefault();\n  }, []);\n  return {\n    onPointerDown: onPointerDown,\n    onPointerUp: onPointerUp,\n    onPointerEnter: onPointerEnter,\n    onPointerMove: onPointerMove,\n    onPointerLeave: onPointerLeave,\n    onTouchStart: onTouchStart,\n    onTouchEnd: onTouchEnd\n  };\n}\n\nfunction BoundsBg(_ref) {\n  var bounds = _ref.bounds,\n      rotation = _ref.rotation;\n  var events = useBoundsEvents();\n  var width = bounds.width,\n      height = bounds.height;\n  var center = Utils.getBoundsCenter(bounds);\n  return React.createElement(\"rect\", _extends({\n    className: \"tl-bounds-bg\",\n    width: Math.max(1, width),\n    height: Math.max(1, height),\n    transform: \"\\n        rotate(\" + rotation * (180 / Math.PI) + \",\" + center + \")\\n        translate(\" + bounds.minX + \",\" + bounds.minY + \")\\n        rotate(\" + (bounds.rotation || 0) * (180 / Math.PI) + \", 0, 0)\"\n  }, events));\n}\n\nvar Handle = /*#__PURE__*/React.memo(function (_ref) {\n  var id = _ref.id,\n      point = _ref.point;\n  var events = useHandleEvents(id);\n  return React.createElement(\"g\", _extends({\n    className: \"handles\",\n    pointerEvents: \"all\",\n    transform: \"translate(\" + point + \")\"\n  }, events), React.createElement(\"circle\", {\n    className: \"tl-handle-bg\",\n    r: 12\n  }), React.createElement(\"use\", {\n    href: \"#handle\",\n    pointerEvents: \"none\"\n  }));\n});\n\nvar toAngle = 180 / Math.PI;\nvar Handles = /*#__PURE__*/React.memo(function (_ref) {\n  var shape = _ref.shape;\n\n  var _useTLContext = useTLContext(),\n      shapeUtils = _useTLContext.shapeUtils;\n\n  var center = shapeUtils[shape.type].getCenter(shape);\n\n  if (shape.handles === undefined) {\n    return null;\n  }\n\n  return React.createElement(\"g\", {\n    transform: \"rotate(\" + (shape.rotation || 0) * toAngle + \",\" + center + \")\"\n  }, Object.values(shape.handles).map(function (handle) {\n    return React.createElement(Handle, {\n      key: shape.id + '_' + handle.id,\n      id: handle.id,\n      point: Vec.add(handle.point, shape.point)\n    });\n  }));\n});\n\nfunction Page(_ref) {\n  var page = _ref.page,\n      pageState = _ref.pageState,\n      hideBounds = _ref.hideBounds;\n\n  var _useTLContext = useTLContext(),\n      callbacks = _useTLContext.callbacks,\n      shapeUtils = _useTLContext.shapeUtils;\n\n  useRenderOnResize();\n  var shapeTree = useShapeTree(page, pageState, shapeUtils, pageState, callbacks.onChange);\n\n  var _useHandles = useHandles(page, pageState),\n      shapeWithHandles = _useHandles.shapeWithHandles;\n\n  var _useSelection = useSelection(page, pageState, shapeUtils),\n      bounds = _useSelection.bounds,\n      isLocked = _useSelection.isLocked,\n      rotation = _useSelection.rotation;\n\n  return React.createElement(React.Fragment, null, bounds && !hideBounds && React.createElement(BoundsBg, {\n    bounds: bounds,\n    rotation: rotation\n  }), shapeTree.map(function (node) {\n    return React.createElement(ShapeNode, _extends({\n      key: node.shape.id,\n      allowHovers: true\n    }, node));\n  }), bounds && !hideBounds && React.createElement(Bounds, {\n    zoom: pageState.camera.zoom,\n    bounds: bounds,\n    isLocked: isLocked,\n    rotation: rotation\n  }), shapeWithHandles && React.createElement(Handles, {\n    shape: shapeWithHandles\n  }));\n}\nvar ShapeNode = /*#__PURE__*/React.memo(function (_ref2) {\n  var shape = _ref2.shape,\n      children = _ref2.children,\n      isEditing = _ref2.isEditing,\n      isHovered = _ref2.isHovered,\n      isDarkMode = _ref2.isDarkMode,\n      isSelected = _ref2.isSelected,\n      isBinding = _ref2.isBinding,\n      isCurrentParent = _ref2.isCurrentParent,\n      allowHovers = _ref2.allowHovers;\n  return React.createElement(React.Fragment, null, React.createElement(Shape, {\n    shape: shape,\n    isEditing: isEditing,\n    isHovered: allowHovers && isHovered,\n    isSelected: isSelected,\n    isDarkMode: isDarkMode,\n    isBinding: isBinding,\n    isCurrentParent: isCurrentParent\n  }), children && children.map(function (childNode) {\n    return React.createElement(ShapeNode, _extends({\n      key: childNode.shape.id,\n      allowHovers: allowHovers\n    }, childNode));\n  }));\n});\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nfunction usePreventNavigation(rCanvas) {\n  React.useEffect(function () {\n    var preventGestureNavigation = function preventGestureNavigation(event) {\n      event.preventDefault();\n    };\n\n    var preventNavigation = function preventNavigation(event) {\n      // Center point of the touch area\n      var touchXPosition = event.touches[0].pageX; // Size of the touch area\n\n      var touchXRadius = event.touches[0].radiusX || 0; // We set a threshold (10px) on both sizes of the screen,\n      // if the touch area overlaps with the screen edges\n      // it's likely to trigger the navigation. We prevent the\n      // touchstart event in that case.\n\n      if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > window.innerWidth - 10) {\n        event.preventDefault();\n      }\n    };\n\n    var elm = rCanvas.current;\n    if (!elm) return;\n    elm.addEventListener('touchstart', preventGestureNavigation); // @ts-ignore\n\n    elm.addEventListener('gestureend', preventGestureNavigation); // @ts-ignore\n\n    elm.addEventListener('gesturechange', preventGestureNavigation); // @ts-ignore\n\n    elm.addEventListener('gesturestart', preventGestureNavigation); // @ts-ignore\n\n    elm.addEventListener('touchstart', preventNavigation);\n    return function () {\n      if (elm) {\n        elm.removeEventListener('touchstart', preventGestureNavigation); // @ts-ignore\n\n        elm.removeEventListener('gestureend', preventGestureNavigation); // @ts-ignore\n\n        elm.removeEventListener('gesturechange', preventGestureNavigation); // @ts-ignore\n\n        elm.removeEventListener('gesturestart', preventGestureNavigation); // @ts-ignore\n\n        elm.removeEventListener('touchstart', preventNavigation);\n      }\n    };\n  }, [rCanvas]);\n}\n\nfunction resetError() {\n}\n\nvar Canvas = /*#__PURE__*/React.memo(function Canvas(_ref) {\n  var page = _ref.page,\n      pageState = _ref.pageState,\n      _ref$hideBounds = _ref.hideBounds,\n      hideBounds = _ref$hideBounds === void 0 ? false : _ref$hideBounds;\n  var rCanvas = React.useRef(null);\n  var rGroup = useCameraCss(pageState);\n  useZoomEvents();\n  useSafariFocusOutFix();\n  usePreventNavigation(rCanvas);\n  var events = useCanvasEvents();\n  return React.createElement(\"div\", {\n    className: \"tl-container\"\n  }, React.createElement(\"svg\", _extends({\n    id: \"canvas\",\n    className: \"tl-canvas\",\n    ref: rCanvas\n  }, events), React.createElement(reactErrorBoundary.ErrorBoundary, {\n    FallbackComponent: ErrorFallback,\n    onReset: resetError\n  }, React.createElement(Defs, {\n    zoom: pageState.camera.zoom\n  }), React.createElement(\"g\", {\n    ref: rGroup,\n    id: \"tl-shapes\"\n  }, React.createElement(Page, {\n    page: page,\n    pageState: pageState,\n    hideBounds: hideBounds\n  }), React.createElement(Brush, null)))));\n});\n\nvar _excluded = [\"shapeUtils\", \"page\", \"pageState\", \"theme\", \"hideBounds\", \"isDarkMode\", \"isDebugMode\", \"isPenMode\"];\nfunction Renderer(_ref) {\n  var shapeUtils = _ref.shapeUtils,\n      page = _ref.page,\n      pageState = _ref.pageState,\n      theme = _ref.theme,\n      _ref$hideBounds = _ref.hideBounds,\n      hideBounds = _ref$hideBounds === void 0 ? false : _ref$hideBounds,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  useTLTheme(theme);\n\n  var _React$useState = React.useState(function () {\n    return {\n      callbacks: rest,\n      shapeUtils: shapeUtils\n    };\n  }),\n      context = _React$useState[0];\n\n  return React.createElement(TLContext.Provider, {\n    value: context\n  }, React.createElement(Canvas, {\n    page: page,\n    pageState: pageState,\n    hideBounds: hideBounds\n  }));\n}\n\nexports.Intersect = Intersect;\nexports.Renderer = Renderer;\nexports.Svg = Svg;\nexports.TLShapeUtil = TLShapeUtil;\nexports.Utils = Utils;\nexports.Vec = Vec;\nexports.brushUpdater = brushUpdater;\nexports.inputs = inputs;\n//# sourceMappingURL=core.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../packages/core/dist/core.cjs.development.js\n");

/***/ }),

/***/ "../packages/core/dist/index.js":
/*!**************************************!*\
  !*** ../packages/core/dist/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./core.cjs.development.js */ \"../packages/core/dist/core.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGxkcmF3L3d3dy8uLi9wYWNrYWdlcy9jb3JlL2Rpc3QvaW5kZXguanM/MWQyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ1k7O0FBRVosSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsRUFBRSxzSEFBcUQ7QUFDdkQiLCJmaWxlIjoiLi4vcGFja2FnZXMvY29yZS9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvcmUuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb3JlLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../packages/core/dist/index.js\n");

/***/ }),

/***/ "../packages/tldraw/dist/index.js":
/*!****************************************!*\
  !*** ../packages/tldraw/dist/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./tldraw.cjs.development.js */ \"../packages/tldraw/dist/tldraw.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGxkcmF3L3d3dy8uLi9wYWNrYWdlcy90bGRyYXcvZGlzdC9pbmRleC5qcz8wZDU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDWTs7QUFFWixJQUFJLEtBQXFDLEVBQUUsRUFFMUM7QUFDRCxFQUFFLDRIQUF1RDtBQUN6RCIsImZpbGUiOiIuLi9wYWNrYWdlcy90bGRyYXcvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi90bGRyYXcuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi90bGRyYXcuY2pzLmRldmVsb3BtZW50LmpzJylcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../packages/tldraw/dist/index.js\n");

/***/ }),

/***/ "../packages/tldraw/dist/tldraw.cjs.development.js":
/*!*********************************************************!*\
  !*** ../packages/tldraw/dist/tldraw.cjs.development.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = __webpack_require__(/*! react */ \"react\");\nvar React__default = _interopDefault(React);\nvar reactId = __webpack_require__(/*! @radix-ui/react-id */ \"@radix-ui/react-id\");\nvar core = __webpack_require__(/*! @tldraw/core */ \"../packages/core/dist/index.js\");\nvar getStroke = __webpack_require__(/*! perfect-freehand */ \"perfect-freehand\");\nvar getStroke__default = _interopDefault(getStroke);\nvar reactHotkeysHook = __webpack_require__(/*! react-hotkeys-hook */ \"react-hotkeys-hook\");\nvar react = __webpack_require__(/*! @stitches/react */ \"@stitches/react\");\nvar RadixContextMenu = __webpack_require__(/*! @radix-ui/react-context-menu */ \"@radix-ui/react-context-menu\");\nvar RadixTooltip = __webpack_require__(/*! @radix-ui/react-tooltip */ \"@radix-ui/react-tooltip\");\nvar DropdownMenu = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"@radix-ui/react-dropdown-menu\");\n__webpack_require__(/*! @radix-ui/react-radio-group */ \"@radix-ui/react-radio-group\");\nvar reactIcons = __webpack_require__(/*! @radix-ui/react-icons */ \"@radix-ui/react-icons\");\nvar Checkbox = __webpack_require__(/*! @radix-ui/react-checkbox */ \"@radix-ui/react-checkbox\");\nvar createReact = _interopDefault(__webpack_require__(/*! zustand */ \"zustand\"));\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n(function (TLDrawToolType) {\n  TLDrawToolType[\"Draw\"] = \"draw\";\n  TLDrawToolType[\"Bounds\"] = \"bounds\";\n  TLDrawToolType[\"Point\"] = \"point\";\n  TLDrawToolType[\"Handle\"] = \"handle\";\n  TLDrawToolType[\"Points\"] = \"points\";\n})(exports.TLDrawToolType || (exports.TLDrawToolType = {}));\n\n(function (TLDrawShapeType) {\n  TLDrawShapeType[\"Ellipse\"] = \"ellipse\";\n  TLDrawShapeType[\"Rectangle\"] = \"rectangle\";\n  TLDrawShapeType[\"Draw\"] = \"draw\";\n  TLDrawShapeType[\"Arrow\"] = \"arrow\";\n})(exports.TLDrawShapeType || (exports.TLDrawShapeType = {}));\n\n(function (Decoration) {\n  Decoration[\"Arrow\"] = \"Arrow\";\n})(exports.Decoration || (exports.Decoration = {}));\n\nvar TLDrawShapeUtil = /*#__PURE__*/function (_TLShapeUtil) {\n  _inheritsLoose(TLDrawShapeUtil, _TLShapeUtil);\n\n  function TLDrawShapeUtil() {\n    return _TLShapeUtil.apply(this, arguments) || this;\n  }\n\n  return TLDrawShapeUtil;\n}(core.TLShapeUtil);\n\n(function (ColorStyle) {\n  ColorStyle[\"White\"] = \"White\";\n  ColorStyle[\"LightGray\"] = \"LightGray\";\n  ColorStyle[\"Gray\"] = \"Gray\";\n  ColorStyle[\"Black\"] = \"Black\";\n  ColorStyle[\"Green\"] = \"Green\";\n  ColorStyle[\"Cyan\"] = \"Cyan\";\n  ColorStyle[\"Blue\"] = \"Blue\";\n  ColorStyle[\"Indigo\"] = \"Indigo\";\n  ColorStyle[\"Violet\"] = \"Violet\";\n  ColorStyle[\"Red\"] = \"Red\";\n  ColorStyle[\"Orange\"] = \"Orange\";\n  ColorStyle[\"Yellow\"] = \"Yellow\";\n})(exports.ColorStyle || (exports.ColorStyle = {}));\n\n(function (SizeStyle) {\n  SizeStyle[\"Small\"] = \"Small\";\n  SizeStyle[\"Medium\"] = \"Medium\";\n  SizeStyle[\"Large\"] = \"Large\";\n})(exports.SizeStyle || (exports.SizeStyle = {}));\n\n(function (DashStyle) {\n  DashStyle[\"Draw\"] = \"Draw\";\n  DashStyle[\"Solid\"] = \"Solid\";\n  DashStyle[\"Dashed\"] = \"Dashed\";\n  DashStyle[\"Dotted\"] = \"Dotted\";\n})(exports.DashStyle || (exports.DashStyle = {}));\n\n(function (FontSize) {\n  FontSize[\"Small\"] = \"Small\";\n  FontSize[\"Medium\"] = \"Medium\";\n  FontSize[\"Large\"] = \"Large\";\n  FontSize[\"ExtraLarge\"] = \"ExtraLarge\";\n})(exports.FontSize || (exports.FontSize = {}));\n\nvar _colors, _extends2, _extends3, _strokeWidths, _fontSizes;\nvar canvasLight = '#fafafa';\nvar canvasDark = '#343d45';\nvar colors = (_colors = {}, _colors[exports.ColorStyle.Black] = '#212528', _colors[exports.ColorStyle.White] = '#f0f1f3', _colors[exports.ColorStyle.LightGray] = '#c6cbd1', _colors[exports.ColorStyle.Gray] = '#788492', _colors[exports.ColorStyle.Green] = '#36b24d', _colors[exports.ColorStyle.Cyan] = '#0e98ad', _colors[exports.ColorStyle.Blue] = '#1c7ed6', _colors[exports.ColorStyle.Indigo] = '#4263eb', _colors[exports.ColorStyle.Violet] = '#7746f1', _colors[exports.ColorStyle.Red] = '#ff2133', _colors[exports.ColorStyle.Orange] = '#ff9433', _colors[exports.ColorStyle.Yellow] = '#ffc936', _colors);\nvar strokes = {\n  light: colors,\n  dark: /*#__PURE__*/_extends({}, /*#__PURE__*/Object.fromEntries( /*#__PURE__*/Object.entries(colors).map(function (_ref) {\n    var k = _ref[0],\n        v = _ref[1];\n    return [k, core.Utils.lerpColor(v, canvasDark, 0.1)];\n  })), (_extends2 = {}, _extends2[exports.ColorStyle.White] = '#ffffff', _extends2[exports.ColorStyle.Black] = '#000', _extends2))\n};\nvar fills = {\n  light: /*#__PURE__*/_extends({}, /*#__PURE__*/Object.fromEntries( /*#__PURE__*/Object.entries(colors).map(function (_ref2) {\n    var k = _ref2[0],\n        v = _ref2[1];\n    return [k, core.Utils.lerpColor(v, canvasLight, 0.82)];\n  })), (_extends3 = {}, _extends3[exports.ColorStyle.White] = '#ffffff', _extends3[exports.ColorStyle.Black] = '#ffffff', _extends3)),\n  dark: /*#__PURE__*/Object.fromEntries( /*#__PURE__*/Object.entries(colors).map(function (_ref3) {\n    var k = _ref3[0],\n        v = _ref3[1];\n    return [k, core.Utils.lerpColor(v, canvasDark, 0.618)];\n  }))\n};\nvar strokeWidths = (_strokeWidths = {}, _strokeWidths[exports.SizeStyle.Small] = 2, _strokeWidths[exports.SizeStyle.Medium] = 4, _strokeWidths[exports.SizeStyle.Large] = 8, _strokeWidths);\nvar fontSizes = (_fontSizes = {}, _fontSizes[exports.SizeStyle.Small] = 24, _fontSizes[exports.SizeStyle.Medium] = 48, _fontSizes[exports.SizeStyle.Large] = 72, _fontSizes.auto = 'auto', _fontSizes);\nfunction getStrokeWidth(size) {\n  return strokeWidths[size];\n}\nfunction getFontSize(size) {\n  return fontSizes[size];\n}\nfunction getFontStyle(scale, style) {\n  var fontSize = getFontSize(style.size);\n  return fontSize * scale + \"px/1.4 Verveine Regular\";\n}\nfunction getShapeStyle(style, isDarkMode) {\n  if (isDarkMode === void 0) {\n    isDarkMode = false;\n  }\n\n  var color = style.color,\n      size = style.size,\n      isFilled = style.isFilled;\n  var strokeWidth = getStrokeWidth(size);\n  var theme = isDarkMode ? 'dark' : 'light';\n  return {\n    stroke: strokes[theme][color],\n    fill: isFilled ? fills[theme][color] : 'none',\n    strokeWidth: strokeWidth\n  };\n}\nvar defaultStyle = {\n  color: exports.ColorStyle.Black,\n  size: exports.SizeStyle.Medium,\n  isFilled: false,\n  dash: exports.DashStyle.Draw\n};\n/**\r\n * Get balanced dash-strokearray and dash-strokeoffset properties for a path of a given length.\r\n * @param length The length of the path.\r\n * @param strokeWidth The shape's stroke-width property.\r\n * @param style The stroke's style: \"dashed\" or \"dotted\" (default \"dashed\").\r\n * @param snap An interval for dashes (e.g. 4 will produce arrays with 4, 8, 16, etc dashes).\r\n */\n\nfunction getPerfectDashProps(length, strokeWidth, style, snap) {\n  if (snap === void 0) {\n    snap = 1;\n  }\n\n  var dashLength;\n  var strokeDashoffset;\n  var ratio;\n\n  if (style === exports.DashStyle.Solid || style === exports.DashStyle.Draw) {\n    return {\n      strokeDasharray: 'none',\n      strokeDashoffset: 'none'\n    };\n  } else if (style === exports.DashStyle.Dashed) {\n    dashLength = strokeWidth * 2;\n    ratio = 1;\n    strokeDashoffset = (dashLength / 2).toString();\n  } else {\n    dashLength = strokeWidth / 100;\n    ratio = 100;\n    strokeDashoffset = '0';\n  }\n\n  var dashes = Math.floor(length / dashLength / (2 * ratio));\n  dashes -= dashes % snap;\n  if (dashes === 0) dashes = 1;\n  var gapLength = (length - dashes * dashLength) / dashes;\n  return {\n    strokeDasharray: [dashLength, gapLength].join(' '),\n    strokeDashoffset: strokeDashoffset\n  };\n}\n\nvar Draw = /*#__PURE__*/function (_TLDrawShapeUtil) {\n  _inheritsLoose(Draw, _TLDrawShapeUtil);\n\n  function Draw() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _TLDrawShapeUtil.call.apply(_TLDrawShapeUtil, [this].concat(args)) || this;\n    _this.type = exports.TLDrawShapeType.Draw;\n    _this.toolType = exports.TLDrawToolType.Draw;\n    _this.pointsBoundsCache = new WeakMap([]);\n    _this.rotatedCache = new WeakMap([]);\n    _this.drawPathCache = new WeakMap([]);\n    _this.simplePathCache = new WeakMap([]);\n    _this.polygonCache = new WeakMap([]);\n    _this.defaultProps = {\n      id: 'id',\n      type: exports.TLDrawShapeType.Draw,\n      name: 'Draw',\n      parentId: 'page',\n      childIndex: 1,\n      point: [0, 0],\n      points: [[0, 0, 0.5]],\n      rotation: 0,\n      radius: 0,\n      style: defaultStyle\n    };\n    return _this;\n  }\n\n  var _proto = Draw.prototype;\n\n  _proto.render = function render(shape, _ref) {\n    var _DashStyle$Draw$DashS, _DashStyle$Draw$DashS2;\n\n    var isHovered = _ref.isHovered,\n        isDarkMode = _ref.isDarkMode;\n    var points = shape.points,\n        style = shape.style;\n    var styles = getShapeStyle(style, isDarkMode);\n    var strokeWidth = +styles.strokeWidth;\n    var shouldFill = style.isFilled && points.length > 3 && core.Vec.dist(points[0], points[points.length - 1]) < +styles.strokeWidth * 2; // For very short lines, draw a point instead of a line\n\n    if (points.length > 0 && points.length < 3) {\n      var _sw = strokeWidth * 0.618;\n\n      return React.createElement(\"circle\", {\n        r: strokeWidth * 0.618,\n        fill: styles.stroke,\n        stroke: styles.stroke,\n        strokeWidth: _sw,\n        pointerEvents: \"all\",\n        filter: isHovered ? 'url(#expand)' : 'none'\n      });\n    } // For drawn lines, draw a line from the path cache\n\n\n    if (shape.style.dash === exports.DashStyle.Draw) {\n      var polygonPathData = core.Utils.getFromCache(this.polygonCache, points, function () {\n        return getFillPath(shape);\n      });\n      var drawPathData = core.Utils.getFromCache(this.drawPathCache, points, function () {\n        return getDrawStrokePath(shape);\n      });\n      return React.createElement(React.Fragment, null, shouldFill && React.createElement(\"path\", {\n        d: polygonPathData,\n        stroke: \"none\",\n        fill: styles.fill,\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        pointerEvents: \"fill\"\n      }), React.createElement(\"path\", {\n        d: drawPathData,\n        fill: styles.stroke,\n        stroke: styles.stroke,\n        strokeWidth: strokeWidth,\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        pointerEvents: \"all\",\n        filter: isHovered ? 'url(#expand)' : 'none'\n      }));\n    } // For solid, dash and dotted lines, draw a regular stroke path\n\n\n    var strokeDasharray = (_DashStyle$Draw$DashS = {}, _DashStyle$Draw$DashS[exports.DashStyle.Draw] = 'none', _DashStyle$Draw$DashS[exports.DashStyle.Solid] = \"none\", _DashStyle$Draw$DashS[exports.DashStyle.Dotted] = strokeWidth / 10 + \" \" + strokeWidth * 3, _DashStyle$Draw$DashS[exports.DashStyle.Dashed] = strokeWidth * 3 + \" \" + strokeWidth * 3, _DashStyle$Draw$DashS)[style.dash];\n    var strokeDashoffset = (_DashStyle$Draw$DashS2 = {}, _DashStyle$Draw$DashS2[exports.DashStyle.Draw] = 'none', _DashStyle$Draw$DashS2[exports.DashStyle.Solid] = \"none\", _DashStyle$Draw$DashS2[exports.DashStyle.Dotted] = \"-\" + strokeWidth / 20, _DashStyle$Draw$DashS2[exports.DashStyle.Dashed] = \"-\" + strokeWidth, _DashStyle$Draw$DashS2)[style.dash];\n    var path = core.Utils.getFromCache(this.simplePathCache, points, function () {\n      return getSolidStrokePath(shape);\n    });\n    var sw = strokeWidth * 1.618;\n    return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n      d: path,\n      fill: shouldFill ? styles.fill : 'none',\n      stroke: \"transparent\",\n      strokeWidth: Math.min(4, strokeWidth * 2),\n      strokeLinejoin: \"round\",\n      strokeLinecap: \"round\",\n      pointerEvents: shouldFill ? 'all' : 'stroke'\n    }), React.createElement(\"path\", {\n      d: path,\n      fill: \"transparent\",\n      stroke: styles.stroke,\n      strokeWidth: sw,\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: strokeDashoffset,\n      strokeLinejoin: \"round\",\n      strokeLinecap: \"round\",\n      pointerEvents: \"stroke\",\n      filter: isHovered ? 'url(#expand)' : 'none'\n    }));\n  };\n\n  _proto.getBounds = function getBounds(shape) {\n    return core.Utils.translateBounds(core.Utils.getFromCache(this.pointsBoundsCache, shape.points, function () {\n      return core.Utils.getBoundsFromPoints(shape.points);\n    }), shape.point);\n  };\n\n  _proto.getRotatedBounds = function getRotatedBounds(shape) {\n    return core.Utils.translateBounds(core.Utils.getBoundsFromPoints(shape.points, shape.rotation), shape.point);\n  };\n\n  _proto.getCenter = function getCenter(shape) {\n    return core.Utils.getBoundsCenter(this.getBounds(shape));\n  };\n\n  _proto.hitTest = function hitTest(shape, point) {\n    return true;\n  };\n\n  _proto.hitTestBounds = function hitTestBounds(shape, brushBounds) {\n    // Test axis-aligned shape\n    if (!shape.rotation) {\n      var bounds = this.getBounds(shape);\n      return core.Utils.boundsContain(brushBounds, bounds) || (core.Utils.boundsContain(bounds, brushBounds) || core.Intersect.bounds.bounds(bounds, brushBounds).length > 0) && core.Intersect.polyline.bounds(shape.points, core.Utils.translateBounds(brushBounds, core.Vec.neg(shape.point))).length > 0;\n    } // Test rotated shape\n\n\n    var rBounds = this.getRotatedBounds(shape);\n    var rotatedBounds = core.Utils.getFromCache(this.rotatedCache, shape, function () {\n      var c = core.Utils.getBoundsCenter(core.Utils.getBoundsFromPoints(shape.points));\n      return shape.points.map(function (pt) {\n        return core.Vec.rotWith(pt, c, shape.rotation || 0);\n      });\n    });\n    return core.Utils.boundsContain(brushBounds, rBounds) || core.Intersect.bounds.polyline(core.Utils.translateBounds(brushBounds, core.Vec.neg(shape.point)), rotatedBounds).length > 0;\n  };\n\n  _proto.transform = function transform(shape, bounds, _ref2) {\n    var initialShape = _ref2.initialShape,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY;\n    var initialShapeBounds = core.Utils.getFromCache(this.boundsCache, initialShape, function () {\n      return core.Utils.getBoundsFromPoints(initialShape.points);\n    });\n    var points = initialShape.points.map(function (_ref3) {\n      var x = _ref3[0],\n          y = _ref3[1],\n          r = _ref3[2];\n      return [bounds.width * (scaleX < 0 // * sin?\n      ? 1 - x / initialShapeBounds.width : x / initialShapeBounds.width), bounds.height * (scaleY < 0 // * cos?\n      ? 1 - y / initialShapeBounds.height : y / initialShapeBounds.height), r];\n    });\n    var newBounds = core.Utils.getBoundsFromPoints(shape.points);\n    var point = core.Vec.sub([bounds.minX, bounds.minY], [newBounds.minX, newBounds.minY]);\n    return {\n      points: points,\n      point: point\n    };\n  };\n\n  _proto.transformSingle = function transformSingle(shape, bounds, info) {\n    return this.transform(shape, bounds, info);\n  };\n\n  _proto.onSessionComplete = function onSessionComplete(shape) {\n    var bounds = this.getBounds(shape);\n\n    var _Vec$sub = core.Vec.sub([bounds.minX, bounds.minY], shape.point),\n        x1 = _Vec$sub[0],\n        y1 = _Vec$sub[1];\n\n    return {\n      points: shape.points.map(function (_ref4) {\n        var x0 = _ref4[0],\n            y0 = _ref4[1],\n            p = _ref4[2];\n        return [x0 - x1, y0 - y1, p];\n      }),\n      point: core.Vec.add(shape.point, [x1, y1])\n    };\n  };\n\n  return Draw;\n}(TLDrawShapeUtil);\nvar simulatePressureSettings = {\n  simulatePressure: true\n};\nvar realPressureSettings = {\n  easing: function easing(t) {\n    return t * t;\n  },\n  simulatePressure: false,\n  start: {\n    taper: 1\n  },\n  end: {\n    taper: 1\n  }\n};\n\nfunction getFillPath(shape) {\n  var styles = getShapeStyle(shape.style);\n\n  if (shape.points.length < 2) {\n    return '';\n  }\n\n  return core.Utils.getSvgPathFromStroke(getStroke.getStrokePoints(shape.points, {\n    size: 1 + +styles.strokeWidth * 2,\n    thinning: 0.85,\n    end: {\n      taper: +styles.strokeWidth * 20\n    },\n    start: {\n      taper: +styles.strokeWidth * 20\n    }\n  }).map(function (pt) {\n    return pt.point;\n  }));\n}\n\nfunction getDrawStrokePath(shape) {\n  var styles = getShapeStyle(shape.style);\n\n  if (shape.points.length < 2) {\n    return '';\n  }\n\n  var options = shape.points[1][2] === 0.5 ? simulatePressureSettings : realPressureSettings;\n  var stroke = getStroke__default(shape.points, _extends({\n    size: 1 + +styles.strokeWidth * 2,\n    thinning: 0.85,\n    end: {\n      taper: +styles.strokeWidth * 10\n    },\n    start: {\n      taper: +styles.strokeWidth * 10\n    }\n  }, options));\n  return core.Utils.getSvgPathFromStroke(stroke);\n}\n\nfunction getSolidStrokePath(shape) {\n  var points = shape.points;\n  var len = points.length;\n  if (len === 0) return 'M 0 0 L 0 0';\n  if (len < 3) return \"M \" + points[0][0] + \" \" + points[0][1];\n  points = getStroke.getStrokePoints(points).map(function (pt) {\n    return pt.point;\n  });\n  len = points.length;\n  var d = points.reduce(function (acc, _ref5, i, arr) {\n    var x0 = _ref5[0],\n        y0 = _ref5[1];\n\n    if (i === len - 1) {\n      acc.push('L', x0, y0);\n      return acc;\n    }\n\n    var _arr = arr[i + 1],\n        x1 = _arr[0],\n        y1 = _arr[1];\n    acc.push(x0.toFixed(2), y0.toFixed(2), ((x0 + x1) / 2).toFixed(2), ((y0 + y1) / 2).toFixed(2));\n    return acc;\n  }, ['M', points[0][0], points[0][1], 'Q']);\n  var path = d.join(' ').replaceAll(/(\\s[0-9]*\\.[0-9]{2})([0-9]*)\\b/g, '$1');\n  return path;\n}\n\nvar Arrow = /*#__PURE__*/function (_TLDrawShapeUtil) {\n  _inheritsLoose(Arrow, _TLDrawShapeUtil);\n\n  function Arrow() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _TLDrawShapeUtil.call.apply(_TLDrawShapeUtil, [this].concat(args)) || this;\n    _this.type = exports.TLDrawShapeType.Arrow;\n    _this.toolType = exports.TLDrawToolType.Handle;\n    _this.canStyleFill = false;\n    _this.defaultProps = {\n      id: 'id',\n      type: exports.TLDrawShapeType.Arrow,\n      name: 'Arrow',\n      parentId: 'page',\n      childIndex: 1,\n      point: [0, 0],\n      rotation: 0,\n      bend: 0,\n      handles: {\n        start: {\n          id: 'start',\n          index: 0,\n          point: [0, 0],\n          canBind: true\n        },\n        end: {\n          id: 'end',\n          index: 1,\n          point: [1, 1],\n          canBind: true\n        },\n        bend: {\n          id: 'bend',\n          index: 2,\n          point: [0.5, 0.5]\n        }\n      },\n      decorations: {\n        end: exports.Decoration.Arrow\n      },\n      style: _extends({}, defaultStyle, {\n        isFilled: false\n      })\n    };\n\n    _this.shouldRender = function (prev, next) {\n      return next.handles !== prev.handles || next.style !== prev.style;\n    };\n\n    _this.render = function (shape, _ref) {\n      var _shape$decorations, _shape$decorations2;\n\n      var isDarkMode = _ref.isDarkMode;\n      var bend = shape.bend,\n          handles = shape.handles,\n          style = shape.style;\n      var start = handles.start,\n          end = handles.end,\n          _bend = handles.bend;\n      var isStraightLine = core.Vec.dist(_bend.point, core.Vec.round(core.Vec.med(start.point, end.point))) < 1;\n      var isDraw = shape.style.dash === exports.DashStyle.Draw;\n      var styles = getShapeStyle(style, isDarkMode);\n      var strokeWidth = styles.strokeWidth;\n      var arrowDist = core.Vec.dist(start.point, end.point);\n      var arrowHeadlength = Math.min(arrowDist / 3, strokeWidth * 8);\n      var shaftPath;\n      var insetStart;\n      var insetEnd;\n\n      if (isStraightLine) {\n        var _sw = strokeWidth * (isDraw ? 0.618 : 1.618);\n\n        var path = isDraw ? renderFreehandArrowShaft(shape) : 'M' + core.Vec.round(start.point) + 'L' + core.Vec.round(end.point);\n\n        var _getPerfectDashProps = getPerfectDashProps(arrowDist, _sw, shape.style.dash, 2),\n            strokeDasharray = _getPerfectDashProps.strokeDasharray,\n            strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n\n        insetStart = core.Vec.nudge(start.point, end.point, arrowHeadlength);\n        insetEnd = core.Vec.nudge(end.point, start.point, arrowHeadlength); // Straight arrow path\n\n        shaftPath = React.createElement(React.Fragment, null, React.createElement(\"path\", {\n          d: path,\n          fill: \"none\",\n          strokeWidth: Math.max(8, strokeWidth * 2),\n          strokeDasharray: \"none\",\n          strokeDashoffset: \"none\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }), React.createElement(\"path\", {\n          d: path,\n          fill: styles.stroke,\n          stroke: styles.stroke,\n          strokeWidth: _sw,\n          strokeDasharray: strokeDasharray,\n          strokeDashoffset: strokeDashoffset,\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }));\n      } else {\n        var circle = getCtp(shape);\n\n        var _sw2 = strokeWidth * (isDraw ? 0.618 : 1.618);\n\n        var _path = isDraw ? renderCurvedFreehandArrowShaft(shape, circle) : getArrowArcPath(start, end, circle, bend);\n\n        var arcLength = core.Utils.getArcLength([circle[0], circle[1]], circle[2], start.point, end.point);\n\n        var _getPerfectDashProps2 = getPerfectDashProps(arcLength - 1, _sw2, shape.style.dash, 2),\n            _strokeDasharray = _getPerfectDashProps2.strokeDasharray,\n            _strokeDashoffset = _getPerfectDashProps2.strokeDashoffset;\n\n        var center = [circle[0], circle[1]];\n        var radius = circle[2];\n        var sa = core.Vec.angle(center, start.point);\n        var ea = core.Vec.angle(center, end.point);\n        var t = arrowHeadlength / Math.abs(arcLength);\n        insetStart = core.Vec.nudgeAtAngle(center, core.Utils.lerpAngles(sa, ea, t), radius);\n        insetEnd = core.Vec.nudgeAtAngle(center, core.Utils.lerpAngles(ea, sa, t), radius); // Curved arrow path\n\n        shaftPath = React.createElement(React.Fragment, null, React.createElement(\"path\", {\n          d: _path,\n          fill: \"none\",\n          stroke: \"transparent\",\n          strokeWidth: Math.max(8, strokeWidth * 2),\n          strokeDasharray: \"none\",\n          strokeDashoffset: \"none\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }), React.createElement(\"path\", {\n          d: _path,\n          fill: isDraw ? styles.stroke : 'none',\n          stroke: styles.stroke,\n          strokeWidth: _sw2,\n          strokeDasharray: _strokeDasharray,\n          strokeDashoffset: _strokeDashoffset,\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }));\n      }\n\n      var sw = strokeWidth * 1.618;\n      return React.createElement(\"g\", {\n        pointerEvents: \"all\"\n      }, shaftPath, ((_shape$decorations = shape.decorations) == null ? void 0 : _shape$decorations.start) === exports.Decoration.Arrow && React.createElement(\"path\", {\n        d: getArrowHeadPath(shape, start.point, insetStart),\n        fill: \"none\",\n        stroke: styles.stroke,\n        strokeWidth: sw,\n        strokeDashoffset: \"none\",\n        strokeDasharray: \"none\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        pointerEvents: \"stroke\"\n      }), ((_shape$decorations2 = shape.decorations) == null ? void 0 : _shape$decorations2.end) === exports.Decoration.Arrow && React.createElement(\"path\", {\n        d: getArrowHeadPath(shape, end.point, insetEnd),\n        fill: \"none\",\n        stroke: styles.stroke,\n        strokeWidth: sw,\n        strokeDashoffset: \"none\",\n        strokeDasharray: \"none\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        pointerEvents: \"stroke\"\n      }));\n    };\n\n    _this.getBounds = function (shape) {\n      var bounds = core.Utils.getFromCache(_this.boundsCache, shape, function () {\n        var _shape$handles = shape.handles,\n            start = _shape$handles.start,\n            bend = _shape$handles.bend,\n            end = _shape$handles.end;\n        return core.Utils.getBoundsFromPoints([start.point, bend.point, end.point]);\n      });\n      return core.Utils.translateBounds(bounds, shape.point);\n    };\n\n    _this.getRotatedBounds = function (shape) {\n      var _shape$handles2 = shape.handles,\n          start = _shape$handles2.start,\n          bend = _shape$handles2.bend,\n          end = _shape$handles2.end;\n      return core.Utils.translateBounds(core.Utils.getBoundsFromPoints([start.point, bend.point, end.point], shape.rotation), shape.point);\n    };\n\n    _this.getCenter = function (shape) {\n      var _shape$handles3 = shape.handles,\n          start = _shape$handles3.start,\n          end = _shape$handles3.end;\n      return core.Vec.add(shape.point, core.Vec.med(start.point, end.point));\n    };\n\n    _this.hitTest = function () {\n      return true;\n    };\n\n    _this.hitTestBounds = function (shape, brushBounds) {\n      var _shape$handles4 = shape.handles,\n          start = _shape$handles4.start,\n          end = _shape$handles4.end,\n          bend = _shape$handles4.bend;\n      var sp = core.Vec.add(shape.point, start.point);\n      var ep = core.Vec.add(shape.point, end.point);\n\n      if (core.Utils.pointInBounds(sp, brushBounds) || core.Utils.pointInBounds(ep, brushBounds)) {\n        return true;\n      }\n\n      if (core.Vec.isEqual(core.Vec.med(start.point, end.point), bend.point)) {\n        return core.Intersect.lineSegment.bounds(sp, ep, brushBounds).length > 0;\n      } else {\n        var _getCtp = getCtp(shape),\n            cx = _getCtp[0],\n            cy = _getCtp[1],\n            r = _getCtp[2];\n\n        var cp = core.Vec.add(shape.point, [cx, cy]);\n        return core.Intersect.arc.bounds(cp, r, sp, ep, brushBounds).length > 0;\n      }\n    };\n\n    _this.transform = function (_shape, bounds, _ref2) {\n      var initialShape = _ref2.initialShape,\n          scaleX = _ref2.scaleX,\n          scaleY = _ref2.scaleY;\n\n      var initialShapeBounds = _this.getBounds(initialShape);\n\n      var handles = ['start', 'end'];\n\n      var nextHandles = _extends({}, initialShape.handles);\n\n      handles.forEach(function (handle) {\n        var _nextHandles$handle$p = nextHandles[handle].point,\n            x = _nextHandles$handle$p[0],\n            y = _nextHandles$handle$p[1];\n        var nw = x / initialShapeBounds.width;\n        var nh = y / initialShapeBounds.height;\n        nextHandles[handle] = _extends({}, nextHandles[handle], {\n          point: [bounds.width * (scaleX < 0 ? 1 - nw : nw), bounds.height * (scaleY < 0 ? 1 - nh : nh)]\n        });\n      });\n      var start = nextHandles.start,\n          bend = nextHandles.bend,\n          end = nextHandles.end;\n      var dist = core.Vec.dist(start.point, end.point);\n      var midPoint = core.Vec.med(start.point, end.point);\n      var bendDist = dist / 2 * initialShape.bend;\n      var u = core.Vec.uni(core.Vec.vec(start.point, end.point));\n      var point = core.Vec.add(midPoint, core.Vec.mul(core.Vec.per(u), bendDist));\n      nextHandles['bend'] = _extends({}, bend, {\n        point: Math.abs(bendDist) < 10 ? midPoint : point\n      });\n      return {\n        point: [bounds.minX, bounds.minY],\n        handles: nextHandles\n      };\n    };\n\n    _this.onDoubleClickHandle = function (shape, handle) {\n      switch (handle) {\n        case 'bend':\n          {\n            return {\n              bend: 0,\n              handles: _extends({}, shape.handles, {\n                bend: _extends({}, shape.handles.bend, {\n                  point: getBendPoint(shape.handles, shape.bend)\n                })\n              })\n            };\n          }\n\n        case 'start':\n          {\n            var _shape$decorations3;\n\n            return {\n              decorations: _extends({}, shape.decorations, {\n                start: (_shape$decorations3 = shape.decorations) != null && _shape$decorations3.start ? undefined : exports.Decoration.Arrow\n              })\n            };\n          }\n\n        case 'end':\n          {\n            var _shape$decorations4;\n\n            return {\n              decorations: _extends({}, shape.decorations, {\n                end: (_shape$decorations4 = shape.decorations) != null && _shape$decorations4.end ? undefined : exports.Decoration.Arrow\n              })\n            };\n          }\n      }\n\n      return _assertThisInitialized(_this);\n    };\n\n    _this.onHandleChange = function (shape, handles, _ref3) {\n      var shiftKey = _ref3.shiftKey;\n      var nextHandles = core.Utils.deepMerge(shape.handles, handles);\n      var nextBend = shape.bend; // If the user is holding shift, we want to snap the handles to angles\n\n      for (var id in handles) {\n        if ((id === 'start' || id === 'end') && shiftKey) {\n          var _extends2;\n\n          var point = handles[id].point;\n          var other = id === 'start' ? shape.handles.end : shape.handles.start;\n          var angle = core.Vec.angle(other.point, point);\n          var distance = core.Vec.dist(other.point, point);\n          var newAngle = core.Utils.clampToRotationToSegments(angle, 24);\n          nextHandles = _extends({}, nextHandles, (_extends2 = {}, _extends2[id] = _extends({}, nextHandles[id], {\n            point: core.Vec.nudgeAtAngle(other.point, newAngle, distance)\n          }), _extends2));\n        }\n      } // If the user is moving the bend handle, we want to move the bend point\n\n\n      if ('bend' in handles) {\n        var _nextHandles = nextHandles,\n            start = _nextHandles.start,\n            end = _nextHandles.end,\n            bend = _nextHandles.bend;\n\n        var _distance = core.Vec.dist(start.point, end.point);\n\n        var midPoint = core.Vec.med(start.point, end.point);\n\n        var _angle = core.Vec.angle(start.point, end.point);\n\n        var u = core.Vec.uni(core.Vec.vec(start.point, end.point)); // Create a line segment perendicular to the line between the start and end points\n\n        var ap = core.Vec.add(midPoint, core.Vec.mul(core.Vec.per(u), _distance / 2));\n        var bp = core.Vec.sub(midPoint, core.Vec.mul(core.Vec.per(u), _distance / 2));\n        var bendPoint = core.Vec.nearestPointOnLineSegment(ap, bp, bend.point, true); // Find the distance between the midpoint and the nearest point on the\n        // line segment to the bend handle's dragged point\n\n        var bendDist = core.Vec.dist(midPoint, bendPoint); // The shape's \"bend\" is the ratio of the bend to the distance between\n        // the start and end points. If the bend is below a certain amount, the\n        // bend should be zero.\n\n        nextBend = core.Utils.clamp(bendDist / (_distance / 2), -0.99, 0.99); // If the point is to the left of the line segment, we make the bend\n        // negative, otherwise it's positive.\n\n        var angleToBend = core.Vec.angle(start.point, bendPoint);\n\n        if (core.Utils.isAngleBetween(_angle, _angle + Math.PI, angleToBend)) {\n          nextBend *= -1;\n        }\n      }\n\n      nextHandles = _extends({}, nextHandles, {\n        start: _extends({}, nextHandles.start, {\n          point: core.Vec.round(nextHandles.start.point)\n        }),\n        end: _extends({}, nextHandles.end, {\n          point: core.Vec.round(nextHandles.end.point)\n        })\n      });\n      return {\n        bend: nextBend,\n        handles: _extends({}, nextHandles, {\n          bend: _extends({}, nextHandles.bend, {\n            point: getBendPoint(nextHandles, nextBend)\n          })\n        })\n      };\n    };\n\n    _this.onSessionComplete = function (shape) {\n      var bounds = _this.getBounds(shape);\n\n      var offset = core.Vec.sub([bounds.minX, bounds.minY], shape.point);\n      var _shape$handles5 = shape.handles,\n          start = _shape$handles5.start,\n          end = _shape$handles5.end,\n          bend = _shape$handles5.bend;\n      return {\n        point: core.Vec.add(shape.point, offset),\n        handles: {\n          start: _extends({}, start, {\n            point: core.Vec.round(core.Vec.sub(start.point, offset))\n          }),\n          end: _extends({}, end, {\n            point: core.Vec.round(core.Vec.sub(end.point, offset))\n          }),\n          bend: _extends({}, bend, {\n            point: core.Vec.round(core.Vec.sub(bend.point, offset))\n          })\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  return Arrow;\n}(TLDrawShapeUtil);\n\nfunction getArrowArcPath(start, end, circle, bend) {\n  return ['M', start.point[0], start.point[1], 'A', circle[2], circle[2], 0, 0, bend < 0 ? 0 : 1, end.point[0], end.point[1]].join(' ');\n}\n\nfunction getBendPoint(handles, bend) {\n  var start = handles.start,\n      end = handles.end;\n  var dist = core.Vec.dist(start.point, end.point);\n  var midPoint = core.Vec.med(start.point, end.point);\n  var bendDist = dist / 2 * bend;\n  var u = core.Vec.uni(core.Vec.vec(start.point, end.point));\n  var point = core.Vec.round(Math.abs(bendDist) < 10 ? midPoint : core.Vec.add(midPoint, core.Vec.mul(core.Vec.per(u), bendDist)));\n  return point;\n}\n\nfunction renderFreehandArrowShaft(shape) {\n  var style = shape.style,\n      id = shape.id;\n  var _shape$handles6 = shape.handles,\n      start = _shape$handles6.start,\n      end = _shape$handles6.end;\n  var getRandom = core.Utils.rng(id);\n  var strokeWidth = +getShapeStyle(style).strokeWidth * 2;\n  var st = Math.abs(getRandom());\n  var stroke = getStroke__default([].concat(core.Vec.pointsBetween(start.point, end.point), [end.point, end.point, end.point, end.point]), {\n    size: strokeWidth / 2,\n    thinning: 0.5 + getRandom() * 0.3,\n    easing: function easing(t) {\n      return t * t;\n    },\n    end: {\n      taper: 1\n    },\n    start: {\n      taper: 1 + 32 * (st * st * st)\n    },\n    simulatePressure: true,\n    last: true\n  });\n  var path = core.Utils.getSvgPathFromStroke(stroke);\n  return path;\n}\n\nfunction renderCurvedFreehandArrowShaft(shape, circle) {\n  var _shape$decorations5, _shape$decorations6;\n\n  var style = shape.style,\n      id = shape.id;\n  var _shape$handles7 = shape.handles,\n      start = _shape$handles7.start,\n      end = _shape$handles7.end;\n  var getRandom = core.Utils.rng(id);\n  var strokeWidth = +getShapeStyle(style).strokeWidth * 2;\n  var st = Math.abs(getRandom());\n  var center = [circle[0], circle[1]];\n  var radius = circle[2];\n  var startAngle = core.Vec.angle(center, start.point);\n  var endAngle = core.Vec.angle(center, end.point);\n  var points = [];\n\n  for (var i = 0; i < 21; i++) {\n    var t = i / 20;\n    var angle = core.Utils.lerpAngles(startAngle, endAngle, t);\n    points.push(core.Vec.round(core.Vec.nudgeAtAngle(center, angle, radius)));\n  }\n\n  var stroke = getStroke__default([].concat(points, [end.point, end.point]), {\n    size: strokeWidth / 2,\n    thinning: 0.5 + getRandom() * 0.3,\n    easing: function easing(t) {\n      return t * t;\n    },\n    end: {\n      taper: (_shape$decorations5 = shape.decorations) != null && _shape$decorations5.end ? 1 : 1 + strokeWidth * 5 * (st * st * st)\n    },\n    start: {\n      taper: (_shape$decorations6 = shape.decorations) != null && _shape$decorations6.start ? 1 : 1 + strokeWidth * 5 * (st * st * st)\n    },\n    simulatePressure: true,\n    streamline: 0.01,\n    last: true\n  });\n  var path = core.Utils.getSvgPathFromStroke(stroke);\n  return path;\n}\n\nfunction getArrowHeadPath(shape, point, inset) {\n  var _getArrowHeadPoints = getArrowHeadPoints(shape, point, inset),\n      left = _getArrowHeadPoints.left,\n      right = _getArrowHeadPoints.right;\n\n  return ['M', left, 'L', point, right].join(' ');\n}\n\nfunction getArrowHeadPoints(shape, point, inset) {\n  // Use the shape's random seed to create minor offsets for the angles\n  var getRandom = core.Utils.rng(shape.id);\n  return {\n    left: core.Vec.rotWith(inset, point, Math.PI / 6 + Math.PI / 12 * getRandom()),\n    right: core.Vec.rotWith(inset, point, -Math.PI / 6 + Math.PI / 12 * getRandom())\n  };\n}\n\nfunction getCtp(shape) {\n  var _shape$handles8 = shape.handles,\n      start = _shape$handles8.start,\n      end = _shape$handles8.end,\n      bend = _shape$handles8.bend;\n  return core.Utils.circleFromThreePoints(start.point, end.point, bend.point);\n}\n\nvar Rectangle = /*#__PURE__*/function (_TLDrawShapeUtil) {\n  _inheritsLoose(Rectangle, _TLDrawShapeUtil);\n\n  function Rectangle() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _TLDrawShapeUtil.call.apply(_TLDrawShapeUtil, [this].concat(args)) || this;\n    _this.type = exports.TLDrawShapeType.Rectangle;\n    _this.toolType = exports.TLDrawToolType.Bounds;\n    _this.pathCache = new WeakMap([]);\n    _this.defaultProps = {\n      id: 'id',\n      type: exports.TLDrawShapeType.Rectangle,\n      name: 'Rectangle',\n      parentId: 'page',\n      childIndex: 1,\n      point: [0, 0],\n      size: [1, 1],\n      rotation: 0,\n      radius: 0,\n      style: defaultStyle\n    };\n    return _this;\n  }\n\n  var _proto = Rectangle.prototype;\n\n  _proto.render = function render(shape, _ref) {\n    var isBinding = _ref.isBinding,\n        isHovered = _ref.isHovered,\n        isDarkMode = _ref.isDarkMode;\n    var id = shape.id,\n        size = shape.size,\n        style = shape.style;\n    var styles = getShapeStyle(style, isDarkMode);\n    var strokeWidth = +styles.strokeWidth;\n\n    if (style.dash === exports.DashStyle.Draw) {\n      var pathData = core.Utils.getFromCache(this.pathCache, shape.size, function () {\n        return renderPath(shape);\n      });\n      return React.createElement(React.Fragment, null, isBinding && React.createElement(\"rect\", {\n        className: \"tl-binding-indicator\",\n        x: strokeWidth / 2 - 32,\n        y: strokeWidth / 2 - 32,\n        width: Math.max(0, size[0] - strokeWidth / 2) + 64,\n        height: Math.max(0, size[1] - strokeWidth / 2) + 64\n      }), React.createElement(\"rect\", {\n        x: +styles.strokeWidth / 2,\n        y: +styles.strokeWidth / 2,\n        width: Math.max(0, size[0] - strokeWidth),\n        height: Math.max(0, size[1] - strokeWidth),\n        fill: style.isFilled ? styles.fill : 'transparent',\n        stroke: \"none\",\n        pointerEvents: \"all\"\n      }), React.createElement(\"path\", {\n        d: pathData,\n        fill: styles.stroke,\n        stroke: styles.stroke,\n        strokeWidth: styles.strokeWidth,\n        filter: isHovered ? 'url(#expand)' : 'none',\n        pointerEvents: \"all\"\n      }));\n    }\n\n    var sw = strokeWidth * 1.618;\n    var w = Math.max(0, size[0] - sw / 2);\n    var h = Math.max(0, size[1] - sw / 2);\n    var strokes = [[[sw / 2, sw / 2], [w, sw / 2], w - sw / 2], [[w, sw / 2], [w, h], h - sw / 2], [[w, h], [sw / 2, h], w - sw / 2], [[sw / 2, h], [sw / 2, sw / 2], h - sw / 2]];\n    var paths = strokes.map(function (_ref2, i) {\n      var start = _ref2[0],\n          end = _ref2[1],\n          length = _ref2[2];\n\n      var _getPerfectDashProps = getPerfectDashProps(length, sw, shape.style.dash),\n          strokeDasharray = _getPerfectDashProps.strokeDasharray,\n          strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n\n      return React.createElement(\"line\", {\n        key: id + '_' + i,\n        x1: start[0],\n        y1: start[1],\n        x2: end[0],\n        y2: end[1],\n        stroke: styles.stroke,\n        strokeWidth: sw,\n        strokeLinecap: \"round\",\n        strokeDasharray: strokeDasharray,\n        strokeDashoffset: strokeDashoffset\n      });\n    });\n    return React.createElement(React.Fragment, null, isBinding && React.createElement(\"rect\", {\n      className: \"tl-binding-indicator\",\n      x: sw / 2 - 32,\n      y: sw / 2 - 32,\n      width: w + 64,\n      height: h + 64\n    }), React.createElement(\"rect\", {\n      x: sw / 2,\n      y: sw / 2,\n      width: w,\n      height: h,\n      fill: styles.fill,\n      stroke: \"transparent\",\n      strokeWidth: sw,\n      pointerEvents: \"all\"\n    }), React.createElement(\"g\", {\n      filter: isHovered ? 'url(#expand)' : 'none',\n      pointerEvents: \"stroke\"\n    }, paths));\n  };\n\n  _proto.getBounds = function getBounds(shape) {\n    var bounds = core.Utils.getFromCache(this.boundsCache, shape, function () {\n      var _shape$size = shape.size,\n          width = _shape$size[0],\n          height = _shape$size[1];\n      return {\n        minX: 0,\n        maxX: width,\n        minY: 0,\n        maxY: height,\n        width: width,\n        height: height\n      };\n    });\n    return core.Utils.translateBounds(bounds, shape.point);\n  };\n\n  _proto.getRotatedBounds = function getRotatedBounds(shape) {\n    return core.Utils.getBoundsFromPoints(core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation));\n  };\n\n  _proto.getCenter = function getCenter(shape) {\n    return core.Utils.getBoundsCenter(this.getBounds(shape));\n  };\n\n  _proto.hitTest = function hitTest(shape, point) {\n    return core.Utils.pointInBounds(point, this.getBounds(shape));\n  };\n\n  _proto.hitTestBounds = function hitTestBounds(shape, bounds) {\n    var rotatedCorners = core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation);\n    return rotatedCorners.every(function (point) {\n      return core.Utils.pointInBounds(point, bounds);\n    }) || core.Intersect.polyline.bounds(rotatedCorners, bounds).length > 0;\n  };\n\n  _proto.transform = function transform(shape, bounds, _ref3) {\n    var initialShape = _ref3.initialShape,\n        transformOrigin = _ref3.transformOrigin,\n        scaleX = _ref3.scaleX,\n        scaleY = _ref3.scaleY;\n\n    if (!shape.rotation && !shape.isAspectRatioLocked) {\n      return {\n        point: core.Vec.round([bounds.minX, bounds.minY]),\n        size: core.Vec.round([bounds.width, bounds.height])\n      };\n    } else {\n      var size = core.Vec.round(core.Vec.mul(initialShape.size, Math.min(Math.abs(scaleX), Math.abs(scaleY))));\n      var point = core.Vec.round([bounds.minX + (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]), bounds.minY + (bounds.height - shape.size[1]) * (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1])]);\n      var rotation = scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? initialShape.rotation ? -initialShape.rotation : 0 : initialShape.rotation;\n      return {\n        size: size,\n        point: point,\n        rotation: rotation\n      };\n    }\n  };\n\n  _proto.transformSingle = function transformSingle(shape, bounds, info) {\n    return {\n      size: core.Vec.round([bounds.width, bounds.height]),\n      point: core.Vec.round([bounds.minX, bounds.minY])\n    };\n  };\n\n  return Rectangle;\n}(TLDrawShapeUtil);\n\nfunction renderPath(shape) {\n  var styles = getShapeStyle(shape.style);\n  var getRandom = core.Utils.rng(shape.id);\n  var strokeWidth = +styles.strokeWidth;\n  var baseOffset = strokeWidth / 2;\n  var offsets = Array.from(Array(4)).map(function () {\n    return [getRandom() * baseOffset, getRandom() * baseOffset];\n  });\n  var sw = strokeWidth;\n  var w = Math.max(0, shape.size[0] - sw / 2);\n  var h = Math.max(0, shape.size[1] - sw / 2);\n  var tl = core.Vec.add([sw / 2, sw / 2], offsets[0]);\n  var tr = core.Vec.add([w, sw / 2], offsets[1]);\n  var br = core.Vec.add([w, h], offsets[2]);\n  var bl = core.Vec.add([sw / 2, h], offsets[3]);\n  var lines = core.Utils.shuffleArr([core.Vec.pointsBetween(tr, br), core.Vec.pointsBetween(br, bl), core.Vec.pointsBetween(bl, tl), core.Vec.pointsBetween(tl, tr)], Math.floor(5 + getRandom() * 4));\n  var stroke = getStroke__default([].concat(lines.flat().slice(2), lines[0], lines[0].slice(4)), {\n    size: 1 + +styles.strokeWidth,\n    thinning: 0.6,\n    easing: function easing(t) {\n      return t * t * t * t;\n    },\n    end: {\n      taper: +styles.strokeWidth * 20\n    },\n    start: {\n      taper: +styles.strokeWidth * 20\n    },\n    simulatePressure: false\n  });\n  return core.Utils.getSvgPathFromStroke(stroke);\n}\n\nvar Ellipse = /*#__PURE__*/function (_TLDrawShapeUtil) {\n  _inheritsLoose(Ellipse, _TLDrawShapeUtil);\n\n  function Ellipse() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _TLDrawShapeUtil.call.apply(_TLDrawShapeUtil, [this].concat(args)) || this;\n    _this.type = exports.TLDrawShapeType.Ellipse;\n    _this.toolType = exports.TLDrawToolType.Bounds;\n    _this.pathCache = new WeakMap([]);\n    _this.defaultProps = {\n      id: 'id',\n      type: exports.TLDrawShapeType.Ellipse,\n      name: 'Ellipse',\n      parentId: 'page',\n      childIndex: 1,\n      point: [0, 0],\n      radius: [1, 1],\n      rotation: 0,\n      style: defaultStyle\n    };\n    return _this;\n  }\n\n  var _proto = Ellipse.prototype;\n\n  _proto.render = function render(shape, _ref) {\n    var _this2 = this;\n\n    var isDarkMode = _ref.isDarkMode,\n        isBinding = _ref.isBinding;\n    var _shape$radius = shape.radius,\n        radiusX = _shape$radius[0],\n        radiusY = _shape$radius[1],\n        style = shape.style;\n    var styles = getShapeStyle(style, isDarkMode);\n    var strokeWidth = +styles.strokeWidth;\n    var rx = Math.max(0, radiusX - strokeWidth / 2);\n    var ry = Math.max(0, radiusY - strokeWidth / 2);\n\n    if (style.dash === exports.DashStyle.Draw) {\n      var path = core.Utils.getFromCache(this.pathCache, shape, function () {\n        return renderPath$1(shape, _this2.getCenter(shape));\n      });\n      return React.createElement(React.Fragment, null, isBinding && React.createElement(\"ellipse\", {\n        className: \"tl-binding-indicator\",\n        cx: radiusX,\n        cy: radiusY,\n        rx: rx + 2,\n        ry: ry + 2\n      }), React.createElement(\"ellipse\", {\n        cx: radiusX,\n        cy: radiusY,\n        rx: rx,\n        ry: ry,\n        stroke: \"none\",\n        fill: style.isFilled ? styles.fill : 'transparent',\n        pointerEvents: \"all\"\n      }), React.createElement(\"path\", {\n        d: path,\n        fill: styles.stroke,\n        stroke: styles.stroke,\n        strokeWidth: strokeWidth,\n        pointerEvents: \"all\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      }));\n    }\n\n    var h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);\n    var perimeter = Math.PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));\n\n    var _getPerfectDashProps = getPerfectDashProps(perimeter, strokeWidth * 1.618, shape.style.dash, 4),\n        strokeDasharray = _getPerfectDashProps.strokeDasharray,\n        strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n\n    var sw = strokeWidth * 1.618;\n    return React.createElement(React.Fragment, null, isBinding && React.createElement(\"ellipse\", {\n      className: \"tl-binding-indicator\",\n      cx: radiusX,\n      cy: radiusY,\n      rx: rx + 32,\n      ry: ry + 32\n    }), React.createElement(\"ellipse\", {\n      cx: radiusX,\n      cy: radiusY,\n      rx: rx,\n      ry: ry,\n      fill: styles.fill,\n      stroke: styles.stroke,\n      strokeWidth: sw,\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: strokeDashoffset,\n      pointerEvents: \"all\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\"\n    }));\n  };\n\n  _proto.getBounds = function getBounds(shape) {\n    return core.Utils.getFromCache(this.boundsCache, shape, function () {\n      return core.Utils.getRotatedEllipseBounds(shape.point[0], shape.point[1], shape.radius[0], shape.radius[1], shape.rotation || 0);\n    });\n  };\n\n  _proto.getRotatedBounds = function getRotatedBounds(shape) {\n    return core.Utils.getBoundsFromPoints(core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation));\n  };\n\n  _proto.getCenter = function getCenter(shape) {\n    return core.Utils.getBoundsCenter(this.getBounds(shape));\n  };\n\n  _proto.hitTest = function hitTest(shape, point) {\n    return core.Utils.pointInBounds(point, this.getBounds(shape));\n  };\n\n  _proto.hitTestBounds = function hitTestBounds(shape, bounds) {\n    var rotatedCorners = core.Utils.getRotatedCorners(this.getBounds(shape), shape.rotation);\n    return rotatedCorners.every(function (point) {\n      return core.Utils.pointInBounds(point, bounds);\n    }) || core.Intersect.polyline.bounds(rotatedCorners, bounds).length > 0;\n  };\n\n  _proto.transform = function transform(shape, bounds, _ref2) {\n    var scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        initialShape = _ref2.initialShape;\n    var _initialShape$rotatio = initialShape.rotation,\n        rotation = _initialShape$rotatio === void 0 ? 0 : _initialShape$rotatio;\n    return {\n      point: [bounds.minX, bounds.minY],\n      radius: [bounds.width / 2, bounds.height / 2],\n      rotation: scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? -(rotation || 0) : rotation || 0\n    };\n  };\n\n  _proto.transformSingle = function transformSingle(shape, bounds) {\n    return {\n      point: core.Vec.round([bounds.minX, bounds.minY]),\n      radius: core.Vec.div([bounds.width, bounds.height], 2)\n    };\n  };\n\n  return Ellipse;\n}(TLDrawShapeUtil);\n\nfunction renderPath$1(shape, boundsCenter) {\n  var style = shape.style,\n      id = shape.id,\n      _shape$radius2 = shape.radius,\n      radiusX = _shape$radius2[0],\n      radiusY = _shape$radius2[1],\n      point = shape.point;\n  var getRandom = core.Utils.rng(id);\n  var center = core.Vec.sub(boundsCenter, point);\n  var strokeWidth = +getShapeStyle(style).strokeWidth;\n  var rx = radiusX + getRandom() * strokeWidth - strokeWidth / 2;\n  var ry = radiusY + getRandom() * strokeWidth - strokeWidth / 2;\n  var points = [];\n  var start = Math.PI + Math.PI * getRandom();\n  var overlap = Math.PI / 12;\n\n  for (var i = 2; i < 8; i++) {\n    var rads = start + overlap * 2 * (i / 8);\n    var x = rx * Math.cos(rads) + center[0];\n    var y = ry * Math.sin(rads) + center[1];\n    points.push([x, y]);\n  }\n\n  for (var _i = 5; _i < 32; _i++) {\n    var t = _i / 35;\n\n    var _rads = start + overlap * 2 + Math.PI * 2.5 * (t * t * t);\n\n    var _x = rx * Math.cos(_rads) + center[0];\n\n    var _y = ry * Math.sin(_rads) + center[1];\n\n    points.push([_x, _y]);\n  }\n\n  for (var _i2 = 0; _i2 < 8; _i2++) {\n    var _rads2 = start + overlap * 2 * (_i2 / 4);\n\n    var _x2 = rx * Math.cos(_rads2) + center[0];\n\n    var _y2 = ry * Math.sin(_rads2) + center[1];\n\n    points.push([_x2, _y2]);\n  }\n\n  var stroke = getStroke__default(points, {\n    size: 1 + strokeWidth,\n    thinning: 0.6,\n    easing: function easing(t) {\n      return t * t * t * t;\n    },\n    end: {\n      taper: strokeWidth * 20\n    },\n    start: {\n      taper: strokeWidth * 20\n    },\n    simulatePressure: false\n  });\n  return core.Utils.getSvgPathFromStroke(stroke);\n}\n\nvar tldrawShapeUtils = {\n  rectangle: /*#__PURE__*/new Rectangle(),\n  ellipse: /*#__PURE__*/new Ellipse(),\n  draw: /*#__PURE__*/new Draw(),\n  arrow: /*#__PURE__*/new Arrow()\n};\nfunction getShapeUtils(shape) {\n  return tldrawShapeUtils[shape.type];\n}\nfunction createShape(type, props) {\n  return tldrawShapeUtils[type].create(props);\n}\n\nfunction useKeyboardShortcuts(tlstate) {\n  React__default.useEffect(function () {\n    var handleKeyDown = function handleKeyDown(e) {\n      var info = core.inputs.keydown(e);\n      tlstate.onKeyDown(e.key, info);\n    };\n\n    var handleKeyUp = function handleKeyUp(e) {\n      var info = core.inputs.keyup(e);\n      tlstate.onKeyUp(e.key, info);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return function () {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [tlstate]);\n  reactHotkeysHook.useHotkeys('command+z', function (e) {\n    tlstate.undo();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('ctrl+shift-z,command+shift+z', function (e) {\n    tlstate.redo();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('ctrl+d,command+d', function (e) {\n    tlstate.duplicate();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('ctrl+s,command+s', function (e) {\n    tlstate.save();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('ctrl+=,command+=', function (e) {\n    tlstate.zoomIn();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('ctrl+-,command+-', function (e) {\n    tlstate.zoomOut();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+1', function (e) {\n    tlstate.zoomToFit();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+2', function (e) {\n    tlstate.zoomToSelection();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+0', function (e) {\n    tlstate.zoomToActual();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('escape', function (e) {\n    tlstate.cancel();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('backspace', function (e) {\n    tlstate[\"delete\"]();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('command+a,ctrl+a', function (e) {\n    tlstate.selectAll();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('up', function (e) {\n    tlstate.nudge([0, -1], false);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('right', function (e) {\n    tlstate.nudge([1, 0], false);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('down', function (e) {\n    tlstate.nudge([0, 1], false);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('left', function (e) {\n    tlstate.nudge([-1, 0], false);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+up', function (e) {\n    tlstate.nudge([0, -1], true);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+right', function (e) {\n    tlstate.nudge([1, 0], true);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+down', function (e) {\n    tlstate.nudge([0, 1], true);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+left', function (e) {\n    tlstate.nudge([-1, 0], true);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('[', function (e) {\n    tlstate.moveBackward();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys(']', function (e) {\n    tlstate.moveForward();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+[', function (e) {\n    tlstate.moveToBack();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('shift+]', function (e) {\n    tlstate.moveToFront();\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('v,1', function (e) {\n    tlstate.selectTool('select');\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('d,2', function (e) {\n    tlstate.selectTool(exports.TLDrawShapeType.Draw);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('r,3', function (e) {\n    tlstate.selectTool(exports.TLDrawShapeType.Rectangle);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('e,4', function (e) {\n    tlstate.selectTool(exports.TLDrawShapeType.Ellipse);\n    e.preventDefault();\n  });\n  reactHotkeysHook.useHotkeys('a,5', function (e) {\n    tlstate.selectTool(exports.TLDrawShapeType.Arrow);\n    e.preventDefault();\n  });\n}\n\nvar TLDrawContext = /*#__PURE__*/React.createContext({});\nfunction useTLDrawContext() {\n  var context = React.useContext(TLDrawContext);\n  return context;\n}\n\nfunction useTheme() {\n  return {\n    theme: 'light',\n    toggle: function toggle() {\n      return null;\n    }\n  };\n}\n\nvar _createCss = /*#__PURE__*/react.createCss({\n  themeMap: /*#__PURE__*/_extends({}, react.defaultThemeMap),\n  theme: {\n    colors: {\n      codeHl: 'rgba(144, 144, 144, .15)',\n      brushFill: 'rgba(0,0,0,.05)',\n      brushStroke: 'rgba(0,0,0,.25)',\n      hint: 'rgba(216, 226, 249, 1.000)',\n      selected: 'rgba(66, 133, 244, 1.000)',\n      bounds: 'rgba(65, 132, 244, 1.000)',\n      boundsBg: 'rgba(65, 132, 244, 0.05)',\n      highlight: 'rgba(65, 132, 244, 0.15)',\n      overlay: 'rgba(0, 0, 0, 0.15)',\n      overlayContrast: 'rgba(255, 255, 255, 0.15)',\n      border: '#aaaaaa',\n      canvas: '#f8f9fa',\n      panel: '#fefefe',\n      inactive: '#cccccf',\n      hover: '#efefef',\n      text: '#333333',\n      tooltipBg: '#1d1d1d',\n      tooltipText: '#ffffff',\n      muted: '#777777',\n      input: '#f3f3f3',\n      inputBorder: '#dddddd',\n      warn: 'rgba(255, 100, 100, 1)',\n      lineError: 'rgba(255, 0, 0, .1)'\n    },\n    shadows: {\n      2: '0px 1px 1px rgba(0, 0, 0, 0.14)',\n      3: '0px 2px 3px rgba(0, 0, 0, 0.14)',\n      4: '0px 4px 5px -1px rgba(0, 0, 0, 0.14)',\n      8: '0px 12px 17px rgba(0, 0, 0, 0.14)',\n      12: '0px 12px 17px rgba(0, 0, 0, 0.14)',\n      24: '0px 24px 38px rgba(0, 0, 0, 0.14)',\n      key: '1px 1px rgba(0,0,0,1)'\n    },\n    space: {\n      0: '2px',\n      1: '3px',\n      2: '4px',\n      3: '8px',\n      4: '12px',\n      5: '16px'\n    },\n    fontSizes: {\n      0: '10px',\n      1: '12px',\n      2: '13px',\n      3: '16px',\n      4: '18px'\n    },\n    fonts: {\n      ui: '\"Recursive\", system-ui, sans-serif',\n      body: '\"Recursive\", system-ui, sans-serif',\n      mono: '\"Recursive Mono\", monospace'\n    },\n    fontWeights: {},\n    lineHeights: {},\n    letterSpacings: {},\n    sizes: {},\n    borderWidths: {\n      0: '$1'\n    },\n    borderStyles: {},\n    radii: {\n      0: '2px',\n      1: '4px',\n      2: '8px'\n    },\n    zIndices: {},\n    transitions: {}\n  },\n  media: {\n    sm: '(min-width: 640px)',\n    md: '(min-width: 768px)'\n  },\n  utils: {\n    zDash: function zDash() {\n      return function (value) {\n        return {\n          strokeDasharray: \"calc(\" + value + \"px / var(--camera-zoom)) calc(\" + value + \"px / var(--camera-zoom))\"\n        };\n      };\n    },\n    zStrokeWidth: function zStrokeWidth() {\n      return function (value) {\n        if (Array.isArray(value)) {\n          return {\n            strokeWidth: \"calc(\" + value[0] + \"px / var(--camera-zoom))\"\n          };\n        }\n\n        return {\n          strokeWidth: \"calc(\" + value + \"px / var(--camera-zoom))\"\n        };\n      };\n    }\n  }\n}),\n    styled = _createCss.styled;\n\nfunction commandKey() {\n  return core.Utils.isDarwin() ? '⌘' : 'Ctrl';\n}\nfunction Kbd(_ref) {\n  var variant = _ref.variant,\n      children = _ref.children;\n  if (core.Utils.isMobile()) return null;\n  return React.createElement(StyledKbd, {\n    variant: variant\n  }, children.replaceAll('#', commandKey()).split('').map(function (k, i) {\n    return React.createElement(\"span\", {\n      key: i\n    }, k);\n  }));\n}\nvar StyledKbd = /*#__PURE__*/styled('kbd', {\n  marginLeft: '$3',\n  textShadow: '$2',\n  textAlign: 'center',\n  fontSize: '$0',\n  fontFamily: '$ui',\n  fontWeight: 400,\n  gap: '$1',\n  display: 'flex',\n  alignItems: 'center',\n  '& > span': {\n    padding: '$0',\n    borderRadius: '$0',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  variants: {\n    variant: {\n      tooltip: {\n        '& > span': {\n          background: '$overlayContrast',\n          boxShadow: '$key',\n          width: '20px',\n          height: '20px'\n        }\n      },\n      menu: {}\n    }\n  }\n});\n\nfunction Tooltip(_ref) {\n  var children = _ref.children,\n      label = _ref.label,\n      kbd = _ref.kbd,\n      _ref$side = _ref.side,\n      side = _ref$side === void 0 ? 'top' : _ref$side;\n  return React__default.createElement(RadixTooltip.Root, null, React__default.createElement(RadixTooltip.Trigger, {\n    as: \"span\"\n  }, children), React__default.createElement(StyledContent, {\n    side: side,\n    sideOffset: 8\n  }, label, kbd ? React__default.createElement(Kbd, {\n    variant: \"tooltip\"\n  }, kbd) : null, React__default.createElement(StyledArrow, null)));\n}\nvar StyledContent = /*#__PURE__*/styled(RadixTooltip.Content, {\n  borderRadius: 3,\n  padding: '$3 $3 $3 $3',\n  fontSize: '$1',\n  backgroundColor: '$tooltipBg',\n  color: '$tooltipText',\n  boxShadow: '$3',\n  display: 'flex',\n  alignItems: 'center',\n  fontFamily: '$ui'\n});\nvar StyledArrow = /*#__PURE__*/styled(RadixTooltip.Arrow, {\n  fill: '$tooltipBg',\n  margin: '0 8px'\n});\n\nvar _excluded = [\"size\"];\n\nvar _pageButton;\nvar breakpoints = {\n  '@initial': 'mobile',\n  '@sm': 'small'\n};\nvar IconButton = /*#__PURE__*/styled('button', {\n  position: 'relative',\n  height: '32px',\n  width: '32px',\n  backgroundColor: '$panel',\n  borderRadius: '4px',\n  padding: '0',\n  margin: '0',\n  display: 'grid',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  fontSize: '$0',\n  color: '$text',\n  cursor: 'pointer',\n  '& > *': {\n    gridRow: 1,\n    gridColumn: 1\n  },\n  '&:disabled': {\n    opacity: '0.5'\n  },\n  '& > span': {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  variants: {\n    bp: {\n      mobile: {\n        backgroundColor: 'transparent'\n      },\n      small: {\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover'\n        }\n      }\n    },\n    size: {\n      small: {\n        height: 32,\n        width: 32,\n        '& svg:nth-of-type(1)': {\n          height: '16px',\n          width: '16px'\n        }\n      },\n      medium: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '18px',\n          width: '18px'\n        }\n      },\n      large: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '20px',\n          width: '20px'\n        }\n      }\n    },\n    isActive: {\n      \"true\": {\n        color: '$selected'\n      }\n    }\n  }\n});\nvar RowButton = /*#__PURE__*/styled('button', {\n  position: 'relative',\n  display: 'flex',\n  width: '100%',\n  background: 'none',\n  height: '32px',\n  border: 'none',\n  cursor: 'pointer',\n  color: '$text',\n  outline: 'none',\n  alignItems: 'center',\n  fontFamily: '$ui',\n  fontWeight: 400,\n  fontSize: '$1',\n  justifyContent: 'space-between',\n  padding: '4px 8px 4px 12px',\n  borderRadius: 4,\n  userSelect: 'none',\n  '& label': {\n    fontWeight: '$1',\n    margin: 0,\n    padding: 0\n  },\n  '& svg': {\n    position: 'relative',\n    stroke: '$overlay',\n    strokeWidth: 1,\n    zIndex: 1\n  },\n  '&[data-disabled]': {\n    opacity: 0.3\n  },\n  '&:disabled': {\n    opacity: 0.3\n  },\n  variants: {\n    bp: {\n      mobile: {},\n      small: {\n        '& *[data-shy=\"true\"]': {\n          opacity: 0\n        },\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover',\n          '& *[data-shy=\"true\"]': {\n            opacity: 1\n          }\n        }\n      }\n    },\n    size: {\n      icon: {\n        padding: '4px ',\n        width: 'auto'\n      }\n    },\n    variant: {\n      noIcon: {\n        padding: '4px 12px'\n      },\n      pageButton: (_pageButton = {\n        display: 'grid',\n        gridTemplateColumns: '24px auto',\n        width: '100%',\n        paddingLeft: '$1',\n        gap: '$3',\n        justifyContent: 'flex-start'\n      }, _pageButton[\"& > *[data-state=\\\"checked\\\"]\"] = {\n        gridRow: 1,\n        gridColumn: 1\n      }, _pageButton['& > span'] = {\n        gridRow: 1,\n        gridColumn: 2,\n        width: '100%'\n      }, _pageButton)\n    },\n    warn: {\n      \"true\": {\n        color: '$warn'\n      }\n    },\n    isActive: {\n      \"true\": {\n        backgroundColor: '$hover'\n      }\n    }\n  }\n});\nvar IconWrapper = /*#__PURE__*/styled('div', {\n  height: '100%',\n  borderRadius: '4px',\n  marginRight: '1px',\n  display: 'grid',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  cursor: 'pointer',\n  color: '$text',\n  '& svg': {\n    height: 22,\n    width: 22,\n    strokeWidth: 1\n  },\n  '& > *': {\n    gridRow: 1,\n    gridColumn: 1\n  },\n  variants: {\n    size: {\n      small: {\n        '& svg': {\n          height: '16px',\n          width: '16px'\n        }\n      },\n      medium: {\n        '& svg': {\n          height: '22px',\n          width: '22px'\n        }\n      }\n    }\n  }\n});\nvar ButtonsRow = /*#__PURE__*/styled('div', {\n  position: 'relative',\n  display: 'flex',\n  width: '100%',\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  outline: 'none',\n  alignItems: 'center',\n  justifyContent: 'flex-start',\n  padding: 0\n});\nvar FloatingContainer = /*#__PURE__*/styled('div', {\n  backgroundColor: '$panel',\n  border: '1px solid $panel',\n  borderRadius: '4px',\n  boxShadow: '$4',\n  display: 'flex',\n  height: 'fit-content',\n  padding: '$0',\n  pointerEvents: 'all',\n  position: 'relative',\n  userSelect: 'none',\n  zIndex: 200,\n  variants: {\n    direction: {\n      row: {\n        flexDirection: 'row'\n      },\n      column: {\n        flexDirection: 'column'\n      }\n    },\n    elevation: {\n      0: {\n        boxShadow: 'none'\n      },\n      2: {\n        boxShadow: '$2'\n      },\n      3: {\n        boxShadow: '$3'\n      },\n      4: {\n        boxShadow: '$4'\n      }\n    }\n  }\n});\n/* -------------------------------------------------- */\n\n/*                        Menus                       */\n\n/* -------------------------------------------------- */\n\nvar MenuContent = /*#__PURE__*/styled('div', {\n  position: 'relative',\n  overflow: 'hidden',\n  userSelect: 'none',\n  zIndex: 180,\n  minWidth: 180,\n  pointerEvents: 'all',\n  backgroundColor: '$panel',\n  border: '1px solid $panel',\n  padding: '$0',\n  boxShadow: '$4',\n  borderRadius: '4px',\n  font: '$ui'\n});\nvar Divider = /*#__PURE__*/styled('div', {\n  backgroundColor: '$hover',\n  height: 1,\n  marginTop: '$2',\n  marginRight: '-$2',\n  marginBottom: '$2',\n  marginLeft: '-$2'\n});\nfunction DropdownMenuIconTriggerButton(_ref6) {\n  var label = _ref6.label,\n      kbd = _ref6.kbd,\n      children = _ref6.children,\n      _ref6$disabled = _ref6.disabled,\n      disabled = _ref6$disabled === void 0 ? false : _ref6$disabled;\n  return React__default.createElement(DropdownMenu.Trigger, {\n    as: IconButton,\n    bp: breakpoints,\n    disabled: disabled\n  }, React__default.createElement(Tooltip, {\n    label: label,\n    kbd: kbd\n  }, children));\n}\n/* -------------------------------------------------- */\n\n/*                    Context Menu                   */\n\n/* -------------------------------------------------- */\n\nfunction ContextMenuRoot(_ref8) {\n  var onOpenChange = _ref8.onOpenChange,\n      children = _ref8.children;\n  return React__default.createElement(RadixContextMenu.Root, {\n    dir: \"ltr\",\n    onOpenChange: onOpenChange\n  }, children);\n}\nfunction ContextMenuSubMenu(_ref9) {\n  var children = _ref9.children,\n      label = _ref9.label;\n  return React__default.createElement(RadixContextMenu.Root, {\n    dir: \"ltr\"\n  }, React__default.createElement(RadixContextMenu.TriggerItem, {\n    as: RowButton,\n    bp: breakpoints\n  }, React__default.createElement(\"span\", null, label), React__default.createElement(IconWrapper, {\n    size: \"small\"\n  }, React__default.createElement(reactIcons.ChevronRightIcon, null))), React__default.createElement(RadixContextMenu.Content, {\n    as: MenuContent,\n    sideOffset: 2,\n    alignOffset: -2\n  }, children, React__default.createElement(ContextMenuArrow, {\n    offset: 13\n  })));\n}\nvar ContextMenuDivider = /*#__PURE__*/styled(RadixContextMenu.Separator, {\n  backgroundColor: '$hover',\n  height: 1,\n  margin: '$2 -$2'\n});\nvar ContextMenuArrow = /*#__PURE__*/styled(RadixContextMenu.Arrow, {\n  fill: '$panel'\n});\nfunction ContextMenuButton(_ref10) {\n  var onSelect = _ref10.onSelect,\n      children = _ref10.children,\n      _ref10$disabled = _ref10.disabled,\n      disabled = _ref10$disabled === void 0 ? false : _ref10$disabled;\n  return React__default.createElement(RowButton, {\n    as: RadixContextMenu.Item,\n    bp: breakpoints,\n    disabled: disabled,\n    onSelect: onSelect\n  }, children);\n}\nfunction ContextMenuIconButton(_ref11) {\n  var onSelect = _ref11.onSelect,\n      children = _ref11.children,\n      _ref11$disabled = _ref11.disabled,\n      disabled = _ref11$disabled === void 0 ? false : _ref11$disabled;\n  return React__default.createElement(RadixContextMenu.Item, {\n    as: IconButton,\n    bp: breakpoints,\n    disabled: disabled,\n    onSelect: onSelect\n  }, children);\n}\nfunction CircleIcon(props) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 16 : _props$size,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return React__default.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24\n  }, rest), React__default.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: size / 2\n  }));\n}\n\n(function (MoveType) {\n  MoveType[\"Backward\"] = \"backward\";\n  MoveType[\"Forward\"] = \"forward\";\n  MoveType[\"ToFront\"] = \"toFront\";\n  MoveType[\"ToBack\"] = \"toBack\";\n})(exports.MoveType || (exports.MoveType = {}));\n\n(function (AlignType) {\n  AlignType[\"Top\"] = \"top\";\n  AlignType[\"CenterVertical\"] = \"centerVertical\";\n  AlignType[\"Bottom\"] = \"bottom\";\n  AlignType[\"Left\"] = \"left\";\n  AlignType[\"CenterHorizontal\"] = \"centerHorizontal\";\n  AlignType[\"Right\"] = \"right\";\n})(exports.AlignType || (exports.AlignType = {}));\n\n(function (StretchType) {\n  StretchType[\"Horizontal\"] = \"horizontal\";\n  StretchType[\"Vertical\"] = \"vertical\";\n})(exports.StretchType || (exports.StretchType = {}));\n\n(function (DistributeType) {\n  DistributeType[\"Horizontal\"] = \"horizontal\";\n  DistributeType[\"Vertical\"] = \"vertical\";\n})(exports.DistributeType || (exports.DistributeType = {}));\n\nvar has1SelectedIdsSelector = function has1SelectedIdsSelector(s) {\n  return s.pageState.selectedIds.length > 0;\n};\n\nvar has2SelectedIdsSelector = function has2SelectedIdsSelector(s) {\n  return s.pageState.selectedIds.length > 1;\n};\n\nvar has3SelectedIdsSelector = function has3SelectedIdsSelector(s) {\n  return s.pageState.selectedIds.length > 2;\n};\n\nvar isDebugModeSelector = function isDebugModeSelector(s) {\n  return s.settings.isDebugMode;\n};\n\nvar hasGroupSelectedSelector = function hasGroupSelectedSelector(s) {\n  return s.pageState.selectedIds.some(function (id) {\n    return s.page.shapes[id].children !== undefined;\n  });\n};\n\nvar ContextMenu = /*#__PURE__*/React.memo(function (_ref) {\n  var children = _ref.children;\n\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var hasSelection = useAppState(has1SelectedIdsSelector);\n  var hasTwoOrMore = useAppState(has2SelectedIdsSelector);\n  var hasThreeOrMore = useAppState(has3SelectedIdsSelector);\n  var isDebugMode = useAppState(isDebugModeSelector);\n  var hasGroupSelected = useAppState(hasGroupSelectedSelector);\n  var rContent = React.useRef(null);\n  var handleDuplicate = React.useCallback(function () {\n    tlstate.duplicate();\n  }, [tlstate]);\n  var handleGroup = React.useCallback(function () {\n    tlstate.group();\n  }, [tlstate]);\n  var handleMoveToBack = React.useCallback(function () {\n    tlstate.moveToBack();\n  }, [tlstate]);\n  var handleMoveBackward = React.useCallback(function () {\n    tlstate.moveBackward();\n  }, [tlstate]);\n  var handleMoveForward = React.useCallback(function () {\n    tlstate.moveForward();\n  }, [tlstate]);\n  var handleMoveToFront = React.useCallback(function () {\n    tlstate.moveToFront();\n  }, [tlstate]);\n  var handleDelete = React.useCallback(function () {\n    tlstate[\"delete\"]();\n  }, [tlstate]);\n  var handleCopyAsJson = React.useCallback(function () {\n    tlstate.copyAsJson();\n  }, [tlstate]);\n  var handleCopyAsSvg = React.useCallback(function () {\n    tlstate.copyAsSvg();\n  }, [tlstate]);\n  var handleUndo = React.useCallback(function () {\n    tlstate.undo();\n  }, [tlstate]);\n  var handleRedo = React.useCallback(function () {\n    tlstate.redo();\n  }, [tlstate]);\n  return React.createElement(ContextMenuRoot, null, React.createElement(RadixContextMenu.Trigger, null, children), React.createElement(MenuContent, {\n    as: RadixContextMenu.Content,\n    ref: rContent\n  }, hasSelection ? React.createElement(React.Fragment, null, React.createElement(ContextMenuButton, {\n    onSelect: handleDuplicate\n  }, React.createElement(\"span\", null, \"Duplicate\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"#D\")), React.createElement(ContextMenuDivider, null), hasGroupSelected || hasTwoOrMore && React.createElement(React.Fragment, null, hasGroupSelected && React.createElement(ContextMenuButton, {\n    onSelect: handleGroup\n  }, React.createElement(\"span\", null, \"Ungroup\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"#\\u21E7G\")), hasTwoOrMore && React.createElement(ContextMenuButton, {\n    onSelect: handleGroup\n  }, React.createElement(\"span\", null, \"Group\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"#G\"))), React.createElement(ContextMenuSubMenu, {\n    label: \"Move\"\n  }, React.createElement(ContextMenuButton, {\n    onSelect: handleMoveToFront\n  }, React.createElement(\"span\", null, \"To Front\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# \\u21E7 ]\")), React.createElement(ContextMenuButton, {\n    onSelect: handleMoveForward\n  }, React.createElement(\"span\", null, \"Forward\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# ]\")), React.createElement(ContextMenuButton, {\n    onSelect: handleMoveBackward\n  }, React.createElement(\"span\", null, \"Backward\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# [\")), React.createElement(ContextMenuButton, {\n    onSelect: handleMoveToBack\n  }, React.createElement(\"span\", null, \"To Back\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# \\u21E7 [\"))), hasTwoOrMore && React.createElement(AlignDistributeSubMenu, {\n    hasTwoOrMore: hasTwoOrMore,\n    hasThreeOrMore: hasThreeOrMore\n  }), isDebugMode && React.createElement(ContextMenuButton, {\n    onSelect: handleCopyAsJson\n  }, React.createElement(\"span\", null, \"Copy Data\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# \\u21E7 C\")), React.createElement(ContextMenuButton, {\n    onSelect: handleCopyAsSvg\n  }, React.createElement(\"span\", null, \"Copy to SVG\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# \\u21E7 C\")), React.createElement(ContextMenuDivider, null), React.createElement(ContextMenuButton, {\n    onSelect: handleDelete\n  }, React.createElement(\"span\", null, \"Delete\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"\\u232B\"))) : React.createElement(React.Fragment, null, React.createElement(ContextMenuButton, {\n    onSelect: handleUndo\n  }, React.createElement(\"span\", null, \"Undo\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# Z\")), React.createElement(ContextMenuButton, {\n    onSelect: handleRedo\n  }, React.createElement(\"span\", null, \"Redo\"), React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"# \\u21E7 Z\")))));\n});\n\nfunction AlignDistributeSubMenu(_ref2) {\n  var hasThreeOrMore = _ref2.hasThreeOrMore;\n\n  var _useTLDrawContext2 = useTLDrawContext(),\n      tlstate = _useTLDrawContext2.tlstate;\n\n  var alignTop = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Top);\n  }, [tlstate]);\n  var alignCenterVertical = React.useCallback(function () {\n    tlstate.align(exports.AlignType.CenterVertical);\n  }, [tlstate]);\n  var alignBottom = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Bottom);\n  }, [tlstate]);\n  var stretchVertically = React.useCallback(function () {\n    tlstate.stretch(exports.StretchType.Vertical);\n  }, [tlstate]);\n  var distributeVertically = React.useCallback(function () {\n    tlstate.distribute(exports.DistributeType.Vertical);\n  }, [tlstate]);\n  var alignLeft = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Left);\n  }, [tlstate]);\n  var alignCenterHorizontal = React.useCallback(function () {\n    tlstate.align(exports.AlignType.CenterHorizontal);\n  }, [tlstate]);\n  var alignRight = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Right);\n  }, [tlstate]);\n  var stretchHorizontally = React.useCallback(function () {\n    tlstate.stretch(exports.StretchType.Horizontal);\n  }, [tlstate]);\n  var distributeHorizontally = React.useCallback(function () {\n    tlstate.distribute(exports.DistributeType.Horizontal);\n  }, [tlstate]);\n  return React.createElement(ContextMenuRoot, null, React.createElement(RadixContextMenu.TriggerItem, {\n    as: RowButton,\n    bp: breakpoints\n  }, React.createElement(\"span\", null, \"Align / Distribute\"), React.createElement(IconWrapper, {\n    size: \"small\"\n  }, React.createElement(reactIcons.ChevronRightIcon, null))), React.createElement(StyledGrid, {\n    as: RadixContextMenu.Content,\n    sideOffset: 2,\n    alignOffset: -2,\n    selectedStyle: hasThreeOrMore ? 'threeOrMore' : 'twoOrMore'\n  }, React.createElement(ContextMenuIconButton, {\n    onSelect: alignLeft\n  }, React.createElement(reactIcons.AlignLeftIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: alignCenterHorizontal\n  }, React.createElement(reactIcons.AlignCenterHorizontallyIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: alignRight\n  }, React.createElement(reactIcons.AlignRightIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: stretchHorizontally\n  }, React.createElement(reactIcons.StretchHorizontallyIcon, null)), hasThreeOrMore && React.createElement(ContextMenuIconButton, {\n    onSelect: distributeHorizontally\n  }, React.createElement(reactIcons.SpaceEvenlyHorizontallyIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: alignTop\n  }, React.createElement(reactIcons.AlignTopIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: alignCenterVertical\n  }, React.createElement(reactIcons.AlignCenterVerticallyIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: alignBottom\n  }, React.createElement(reactIcons.AlignBottomIcon, null)), React.createElement(ContextMenuIconButton, {\n    onSelect: stretchVertically\n  }, React.createElement(reactIcons.StretchVerticallyIcon, null)), hasThreeOrMore && React.createElement(ContextMenuIconButton, {\n    onSelect: distributeVertically\n  }, React.createElement(reactIcons.SpaceEvenlyVerticallyIcon, null)), React.createElement(ContextMenuArrow, {\n    offset: 13\n  })));\n}\n\nvar StyledGrid = /*#__PURE__*/styled(MenuContent, {\n  display: 'grid',\n  variants: {\n    selectedStyle: {\n      threeOrMore: {\n        gridTemplateColumns: 'repeat(5, auto)'\n      },\n      twoOrMore: {\n        gridTemplateColumns: 'repeat(4, auto)'\n      }\n    }\n  }\n}); // function MoveToPageMenu() {\n//   const documentPages = useSelector((s) => s.data.document.pages)\n//   const currentPageId = useSelector((s) => s.data.currentPageId)\n//   if (!documentPages[currentPageId]) return null\n//   const sorted = Object.values(documentPages)\n//     .sort((a, b) => a.childIndex - b.childIndex)\n//     .filter((a) => a.id !== currentPageId)\n//   if (sorted.length === 0) return null\n//   return (\n//     <ContextMenuRoot>\n//       <ContextMenuButton>\n//         <span>Move To Page</span>\n//         <IconWrapper size=\"small\">\n//           <ChevronRightIcon />\n//         </IconWrapper>\n//       </ContextMenuButton>\n//       <MenuContent as={RadixContextMenu.Content} sideOffset={2} alignOffset={-2}>\n//         {sorted.map(({ id, name }) => (\n//           <ContextMenuButton\n//             key={id}\n//             disabled={id === currentPageId}\n//             onSelect={() => state.send('MOVED_TO_PAGE', { id })}\n//           >\n//             <span>{name}</span>\n//           </ContextMenuButton>\n//         ))}\n//         <ContextMenuArrow offset={13} />\n//       </MenuContent>\n//     </ContextMenuRoot>\n//   )\n// }\n\nfunction SvgRedo(props) {\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 15 15\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M12.5 2.495a.5.5 0 00-.5.5v2.5H9.5a.5.5 0 100 1h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5z\"\n  }), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.697 2.049a5 5 0 104.02 6.613.5.5 0 10-.944-.332 4 4 0 11-.946-4.16l.01.01 2.32 2.18a.5.5 0 00.685-.729l-2.314-2.175A5 5 0 007.697 2.05z\"\n  }));\n}\n\nfunction SvgTrash(props) {\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 15 15\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z\"\n  }), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z\"\n  }), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z\"\n  }));\n}\n\nfunction SvgUndo(props) {\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 15 15\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2.5 2.495a.5.5 0 01.5.5v2.5h2.5a.5.5 0 110 1h-3a.5.5 0 01-.5-.5v-3a.5.5 0 01.5-.5z\"\n  }), React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.303 2.049a5 5 0 11-4.02 6.613.5.5 0 01.944-.332 4 4 0 10.946-4.16l-.01.01-2.32 2.18a.5.5 0 01-.685-.729l2.314-2.175A5 5 0 017.303 2.05z\"\n  }));\n}\n\nvar isAllLockedSelector = function isAllLockedSelector(s) {\n  var selectedIds = s.pageState.selectedIds;\n  return selectedIds.every(function (id) {\n    return s.page.shapes[id].isLocked;\n  });\n};\n\nvar isAllAspectLockedSelector = function isAllAspectLockedSelector(s) {\n  var selectedIds = s.pageState.selectedIds;\n  return selectedIds.every(function (id) {\n    return s.page.shapes[id].isAspectRatioLocked;\n  });\n};\n\nvar isAllGroupedSelector = function isAllGroupedSelector(s) {\n  var selectedShapes = s.pageState.selectedIds.map(function (id) {\n    return s.page.shapes[id];\n  });\n  return selectedShapes.every(function (shape) {\n    return shape.children !== undefined || shape.parentId === selectedShapes[0].parentId && selectedShapes[0].parentId !== s.appState.currentPageId;\n  });\n};\n\nvar hasSelectionSelector = function hasSelectionSelector(s) {\n  return s.pageState.selectedIds.length > 0;\n};\n\nvar hasMultipleSelectionSelector = function hasMultipleSelectionSelector(s) {\n  return s.pageState.selectedIds.length > 1;\n};\n\nvar ShapesFunctions = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var isAllLocked = useAppState(isAllLockedSelector);\n  var isAllAspectLocked = useAppState(isAllAspectLockedSelector);\n  var isAllGrouped = useAppState(isAllGroupedSelector);\n  var hasSelection = useAppState(hasSelectionSelector);\n  var hasMultipleSelection = useAppState(hasMultipleSelectionSelector);\n  var handleRotate = React.useCallback(function () {\n    tlstate.rotate();\n  }, [tlstate]);\n  var handleDuplicate = React.useCallback(function () {\n    tlstate.duplicate();\n  }, [tlstate]);\n  var handleToggleLocked = React.useCallback(function () {\n    tlstate.toggleLocked();\n  }, [tlstate]);\n  var handleToggleAspectRatio = React.useCallback(function () {\n    tlstate.toggleAspectRatioLocked();\n  }, [tlstate]);\n  var handleGroup = React.useCallback(function () {\n    tlstate.group();\n  }, [tlstate]);\n  var handleMoveToBack = React.useCallback(function () {\n    tlstate.moveToBack();\n  }, [tlstate]);\n  var handleMoveBackward = React.useCallback(function () {\n    tlstate.moveBackward();\n  }, [tlstate]);\n  var handleMoveForward = React.useCallback(function () {\n    tlstate.moveForward();\n  }, [tlstate]);\n  var handleMoveToFront = React.useCallback(function () {\n    tlstate.moveToFront();\n  }, [tlstate]);\n  var handleDelete = React.useCallback(function () {\n    tlstate[\"delete\"]();\n  }, [tlstate]);\n  return React.createElement(React.Fragment, null, React.createElement(ButtonsRow, null, React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleDuplicate\n  }, React.createElement(Tooltip, {\n    label: \"Duplicate\",\n    kbd: \"#D\"\n  }, React.createElement(reactIcons.CopyIcon, null))), React.createElement(IconButton, {\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleRotate\n  }, React.createElement(Tooltip, {\n    label: \"Rotate\"\n  }, React.createElement(reactIcons.RotateCounterClockwiseIcon, null))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleToggleLocked\n  }, React.createElement(Tooltip, {\n    label: \"Toogle Locked\",\n    kbd: \"#L\"\n  }, isAllLocked ? React.createElement(reactIcons.LockClosedIcon, null) : React.createElement(reactIcons.LockOpen1Icon, {\n    opacity: 0.4\n  }))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleToggleAspectRatio\n  }, React.createElement(Tooltip, {\n    label: \"Toogle Aspect Ratio Lock\"\n  }, React.createElement(reactIcons.AspectRatioIcon, {\n    opacity: isAllAspectLocked ? 1 : 0.4\n  }))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !isAllGrouped && !hasMultipleSelection,\n    size: \"small\",\n    onClick: handleGroup\n  }, React.createElement(Tooltip, {\n    label: \"Group\",\n    kbd: \"#G\"\n  }, React.createElement(reactIcons.GroupIcon, {\n    opacity: isAllGrouped ? 1 : 0.4\n  })))), React.createElement(ButtonsRow, null, React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleMoveToBack\n  }, React.createElement(Tooltip, {\n    label: \"Move to Back\",\n    kbd: \"#\\u21E7[\"\n  }, React.createElement(reactIcons.PinBottomIcon, null))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleMoveBackward\n  }, React.createElement(Tooltip, {\n    label: \"Move Backward\",\n    kbd: \"#[\"\n  }, React.createElement(reactIcons.ArrowDownIcon, null))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleMoveForward\n  }, React.createElement(Tooltip, {\n    label: \"Move Forward\",\n    kbd: \"#]\"\n  }, React.createElement(reactIcons.ArrowUpIcon, null))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleMoveToFront\n  }, React.createElement(Tooltip, {\n    label: \"More to Front\",\n    kbd: \"#\\u21E7]\"\n  }, React.createElement(reactIcons.PinTopIcon, null))), React.createElement(IconButton, {\n    bp: breakpoints,\n    disabled: !hasSelection,\n    size: \"small\",\n    onClick: handleDelete\n  }, React.createElement(Tooltip, {\n    label: \"Delete\",\n    kbd: \"\\u232B\"\n  }, React.createElement(SvgTrash, null)))));\n});\n\nvar AlignDistribute = /*#__PURE__*/React.memo(function (_ref) {\n  var hasTwoOrMore = _ref.hasTwoOrMore,\n      hasThreeOrMore = _ref.hasThreeOrMore;\n\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate;\n\n  var alignTop = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Top);\n  }, [tlstate]);\n  var alignCenterVertical = React.useCallback(function () {\n    tlstate.align(exports.AlignType.CenterVertical);\n  }, [tlstate]);\n  var alignBottom = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Bottom);\n  }, [tlstate]);\n  var stretchVertically = React.useCallback(function () {\n    tlstate.stretch(exports.StretchType.Vertical);\n  }, [tlstate]);\n  var distributeVertically = React.useCallback(function () {\n    tlstate.distribute(exports.DistributeType.Vertical);\n  }, [tlstate]);\n  var alignLeft = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Left);\n  }, [tlstate]);\n  var alignCenterHorizontal = React.useCallback(function () {\n    tlstate.align(exports.AlignType.CenterHorizontal);\n  }, [tlstate]);\n  var alignRight = React.useCallback(function () {\n    tlstate.align(exports.AlignType.Right);\n  }, [tlstate]);\n  var stretchHorizontally = React.useCallback(function () {\n    tlstate.stretch(exports.StretchType.Horizontal);\n  }, [tlstate]);\n  var distributeHorizontally = React.useCallback(function () {\n    tlstate.distribute(exports.DistributeType.Horizontal);\n  }, [tlstate]);\n  return React.createElement(React.Fragment, null, React.createElement(ButtonsRow, null, React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignLeft\n  }, React.createElement(reactIcons.AlignLeftIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignCenterHorizontal\n  }, React.createElement(reactIcons.AlignCenterHorizontallyIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignRight\n  }, React.createElement(reactIcons.AlignRightIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: stretchHorizontally\n  }, React.createElement(reactIcons.StretchHorizontallyIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasThreeOrMore,\n    onClick: distributeHorizontally\n  }, React.createElement(reactIcons.SpaceEvenlyHorizontallyIcon, null))), React.createElement(ButtonsRow, null, React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignTop\n  }, React.createElement(reactIcons.AlignTopIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignCenterVertical\n  }, React.createElement(reactIcons.AlignCenterVerticallyIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: alignBottom\n  }, React.createElement(reactIcons.AlignBottomIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasTwoOrMore,\n    onClick: stretchVertically\n  }, React.createElement(reactIcons.StretchVerticallyIcon, null)), React.createElement(IconButton, {\n    bp: breakpoints,\n    size: \"small\",\n    disabled: !hasThreeOrMore,\n    onClick: distributeVertically\n  }, React.createElement(reactIcons.SpaceEvenlyVerticallyIcon, null))));\n});\n\nvar StyleDropdownContent = /*#__PURE__*/styled('div', {\n  display: 'grid',\n  padding: 4,\n  gridTemplateColumns: 'repeat(4, 1fr)',\n  backgroundColor: '$panel',\n  borderRadius: 4,\n  border: '1px solid $panel',\n  boxShadow: '$4',\n  variants: {\n    direction: {\n      vertical: {\n        gridTemplateColumns: '1fr'\n      }\n    }\n  }\n});\nvar StyleDropdownItem = /*#__PURE__*/styled('button', {\n  height: '32px',\n  width: '32px',\n  backgroundColor: '$panel',\n  borderRadius: '4px',\n  padding: '0',\n  margin: '0',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  cursor: 'pointer',\n  '&:focus': {\n    backgroundColor: '$hover'\n  },\n  '&:hover:not(:disabled)': {\n    backgroundColor: '$hover'\n  },\n  '&:disabled': {\n    opacity: '0.5'\n  },\n  variants: {\n    isActive: {\n      \"true\": {\n        '& svg': {\n          fill: '$text',\n          stroke: '$text'\n        }\n      },\n      \"false\": {\n        '& svg': {\n          fill: '$inactive',\n          stroke: '$inactive'\n        }\n      }\n    }\n  }\n});\nfunction BoxIcon(_ref) {\n  var _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'none' : _ref$fill,\n      _ref$stroke = _ref.stroke,\n      stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke;\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    stroke: stroke,\n    fill: fill,\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"rect\", {\n    x: \"4\",\n    y: \"4\",\n    width: \"16\",\n    height: \"16\",\n    rx: \"2\",\n    strokeWidth: \"2\"\n  }));\n}\nfunction DashSolidIcon() {\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    stroke: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: 8,\n    fill: \"none\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  }));\n}\nfunction DashDashedIcon() {\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    stroke: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: 8,\n    fill: \"none\",\n    strokeWidth: 2.5,\n    strokeLinecap: \"round\",\n    strokeDasharray: 50.26548 * 0.1\n  }));\n}\nvar dottedDasharray = 50.26548 * 0.025 + \" \" + 50.26548 * 0.1;\nfunction DashDottedIcon() {\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    stroke: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: 8,\n    fill: \"none\",\n    strokeWidth: 2.5,\n    strokeLinecap: \"round\",\n    strokeDasharray: dottedDasharray\n  }));\n}\nfunction DashDrawIcon() {\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"1 1.5 21 22\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z\",\n    strokeWidth: \"2\"\n  }));\n}\nfunction IsFilledFillIcon() {\n  return React.createElement(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M2.6168 11.1303C2.6168 11.1303 2.7023 11.0131 2.8733 10.7788C3.0443 10.5444 3.1298 10.4272 3.1298 10.4272C3.1298 10.4272 3.23333 10.2823 3.4404 9.99236C3.64746 9.70246 3.85889 9.40341 4.0747 9.09521C4.2905 8.78701 4.50606 8.47574 4.72139 8.16141C4.93671 7.84708 5.14338 7.54139 5.3414 7.24432C5.53943 6.94726 5.72068 6.67162 5.88517 6.41742C6.04966 6.16321 6.2116 5.91477 6.37099 5.67211C6.53038 5.42944 6.69528 5.18806 6.86568 4.94796C7.03608 4.70786 7.21694 4.4699 7.40824 4.23409C7.59955 3.99828 7.81063 3.76287 8.0415 3.52787C8.27236 3.29286 8.71114 3.0267 9.35782 2.72937C10.0045 2.43203 10.4713 2.35281 10.7581 2.49169C11.045 2.63057 11.2637 2.84049 11.4141 3.12146C11.5645 3.40243 11.618 3.70079 11.5746 4.01653C11.5312 4.33227 11.4627 4.59891 11.3691 4.81646C11.2756 5.03401 11.0858 5.43918 10.7998 6.03199C10.5139 6.62479 10.2122 7.17617 9.89499 7.68612C9.57773 8.19607 9.25048 8.71529 8.91323 9.24379C8.57598 9.77229 8.24193 10.3038 7.91107 10.8382C7.58021 11.3726 7.2828 11.8729 7.01885 12.339C6.75489 12.8051 6.53711 13.2259 6.36552 13.6014C6.19393 13.977 6.0132 14.3951 5.82332 14.8557C5.63344 15.3163 5.43771 15.617 5.23612 15.7578C5.03453 15.8986 4.80537 15.7993 4.54865 15.4599C4.29193 15.1205 4.11244 14.8722 4.0102 14.7148C3.90796 14.5575 3.97008 14.3802 4.19657 14.183C4.42306 13.9858 4.69016 13.7584 4.99789 13.5009C5.30561 13.2434 5.64245 12.9617 6.00839 12.6559C6.37434 12.35 6.67617 12.0967 6.91389 11.8958C7.15161 11.695 7.39026 11.4926 7.62985 11.2885C7.86944 11.0844 8.15332 10.8467 8.48148 10.5754C8.80965 10.3042 9.23907 9.9577 9.76972 9.53604C10.3004 9.11439 10.867 8.66604 11.4695 8.19102C12.072 7.71599 12.6869 7.22975 13.3142 6.73229C13.9415 6.23483 14.5741 5.73378 15.2121 5.22914C15.85 4.7245 16.4168 4.26953 16.9125 3.86423C17.4081 3.45892 17.7739 3.14715 18.0099 2.92891C18.2459 2.71066 18.5969 2.50912 19.0631 2.32427C19.5292 2.13942 19.8754 2.10947 20.1017 2.23443C20.328 2.35939 20.4959 2.53892 20.6056 2.77302C20.7152 3.00712 20.7455 3.25108 20.6966 3.50489C20.6477 3.75871 20.6108 3.93537 20.5859 4.03487C20.561 4.13437 20.4998 4.32304 20.4023 4.60088C20.3047 4.87872 20.1621 5.17449 19.9745 5.4882C19.7869 5.80191 19.576 6.14669 19.3419 6.52256C19.1078 6.89842 18.9086 7.21331 18.7443 7.46722C18.58 7.72113 18.4142 7.9759 18.2469 8.23153C18.0796 8.48716 17.8836 8.77861 17.6588 9.10588C17.434 9.43316 17.1448 9.84205 16.7912 10.3326C16.4376 10.8231 16.0659 11.342 15.676 11.8893C15.2862 12.4365 14.9001 12.9968 14.5178 13.5701C14.1356 14.1435 13.7682 14.7264 13.4159 15.3191C13.0635 15.9118 12.7579 16.4671 12.4989 16.985C12.24 17.503 12.0533 17.9527 11.9389 18.3342C11.8244 18.7156 11.7224 19.1347 11.6326 19.5912C11.5429 20.0477 11.3788 20.6043 11.1402 21.2609C10.9016 21.9175 10.6425 22.299 10.3629 22.4054C10.0832 22.5118 9.79895 22.5258 9.51015 22.4475C9.22136 22.3692 8.98315 22.2135 8.79554 21.9804C8.60793 21.7473 8.53141 21.5443 8.56597 21.3714C8.60054 21.1985 8.6805 20.9055 8.80586 20.4924C8.93122 20.0794 9.10654 19.7322 9.33182 19.4511C9.55709 19.17 9.8396 18.8347 10.1793 18.4454C10.5191 18.056 10.8588 17.6756 11.1985 17.3041C11.5381 16.9326 11.8676 16.5798 12.1871 16.2457C12.5065 15.9117 12.8481 15.5592 13.2121 15.1882C13.576 14.8173 13.9567 14.4418 14.3542 14.0616C14.7517 13.6814 15.1666 13.3082 15.599 12.9418C16.0313 12.5755 16.437 12.2489 16.8159 11.962C17.1948 11.6752 17.5102 11.4423 17.762 11.2634C18.0138 11.0844 18.3084 10.8902 18.6457 10.6807C18.983 10.4711 19.3744 10.3243 19.82 10.2401C20.2656 10.1559 20.6534 10.2693 20.9834 10.5803C21.3134 10.8913 21.4496 11.2717 21.392 11.7215C21.3344 12.1713 21.1067 12.5051 20.7089 12.7229C20.3112 12.9406 19.9073 12.9526 19.4973 12.7588C19.0873 12.565 18.8402 12.2453 18.7561 11.7997C18.6719 11.3541 18.7853 10.9663 19.0963 10.6363C19.4073 10.3063 19.7877 10.1701 20.2375 10.2277C20.6873 10.2853 21.0211 10.513 21.2388 10.9108C21.4566 11.3086 21.4686 11.7124 21.2748 12.1224C21.081 12.5324 20.8095 12.8344 20.4603 13.0286C20.1111 13.2227 19.8038 13.4005 19.5384 13.5619C19.273 13.7233 18.9732 13.9304 18.6387 14.1834C18.3043 14.4364 17.9499 14.7309 17.5755 15.0671C17.201 15.4032 16.8338 15.7568 16.4739 16.1278C16.114 16.4987 15.762 16.8738 15.418 17.253C15.0741 17.6321 14.7467 17.9939 14.4358 18.3383C14.125 18.6826 13.8006 19.0346 13.4627 19.3941C13.1248 19.7537 12.7843 20.1151 12.4411 20.4784C12.0979 20.8417 11.7811 21.1784 11.4907 21.4885C11.2003 21.7987 11.0097 22.0025 10.9187 22.0998C10.8278 22.1971 10.6425 22.299 10.3629 22.4054C10.0832 22.5118 9.79895 22.5258 9.51015 22.4475C9.22136 22.3692 8.98315 22.2135 8.79554 21.9804C8.60793 21.7473 8.56361 21.2915 8.6626 20.6129C8.76158 19.9344 8.86025 19.4336 8.95861 19.1104C9.05697 18.7873 9.15977 18.4792 9.267 18.186C9.37423 17.8929 9.51059 17.5722 9.67609 17.2241C9.84159 16.8759 10.0617 16.4208 10.3365 15.8586C10.6113 15.2963 10.9173 14.6928 11.2544 14.0481C11.5915 13.4033 11.9371 12.7709 12.2911 12.1509C12.645 11.5309 12.9985 10.928 13.3515 10.3421C13.7045 9.75628 14.043 9.20593 14.3669 8.6911C14.6908 8.17628 14.9637 7.75371 15.1856 7.42339C15.4075 7.09308 15.6064 6.80362 15.7825 6.55501C15.9585 6.3064 16.1337 6.06006 16.3078 5.81598C16.482 5.5719 16.6533 5.33288 16.8217 5.09891C16.9901 4.86494 17.216 4.59736 17.4993 4.29615C17.7826 3.99495 18.1463 3.6271 18.5904 3.1926C19.0345 2.7581 19.3409 2.45855 19.5094 2.29392C19.678 2.1293 19.8754 2.10947 20.1017 2.23443C20.328 2.35939 20.4959 2.53892 20.6056 2.77302C20.7152 3.00712 20.7455 3.25108 20.6966 3.50489C20.6477 3.75871 20.3584 4.05693 19.8288 4.39957C19.2993 4.7422 18.7953 5.11711 18.3168 5.52431C17.8384 5.93151 17.3057 6.40907 16.7189 6.95701C16.1321 7.50495 15.554 8.0585 14.9846 8.61766C14.4151 9.17682 13.8571 9.72936 13.3104 10.2753C12.7637 10.8212 12.2439 11.3334 11.7509 11.8119C11.258 12.2905 10.8516 12.6747 10.5319 12.9645C10.2122 13.2543 9.93102 13.503 9.68844 13.7105C9.44586 13.918 9.20376 14.1242 8.96214 14.329C8.72051 14.5339 8.41222 14.7917 8.03728 15.1027C7.66233 15.4136 7.3052 15.7042 6.96587 15.9744C6.62655 16.2447 6.30615 16.4867 6.00468 16.7005C5.70321 16.9143 5.4028 17.1012 5.10345 17.2611C4.8041 17.421 4.46527 17.4827 4.08697 17.4462C3.70867 17.4098 3.36157 17.209 3.04566 16.8439C2.72975 16.4788 2.5775 16.0785 2.58891 15.6432C2.60033 15.2079 2.70674 14.7684 2.90815 14.3248C3.10956 13.8811 3.29546 13.4939 3.46586 13.163C3.63625 12.832 3.80799 12.5116 3.98107 12.2016C4.15415 11.8916 4.37223 11.4904 4.6353 10.9979C4.89838 10.5055 5.18148 9.97864 5.48461 9.41727C5.78773 8.8559 6.08723 8.30477 6.3831 7.7639C6.67898 7.22302 6.96213 6.69976 7.23257 6.19412C7.50301 5.68847 7.75585 5.24404 7.99109 4.86081C8.22633 4.47759 8.57505 4.04675 9.03725 3.56831C9.49946 3.08987 9.8301 2.7561 10.0292 2.56701C10.2283 2.37791 10.4713 2.35281 10.7581 2.49169C11.045 2.63057 11.2637 2.84049 11.4141 3.12146C11.5645 3.40243 11.618 3.70079 11.5746 4.01653C11.5312 4.33227 11.1439 4.77278 10.4128 5.33807C9.68173 5.90336 9.17886 6.30718 8.90421 6.54953C8.62955 6.79188 8.38273 7.01366 8.16374 7.21485C7.94475 7.41605 7.71551 7.6216 7.47603 7.83151C7.23655 8.04141 6.97229 8.26391 6.68326 8.49901C6.39423 8.7341 6.09233 8.96876 5.77756 9.20297C5.46279 9.43719 5.1469 9.6616 4.8299 9.87622C4.5129 10.0908 4.20211 10.2932 3.89753 10.4834L2.6168 11.1303Z\",\n    strokeWidth: \"0.5\",\n    strokeLinecap: \"round\"\n  }));\n}\n\nvar selectColor = function selectColor(data) {\n  return data.appState.selectedStyle.color;\n};\n\nvar QuickColorSelect = /*#__PURE__*/React.memo(function () {\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var color = useAppState(selectColor);\n  var handleColorChange = React.useCallback(function (color) {\n    tlstate.style({\n      color: color\n    });\n  }, [tlstate]);\n  return React.createElement(DropdownMenu.Root, {\n    dir: \"ltr\"\n  }, React.createElement(DropdownMenuIconTriggerButton, {\n    label: \"Color\"\n  }, React.createElement(BoxIcon, {\n    fill: strokes[theme][color],\n    stroke: strokes[theme][color]\n  })), React.createElement(DropdownMenu.Content, {\n    sideOffset: 8\n  }, React.createElement(DropdownMenu.DropdownMenuRadioGroup, {\n    value: color,\n    onValueChange: handleColorChange,\n    as: StyleDropdownContent\n  }, Object.keys(strokes[theme]).map(function (colorStyle) {\n    return React.createElement(DropdownMenu.DropdownMenuRadioItem, {\n      as: StyleDropdownItem,\n      key: colorStyle,\n      title: colorStyle,\n      value: colorStyle\n    }, React.createElement(BoxIcon, {\n      fill: strokes[theme][colorStyle],\n      stroke: strokes[theme][colorStyle]\n    }));\n  }))));\n});\n\nvar _sizes;\nvar sizes = (_sizes = {}, _sizes[exports.SizeStyle.Small] = 6, _sizes[exports.SizeStyle.Medium] = 12, _sizes[exports.SizeStyle.Large] = 22, _sizes);\n\nvar selectSize = function selectSize(data) {\n  return data.appState.selectedStyle.size;\n};\n\nvar QuickSizeSelect = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var size = useAppState(selectSize);\n  var changeSizeStyle = React.useCallback(function (size) {\n    tlstate.style({\n      size: size\n    });\n  }, [tlstate]);\n  return React.createElement(DropdownMenu.Root, {\n    dir: \"ltr\"\n  }, React.createElement(DropdownMenuIconTriggerButton, {\n    label: \"Size\"\n  }, React.createElement(CircleIcon, {\n    size: sizes[size],\n    stroke: \"none\",\n    fill: \"currentColor\"\n  })), React.createElement(DropdownMenu.Content, {\n    sideOffset: 8\n  }, React.createElement(DropdownMenu.DropdownMenuRadioGroup, {\n    as: StyleDropdownContent,\n    direction: \"vertical\",\n    value: size,\n    onValueChange: changeSizeStyle\n  }, Object.keys(exports.SizeStyle).map(function (sizeStyle) {\n    return React.createElement(DropdownMenu.DropdownMenuRadioItem, {\n      key: sizeStyle,\n      as: StyleDropdownItem,\n      isActive: size === sizeStyle,\n      value: sizeStyle\n    }, React.createElement(CircleIcon, {\n      size: sizes[sizeStyle]\n    }));\n  }))));\n});\n\nvar _dashes;\nvar dashes = (_dashes = {}, _dashes[exports.DashStyle.Draw] = /*#__PURE__*/React.createElement(DashDrawIcon, null), _dashes[exports.DashStyle.Solid] = /*#__PURE__*/React.createElement(DashSolidIcon, null), _dashes[exports.DashStyle.Dashed] = /*#__PURE__*/React.createElement(DashDashedIcon, null), _dashes[exports.DashStyle.Dotted] = /*#__PURE__*/React.createElement(DashDottedIcon, null), _dashes);\n\nvar selectDash = function selectDash(data) {\n  return data.appState.selectedStyle.dash;\n};\n\nvar QuickDashSelect = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var dash = useAppState(selectDash);\n  var changeDashStyle = React.useCallback(function (dash) {\n    tlstate.style({\n      dash: dash\n    });\n  }, [tlstate]);\n  return React.createElement(DropdownMenu.Root, {\n    dir: \"ltr\"\n  }, React.createElement(DropdownMenuIconTriggerButton, {\n    label: \"Dash\"\n  }, dashes[dash]), React.createElement(DropdownMenu.Content, {\n    sideOffset: 8\n  }, React.createElement(DropdownMenu.DropdownMenuRadioGroup, {\n    as: StyleDropdownContent,\n    direction: \"vertical\",\n    value: dash,\n    onValueChange: changeDashStyle\n  }, Object.keys(exports.DashStyle).map(function (dashStyle) {\n    return React.createElement(DropdownMenu.DropdownMenuRadioItem, {\n      as: StyleDropdownItem,\n      key: dashStyle,\n      isActive: dash === dashStyle,\n      value: dashStyle\n    }, dashes[dashStyle]);\n  }))));\n});\n\nvar isFilledSelector = function isFilledSelector(data) {\n  return data.appState.selectedStyle.isFilled;\n};\n\nvar QuickFillSelect = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var isFilled = useAppState(isFilledSelector);\n  var handleIsFilledChange = React.useCallback(function (isFilled) {\n    tlstate.style({\n      isFilled: isFilled\n    });\n  }, [tlstate]);\n  return React.createElement(Checkbox.Root, {\n    dir: \"ltr\",\n    as: IconButton,\n    bp: breakpoints,\n    checked: isFilled,\n    onCheckedChange: handleIsFilledChange\n  }, React.createElement(Tooltip, {\n    label: \"Fill\"\n  }, React.createElement(IconWrapper, null, React.createElement(BoxIcon, null), React.createElement(Checkbox.Indicator, null, React.createElement(IsFilledFillIcon, null)))));\n});\n\nvar isStyleOpenSelector = function isStyleOpenSelector(s) {\n  return s.appState.isStyleOpen;\n};\n\nfunction StylePanel() {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var isOpen = useAppState(isStyleOpenSelector);\n  return React.createElement(FloatingContainer, {\n    direction: \"column\"\n  }, React.createElement(ButtonsRow, null, React.createElement(QuickColorSelect, null), React.createElement(QuickSizeSelect, null), React.createElement(QuickDashSelect, null), React.createElement(QuickFillSelect, null), React.createElement(IconButton, {\n    bp: breakpoints,\n    title: \"Style\",\n    size: \"small\",\n    onPointerDown: tlstate.toggleStylePanel\n  }, React.createElement(Tooltip, {\n    label: isOpen ? 'Close' : 'More'\n  }, isOpen ? React.createElement(reactIcons.Cross2Icon, null) : React.createElement(reactIcons.DotsHorizontalIcon, null)))), isOpen && React.createElement(SelectedShapeContent, null));\n}\nvar showKbds = ! /*#__PURE__*/core.Utils.isMobile();\n\nvar selectedShapesCountSelector = function selectedShapesCountSelector(s) {\n  return s.pageState.selectedIds.length;\n};\n\nfunction SelectedShapeContent() {\n  var _useTLDrawContext2 = useTLDrawContext(),\n      tlstate = _useTLDrawContext2.tlstate,\n      useAppState = _useTLDrawContext2.useAppState;\n\n  var selectedShapesCount = useAppState(selectedShapesCountSelector);\n  return React.createElement(React.Fragment, null, React.createElement(Divider, null), React.createElement(ShapesFunctions, null), React.createElement(Divider, null), React.createElement(AlignDistribute, {\n    hasTwoOrMore: selectedShapesCount > 1,\n    hasThreeOrMore: selectedShapesCount > 2\n  }), React.createElement(Divider, null), React.createElement(RowButton, {\n    bp: breakpoints,\n    disabled: selectedShapesCount === 0,\n    onClick: tlstate.copy\n  }, React.createElement(\"span\", null, \"Copy\"), showKbds && React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"#C\")), React.createElement(RowButton, {\n    bp: breakpoints,\n    onClick: tlstate.paste\n  }, React.createElement(\"span\", null, \"Paste\"), showKbds && React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"#V\")), React.createElement(RowButton, {\n    bp: breakpoints,\n    onClick: tlstate.copyAsSvg\n  }, React.createElement(\"span\", null, \"Copy to SVG\"), showKbds && React.createElement(Kbd, {\n    variant: \"menu\"\n  }, \"\\u21E7#C\")));\n}\n\nvar activeToolSelector = function activeToolSelector(s) {\n  return s.appState.activeTool;\n};\n\nfunction StatusBar() {\n  var _useTLDrawContext = useTLDrawContext(),\n      useAppState = _useTLDrawContext.useAppState;\n\n  var activeTool = useAppState(activeToolSelector);\n  return React.createElement(StatusBarContainer, {\n    size: {\n      '@sm': 'small'\n    }\n  }, React.createElement(Section, null, activeTool));\n}\nvar StatusBarContainer = /*#__PURE__*/styled('div', {\n  height: 40,\n  userSelect: 'none',\n  borderTop: '1px solid $border',\n  gridArea: 'status',\n  display: 'flex',\n  color: '$text',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  backgroundColor: '$panel',\n  gap: 8,\n  fontFamily: '$ui',\n  fontSize: '$0',\n  padding: '0 16px',\n  variants: {\n    size: {\n      small: {\n        fontSize: '$1'\n      }\n    }\n  }\n});\nvar Section = /*#__PURE__*/styled('div', {\n  whiteSpace: 'nowrap',\n  overflow: 'hidden'\n});\n\nvar ToolButton = /*#__PURE__*/styled('button', {\n  position: 'relative',\n  height: '32px',\n  width: '32px',\n  color: '$text',\n  backgroundColor: '$panel',\n  borderRadius: '4px',\n  padding: '0',\n  margin: '0',\n  display: 'grid',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  fontSize: '$0',\n  cursor: 'pointer',\n  '& > *': {\n    gridRow: 1,\n    gridColumn: 1\n  },\n  '&:disabled': {\n    opacity: '0.5'\n  },\n  '& > span': {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center'\n  }\n});\nvar PrimaryToolButton = /*#__PURE__*/styled(ToolButton, {\n  variants: {\n    bp: {\n      mobile: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '20px',\n          width: '20px'\n        }\n      },\n      small: {\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover'\n        }\n      },\n      medium: {},\n      large: {}\n    },\n    isActive: {\n      \"true\": {\n        color: '$selected'\n      }\n    }\n  }\n});\nvar SecondaryToolButton = /*#__PURE__*/styled(ToolButton, {\n  variants: {\n    bp: {\n      mobile: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '18px',\n          width: '18px'\n        }\n      },\n      small: {\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover'\n        }\n      },\n      medium: {},\n      large: {}\n    },\n    isActive: {\n      \"true\": {\n        color: '$selected'\n      }\n    }\n  }\n});\nvar TertiaryToolButton = /*#__PURE__*/styled(ToolButton, {\n  variants: {\n    bp: {\n      mobile: {\n        height: 32,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '16px',\n          width: '16px'\n        }\n      },\n      small: {\n        height: 40,\n        width: 40,\n        '& svg:nth-of-type(1)': {\n          height: '18px',\n          width: '18px'\n        },\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover'\n        }\n      },\n      medium: {},\n      large: {}\n    }\n  }\n});\nfunction PrimaryButton(_ref) {\n  var label = _ref.label,\n      kbd = _ref.kbd,\n      onClick = _ref.onClick,\n      onDoubleClick = _ref.onDoubleClick,\n      isActive = _ref.isActive,\n      children = _ref.children;\n  return React.createElement(Tooltip, {\n    label: label[0].toUpperCase() + label.slice(1),\n    kbd: kbd\n  }, React.createElement(PrimaryToolButton, {\n    name: label,\n    bp: {\n      '@initial': 'mobile',\n      '@sm': 'small',\n      '@md': 'medium',\n      '@lg': 'large'\n    },\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    isActive: isActive\n  }, children));\n}\nfunction SecondaryButton(_ref2) {\n  var label = _ref2.label,\n      kbd = _ref2.kbd,\n      onClick = _ref2.onClick,\n      onDoubleClick = _ref2.onDoubleClick,\n      isActive = _ref2.isActive,\n      children = _ref2.children;\n  return React.createElement(Tooltip, {\n    label: label[0].toUpperCase() + label.slice(1),\n    kbd: kbd\n  }, React.createElement(SecondaryToolButton, {\n    name: label,\n    bp: {\n      '@initial': 'mobile',\n      '@sm': 'small',\n      '@md': 'medium',\n      '@lg': 'large'\n    },\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    isActive: isActive\n  }, children));\n}\nfunction TertiaryButton(_ref3) {\n  var label = _ref3.label,\n      kbd = _ref3.kbd,\n      onClick = _ref3.onClick,\n      onDoubleClick = _ref3.onDoubleClick,\n      children = _ref3.children;\n  return React.createElement(Tooltip, {\n    label: label[0].toUpperCase() + label.slice(1),\n    kbd: kbd\n  }, React.createElement(TertiaryToolButton, {\n    name: label,\n    bp: {\n      '@initial': 'mobile',\n      '@sm': 'small',\n      '@md': 'medium',\n      '@lg': 'large'\n    },\n    onClick: onClick,\n    onDoubleClick: onDoubleClick\n  }, children));\n}\nvar TertiaryButtonsContainer = /*#__PURE__*/styled(FloatingContainer, {\n  boxShadow: '$3',\n  variants: {\n    bp: {\n      mobile: {\n        alignItems: 'center',\n        flexDirection: 'column'\n      },\n      small: {\n        alignItems: 'center',\n        flexDirection: 'row'\n      }\n    }\n  }\n});\n\nvar UndoRedo = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate;\n\n  var handleDelete = React.useCallback(function () {\n    tlstate[\"delete\"]();\n  }, [tlstate]);\n  var handleClear = React.useCallback(function () {\n    tlstate.clear();\n  }, [tlstate]);\n  return React.createElement(TertiaryButtonsContainer, {\n    bp: {\n      '@initial': 'mobile',\n      '@sm': 'small'\n    }\n  }, React.createElement(TertiaryButton, {\n    label: \"Undo\",\n    kbd: \"#Z\",\n    onClick: tlstate.undo\n  }, React.createElement(SvgUndo, null)), React.createElement(TertiaryButton, {\n    label: \"Redo\",\n    kbd: \"#\\u21E7\",\n    onClick: tlstate.redo\n  }, React.createElement(SvgRedo, null)), React.createElement(TertiaryButton, {\n    label: \"Delete\",\n    kbd: \"\\u232B\",\n    onClick: handleDelete,\n    onDoubleClick: handleClear\n  }, React.createElement(SvgTrash, null)));\n});\n\nvar Zoom = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate;\n\n  return React.createElement(TertiaryButtonsContainer, {\n    bp: {\n      '@initial': 'mobile',\n      '@sm': 'small'\n    }\n  }, React.createElement(TertiaryButton, {\n    label: \"Zoom Out\",\n    kbd: \"#\\u2212\",\n    onClick: tlstate.zoomOut\n  }, React.createElement(reactIcons.ZoomOutIcon, null)), React.createElement(TertiaryButton, {\n    label: \"Zoom In\",\n    kbd: \"#+\",\n    onClick: tlstate.zoomIn\n  }, React.createElement(reactIcons.ZoomInIcon, null)), React.createElement(ZoomCounter, null));\n});\n\nvar zoomSelector = function zoomSelector(s) {\n  return s.pageState.camera.zoom;\n};\n\nfunction ZoomCounter() {\n  var _useTLDrawContext2 = useTLDrawContext(),\n      tlstate = _useTLDrawContext2.tlstate,\n      useAppState = _useTLDrawContext2.useAppState;\n\n  var zoom = useAppState(zoomSelector);\n  return React.createElement(TertiaryButton, {\n    label: \"Reset Zoom\",\n    kbd: \"\\u21E70\",\n    onClick: tlstate.zoomToActual,\n    onDoubleClick: tlstate.zoomToFit\n  }, Math.round(zoom * 100), \"%\");\n}\n\nvar isEmptyCanvasSelector = function isEmptyCanvasSelector(s) {\n  return Object.keys(s.page.shapes).length > 0 && s.appState.isEmptyCanvas;\n};\n\nvar BackToContent = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var isEmptyCanvas = useAppState(isEmptyCanvasSelector);\n  if (!isEmptyCanvas) return null;\n  return React.createElement(BackToContentButton, null, React.createElement(RowButton, {\n    onClick: tlstate.zoomToContent\n  }, \"Back to content\"));\n});\nvar BackToContentButton = /*#__PURE__*/styled(FloatingContainer, {\n  pointerEvents: 'all',\n  width: 'fit-content',\n  gridRow: 1,\n  flexGrow: 2,\n  display: 'block'\n});\n\nvar activeToolSelector$1 = function activeToolSelector(s) {\n  return s.appState.activeTool;\n};\n\nvar isToolLockedSelector = function isToolLockedSelector(s) {\n  return s.appState.isToolLocked;\n};\n\nvar isDebugModeSelector$1 = function isDebugModeSelector(s) {\n  return s.settings.isDebugMode;\n};\n\nvar ToolsPanel = /*#__PURE__*/React.memo(function () {\n  var _useTLDrawContext = useTLDrawContext(),\n      tlstate = _useTLDrawContext.tlstate,\n      useAppState = _useTLDrawContext.useAppState;\n\n  var activeTool = useAppState(activeToolSelector$1);\n  var isToolLocked = useAppState(isToolLockedSelector);\n  var isDebugMode = useAppState(isDebugModeSelector$1);\n  var selectSelectTool = React.useCallback(function () {\n    tlstate.selectTool('select');\n  }, [tlstate]);\n  var selectDrawTool = React.useCallback(function () {\n    tlstate.selectTool(exports.TLDrawShapeType.Draw);\n  }, [tlstate]);\n  var selectRectangleTool = React.useCallback(function () {\n    tlstate.selectTool(exports.TLDrawShapeType.Rectangle);\n  }, [tlstate]);\n  var selectEllipseTool = React.useCallback(function () {\n    tlstate.selectTool(exports.TLDrawShapeType.Ellipse);\n  }, [tlstate]);\n  var selectArrowTool = React.useCallback(function () {\n    tlstate.selectTool(exports.TLDrawShapeType.Arrow);\n  }, [tlstate]); // const selectTextTool = React.useCallback(() => {\n  //   tlstate.selectTool(TLDrawShapeType.Ellipse)\n  // }, [tlstate])\n\n  return React.createElement(ToolsPanelContainer, null, React.createElement(LeftWrap, {\n    size: {\n      '@initial': 'mobile',\n      '@sm': 'small'\n    }\n  }, React.createElement(Zoom, null), React.createElement(FloatingContainer, null, React.createElement(SecondaryButton, {\n    label: 'Select',\n    kbd: '1',\n    onClick: selectSelectTool,\n    isActive: activeTool === 'select'\n  }, React.createElement(reactIcons.CursorArrowIcon, null)))), React.createElement(CenterWrap, null, React.createElement(BackToContent, null), React.createElement(FloatingContainer, null, React.createElement(PrimaryButton, {\n    kbd: '2',\n    label: exports.TLDrawShapeType.Draw,\n    onClick: selectDrawTool,\n    isActive: activeTool === exports.TLDrawShapeType.Draw\n  }, React.createElement(reactIcons.Pencil1Icon, null)), React.createElement(PrimaryButton, {\n    kbd: '3',\n    label: exports.TLDrawShapeType.Rectangle,\n    onClick: selectRectangleTool,\n    isActive: activeTool === exports.TLDrawShapeType.Rectangle\n  }, React.createElement(reactIcons.SquareIcon, null)), React.createElement(PrimaryButton, {\n    kbd: '4',\n    label: exports.TLDrawShapeType.Draw,\n    onClick: selectEllipseTool,\n    isActive: activeTool === exports.TLDrawShapeType.Ellipse\n  }, React.createElement(reactIcons.CircleIcon, null)), React.createElement(PrimaryButton, {\n    kbd: '5',\n    label: exports.TLDrawShapeType.Arrow,\n    onClick: selectArrowTool,\n    isActive: activeTool === exports.TLDrawShapeType.Arrow\n  }, React.createElement(reactIcons.ArrowTopRightIcon, null)))), React.createElement(RightWrap, {\n    size: {\n      '@initial': 'mobile',\n      '@sm': 'small'\n    }\n  }, React.createElement(FloatingContainer, null, React.createElement(SecondaryButton, {\n    kbd: '7',\n    label: 'Lock Tool',\n    onClick: tlstate.toggleToolLock,\n    isActive: isToolLocked\n  }, isToolLocked ? React.createElement(reactIcons.LockClosedIcon, null) : React.createElement(reactIcons.LockOpen1Icon, null))), React.createElement(UndoRedo, null)), React.createElement(StatusWrap, null, isDebugMode && React.createElement(StatusBar, null)));\n});\nvar ToolsPanelContainer = /*#__PURE__*/styled('div', {\n  position: 'fixed',\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: '100%',\n  minWidth: 0,\n  maxWidth: '100%',\n  display: 'grid',\n  gridTemplateColumns: '1fr auto 1fr',\n  padding: '0',\n  alignItems: 'flex-end',\n  zIndex: 200,\n  gridGap: '$4',\n  gridRowGap: '$4',\n  pointerEvents: 'none',\n  '& > div > *': {\n    pointerEvents: 'all'\n  }\n});\nvar CenterWrap = /*#__PURE__*/styled('div', {\n  gridRow: 1,\n  gridColumn: 2,\n  display: 'flex',\n  width: 'fit-content',\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  gap: 12\n});\nvar LeftWrap = /*#__PURE__*/styled('div', {\n  gridRow: 1,\n  gridColumn: 1,\n  display: 'flex',\n  paddingLeft: '$3',\n  variants: {\n    size: {\n      mobile: {\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'flex-start',\n        '& > *:nth-of-type(1)': {\n          marginBottom: '8px'\n        }\n      },\n      small: {\n        flexDirection: 'row',\n        alignItems: 'flex-end',\n        justifyContent: 'space-between',\n        '& > *:nth-of-type(1)': {\n          marginBottom: '0px'\n        }\n      }\n    }\n  }\n});\nvar RightWrap = /*#__PURE__*/styled('div', {\n  gridRow: 1,\n  gridColumn: 3,\n  display: 'flex',\n  paddingRight: '$3',\n  variants: {\n    size: {\n      mobile: {\n        flexDirection: 'column-reverse',\n        justifyContent: 'flex-end',\n        alignItems: 'flex-end',\n        '& > *:nth-of-type(2)': {\n          marginBottom: '8px'\n        }\n      },\n      small: {\n        flexDirection: 'row',\n        alignItems: 'flex-end',\n        justifyContent: 'space-between',\n        '& > *:nth-of-type(2)': {\n          marginBottom: '0px'\n        }\n      }\n    }\n  }\n});\nvar StatusWrap = /*#__PURE__*/styled('div', {\n  gridRow: 2,\n  gridColumn: '1 / span 3'\n});\n\nvar TLDR = /*#__PURE__*/function () {\n  function TLDR() {}\n\n  TLDR.getShapeUtils = function getShapeUtils$1(shape) {\n    return getShapeUtils(shape);\n  };\n\n  TLDR.getSelectedShapes = function getSelectedShapes(data) {\n    return data.pageState.selectedIds.map(function (id) {\n      return data.page.shapes[id];\n    });\n  };\n\n  TLDR.screenToWorld = function screenToWorld(data, point) {\n    var camera = data.pageState.camera;\n    return core.Vec.sub(core.Vec.div(point, camera.zoom), camera.point);\n  };\n\n  TLDR.getViewport = function getViewport(data) {\n    var _this$screenToWorld = this.screenToWorld(data, [0, 0]),\n        minX = _this$screenToWorld[0],\n        minY = _this$screenToWorld[1];\n\n    var _this$screenToWorld2 = this.screenToWorld(data, [window.innerWidth, window.innerHeight]),\n        maxX = _this$screenToWorld2[0],\n        maxY = _this$screenToWorld2[1];\n\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      height: maxX - minX,\n      width: maxY - minY\n    };\n  };\n\n  TLDR.getCameraZoom = function getCameraZoom(zoom) {\n    return core.Utils.clamp(zoom, 0.1, 5);\n  };\n\n  TLDR.getCurrentCamera = function getCurrentCamera(data) {\n    return data.pageState.camera;\n  };\n\n  TLDR.getPage = function getPage(data) {\n    return data.page;\n  };\n\n  TLDR.getPageState = function getPageState(data) {\n    return data.pageState;\n  };\n\n  TLDR.getSelectedIds = function getSelectedIds(data) {\n    return data.pageState.selectedIds;\n  };\n\n  TLDR.getShapes = function getShapes(data) {\n    return Object.values(data.page.shapes);\n  };\n\n  TLDR.getCamera = function getCamera(data) {\n    return data.pageState.camera;\n  };\n\n  TLDR.getShape = function getShape(data, shapeId) {\n    return data.page.shapes[shapeId];\n  };\n\n  TLDR.getBounds = function getBounds(shape) {\n    return getShapeUtils(shape).getBounds(shape);\n  };\n\n  TLDR.getRotatedBounds = function getRotatedBounds(shape) {\n    return getShapeUtils(shape).getRotatedBounds(shape);\n  };\n\n  TLDR.getSelectedBounds = function getSelectedBounds(data) {\n    return core.Utils.getCommonBounds(this.getSelectedShapes(data).map(function (shape) {\n      return getShapeUtils(shape).getBounds(shape);\n    }));\n  };\n\n  TLDR.getParentId = function getParentId(data, id) {\n    var shape = data.page.shapes[id];\n    return shape.parentId;\n  };\n\n  TLDR.getPointedId = function getPointedId(data, id) {\n    var shape = data.page.shapes[id];\n    if (!shape) return id;\n    return shape.parentId === data.pageState.currentParentId || shape.parentId === data.page.id ? id : this.getPointedId(data, shape.parentId);\n  };\n\n  TLDR.getDrilledPointedId = function getDrilledPointedId(data, id) {\n    var shape = data.page.shapes[id];\n    var _data$pageState = data.pageState,\n        currentParentId = _data$pageState.currentParentId,\n        pointedId = _data$pageState.pointedId;\n    return shape.parentId === data.page.id || shape.parentId === pointedId || shape.parentId === currentParentId ? id : this.getDrilledPointedId(data, shape.parentId);\n  };\n\n  TLDR.getTopParentId = function getTopParentId(data, id) {\n    var shape = data.page.shapes[id];\n\n    if (shape.parentId === shape.id) {\n      throw Error(\"Shape has the same id as its parent! \" + shape.id);\n    }\n\n    return shape.parentId === data.page.id || shape.parentId === data.pageState.currentParentId ? id : this.getTopParentId(data, shape.parentId);\n  } // Get an array of a shape id and its descendant shapes' ids\n  ;\n\n  TLDR.getDocumentBranch = function getDocumentBranch(data, id) {\n    var _this = this;\n\n    var shape = data.page.shapes[id];\n    if (shape.children === undefined) return [id];\n    return [id].concat(shape.children.flatMap(function (childId) {\n      return _this.getDocumentBranch(data, childId);\n    }));\n  };\n\n  TLDR.getSelectedBranchSnapshot = function getSelectedBranchSnapshot(data, fn) {\n    var _this2 = this;\n\n    var page = this.getPage(data);\n    var copies = this.getSelectedIds(data).flatMap(function (id) {\n      return _this2.getDocumentBranch(data, id).map(function (id) {\n        return page.shapes[id];\n      });\n    }).filter(function (shape) {\n      return !shape.isLocked;\n    }).map(core.Utils.deepClone);\n\n    if (fn !== undefined) {\n      return copies.map(function (shape) {\n        return _extends({\n          id: shape.id\n        }, fn(shape));\n      });\n    }\n\n    return copies;\n  };\n\n  TLDR.getSelectedShapeSnapshot = function getSelectedShapeSnapshot(data, fn) {\n    var copies = this.getSelectedShapes(data).filter(function (shape) {\n      return !shape.isLocked;\n    }).map(core.Utils.deepClone);\n\n    if (fn !== undefined) {\n      return copies.map(function (shape) {\n        return _extends({\n          id: shape.id\n        }, fn(shape));\n      });\n    }\n\n    return copies;\n  } // For a given array of shape ids, an array of all other shapes that may be affected by a mutation to it.\n  // Use this to decide which shapes to clone as before / after for a command.\n  ;\n\n  TLDR.getAllEffectedShapeIds = function getAllEffectedShapeIds(data, ids) {\n    var visited = new Set(ids);\n    ids.forEach(function (id) {\n      var shape = data.page.shapes[id]; // Add descendant shapes\n\n      function collectDescendants(shape) {\n        if (shape.children === undefined) return;\n        shape.children.filter(function (childId) {\n          return !visited.has(childId);\n        }).forEach(function (childId) {\n          visited.add(childId);\n          collectDescendants(data.page.shapes[childId]);\n        });\n      }\n\n      collectDescendants(shape); // Add asecendant shapes\n\n      function collectAscendants(shape) {\n        var parentId = shape.parentId;\n        if (parentId === data.page.id) return;\n        if (visited.has(parentId)) return;\n        visited.add(parentId);\n        collectAscendants(data.page.shapes[parentId]);\n      }\n\n      collectAscendants(shape); // Add bindings that are to or from any of the visited shapes (this does not have to be recursive)\n\n      visited.forEach(function (id) {\n        Object.values(data.page.bindings).filter(function (binding) {\n          return binding.fromId === id || binding.toId === id;\n        }).forEach(function (binding) {\n          return visited.add(binding.fromId === id ? binding.toId : binding.fromId);\n        });\n      });\n    }); // Return the unique array of visited shapes\n\n    return Array.from(visited.values());\n  };\n\n  TLDR.recursivelyUpdateChildren = function recursivelyUpdateChildren(data, id, beforeShapes, afterShapes) {\n    var _this3 = this;\n\n    if (beforeShapes === void 0) {\n      beforeShapes = {};\n    }\n\n    if (afterShapes === void 0) {\n      afterShapes = {};\n    }\n\n    var shape = data.page.shapes[id];\n\n    if (shape.children !== undefined) {\n      var deltas = this.getShapeUtils(shape).updateChildren(shape, shape.children.map(function (childId) {\n        return data.page.shapes[childId];\n      }));\n\n      if (deltas) {\n        return deltas.reduce(function (cData, delta) {\n          var deltaShape = cData.page.shapes[delta.id];\n\n          if (!beforeShapes[deltaShape.id]) {\n            beforeShapes[deltaShape.id] = deltaShape;\n          }\n\n          cData.page.shapes[deltaShape.id] = _this3.getShapeUtils(deltaShape).mutate(deltaShape, delta);\n          afterShapes[deltaShape.id] = cData.page.shapes[deltaShape.id];\n\n          if (deltaShape.children !== undefined) {\n            _this3.recursivelyUpdateChildren(cData, deltaShape.id, beforeShapes, afterShapes);\n          }\n\n          return cData;\n        }, data);\n      }\n    }\n\n    return data;\n  };\n\n  TLDR.recursivelyUpdateParents = function recursivelyUpdateParents(data, id, beforeShapes, afterShapes) {\n    if (beforeShapes === void 0) {\n      beforeShapes = {};\n    }\n\n    if (afterShapes === void 0) {\n      afterShapes = {};\n    }\n\n    var shape = data.page.shapes[id];\n\n    if (shape.parentId !== data.page.id) {\n      var parent = data.page.shapes[shape.parentId];\n      var delta = this.getShapeUtils(shape).onChildrenChange(parent, parent.children.map(function (childId) {\n        return data.page.shapes[childId];\n      }));\n\n      if (delta) {\n        if (!beforeShapes[parent.id]) {\n          beforeShapes[parent.id] = parent;\n        }\n\n        data.page.shapes[parent.id] = this.getShapeUtils(parent).mutate(parent, delta);\n        afterShapes[parent.id] = data.page.shapes[parent.id];\n      }\n\n      if (parent.parentId !== data.page.id) {\n        return this.recursivelyUpdateParents(data, parent.parentId, beforeShapes, afterShapes);\n      }\n    }\n\n    return data;\n  };\n\n  TLDR.updateBindings = function updateBindings(data, id, beforeShapes, afterShapes) {\n    var _this4 = this;\n\n    if (beforeShapes === void 0) {\n      beforeShapes = {};\n    }\n\n    if (afterShapes === void 0) {\n      afterShapes = {};\n    }\n\n    return Object.values(data.page.bindings).filter(function (binding) {\n      return binding.fromId === id || binding.toId === id;\n    }).reduce(function (cData, binding) {\n      if (!beforeShapes[binding.id]) {\n        beforeShapes[binding.fromId] = core.Utils.deepClone(cData.page.shapes[binding.fromId]);\n      }\n\n      if (!beforeShapes[binding.toId]) {\n        beforeShapes[binding.toId] = core.Utils.deepClone(cData.page.shapes[binding.toId]);\n      }\n\n      _this4.onBindingChange(cData, cData.page.shapes[binding.fromId], binding, cData.page.shapes[binding.toId]);\n\n      afterShapes[binding.fromId] = core.Utils.deepClone(cData.page.shapes[binding.fromId]);\n      afterShapes[binding.toId] = core.Utils.deepClone(cData.page.shapes[binding.toId]);\n      return cData;\n    }, data);\n  };\n\n  TLDR.getChildIndexAbove = function getChildIndexAbove(data, id) {\n    var page = this.getPage(data);\n    var shape = page.shapes[id];\n    var siblings = Object.values(page.shapes).filter(function (_ref) {\n      var parentId = _ref.parentId;\n      return parentId === shape.parentId;\n    }).sort(function (a, b) {\n      return a.childIndex - b.childIndex;\n    });\n    var index = siblings.indexOf(shape);\n    var nextSibling = siblings[index + 1];\n    if (!nextSibling) return shape.childIndex + 1;\n    return (shape.childIndex + nextSibling.childIndex) / 2;\n  }\n  /* -------------------------------------------------- */\n\n  /*                      Mutations                     */\n\n  /* -------------------------------------------------- */\n  ;\n\n  TLDR.setSelectedIds = function setSelectedIds(data, ids) {\n    data.pageState.selectedIds = ids;\n  };\n\n  TLDR.deselectAll = function deselectAll(data) {\n    this.setSelectedIds(data, []);\n  };\n\n  TLDR.mutateShapes = function mutateShapes(data, ids, fn) {\n    var _this5 = this;\n\n    var beforeShapes = {};\n    var afterShapes = {};\n    ids.forEach(function (id, i) {\n      var shape = data.page.shapes[id];\n      var change = fn(shape, i);\n      beforeShapes[id] = Object.fromEntries(Object.keys(change).map(function (key) {\n        return [key, shape[key]];\n      }));\n      afterShapes[id] = change;\n      data.page.shapes[id] = _this5.getShapeUtils(shape).mutate(shape, change);\n    });\n    var dataWithChildrenChanges = ids.reduce(function (cData, id) {\n      return _this5.recursivelyUpdateChildren(cData, id, beforeShapes, afterShapes);\n    }, data);\n    var dataWithParentChanges = ids.reduce(function (cData, id) {\n      return _this5.recursivelyUpdateParents(cData, id, beforeShapes, afterShapes);\n    }, dataWithChildrenChanges);\n    var dataWithBindingChanges = ids.reduce(function (cData, id) {\n      return _this5.updateBindings(cData, id, beforeShapes, afterShapes);\n    }, dataWithParentChanges);\n    return {\n      before: beforeShapes,\n      after: afterShapes,\n      data: dataWithBindingChanges\n    };\n  };\n\n  TLDR.createShapes = function createShapes(data, shapes) {\n    var _this6 = this;\n\n    var page = this.getPage(data);\n    var shapeIds = shapes.map(function (shape) {\n      return shape.id;\n    }); // Update selected ids\n\n    this.setSelectedIds(data, shapeIds); // Restore deleted shapes\n\n    shapes.forEach(function (shape) {\n      var newShape = _extends({}, shape);\n\n      page.shapes[shape.id] = newShape;\n    }); // Update parents\n\n    shapes.forEach(function (shape) {\n      if (shape.parentId === data.page.id) return;\n      var parent = page.shapes[shape.parentId];\n\n      _this6.mutate(data, parent, {\n        children: parent.children.includes(shape.id) ? parent.children : [].concat(parent.children, [shape.id])\n      });\n    });\n  };\n\n  TLDR.onSessionComplete = function onSessionComplete(data, shape) {\n    var delta = getShapeUtils(shape).onSessionComplete(shape);\n\n    if (!delta) return shape;\n    return this.mutate(data, shape, delta);\n  };\n\n  TLDR.onChildrenChange = function onChildrenChange(data, shape) {\n    var delta = getShapeUtils(shape).onChildrenChange(shape, shape.children.map(function (id) {\n      return data.page.shapes[id];\n    }));\n\n    if (!delta) return shape;\n    return this.mutate(data, shape, delta);\n  };\n\n  TLDR.onBindingChange = function onBindingChange(data, shape, binding, otherShape) {\n    var delta = getShapeUtils(shape).onBindingChange(shape, binding, otherShape, getShapeUtils(otherShape).getBounds(otherShape));\n\n    if (!delta) return shape;\n    return this.mutate(data, shape, delta);\n  };\n\n  TLDR.transform = function transform(data, shape, bounds, info) {\n    return this.mutate(data, shape, getShapeUtils(shape).transform(shape, bounds, info));\n  };\n\n  TLDR.transformSingle = function transformSingle(data, shape, bounds, info) {\n    return this.mutate(data, shape, getShapeUtils(shape).transformSingle(shape, bounds, info));\n  };\n\n  TLDR.mutate = function mutate(data, shape, props) {\n    var next = getShapeUtils(shape).mutate(shape, props);\n\n    if ('children' in props) {\n      next = this.onChildrenChange(data, next);\n    }\n\n    data.page.shapes[next.id] = next;\n    return next;\n  }\n  /* -------------------------------------------------- */\n\n  /*                       Parents                      */\n\n  /* -------------------------------------------------- */\n  ;\n\n  TLDR.updateParents = function updateParents(data, changedShapeIds) {\n    if (changedShapeIds.length === 0) return;\n\n    var _this$getPage = this.getPage(data),\n        shapes = _this$getPage.shapes;\n\n    var parentToUpdateIds = Array.from(new Set(changedShapeIds.map(function (id) {\n      return shapes[id].parentId;\n    }).values())).filter(function (id) {\n      return id !== data.page.id;\n    });\n\n    for (var _iterator = _createForOfIteratorHelperLoose(parentToUpdateIds), _step; !(_step = _iterator()).done;) {\n      var parentId = _step.value;\n      var parent = shapes[parentId];\n\n      if (!parent.children) {\n        throw Error('A shape is parented to a shape without a children array.');\n      }\n\n      this.onChildrenChange(data, parent);\n    }\n\n    this.updateParents(data, parentToUpdateIds);\n  };\n\n  TLDR.getSelectedStyle = function getSelectedStyle(data) {\n    var page = data.page,\n        pageState = data.pageState,\n        currentStyle = data.appState.currentStyle;\n\n    if (pageState.selectedIds.length === 0) {\n      return currentStyle;\n    }\n\n    var shapeStyles = data.pageState.selectedIds.map(function (id) {\n      return page.shapes[id].style;\n    });\n    var commonStyle = {};\n    var overrides = new Set([]);\n\n    var _loop = function _loop() {\n      var shapeStyle = _step2.value;\n      Object.keys(currentStyle).forEach(function (key) {\n        if (overrides.has(key)) return;\n\n        if (commonStyle[key] === undefined) {\n          // @ts-ignore\n          commonStyle[key] = shapeStyle[key];\n        } else {\n          if (commonStyle[key] === shapeStyle[key]) return; // @ts-ignore\n\n          commonStyle[key] = currentStyle[key];\n          overrides.add(key);\n        }\n      });\n    };\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(shapeStyles), _step2; !(_step2 = _iterator2()).done;) {\n      _loop();\n    }\n\n    return commonStyle;\n  }\n  /* -------------------------------------------------- */\n\n  /*                      Bindings                      */\n\n  /* -------------------------------------------------- */\n  ;\n\n  TLDR.getBinding = function getBinding(data, id) {\n    return this.getPage(data).bindings[id];\n  };\n\n  TLDR.getBindings = function getBindings(data) {\n    var page = this.getPage(data);\n    return Object.values(page.bindings);\n  };\n\n  TLDR.getBindingsWithShapeIds = function getBindingsWithShapeIds(data, ids) {\n    return Array.from(new Set(this.getBindings(data).filter(function (binding) {\n      return ids.includes(binding.toId) || ids.includes(binding.fromId);\n    })).values());\n  };\n\n  TLDR.createBindings = function createBindings(data, bindings) {\n    var page = this.getPage(data);\n    bindings.forEach(function (binding) {\n      return page.bindings[binding.id] = binding;\n    });\n  };\n\n  TLDR.deleteBindings = function deleteBindings(data, ids) {\n    if (ids.length === 0) return;\n    var page = this.getPage(data);\n    ids.forEach(function (id) {\n      return delete page.bindings[id];\n    });\n  }\n  /* -------------------------------------------------- */\n\n  /*                     Assertions                     */\n\n  /* -------------------------------------------------- */\n  ;\n\n  TLDR.assertShapeHasProperty = function assertShapeHasProperty(shape, prop) {\n    if (shape[prop] === undefined) {\n      throw new Error();\n    }\n  };\n\n  return TLDR;\n}();\n\nfunction align(data, ids, type) {\n  var initialShapes = ids.map(function (id) {\n    return TLDR.getShape(data, id);\n  });\n  var boundsForShapes = initialShapes.map(function (shape) {\n    return {\n      id: shape.id,\n      point: [].concat(shape.point),\n      bounds: TLDR.getShapeUtils(shape).getBounds(shape)\n    };\n  });\n  var commonBounds = core.Utils.getCommonBounds(boundsForShapes.map(function (_ref) {\n    var bounds = _ref.bounds;\n    return bounds;\n  }));\n  var midX = commonBounds.minX + commonBounds.width / 2;\n  var midY = commonBounds.minY + commonBounds.height / 2;\n  var deltaMap = Object.fromEntries(boundsForShapes.map(function (_ref2) {\n    var _AlignType$CenterVert;\n\n    var id = _ref2.id,\n        point = _ref2.point,\n        bounds = _ref2.bounds;\n    return [id, {\n      prev: point,\n      next: (_AlignType$CenterVert = {}, _AlignType$CenterVert[exports.AlignType.CenterVertical] = [point[0], midY - bounds.height / 2], _AlignType$CenterVert[exports.AlignType.CenterHorizontal] = [midX - bounds.width / 2, point[1]], _AlignType$CenterVert[exports.AlignType.Top] = [point[0], commonBounds.minY], _AlignType$CenterVert[exports.AlignType.Bottom] = [point[0], commonBounds.maxY - bounds.height], _AlignType$CenterVert[exports.AlignType.Left] = [commonBounds.minX, point[1]], _AlignType$CenterVert[exports.AlignType.Right] = [commonBounds.maxX - bounds.width, point[1]], _AlignType$CenterVert)[type]\n    }];\n  }));\n\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    if (!deltaMap[shape.id]) return shape;\n    return {\n      point: deltaMap[shape.id].next\n    };\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'align_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      }\n    }\n  };\n}\n\nfunction distribute(data, ids, type) {\n  var initialShapes = ids.map(function (id) {\n    return data.page.shapes[id];\n  });\n  var deltaMap = Object.fromEntries(getDistributions(initialShapes, type).map(function (d) {\n    return [d.id, d];\n  }));\n\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    if (!deltaMap[shape.id]) return shape;\n    return {\n      point: deltaMap[shape.id].next\n    };\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'distribute_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      }\n    }\n  };\n}\n\nfunction getDistributions(initialShapes, type) {\n  var entries = initialShapes.map(function (shape) {\n    var utils = TLDR.getShapeUtils(shape);\n    return {\n      id: shape.id,\n      point: [].concat(shape.point),\n      bounds: utils.getBounds(shape),\n      center: utils.getCenter(shape)\n    };\n  });\n  var len = entries.length;\n  var commonBounds = core.Utils.getCommonBounds(entries.map(function (_ref) {\n    var bounds = _ref.bounds;\n    return bounds;\n  }));\n  var results = [];\n\n  switch (type) {\n    case exports.DistributeType.Horizontal:\n      {\n        var span = entries.reduce(function (a, c) {\n          return a + c.bounds.width;\n        }, 0);\n\n        if (span > commonBounds.width) {\n          var left = entries.sort(function (a, b) {\n            return a.bounds.minX - b.bounds.minX;\n          })[0];\n          var right = entries.sort(function (a, b) {\n            return b.bounds.maxX - a.bounds.maxX;\n          })[0];\n          var entriesToMove = entries.filter(function (a) {\n            return a !== left && a !== right;\n          }).sort(function (a, b) {\n            return a.center[0] - b.center[0];\n          });\n          var step = (right.center[0] - left.center[0]) / (len - 1);\n          var x = left.center[0] + step;\n          entriesToMove.forEach(function (_ref2, i) {\n            var id = _ref2.id,\n                point = _ref2.point,\n                bounds = _ref2.bounds;\n            results.push({\n              id: id,\n              prev: point,\n              next: [x + step * i - bounds.width / 2, bounds.minY]\n            });\n          });\n        } else {\n          var _entriesToMove = entries.sort(function (a, b) {\n            return a.center[0] - b.center[0];\n          });\n\n          var _x = commonBounds.minX;\n\n          var _step = (commonBounds.width - span) / (len - 1);\n\n          _entriesToMove.forEach(function (_ref3, i) {\n            var id = _ref3.id,\n                point = _ref3.point,\n                bounds = _ref3.bounds;\n            results.push({\n              id: id,\n              prev: point,\n              next: [_x, bounds.minY]\n            });\n            _x += bounds.width + _step;\n          });\n        }\n\n        break;\n      }\n\n    case exports.DistributeType.Vertical:\n      {\n        var _span = entries.reduce(function (a, c) {\n          return a + c.bounds.height;\n        }, 0);\n\n        if (_span > commonBounds.height) {\n          var top = entries.sort(function (a, b) {\n            return a.bounds.minY - b.bounds.minY;\n          })[0];\n          var bottom = entries.sort(function (a, b) {\n            return b.bounds.maxY - a.bounds.maxY;\n          })[0];\n\n          var _entriesToMove2 = entries.filter(function (a) {\n            return a !== top && a !== bottom;\n          }).sort(function (a, b) {\n            return a.center[1] - b.center[1];\n          });\n\n          var _step2 = (bottom.center[1] - top.center[1]) / (len - 1);\n\n          var y = top.center[1] + _step2;\n\n          _entriesToMove2.forEach(function (_ref4, i) {\n            var id = _ref4.id,\n                point = _ref4.point,\n                bounds = _ref4.bounds;\n            results.push({\n              id: id,\n              prev: point,\n              next: [bounds.minX, y + _step2 * i - bounds.height / 2]\n            });\n          });\n        } else {\n          var _entriesToMove3 = entries.sort(function (a, b) {\n            return a.center[1] - b.center[1];\n          });\n\n          var _y = commonBounds.minY;\n\n          var _step3 = (commonBounds.height - _span) / (len - 1);\n\n          _entriesToMove3.forEach(function (_ref5, i) {\n            var id = _ref5.id,\n                point = _ref5.point,\n                bounds = _ref5.bounds;\n            results.push({\n              id: id,\n              prev: point,\n              next: [bounds.minX, _y]\n            });\n            _y += bounds.height + _step3;\n          });\n        }\n\n        break;\n      }\n  }\n\n  return results;\n}\n\nfunction style(data, ids, changes) {\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    return {\n      style: _extends({}, shape.style, changes)\n    };\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'style_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      },\n      appState: {\n        currentStyle: _extends({}, data.appState.currentStyle)\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      },\n      appState: {\n        currentStyle: _extends({}, data.appState.currentStyle, changes)\n      }\n    }\n  };\n}\n\nfunction duplicate(data, ids) {\n  var delta = core.Vec.div([16, 16], data.pageState.camera.zoom);\n  var after = Object.fromEntries(TLDR.getSelectedIds(data).map(function (id) {\n    return data.page.shapes[id];\n  }).map(function (shape) {\n    var id = core.Utils.uniqueId();\n    return [id, _extends({}, core.Utils.deepClone(shape), {\n      id: id,\n      point: core.Vec.add(shape.point, delta)\n    })];\n  }));\n  var before = Object.fromEntries(Object.keys(after).map(function (id) {\n    return [id, undefined];\n  }));\n  return {\n    id: 'duplicate',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      },\n      pageState: _extends({}, data.pageState, {\n        selectedIds: ids\n      })\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      },\n      pageState: _extends({}, data.pageState, {\n        selectedIds: Object.keys(after)\n      })\n    }\n  };\n}\n\nfunction move(data, ids, type) {\n  var _result, _result2;\n\n  // Get the unique parent ids for the selected elements\n  var parentIds = new Set(ids.map(function (id) {\n    return data.page.shapes[id].parentId;\n  }));\n  var result = {\n    before: {},\n    after: {}\n  };\n  var startIndex;\n  var startChildIndex;\n  var step; // Collect shapes with common parents into a table under their parent id\n\n  Array.from(parentIds.values()).forEach(function (parentId) {\n    var sortedChildren = parentId === data.page.id ? Object.values(data.page.shapes).sort(function (a, b) {\n      return a.childIndex - b.childIndex;\n    }) : data.page.shapes[parentId].children.map(function (childId) {\n      return data.page.shapes[childId];\n    }).sort(function (a, b) {\n      return a.childIndex - b.childIndex;\n    });\n    var sortedChildIds = sortedChildren.map(function (shape) {\n      return shape.id;\n    });\n    var sortedIndicesToMove = ids.filter(function (id) {\n      return sortedChildIds.includes(id);\n    }).map(function (id) {\n      return sortedChildIds.indexOf(id);\n    }).sort(function (a, b) {\n      return a - b;\n    });\n    if (sortedIndicesToMove.length === sortedChildIds.length) return;\n\n    switch (type) {\n      case exports.MoveType.ToBack:\n        {\n          //               a       b  c\n          // Initial   1   2    3  4  5  6  7\n          // Final   .25  .5  .75  1  3  6  7\n          //           a   b    c\n          // Find the lowest \"open\" index\n          for (var i = 0; i < sortedChildIds.length; i++) {\n            if (sortedIndicesToMove.includes(i)) continue;\n            startIndex = i;\n            break;\n          } // Find the lowest child index that isn't in sortedIndicesToMove\n\n\n          startChildIndex = sortedChildren[startIndex].childIndex; // Find the step for each additional child\n\n          step = startChildIndex / (sortedIndicesToMove.length + 1); // Get the results of moving the selected shapes below the first open index's shape\n\n          result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function (i) {\n            return sortedChildren[i].id;\n          }).reverse(), function (_shape, i) {\n            return {\n              childIndex: startChildIndex - (i + 1) * step\n            };\n          });\n          break;\n        }\n\n      case exports.MoveType.ToFront:\n        {\n          //              a     b  c\n          // Initial   1  2  3  4  5  6   7\n          // Final     1  3  6  7  8  9  10\n          //                       a  b   c\n          // Find the highest \"open\" index\n          for (var _i = sortedChildIds.length - 1; _i >= 0; _i--) {\n            if (sortedIndicesToMove.includes(_i)) continue;\n            startIndex = _i;\n            break;\n          } // Find the lowest child index that isn't in sortedIndicesToMove\n\n\n          startChildIndex = sortedChildren[startIndex].childIndex; // Find the step for each additional child\n\n          step = 1; // Get the results of moving the selected shapes below the first open index's shape\n\n          result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function (i) {\n            return sortedChildren[i].id;\n          }), function (_shape, i) {\n            return {\n              childIndex: startChildIndex + (i + 1)\n            };\n          });\n          break;\n        }\n\n      case exports.MoveType.Backward:\n        {\n          //               a           b  c\n          // Initial    1  2     3     4  5  6  7\n          // Final     .5  1  1.66  2.33  3  6  7\n          //           a         b     c\n          var indexMap = {}; // Starting from the top...\n\n          for (var _i2 = sortedChildIds.length - 1; _i2 >= 0; _i2--) {\n            // If we found a moving index...\n            if (sortedIndicesToMove.includes(_i2)) {\n              for (var j = _i2; j >= 0; j--) {\n                // iterate downward until we find an open spot\n                if (!sortedIndicesToMove.includes(j)) {\n                  // i = the index of the first closed spot\n                  // j = the index of the first open spot\n                  startChildIndex = j === 0 ? sortedChildren[j].childIndex / 2 : sortedChildren[j - 1].childIndex;\n\n                  var _step = (sortedChildren[j].childIndex - startChildIndex) / (_i2 - j + 1);\n\n                  for (var k = 0; k < _i2 - j; k++) {\n                    indexMap[sortedChildren[j + k + 1].id] = startChildIndex + _step * (k + 1);\n                  }\n\n                  break;\n                }\n              }\n            }\n          }\n\n          if (Object.values(indexMap).length > 0) {\n            // Get the results of moving the selected shapes below the first open index's shape\n            result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function (i) {\n              return sortedChildren[i].id;\n            }), function (shape) {\n              return {\n                childIndex: indexMap[shape.id]\n              };\n            });\n          }\n\n          break;\n        }\n\n      case exports.MoveType.Forward:\n        {\n          //             a     b c\n          // Initial   1 2   3 4 5 6 7\n          // Final     1 3 3.5 6 7 8 9\n          //                 a     b c\n          var _indexMap = {}; // Starting from the top...\n\n          for (var _i3 = 0; _i3 < sortedChildIds.length; _i3++) {\n            // If we found a moving index...\n            if (sortedIndicesToMove.includes(_i3)) {\n              // Search for the first open spot above this one\n              for (var _j = _i3; _j < sortedChildIds.length; _j++) {\n                if (!sortedIndicesToMove.includes(_j)) {\n                  // i = the low index of the first closed spot\n                  // j = the high index of the first open spot\n                  startChildIndex = sortedChildren[_j].childIndex;\n\n                  var _step2 = _j === sortedChildIds.length - 1 ? 1 : (sortedChildren[_j + 1].childIndex - startChildIndex) / (_j - _i3 + 1);\n\n                  for (var _k = 0; _k < _j - _i3; _k++) {\n                    _indexMap[sortedChildren[_i3 + _k].id] = startChildIndex + _step2 * (_k + 1);\n                  }\n\n                  break;\n                }\n              }\n            }\n          }\n\n          if (Object.values(_indexMap).length > 0) {\n            // Get the results of moving the selected shapes below the first open index's shape\n            result = TLDR.mutateShapes(data, sortedIndicesToMove.map(function (i) {\n              return sortedChildren[i].id;\n            }), function (shape) {\n              return {\n                childIndex: _indexMap[shape.id]\n              };\n            });\n          }\n\n          break;\n        }\n    }\n  });\n  return {\n    id: 'move_shapes',\n    before: {\n      page: _extends({}, data.page, {\n        shapes: ((_result = result) == null ? void 0 : _result.before) || {}\n      })\n    },\n    after: {\n      page: _extends({}, data.page, {\n        shapes: ((_result2 = result) == null ? void 0 : _result2.after) || {}\n      })\n    }\n  };\n}\n\nfunction translate(data, ids, delta) {\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    return {\n      point: core.Vec.add(shape.point, delta)\n    };\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'translate_shapes',\n    before: {\n      page: _extends({}, data.page, {\n        shapes: _extends({}, before)\n      })\n    },\n    after: {\n      page: _extends({}, data.page, {\n        shapes: _extends({}, after)\n      })\n    }\n  };\n}\n\nfunction toggle(data, ids, prop) {\n  var initialShapes = ids.map(function (id) {\n    return data.page.shapes[id];\n  });\n  var isAllToggled = initialShapes.every(function (shape) {\n    return shape[prop];\n  });\n\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, TLDR.getSelectedIds(data), function () {\n    var _ref;\n\n    return _ref = {}, _ref[prop] = !isAllToggled, _ref;\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'toggle_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      }\n    }\n  };\n}\n\nfunction deleteShapes(data, ids) {\n  return {\n    id: 'toggle_shapes',\n    before: {\n      page: {\n        shapes: Object.fromEntries(ids.map(function (id) {\n          return [id, data.page.shapes[id]];\n        }))\n      },\n      pageState: {\n        selectedIds: [].concat(data.pageState.selectedIds)\n      }\n    },\n    after: {\n      page: {\n        shapes: Object.fromEntries(ids.map(function (id) {\n          return [id, undefined];\n        }))\n      },\n      pageState: {\n        selectedIds: []\n      }\n    }\n  };\n}\n\nvar PI2 = Math.PI * 2;\nfunction rotate(data, ids, delta) {\n  if (delta === void 0) {\n    delta = -PI2 / 4;\n  }\n\n  var initialShapes = ids.map(function (id) {\n    return data.page.shapes[id];\n  });\n  var boundsForShapes = initialShapes.map(function (shape) {\n    var utils = TLDR.getShapeUtils(shape);\n    return {\n      id: shape.id,\n      point: [].concat(shape.point),\n      bounds: utils.getBounds(shape),\n      center: utils.getCenter(shape),\n      rotation: shape.rotation\n    };\n  });\n  var commonBounds = core.Utils.getCommonBounds(boundsForShapes.map(function (_ref) {\n    var bounds = _ref.bounds;\n    return bounds;\n  }));\n  var commonBoundsCenter = core.Utils.getBoundsCenter(commonBounds);\n  var rotations = Object.fromEntries(boundsForShapes.map(function (_ref2) {\n    var id = _ref2.id,\n        point = _ref2.point,\n        center = _ref2.center,\n        rotation = _ref2.rotation;\n    var offset = core.Vec.sub(center, point);\n    var nextPoint = core.Vec.sub(core.Vec.rotWith(center, commonBoundsCenter, -(PI2 / 4)), offset);\n    var nextRotation = (PI2 + ((rotation || 0) + delta)) % PI2;\n    return [id, {\n      point: nextPoint,\n      rotation: nextRotation\n    }];\n  }));\n  var prevBoundsRotation = data.pageState.boundsRotation;\n  var nextBoundsRotation = (PI2 + ((data.pageState.boundsRotation || 0) + delta)) % PI2;\n\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    return rotations[shape.id];\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'toggle_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      },\n      pageState: {\n        boundsRotation: prevBoundsRotation\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      },\n      pageState: {\n        boundsRotation: nextBoundsRotation\n      }\n    }\n  };\n}\n\nfunction stretch(data, ids, type) {\n  var initialShapes = ids.map(function (id) {\n    return data.page.shapes[id];\n  });\n  var boundsForShapes = initialShapes.map(function (shape) {\n    return TLDR.getBounds(shape);\n  });\n  var commonBounds = core.Utils.getCommonBounds(boundsForShapes);\n\n  var _TLDR$mutateShapes = TLDR.mutateShapes(data, ids, function (shape) {\n    var bounds = TLDR.getBounds(shape);\n\n    switch (type) {\n      case exports.StretchType.Horizontal:\n        {\n          var newBounds = _extends({}, bounds, {\n            minX: commonBounds.minX,\n            maxX: commonBounds.maxX,\n            width: commonBounds.width\n          });\n\n          return TLDR.getShapeUtils(shape).transformSingle(shape, newBounds, {\n            type: core.TLBoundsCorner.TopLeft,\n            scaleX: newBounds.width / bounds.width,\n            scaleY: 1,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5]\n          });\n        }\n\n      case exports.StretchType.Vertical:\n        {\n          var _newBounds = _extends({}, bounds, {\n            minY: commonBounds.minY,\n            maxY: commonBounds.maxY,\n            height: commonBounds.height\n          });\n\n          return TLDR.getShapeUtils(shape).transformSingle(shape, _newBounds, {\n            type: core.TLBoundsCorner.TopLeft,\n            scaleX: 1,\n            scaleY: _newBounds.height / bounds.height,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5]\n          });\n        }\n    }\n  }),\n      before = _TLDR$mutateShapes.before,\n      after = _TLDR$mutateShapes.after;\n\n  return {\n    id: 'stretch_shapes',\n    before: {\n      page: {\n        shapes: _extends({}, before)\n      }\n    },\n    after: {\n      page: {\n        shapes: _extends({}, after)\n      }\n    }\n  };\n}\n\nfunction create(data, shapes) {\n  return {\n    id: 'toggle_shapes',\n    before: {\n      page: {\n        shapes: Object.fromEntries(shapes.map(function (shape) {\n          return [shape.id, undefined];\n        }))\n      }\n    },\n    after: {\n      page: {\n        shapes: Object.fromEntries(shapes.map(function (shape) {\n          return [shape.id, shape];\n        }))\n      }\n    }\n  };\n}\n\nvar BrushSession = /*#__PURE__*/function () {\n  function BrushSession(_data, _point) {\n    var _this = this;\n\n    this.id = 'brush';\n    this.origin = void 0;\n    this.snapshot = void 0;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, containMode) {\n      if (containMode === void 0) {\n        containMode = false;\n      }\n\n      var snapshot = _this.snapshot,\n          origin = _this.origin; // Create a bounding box between the origin and the new point\n\n      var brush = core.Utils.getBoundsFromPoints([origin, point]);\n      core.brushUpdater.set(brush); // Find ids of brushed shapes\n\n      var hits = new Set();\n      var selectedIds = new Set(snapshot.selectedIds);\n      snapshot.shapesToTest.forEach(function (_ref) {\n        var id = _ref.id,\n            util = _ref.util,\n            selectId = _ref.selectId;\n        if (selectedIds.has(id)) return;\n        var shape = data.page.shapes[id];\n\n        if (!hits.has(selectId)) {\n          if (containMode ? core.Utils.boundsContain(brush, util.getBounds(shape)) : util.hitTestBounds(shape, brush)) {\n            hits.add(selectId); // When brushing a shape, select its top group parent.\n\n            if (!selectedIds.has(selectId)) {\n              selectedIds.add(selectId);\n            }\n          } else if (selectedIds.has(selectId)) {\n            selectedIds[\"delete\"](selectId);\n          }\n        }\n      });\n\n      if (selectedIds.size === data.pageState.selectedIds.length && data.pageState.selectedIds.every(function (id) {\n        return selectedIds.has(id);\n      })) {\n        return data;\n      }\n\n      return _extends({}, data, {\n        pageState: _extends({}, data.pageState, {\n          selectedIds: Array.from(selectedIds.values())\n        })\n      });\n    };\n\n    this.origin = core.Vec.round(_point);\n    this.snapshot = getBrushSnapshot(_data);\n  }\n\n  var _proto = BrushSession.prototype;\n\n  _proto.cancel = function cancel(data) {\n    return _extends({}, data, {\n      pageState: _extends({}, data.pageState, {\n        selectedIds: this.snapshot.selectedIds\n      })\n    });\n  };\n\n  _proto.complete = function complete(data) {\n    return _extends({}, data, {\n      pageState: _extends({}, data.pageState, {\n        selectedIds: [].concat(data.pageState.selectedIds)\n      })\n    });\n  };\n\n  return BrushSession;\n}();\n/**\r\n * Get a snapshot of the current selected ids, for each shape that is\r\n * not already selected, the shape's id and a test to see whether the\r\n * brush will intersect that shape. For tests, start broad -> fine.\r\n */\n\nfunction getBrushSnapshot(data) {\n  var selectedIds = [].concat(data.pageState.selectedIds);\n  var shapesToTest = TLDR.getShapes(data).filter(function (shape) {\n    return !(shape.isHidden || shape.children !== undefined || selectedIds.includes(shape.id) || selectedIds.includes(shape.parentId));\n  }).map(function (shape) {\n    return {\n      id: shape.id,\n      util: getShapeUtils(shape),\n      bounds: getShapeUtils(shape).getBounds(shape),\n      selectId: TLDR.getTopParentId(data, shape.id)\n    };\n  });\n  return {\n    selectedIds: selectedIds,\n    shapesToTest: shapesToTest\n  };\n}\n\nvar TranslateSession = /*#__PURE__*/function () {\n  function TranslateSession(_data, _point) {\n    var _this = this;\n\n    this.id = 'translate';\n    this.delta = [0, 0];\n    this.prev = [0, 0];\n    this.origin = void 0;\n    this.snapshot = void 0;\n    this.isCloning = false;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, isAligned, isCloning) {\n      if (isAligned === void 0) {\n        isAligned = false;\n      }\n\n      if (isCloning === void 0) {\n        isCloning = false;\n      }\n\n      var _this$snapshot = _this.snapshot,\n          clones = _this$snapshot.clones,\n          initialShapes = _this$snapshot.initialShapes;\n\n      var next = _extends({}, data, {\n        page: _extends({}, data.page),\n        shapes: _extends({}, data.page.shapes),\n        pageState: _extends({}, data.pageState)\n      });\n\n      var delta = core.Vec.sub(point, _this.origin);\n\n      if (isAligned) {\n        if (Math.abs(delta[0]) < Math.abs(delta[1])) {\n          delta[0] = 0;\n        } else {\n          delta[1] = 0;\n        }\n      }\n\n      var trueDelta = core.Vec.sub(delta, _this.prev);\n      _this.delta = delta;\n      _this.prev = delta; // If cloning...\n\n      if (isCloning) {\n        // Not Cloning -> Cloning\n        if (!_this.isCloning) {\n          _this.isCloning = true; // Move original shapes back to start\n\n          next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(initialShapes.map(function (shape) {\n            return [shape.id, _extends({}, next.page.shapes[shape.id], {\n              point: shape.point\n            })];\n          })));\n          next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(clones.map(function (clone) {\n            return [clone.id, _extends({}, clone, {\n              point: core.Vec.add(clone.point, delta)\n            })];\n          })));\n          next.pageState.selectedIds = clones.map(function (c) {\n            return c.id;\n          });\n        } // Either way, move the clones\n\n\n        next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(clones.map(function (clone) {\n          return [clone.id, _extends({}, clone, {\n            point: core.Vec.add(next.page.shapes[clone.id].point, trueDelta)\n          })];\n        })));\n        return next;\n      } // If not cloning...\n      // Cloning -> Not Cloning\n\n\n      if (_this.isCloning) {\n        _this.isCloning = false; // Delete the clones\n\n        clones.forEach(function (clone) {\n          return delete next.page.shapes[clone.id];\n        }); // Move the original shapes back to the cursor position\n\n        next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(initialShapes.map(function (shape) {\n          return [shape.id, _extends({}, next.page.shapes[shape.id], {\n            point: core.Vec.add(shape.point, delta)\n          })];\n        }))); // Set selected ids\n\n        next.pageState.selectedIds = initialShapes.map(function (c) {\n          return c.id;\n        });\n      } // Move the shapes by the delta\n\n\n      next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(initialShapes.map(function (shape) {\n        return [shape.id, _extends({}, next.page.shapes[shape.id], {\n          point: core.Vec.add(next.page.shapes[shape.id].point, trueDelta)\n        })];\n      })));\n      return next;\n    };\n\n    this.cancel = function (data) {\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          // @ts-ignore - We need to set deleted shapes to undefined in order to correctly deep merge them away.\n          shapes: _extends({}, data.page.shapes, Object.fromEntries(_this.snapshot.clones.map(function (clone) {\n            return [clone.id, undefined];\n          })), Object.fromEntries(_this.snapshot.initialShapes.map(function (shape) {\n            return [shape.id, _extends({}, data.page.shapes[shape.id], {\n              point: shape.point\n            })];\n          })))\n        }),\n        pageState: _extends({}, data.pageState, {\n          selectedIds: _this.snapshot.selectedIds\n        })\n      });\n    };\n\n    this.origin = _point;\n    this.snapshot = getTranslateSnapshot(_data);\n  }\n\n  var _proto = TranslateSession.prototype;\n\n  _proto.complete = function complete(data) {\n    return {\n      id: 'translate',\n      before: _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, Object.fromEntries(this.snapshot.clones.map(function (clone) {\n            return [clone.id, undefined];\n          })), Object.fromEntries(this.snapshot.initialShapes.map(function (shape) {\n            return [shape.id, {\n              point: shape.point\n            }];\n          })))\n        }),\n        pageState: _extends({}, data.pageState, {\n          selectedIds: this.snapshot.selectedIds\n        })\n      }),\n      after: _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, Object.fromEntries(this.snapshot.clones.map(function (clone) {\n            return [clone.id, data.page.shapes[clone.id]];\n          })), Object.fromEntries(this.snapshot.initialShapes.map(function (shape) {\n            return [shape.id, {\n              point: data.page.shapes[shape.id].point\n            }];\n          })))\n        }),\n        pageState: _extends({}, data.pageState, {\n          selectedIds: [].concat(data.pageState.selectedIds)\n        })\n      })\n    };\n  };\n\n  return TranslateSession;\n}(); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction getTranslateSnapshot(data) {\n  var selectedShapes = TLDR.getSelectedShapeSnapshot(data);\n  var hasUnlockedShapes = selectedShapes.length > 0;\n  var initialParents = Array.from(new Set(selectedShapes.map(function (s) {\n    return s.parentId;\n  })).values()).filter(function (id) {\n    return id !== data.page.id;\n  }).map(function (id) {\n    var shape = TLDR.getShape(data, id);\n    return {\n      id: id,\n      children: shape.children\n    };\n  });\n  return {\n    selectedIds: TLDR.getSelectedIds(data),\n    hasUnlockedShapes: hasUnlockedShapes,\n    initialParents: initialParents,\n    initialShapes: selectedShapes.map(function (_ref) {\n      var id = _ref.id,\n          point = _ref.point,\n          parentId = _ref.parentId;\n      return {\n        id: id,\n        point: point,\n        parentId: parentId\n      };\n    }),\n    clones: selectedShapes.filter(function (shape) {\n      return shape.children === undefined;\n    }).flatMap(function (shape) {\n      var clone = _extends({}, shape, {\n        id: core.Utils.uniqueId(),\n        parentId: shape.parentId,\n        childIndex: TLDR.getChildIndexAbove(data, shape.id)\n      });\n\n      return clone;\n    })\n  };\n}\n\nvar TransformSingleSession = /*#__PURE__*/function () {\n  function TransformSingleSession(_data, _point, _transformType, commandId) {\n    var _this = this;\n\n    if (_transformType === void 0) {\n      _transformType = core.TLBoundsCorner.BottomRight;\n    }\n\n    if (commandId === void 0) {\n      commandId = 'transform_single';\n    }\n\n    this.id = 'transform_single';\n    this.commandId = void 0;\n    this.transformType = void 0;\n    this.origin = void 0;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.snapshot = void 0;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, isAspectRatioLocked) {\n      var _extends2;\n\n      if (isAspectRatioLocked === void 0) {\n        isAspectRatioLocked = false;\n      }\n\n      var transformType = _this.transformType;\n      var _this$snapshot = _this.snapshot,\n          initialShapeBounds = _this$snapshot.initialShapeBounds,\n          initialShape = _this$snapshot.initialShape,\n          id = _this$snapshot.id;\n      var shape = data.page.shapes[id];\n      var utils = TLDR.getShapeUtils(shape);\n      var newBounds = core.Utils.getTransformedBoundingBox(initialShapeBounds, transformType, core.Vec.sub(point, _this.origin), shape.rotation, isAspectRatioLocked || shape.isAspectRatioLocked || utils.isAspectRatioLocked);\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, (_extends2 = {}, _extends2[shape.id] = _extends({}, initialShape, TLDR.getShapeUtils(shape).transformSingle(shape, newBounds, {\n            initialShape: initialShape,\n            type: _this.transformType,\n            scaleX: newBounds.scaleX,\n            scaleY: newBounds.scaleY,\n            transformOrigin: [0.5, 0.5]\n          })), _extends2))\n        })\n      });\n    };\n\n    this.cancel = function (data) {\n      var _extends3;\n\n      var _this$snapshot2 = _this.snapshot,\n          id = _this$snapshot2.id,\n          initialShape = _this$snapshot2.initialShape;\n      data.page.shapes[id] = initialShape;\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, (_extends3 = {}, _extends3[id] = initialShape, _extends3))\n        })\n      });\n    };\n\n    this.origin = _point;\n    this.transformType = _transformType;\n    this.snapshot = getTransformSingleSnapshot(_data, _transformType);\n    this.commandId = commandId;\n  }\n\n  var _proto = TransformSingleSession.prototype;\n\n  _proto.complete = function complete(data) {\n    var _shapes, _shapes2;\n\n    if (!this.snapshot.hasUnlockedShape) return data;\n    return {\n      id: this.commandId,\n      before: {\n        page: {\n          shapes: (_shapes = {}, _shapes[this.snapshot.id] = this.snapshot.initialShape, _shapes)\n        }\n      },\n      after: {\n        page: {\n          shapes: (_shapes2 = {}, _shapes2[this.snapshot.id] = TLDR.onSessionComplete(data, data.page.shapes[this.snapshot.id]), _shapes2)\n        }\n      }\n    };\n  };\n\n  return TransformSingleSession;\n}();\nfunction getTransformSingleSnapshot(data, transformType) {\n  var shape = data.page.shapes[data.pageState.selectedIds[0]];\n\n  if (!shape) {\n    throw Error('You must have one shape selected.');\n  }\n\n  var bounds = TLDR.getBounds(shape);\n  return {\n    id: shape.id,\n    hasUnlockedShape: !shape.isLocked,\n    type: transformType,\n    initialShape: core.Utils.deepClone(shape),\n    initialShapeBounds: bounds\n  };\n}\n\nvar TransformSession = /*#__PURE__*/function () {\n  function TransformSession(_data, _point, _transformType) {\n    var _this = this;\n\n    if (_transformType === void 0) {\n      _transformType = core.TLBoundsCorner.BottomRight;\n    }\n\n    this.id = 'transform';\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.transformType = void 0;\n    this.origin = void 0;\n    this.snapshot = void 0;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, isAspectRatioLocked, _altKey) {\n      if (isAspectRatioLocked === void 0) {\n        isAspectRatioLocked = false;\n      }\n\n      var transformType = _this.transformType,\n          _this$snapshot = _this.snapshot,\n          shapeBounds = _this$snapshot.shapeBounds,\n          initialBounds = _this$snapshot.initialBounds,\n          isAllAspectRatioLocked = _this$snapshot.isAllAspectRatioLocked;\n\n      var next = _extends({}, data, {\n        page: _extends({}, data.page)\n      });\n\n      var shapes = next.page.shapes;\n      var newBoundingBox = core.Utils.getTransformedBoundingBox(initialBounds, transformType, core.Vec.vec(_this.origin, point), data.pageState.boundsRotation, isAspectRatioLocked || isAllAspectRatioLocked); // Now work backward to calculate a new bounding box for each of the shapes.\n\n      _this.scaleX = newBoundingBox.scaleX;\n      _this.scaleY = newBoundingBox.scaleY;\n      next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(Object.entries(shapeBounds).map(function (_ref) {\n        var id = _ref[0],\n            _ref$ = _ref[1],\n            initialShape = _ref$.initialShape,\n            initialShapeBounds = _ref$.initialShapeBounds,\n            transformOrigin = _ref$.transformOrigin;\n        var newShapeBounds = core.Utils.getRelativeTransformedBoundingBox(newBoundingBox, initialBounds, initialShapeBounds, _this.scaleX < 0, _this.scaleY < 0);\n        var shape = shapes[id];\n        return [id, _extends({}, initialShape, TLDR.transform(next, shape, newShapeBounds, {\n          type: _this.transformType,\n          initialShape: initialShape,\n          scaleX: _this.scaleX,\n          scaleY: _this.scaleY,\n          transformOrigin: transformOrigin\n        }))];\n      })));\n      return next;\n    };\n\n    this.cancel = function (data) {\n      var shapeBounds = _this.snapshot.shapeBounds;\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, Object.fromEntries(Object.entries(shapeBounds).map(function (_ref2) {\n            var id = _ref2[0],\n                initialShape = _ref2[1].initialShape;\n            return [id, initialShape];\n          })))\n        })\n      });\n    };\n\n    this.origin = _point;\n    this.transformType = _transformType;\n    this.snapshot = getTransformSnapshot(_data, _transformType);\n  }\n\n  var _proto = TransformSession.prototype;\n\n  _proto.complete = function complete(data) {\n    var _this$snapshot2 = this.snapshot,\n        hasUnlockedShapes = _this$snapshot2.hasUnlockedShapes,\n        shapeBounds = _this$snapshot2.shapeBounds;\n    if (!hasUnlockedShapes) return data;\n    return {\n      id: 'transform',\n      before: {\n        page: {\n          shapes: Object.fromEntries(Object.entries(shapeBounds).map(function (_ref3) {\n            var id = _ref3[0],\n                initialShape = _ref3[1].initialShape;\n            return [id, initialShape];\n          }))\n        }\n      },\n      after: {\n        page: {\n          shapes: Object.fromEntries(this.snapshot.initialShapes.map(function (shape) {\n            return [shape.id, TLDR.onSessionComplete(data, data.page.shapes[shape.id])];\n          }))\n        }\n      }\n    };\n  };\n\n  return TransformSession;\n}();\nfunction getTransformSnapshot(data, transformType) {\n  var initialShapes = TLDR.getSelectedBranchSnapshot(data);\n  var hasUnlockedShapes = initialShapes.length > 0;\n  var isAllAspectRatioLocked = initialShapes.every(function (shape) {\n    return shape.isAspectRatioLocked || TLDR.getShapeUtils(shape).isAspectRatioLocked;\n  });\n  var shapesBounds = Object.fromEntries(initialShapes.map(function (shape) {\n    return [shape.id, TLDR.getBounds(shape)];\n  }));\n  var boundsArr = Object.values(shapesBounds);\n  var commonBounds = core.Utils.getCommonBounds(boundsArr);\n  var initialInnerBounds = core.Utils.getBoundsFromPoints(boundsArr.map(core.Utils.getBoundsCenter)); // Return a mapping of shapes to bounds together with the relative\n  // positions of the shape's bounds within the common bounds shape.\n\n  return {\n    type: transformType,\n    hasUnlockedShapes: hasUnlockedShapes,\n    isAllAspectRatioLocked: isAllAspectRatioLocked,\n    initialShapes: initialShapes,\n    initialBounds: commonBounds,\n    shapeBounds: Object.fromEntries(initialShapes.map(function (shape) {\n      var initialShapeBounds = shapesBounds[shape.id];\n      var ic = core.Utils.getBoundsCenter(initialShapeBounds);\n      var ix = (ic[0] - initialInnerBounds.minX) / initialInnerBounds.width;\n      var iy = (ic[1] - initialInnerBounds.minY) / initialInnerBounds.height;\n      return [shape.id, {\n        initialShape: shape,\n        initialShapeBounds: initialShapeBounds,\n        transformOrigin: [ix, iy]\n      }];\n    }))\n  };\n}\n\nvar DrawSession = function DrawSession(_data, id, _point) {\n  var _this = this;\n\n  this.id = 'draw';\n  this.origin = void 0;\n  this.previous = void 0;\n  this.last = void 0;\n  this.points = void 0;\n  this.snapshot = void 0;\n  this.isLocked = void 0;\n  this.lockedDirection = void 0;\n\n  this.start = function (data) {\n    return data;\n  };\n\n  this.update = function (data, point, pressure, isLocked) {\n    var _extends2;\n\n    if (isLocked === void 0) {\n      isLocked = false;\n    }\n\n    var snapshot = _this.snapshot; // Drawing while holding shift will \"lock\" the pen to either the\n    // x or y axis, depending on which direction has the greater\n    // delta. Pressing shift will also add more points to \"return\"\n    // the pen to the axis.\n\n    if (isLocked) {\n      if (!_this.isLocked && _this.points.length > 1) {\n        var bounds = core.Utils.getBoundsFromPoints(_this.points);\n\n        if (bounds.width > 8 || bounds.height > 8) {\n          _this.isLocked = true;\n          var returning = [].concat(_this.previous);\n          var isVertical = bounds.height > 8;\n\n          if (isVertical) {\n            _this.lockedDirection = 'vertical';\n            returning[0] = _this.origin[0];\n          } else {\n            _this.lockedDirection = 'horizontal';\n            returning[1] = _this.origin[1];\n          }\n\n          _this.previous = returning;\n\n          _this.points.push(core.Vec.sub(returning, _this.origin));\n        }\n      }\n    } else if (_this.isLocked) {\n      _this.isLocked = false;\n    }\n\n    if (_this.isLocked) {\n      if (_this.lockedDirection === 'vertical') {\n        point[0] = _this.origin[0];\n      } else {\n        point[1] = _this.origin[1];\n      }\n    } // Low pass the current input point against the previous one\n\n\n    var nextPrev = core.Vec.med(_this.previous, point);\n    _this.previous = nextPrev; // Don't add duplicate points. It's important to test against the\n    // adjusted (low-passed) point rather than the input point.\n\n    var newPoint = core.Vec.round([].concat(core.Vec.sub(_this.previous, _this.origin), [pressure]));\n    if (core.Vec.isEqual(_this.last, newPoint)) return data;\n    _this.last = newPoint;\n\n    _this.points.push(newPoint); // We draw a dot when the number of points is 1 or 2, so this guard\n    // prevents a \"flash\" of a dot when a user begins drawing a line.\n\n\n    if (_this.points.length <= 2) return data;\n    return _extends({}, data, {\n      page: _extends({}, data.page, {\n        shapes: _extends({}, data.page.shapes, (_extends2 = {}, _extends2[snapshot.id] = _extends({}, data.page.shapes[snapshot.id], {\n          points: [].concat(_this.points)\n        }), _extends2))\n      }),\n      pageState: _extends({}, data.pageState, {\n        selectedIds: [snapshot.id]\n      })\n    });\n  };\n\n  this.cancel = function (data) {\n    var _extends3;\n\n    var snapshot = _this.snapshot;\n    return _extends({}, data, {\n      page: _extends({}, data.page, {\n        // @ts-ignore\n        shapes: _extends({}, data.page.shapes, (_extends3 = {}, _extends3[snapshot.id] = undefined, _extends3))\n      }),\n      pageState: _extends({}, data.pageState, {\n        selectedIds: []\n      })\n    });\n  };\n\n  this.complete = function (data) {\n    var _shapes, _shapes2;\n\n    var snapshot = _this.snapshot;\n    return {\n      id: 'create_draw',\n      before: {\n        page: {\n          shapes: (_shapes = {}, _shapes[snapshot.id] = undefined, _shapes)\n        },\n        pageState: {\n          selectedIds: []\n        }\n      },\n      after: {\n        page: {\n          shapes: (_shapes2 = {}, _shapes2[snapshot.id] = TLDR.onSessionComplete(data, data.page.shapes[snapshot.id]), _shapes2)\n        },\n        pageState: {\n          selectedIds: []\n        }\n      }\n    };\n  };\n\n  this.origin = _point;\n  this.previous = _point;\n  this.last = _point;\n  this.snapshot = getDrawSnapshot(_data, id); // Add a first point but don't update the shape yet. We'll update\n  // when the draw session ends; if the user hasn't added additional\n  // points, this single point will be interpreted as a \"dot\" shape.\n\n  this.points = [[0, 0, 0.5]];\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction getDrawSnapshot(data, shapeId) {\n  var page = data.page;\n\n  var _Utils$deepClone = core.Utils.deepClone(page.shapes[shapeId]),\n      points = _Utils$deepClone.points,\n      point = _Utils$deepClone.point;\n\n  return {\n    id: shapeId,\n    point: point,\n    points: points\n  };\n}\n\nvar PI2$1 = Math.PI * 2;\nvar RotateSession = /*#__PURE__*/function () {\n  function RotateSession(_data, _point) {\n    var _this = this;\n\n    this.id = 'rotate';\n    this.delta = [0, 0];\n    this.origin = void 0;\n    this.snapshot = void 0;\n    this.prev = 0;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, isLocked) {\n      if (isLocked === void 0) {\n        isLocked = false;\n      }\n\n      var _this$snapshot = _this.snapshot,\n          commonBoundsCenter = _this$snapshot.commonBoundsCenter,\n          initialShapes = _this$snapshot.initialShapes;\n\n      var next = _extends({}, data, {\n        page: _extends({}, data.page),\n        pageState: _extends({}, data.pageState)\n      });\n\n      var page = next.page,\n          pageState = next.pageState;\n      var a1 = core.Vec.angle(commonBoundsCenter, _this.origin);\n      var a2 = core.Vec.angle(commonBoundsCenter, point);\n      var rot = a2 - a1;\n      _this.prev = rot;\n\n      if (isLocked) {\n        rot = core.Utils.clampToRotationToSegments(rot, 24);\n      }\n\n      pageState.boundsRotation = (PI2$1 + (_this.snapshot.boundsRotation + rot)) % PI2$1;\n      next.page.shapes = _extends({}, next.page.shapes, Object.fromEntries(initialShapes.map(function (_ref) {\n        var id = _ref.id,\n            center = _ref.center,\n            offset = _ref.offset,\n            _ref$shape$rotation = _ref.shape.rotation,\n            rotation = _ref$shape$rotation === void 0 ? 0 : _ref$shape$rotation;\n        var shape = page.shapes[id];\n        var nextRotation = isLocked ? core.Utils.clampToRotationToSegments(rotation + rot, 24) : rotation + rot;\n        var nextPoint = core.Vec.sub(core.Vec.rotWith(center, commonBoundsCenter, rot), offset);\n        return [id, _extends({}, next.page.shapes[id], TLDR.mutate(data, shape, {\n          point: nextPoint,\n          rotation: (PI2$1 + nextRotation) % PI2$1\n        }))];\n      })));\n      return next;\n    };\n\n    this.cancel = function (data) {\n      var initialShapes = _this.snapshot.initialShapes;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(initialShapes), _step; !(_step = _iterator()).done;) {\n        var _step$value = _step.value,\n            id = _step$value.id,\n            shape = _step$value.shape;\n        data.page.shapes[id] = _extends({}, shape);\n      }\n\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, Object.fromEntries(initialShapes.map(function (_ref2) {\n            var id = _ref2.id,\n                shape = _ref2.shape;\n            return [id, TLDR.onSessionComplete(data, shape)];\n          })))\n        })\n      });\n    };\n\n    this.origin = _point;\n    this.snapshot = getRotateSnapshot(_data);\n  }\n\n  var _proto = RotateSession.prototype;\n\n  _proto.complete = function complete(data) {\n    var _this$snapshot2 = this.snapshot,\n        hasUnlockedShapes = _this$snapshot2.hasUnlockedShapes,\n        initialShapes = _this$snapshot2.initialShapes;\n    if (!hasUnlockedShapes) return data;\n    return {\n      id: 'rotate',\n      before: {\n        page: {\n          shapes: Object.fromEntries(initialShapes.map(function (_ref3) {\n            var _ref3$shape = _ref3.shape,\n                id = _ref3$shape.id,\n                point = _ref3$shape.point,\n                _ref3$shape$rotation = _ref3$shape.rotation,\n                rotation = _ref3$shape$rotation === void 0 ? undefined : _ref3$shape$rotation;\n            return [id, {\n              point: point,\n              rotation: rotation\n            }];\n          }))\n        }\n      },\n      after: {\n        page: {\n          shapes: Object.fromEntries(this.snapshot.initialShapes.map(function (_ref4) {\n            var shape = _ref4.shape;\n            var _data$page$shapes$sha = data.page.shapes[shape.id],\n                point = _data$page$shapes$sha.point,\n                rotation = _data$page$shapes$sha.rotation;\n            return [shape.id, {\n              point: point,\n              rotation: rotation\n            }];\n          }))\n        }\n      }\n    };\n  };\n\n  return RotateSession;\n}(); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction getRotateSnapshot(data) {\n  var initialShapes = TLDR.getSelectedBranchSnapshot(data);\n\n  if (initialShapes.length === 0) {\n    throw Error('No selected shapes!');\n  }\n\n  var hasUnlockedShapes = initialShapes.length > 0;\n  var shapesBounds = Object.fromEntries(initialShapes.map(function (shape) {\n    return [shape.id, TLDR.getBounds(shape)];\n  }));\n  var rotatedBounds = Object.fromEntries(initialShapes.map(function (shape) {\n    return [shape.id, TLDR.getRotatedBounds(shape)];\n  }));\n  var bounds = core.Utils.getCommonBounds(Object.values(shapesBounds));\n  var commonBoundsCenter = core.Utils.getBoundsCenter(bounds);\n  return {\n    hasUnlockedShapes: hasUnlockedShapes,\n    boundsRotation: data.pageState.boundsRotation || 0,\n    commonBoundsCenter: commonBoundsCenter,\n    initialShapes: initialShapes.filter(function (shape) {\n      return shape.children === undefined;\n    }).map(function (shape) {\n      var bounds = TLDR.getBounds(shape);\n      var center = core.Utils.getBoundsCenter(bounds);\n      var offset = core.Vec.sub(center, shape.point);\n      var rotationOffset = core.Vec.sub(center, core.Utils.getBoundsCenter(rotatedBounds[shape.id]));\n      return {\n        id: shape.id,\n        shape: core.Utils.deepClone(shape),\n        offset: offset,\n        rotationOffset: rotationOffset,\n        center: center\n      };\n    })\n  };\n}\n\nvar HandleSession = /*#__PURE__*/function () {\n  function HandleSession(_data, _handleId, _point, commandId) {\n    var _this = this;\n\n    if (commandId === void 0) {\n      commandId = 'move_handle';\n    }\n\n    this.id = 'transform_single';\n    this.commandId = void 0;\n    this.delta = [0, 0];\n    this.origin = void 0;\n    this.shiftKey = false;\n    this.initialShape = void 0;\n    this.handleId = void 0;\n\n    this.start = function (data) {\n      return data;\n    };\n\n    this.update = function (data, point, shiftKey, altKey, metaKey) {\n      var _TLDR$getShapeUtils$o, _extends2;\n\n      var initialShape = _this.initialShape,\n          origin = _this.origin;\n      var shape = TLDR.getShape(data, initialShape.id);\n      TLDR.assertShapeHasProperty(shape, 'handles');\n      _this.shiftKey = shiftKey;\n      var delta = core.Vec.vec(origin, point);\n      var handles = initialShape.handles;\n      var handleId = _this.handleId;\n      var change = TLDR.getShapeUtils(shape).onHandleChange(shape, (_TLDR$getShapeUtils$o = {}, _TLDR$getShapeUtils$o[handleId] = _extends({}, shape.handles[handleId], {\n        point: core.Vec.round(core.Vec.add(handles[handleId].point, delta)) // Vec.rot(delta, shape.rotation)),\n\n      }), _TLDR$getShapeUtils$o), {\n        delta: delta,\n        shiftKey: shiftKey,\n        altKey: altKey,\n        metaKey: metaKey\n      });\n      if (!change) return data;\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, (_extends2 = {}, _extends2[shape.id] = _extends({}, shape, change), _extends2))\n        })\n      });\n    };\n\n    this.cancel = function (data) {\n      var _extends3;\n\n      var initialShape = _this.initialShape;\n      return _extends({}, data, {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, (_extends3 = {}, _extends3[initialShape.id] = initialShape, _extends3))\n        })\n      });\n    };\n\n    var shapeId = _data.pageState.selectedIds[0];\n    this.origin = _point;\n    this.handleId = _handleId;\n    this.initialShape = TLDR.getShape(_data, shapeId);\n    this.commandId = commandId;\n  }\n\n  var _proto = HandleSession.prototype;\n\n  _proto.complete = function complete(data) {\n    var _shapes, _shapes2;\n\n    return {\n      id: this.commandId,\n      before: {\n        page: {\n          shapes: (_shapes = {}, _shapes[this.initialShape.id] = this.initialShape, _shapes)\n        }\n      },\n      after: {\n        page: {\n          shapes: (_shapes2 = {}, _shapes2[this.initialShape.id] = TLDR.onSessionComplete(data, data.page.shapes[this.initialShape.id]), _shapes2)\n        }\n      }\n    };\n  };\n\n  return HandleSession;\n}();\n\nvar initialData = {\n  settings: {\n    isPenMode: false,\n    isDarkMode: false,\n    isDebugMode: \"development\" === 'development',\n    isReadonlyMode: false,\n    nudgeDistanceLarge: 10,\n    nudgeDistanceSmall: 1\n  },\n  appState: {\n    activeToolType: undefined,\n    activeTool: 'select',\n    hoveredId: undefined,\n    currentPageId: 'page',\n    pages: [{\n      id: 'page'\n    }],\n    currentStyle: defaultStyle,\n    selectedStyle: defaultStyle,\n    isToolLocked: false,\n    isStyleOpen: false,\n    isEmptyCanvas: false\n  },\n  page: {\n    id: 'page',\n    childIndex: 1,\n    shapes: {},\n    bindings: {}\n  },\n  pageState: {\n    id: 'page',\n    selectedIds: [],\n    camera: {\n      point: [0, 0],\n      zoom: 1\n    }\n  }\n};\nvar TLDrawState = /*#__PURE__*/function () {\n  function TLDrawState() {\n    var _this = this;\n\n    this.store = createReact(function () {\n      return initialData;\n    });\n    this.history = {\n      stack: [],\n      pointer: -1\n    };\n    this.session = void 0;\n    this.status = {\n      current: 'idle',\n      previous: 'idle'\n    };\n    this.pointedId = void 0;\n    this.pointedHandle = void 0;\n    this.pointedBoundsHandle = void 0;\n    this.currentDocumentId = 'doc';\n    this.currentPageId = 'page';\n    this.pages = {\n      page: initialData.page\n    };\n    this.pageStates = {\n      page: initialData.pageState\n    };\n    this._onChange = void 0;\n    this.getState = this.store.getState;\n\n    this.setState = function (data) {\n      var current = _this.getState(); // Apply incoming change\n\n\n      var result = typeof data === 'function' ? data(current) : data;\n\n      var next = _extends({}, current, result);\n\n      if ('page' in result) {\n        next.page = _extends({}, next.page, {\n          shapes: Object.fromEntries(Object.entries(next.page.shapes).filter(function (_ref) {\n            var shape = _ref[1];\n            return shape && (shape.parentId === next.page.id || next.page.shapes[shape.parentId]);\n          }))\n        });\n      } // Apply selected style change, if any\n\n\n      var newSelectedStyle = TLDR.getSelectedStyle(next);\n\n      if (newSelectedStyle) {\n        next = _extends({}, next, {\n          appState: _extends({}, current.appState, next.appState, {\n            selectedStyle: newSelectedStyle\n          })\n        });\n      }\n\n      _this.store.setState(next);\n\n      _this.pages[next.page.id] = next.page;\n      _this.pageStates[next.page.id] = next.pageState;\n      return _this;\n    };\n\n    this.getShape = function (id) {\n      return _this.getState().page.shapes[id];\n    };\n\n    this.getPage = function (id) {\n      if (id === void 0) {\n        id = _this.currentPageId;\n      }\n\n      return _this.pages[id];\n    };\n\n    this.getPageState = function (id) {\n      if (id === void 0) {\n        id = _this.currentPageId;\n      }\n\n      return _this.pageStates[id];\n    };\n\n    this.getAppState = function (id) {\n\n      return _this.getState().appState;\n    };\n\n    this.getPagePoint = function (point) {\n      var _this$getPageState = _this.getPageState(),\n          camera = _this$getPageState.camera;\n\n      return core.Vec.sub(core.Vec.div(point, camera.zoom), camera.point);\n    };\n\n    this.toggleStylePanel = function () {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, {\n            isStyleOpen: !data.appState.isStyleOpen\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.copy = function () {\n      // TODO\n      return _this;\n    };\n\n    this.paste = function () {\n      // TODO\n      return _this;\n    };\n\n    this.copyAsSvg = function () {\n      // TODO\n      return '<svg/>';\n    };\n\n    this.copyAsJson = function () {\n      // TODO\n      return {};\n    };\n\n    this.togglePenMode = function () {\n      _this.setState(function (data) {\n        return {\n          settings: _extends({}, data.settings, {\n            isPenMode: !data.settings.isPenMode\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.toggleDarkMode = function () {\n      _this.setState(function (data) {\n        return {\n          settings: _extends({}, data.settings, {\n            isDarkMode: !data.settings.isDarkMode\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.reset = function () {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, initialData.appState),\n          settings: _extends({}, data.appState, initialData.settings)\n        };\n      });\n\n      _this._onChange == null ? void 0 : _this._onChange(_this, \"reset\");\n      return _this;\n    };\n\n    this.selectTool = function (tool) {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, {\n            activeTool: tool,\n            activeToolType: tool === 'select' ? 'select' : TLDR.getShapeUtils({\n              type: tool\n            }).toolType\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.toggleToolLock = function () {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, {\n            isToolLocked: true\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.zoomIn = function () {\n      var i = Math.round(_this.store.getState().pageState.camera.zoom * 100 / 25);\n      var nextZoom = TLDR.getCameraZoom((i + 1) * 0.25);\n\n      _this.zoomTo(nextZoom);\n\n      return _this;\n    };\n\n    this.zoomOut = function () {\n      var i = Math.round(_this.store.getState().pageState.camera.zoom * 100 / 25);\n      var nextZoom = TLDR.getCameraZoom((i - 1) * 0.25);\n\n      _this.zoomTo(nextZoom);\n\n      return _this;\n    };\n\n    this.zoomToFit = function () {\n      _this.setState(function (data) {\n        var shapes = Object.values(data.page.shapes);\n        if (shapes.length === 0) return {\n          pageState: data.pageState\n        };\n        var bounds = core.Utils.getCommonBounds(Object.values(shapes).map(TLDR.getBounds));\n        var zoom = TLDR.getCameraZoom(bounds.width > bounds.height ? (window.innerWidth - 128) / bounds.width : (window.innerHeight - 128) / bounds.height);\n        var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;\n        var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;\n        return {\n          pageState: _extends({}, data.pageState, {\n            camera: _extends({}, data.pageState.camera, {\n              point: core.Vec.add([-bounds.minX, -bounds.minY], [mx, my]),\n              zoom: zoom\n            })\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.zoomToSelection = function () {\n      _this.setState(function (data) {\n        if (TLDR.getSelectedIds(data).length === 0) return {\n          pageState: data.pageState\n        };\n        var bounds = TLDR.getSelectedBounds(data);\n        var zoom = TLDR.getCameraZoom(bounds.width > bounds.height ? (window.innerWidth - 128) / bounds.width : (window.innerHeight - 128) / bounds.height);\n        var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;\n        var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;\n        return {\n          pageState: _extends({}, data.pageState, {\n            camera: _extends({}, data.pageState.camera, {\n              point: core.Vec.add([-bounds.minX, -bounds.minY], [mx, my]),\n              zoom: zoom\n            })\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.resetCamera = function () {\n      _this.setState(function (data) {\n        return {\n          pageState: _extends({}, data.pageState, {\n            camera: {\n              zoom: 1,\n              point: [window.innerWidth / 2, window.innerHeight / 2]\n            }\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.zoomToContent = function () {\n      _this.setState(function (data) {\n        var shapes = Object.values(data.page.shapes);\n        if (shapes.length === 0) return {\n          pageState: data.pageState\n        };\n        var bounds = core.Utils.getCommonBounds(Object.values(shapes).map(TLDR.getBounds));\n        var zoom = data.pageState.camera.zoom;\n        var mx = (window.innerWidth - bounds.width * zoom) / 2 / zoom;\n        var my = (window.innerHeight - bounds.height * zoom) / 2 / zoom;\n        return {\n          pageState: _extends({}, data.pageState, {\n            camera: _extends({}, data.pageState.camera, {\n              point: core.Vec.add([-bounds.minX, -bounds.minY], [mx, my])\n            })\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.zoomToActual = function () {\n      _this.zoomTo(1);\n\n      return _this;\n    };\n\n    this.loadDocument = function (document, onChange) {\n      _this._onChange = onChange;\n      _this.currentDocumentId = document.id;\n      _this.pages = core.Utils.deepClone(document.pages);\n      _this.pageStates = core.Utils.deepClone(document.pageStates);\n      _this.currentPageId = Object.values(_this.pages)[0].id;\n\n      _this.setState(function (data) {\n        return {\n          page: _this.pages[_this.currentPageId],\n          pageState: _this.pageStates[_this.currentPageId],\n          appState: _extends({}, data.appState, {\n            pageIds: Object.values(_this.pages).sort(function (a, b) {\n              return (a.childIndex || 0) - (b.childIndex || 0);\n            }).map(function (page) {\n              return page.id;\n            })\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.undo = function () {\n      var history = _this.history;\n      if (history.pointer <= -1) return _this;\n      var command = history.stack[history.pointer];\n\n      _this.setState(function (data) {\n        return core.Utils.deepMerge(data, command.before);\n      });\n\n      history.pointer--;\n      _this._onChange == null ? void 0 : _this._onChange(_this, \"undo:\" + command.id);\n      return _this;\n    };\n\n    this.redo = function () {\n      var history = _this.history;\n      if (history.pointer >= history.stack.length - 1) return _this;\n      history.pointer++;\n      var command = history.stack[history.pointer];\n\n      _this.setState(function (data) {\n        return core.Utils.deepMerge(data, command.after);\n      });\n\n      _this._onChange == null ? void 0 : _this._onChange(_this, \"redo:\" + command.id);\n      return _this;\n    };\n\n    this.select = function () {\n      for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {\n        ids[_key] = arguments[_key];\n      }\n\n      _this.setSelectedIds(ids);\n\n      return _this;\n    };\n\n    this.selectAll = function () {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, {\n            activeTool: 'select',\n            activeToolType: 'select'\n          }),\n          pageState: _extends({}, data.pageState, {\n            selectedIds: Object.keys(data.page.shapes)\n          })\n        };\n      });\n\n      return _this;\n    };\n\n    this.deselectAll = function () {\n      _this.setSelectedIds([]);\n\n      return _this;\n    };\n\n    this.style = function (style$1, ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](style(data, idsToMutate, style$1));\n\n      return _this;\n    };\n\n    this.align = function (type, ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](align(data, idsToMutate, type));\n\n      return _this;\n    };\n\n    this.distribute = function (type, ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](distribute(data, idsToMutate, type));\n\n      return _this;\n    };\n\n    this.stretch = function (type, ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](stretch(data, idsToMutate, type));\n\n      return _this;\n    };\n\n    this.moveToBack = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](move(data, idsToMutate, exports.MoveType.ToBack));\n\n      return _this;\n    };\n\n    this.moveBackward = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](move(data, idsToMutate, exports.MoveType.Backward));\n\n      return _this;\n    };\n\n    this.moveForward = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](move(data, idsToMutate, exports.MoveType.Forward));\n\n      return _this;\n    };\n\n    this.moveToFront = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](move(data, idsToMutate, exports.MoveType.ToFront));\n\n      return _this;\n    };\n\n    this.nudge = function (delta, isMajor, ids) {\n      if (isMajor === void 0) {\n        isMajor = false;\n      }\n\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](translate(data, idsToMutate, core.Vec.mul(delta, isMajor ? 10 : 1)));\n\n      return _this;\n    };\n\n    this.duplicate = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](duplicate(data, idsToMutate));\n\n      return _this;\n    };\n\n    this.toggleHidden = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](toggle(data, idsToMutate, 'isHidden'));\n\n      return _this;\n    };\n\n    this.toggleLocked = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](toggle(data, idsToMutate, 'isLocked'));\n\n      return _this;\n    };\n\n    this.toggleAspectRatioLocked = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](toggle(data, idsToMutate, 'isAspectRatioLocked'));\n\n      return _this;\n    };\n\n    this.rotate = function (delta, ids) {\n      if (delta === void 0) {\n        delta = Math.PI * -0.5;\n      }\n\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n\n      _this[\"do\"](rotate(data, idsToMutate, delta));\n\n      return _this;\n    };\n\n    this.group = function (ids) {\n      // TODO\n      // const data = this.store.getState()\n      // const idsToMutate = ids ? ids : data.pageState.selectedIds\n      // this.do(commands.toggle(data, idsToMutate, 'isAspectRatioLocked'))\n      return _this;\n    };\n\n    this.create = function () {\n      var data = _this.store.getState();\n\n      for (var _len2 = arguments.length, shapes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        shapes[_key2] = arguments[_key2];\n      }\n\n      _this[\"do\"](create(data, shapes));\n\n      return _this;\n    };\n\n    this[\"delete\"] = function (ids) {\n      var data = _this.store.getState();\n\n      var idsToMutate = ids ? ids : data.pageState.selectedIds;\n      if (idsToMutate.length === 0) return _this;\n\n      _this[\"do\"](deleteShapes(data, idsToMutate));\n\n      return _this;\n    };\n\n    this.clear = function () {\n      _this.selectAll();\n\n      _this[\"delete\"]();\n\n      return _this;\n    };\n\n    this.cancel = function () {\n      switch (_this.status.current) {\n        case 'idle':\n          {\n            _this.deselectAll();\n\n            _this.selectTool('select');\n\n            break;\n          }\n\n        case 'brushing':\n          {\n            _this.cancelSession();\n\n            core.brushUpdater.clear();\n            break;\n          }\n\n        case 'translating':\n          {\n            _this.cancelSession();\n\n            break;\n          }\n\n        case 'transforming':\n          {\n            _this.cancelSession();\n\n            break;\n          }\n\n        case 'rotating':\n          {\n            _this.cancelSession();\n\n            break;\n          }\n\n        case 'creating':\n          {\n            _this.cancelSession();\n\n            _this[\"delete\"]();\n\n            break;\n          }\n      }\n\n      return _this;\n    };\n\n    this.save = function () {\n      // TODO\n      return _this;\n    };\n\n    this.startBrushSession = function (point) {\n      _this.setStatus('brushing');\n\n      _this.startSession(new BrushSession(_this.store.getState(), point));\n\n      return _this;\n    };\n\n    this.updateBrushSession = function (point, metaKey) {\n      if (metaKey === void 0) {\n        metaKey = false;\n      }\n\n      _this.updateSession(point, metaKey);\n\n      return _this;\n    };\n\n    this.startTranslateSession = function (point) {\n      _this.setStatus('translating');\n\n      _this.startSession(new TranslateSession(_this.store.getState(), point));\n\n      return _this;\n    };\n\n    this.updateTranslateSession = function (point, shiftKey, altKey) {\n      if (shiftKey === void 0) {\n        shiftKey = false;\n      }\n\n      if (altKey === void 0) {\n        altKey = false;\n      }\n\n      _this.updateSession(point, shiftKey, altKey);\n\n      return _this;\n    };\n\n    this.startTransformSession = function (point, handle, commandId) {\n      var selectedIds = _this.selectedIds;\n      if (selectedIds.length === 0) return _this;\n\n      _this.setStatus('transforming');\n\n      _this.pointedBoundsHandle = handle;\n\n      if (_this.pointedBoundsHandle === 'rotate') {\n        _this.startSession(new RotateSession(_this.store.getState(), point));\n      } else if (_this.selectedIds.length === 1) {\n        _this.startSession(new TransformSingleSession(_this.store.getState(), point, _this.pointedBoundsHandle, commandId));\n      } else {\n        _this.startSession(new TransformSession(_this.store.getState(), point, _this.pointedBoundsHandle));\n      }\n\n      return _this;\n    };\n\n    this.updateTransformSession = function (point, shiftKey, altKey) {\n      if (shiftKey === void 0) {\n        shiftKey = false;\n      }\n\n      if (altKey === void 0) {\n        altKey = false;\n      }\n\n      _this.updateSession(point, shiftKey, altKey);\n\n      return _this;\n    };\n\n    this.startDrawSession = function (id, point) {\n      _this.setStatus('creating');\n\n      _this.startSession(new DrawSession(_this.store.getState(), id, point));\n\n      return _this;\n    };\n\n    this.updateDrawSession = function (point, pressure, shiftKey) {\n      if (shiftKey === void 0) {\n        shiftKey = false;\n      }\n\n      _this.updateSession(point, pressure, shiftKey);\n\n      return _this;\n    };\n\n    this.startHandleSession = function (point, handleId, commandId) {\n      _this.startSession(new HandleSession(_this.store.getState(), handleId, point, commandId));\n\n      return _this;\n    };\n\n    this.updateHandleSession = function (point, shiftKey, altKey, metaKey) {\n      if (shiftKey === void 0) {\n        shiftKey = false;\n      }\n\n      if (altKey === void 0) {\n        altKey = false;\n      }\n\n      if (metaKey === void 0) {\n        metaKey = false;\n      }\n\n      _this.updateSession(point, shiftKey, altKey, metaKey);\n\n      return _this;\n    };\n\n    this.updateSessionsOnPointerMove = function (info) {\n      switch (_this.status.current) {\n        case 'pointingBoundsHandle':\n          {\n            if (core.Vec.dist(info.origin, info.point) > 4) {\n              _this.setStatus('transforming');\n\n              _this.startTransformSession(_this.getPagePoint(info.origin), _this.pointedBoundsHandle);\n            }\n\n            break;\n          }\n\n        case 'pointingHandle':\n          {\n            if (core.Vec.dist(info.origin, info.point) > 4) {\n              _this.setStatus('translatingHandle');\n\n              _this.startHandleSession(_this.getPagePoint(info.origin), _this.pointedHandle);\n            }\n\n            break;\n          }\n\n        case 'pointingBounds':\n          {\n            if (core.Vec.dist(info.origin, info.point) > 4) {\n              _this.setStatus('translating');\n\n              _this.startTranslateSession(_this.getPagePoint(info.origin));\n            }\n\n            break;\n          }\n\n        case 'brushing':\n          {\n            _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);\n\n            break;\n          }\n\n        case 'translating':\n          {\n            _this.updateTranslateSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n\n            break;\n          }\n\n        case 'transforming':\n          {\n            _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n\n            break;\n          }\n\n        case 'translatingHandle':\n          {\n            _this.updateHandleSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n\n            break;\n          }\n\n        case 'creating':\n          {\n            switch (_this.appState.activeToolType) {\n              case 'draw':\n                {\n                  _this.updateDrawSession(_this.getPagePoint(info.point), info.pressure, info.shiftKey);\n\n                  break;\n                }\n\n              case 'bounds':\n                {\n                  _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey);\n\n                  break;\n                }\n\n              case 'handle':\n                {\n                  _this.updateHandleSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n\n                  break;\n                }\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.onKeyDown = function (key, info) {\n      if (key === 'Escape') {\n        _this.cancel();\n\n        return;\n      }\n\n      switch (_this.status.current) {\n        case 'idle':\n          {\n            break;\n          }\n\n        case 'brushing':\n          {\n            if (key === 'Meta' || key === 'Control') {\n              _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);\n\n              return;\n            }\n\n            break;\n          }\n\n        case 'translating':\n          {\n            if (key === 'Escape') {\n              _this.cancelSession(_this.getPagePoint(info.point));\n            }\n\n            if (key === 'Shift' || key === 'Alt') {\n              _this.updateTranslateSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n            }\n\n            break;\n          }\n\n        case 'transforming':\n          {\n            if (key === 'Escape') {\n              _this.cancelSession(_this.getPagePoint(info.point));\n            }\n\n            if (key === 'Shift' || key === 'Alt') {\n              _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.onKeyUp = function (key, info) {\n      switch (_this.status.current) {\n        case 'brushing':\n          {\n            if (key === 'Meta' || key === 'Control') {\n              _this.updateBrushSession(_this.getPagePoint(info.point), info.metaKey);\n            }\n\n            break;\n          }\n\n        case 'transforming':\n          {\n            if (key === 'Shift' || key === 'Alt') {\n              _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n            }\n\n            break;\n          }\n\n        case 'translating':\n          {\n            if (key === 'Shift' || key === 'Alt') {\n              _this.updateTransformSession(_this.getPagePoint(info.point), info.shiftKey, info.altKey);\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.onPinchStart = function (info) {\n      _this.setStatus('pinching');\n    };\n\n    this.onPinchEnd = function () {\n      _this.setStatus(_this.status.previous);\n    };\n\n    this.onPinch = function (info, e) {\n      if (_this.status.current !== 'pinching') return;\n\n      _this.pinchZoom(info.origin, info.delta, info.delta[2] / 350);\n\n      _this.updateSessionsOnPointerMove(info, e);\n    };\n\n    this.onPan = function (info, e) {\n      var delta = core.Vec.div(info.delta, _this.getPageState().camera.zoom);\n\n      var prev = _this.getPageState().camera.point;\n\n      var next = core.Vec.sub(prev, delta);\n      if (core.Vec.isEqual(next, prev)) return;\n\n      _this.pan(delta);\n\n      _this.updateSessionsOnPointerMove(info, e);\n    };\n\n    this.onZoom = function (info, e) {\n      _this.zoom(info.delta[2] / 100);\n\n      _this.updateSessionsOnPointerMove(info, e);\n    };\n\n    this.onPointerDown = function (info) {\n      switch (_this.status.current) {\n        case 'idle':\n          {\n            switch (_this.appState.activeTool) {\n              case 'draw':\n                {\n                  _this.setStatus('creating');\n\n                  _this.createActiveToolShape(info.point);\n\n                  break;\n                }\n\n              case 'rectangle':\n                {\n                  _this.setStatus('creating');\n\n                  _this.createActiveToolShape(info.point);\n\n                  break;\n                }\n\n              case 'ellipse':\n                {\n                  _this.setStatus('creating');\n\n                  _this.createActiveToolShape(info.point);\n\n                  break;\n                }\n\n              case 'arrow':\n                {\n                  _this.setStatus('creating');\n\n                  _this.createActiveToolShape(info.point);\n\n                  break;\n                }\n            }\n          }\n      }\n    };\n\n    this.onPointerMove = function (info, e) {\n      _this.updateSessionsOnPointerMove(info, e);\n    };\n\n    this.onPointerUp = function (info) {\n      var data = _this.getState();\n\n      switch (_this.status.current) {\n        case 'pointingBounds':\n          {\n            if (info.target === 'bounds') {\n              // If we just clicked the selecting bounds's background, clear the selection\n              _this.deselectAll();\n            } else if (data.pageState.selectedIds.includes(info.target)) {\n              // If we're holding shift...\n              if (info.shiftKey) {\n                // Unless we just shift-selected the shape, remove it from the selected shapes\n                if (_this.pointedId !== info.target) {\n                  _this.setSelectedIds(data.pageState.selectedIds.filter(function (id) {\n                    return id !== info.target;\n                  }));\n                }\n              }\n            }\n\n            _this.setStatus('idle');\n\n            _this.pointedId = undefined;\n            break;\n          }\n\n        case 'pointingBoundsHandle':\n          {\n            _this.setStatus('idle');\n\n            _this.pointedBoundsHandle = undefined;\n            break;\n          }\n\n        case 'pointingHandle':\n          {\n            _this.setStatus('idle');\n\n            _this.pointedHandle = undefined;\n            break;\n          }\n\n        case 'translatingHandle':\n          {\n            _this.completeSession();\n\n            _this.pointedHandle = undefined;\n            break;\n          }\n\n        case 'brushing':\n          {\n            _this.completeSession();\n\n            core.brushUpdater.clear();\n            break;\n          }\n\n        case 'translating':\n          {\n            _this.completeSession(_this.getPagePoint(info.point));\n\n            _this.pointedId = undefined;\n            break;\n          }\n\n        case 'transforming':\n          {\n            _this.completeSession(_this.getPagePoint(info.point));\n\n            _this.pointedBoundsHandle = undefined;\n            break;\n          }\n\n        case 'creating':\n          {\n            _this.completeSession(_this.getPagePoint(info.point));\n\n            _this.pointedHandle = undefined;\n          }\n      }\n    };\n\n    this.onPointCanvas = function (info) {\n      switch (_this.status.current) {\n        case 'idle':\n          {\n            switch (_this.appState.activeTool) {\n              case 'select':\n                {\n                  // Unless the user is holding shift or meta, clear the current selection\n                  if (!(info.shiftKey || info.metaKey)) {\n                    _this.deselectAll();\n                  } // Start a brush session\n\n\n                  _this.startBrushSession(_this.getPagePoint(info.point));\n\n                  break;\n                }\n            }\n          }\n      }\n    };\n\n    this.onDoubleClickCanvas = function () {// Unused\n    };\n\n    this.onRightPointCanvas = function () {// Unused\n    };\n\n    this.onDragCanvas = function () {// Unused\n    };\n\n    this.onReleaseCanvas = function () {// Unused\n    };\n\n    this.onPointShape = function (info) {\n      var data = _this.getState();\n\n      switch (_this.status.current) {\n        case 'idle':\n          {\n            switch (_this.appState.activeTool) {\n              case 'select':\n                {\n                  if (info.metaKey) {\n                    // While holding command key, allow event to pass through to canvas\n                    return;\n                  }\n\n                  if (!data.pageState.selectedIds.includes(info.target)) {\n                    // Set the pointed ID to the shape that was clicked.\n                    _this.pointedId = info.target; // If the shape is not selected; then if the user is pressing shift,\n                    // add the shape to the current selection; otherwise, set the shape as\n                    // the only selected shape.\n\n                    _this.setSelectedIds([info.target], info.shiftKey);\n                  }\n\n                  _this.setStatus('pointingBounds');\n\n                  break;\n                }\n            }\n          }\n      }\n    };\n\n    this.onReleaseShape = function (info) {// const data = this.getState()\n      // switch (this.status.current) {\n      //   case 'pointingBounds': {\n      //     if (info.metaKey) {\n      //       // While holding command key, allow event to pass through to canvas\n      //       return\n      //     }\n      //     // If the shape is selected...\n      //     if (\n      //       data.pageState.selectedIds.includes(info.target) &&\n      //       this.pointedId !== info.target &&\n      //       info.shiftKey\n      //     ) {\n      //       // If the shape is not selected; then if the user is pressing shift,\n      //       // add the shape to the current selection; otherwise, set the shape as\n      //       // the only selected shape.\n      //       this.setSelectedIds(data.pageState.selectedIds.filter((id) => id !== info.target))\n      //     }\n      //     this.setStatus('pointingBounds')\n      //     break\n      //   }\n      // }\n    };\n\n    this.onDoubleClickShape = function (info) {\n      if (_this.selectedIds.includes(info.target)) {\n        _this.setSelectedIds([info.target]);\n      }\n    };\n\n    this.onRightPointShape = function () {// TODO\n    };\n\n    this.onDragShape = function (info) {// Unused\n    };\n\n    this.onHoverShape = function (info) {\n      _this.setState(function (data) {\n        return {\n          appState: _extends({}, data.appState, {\n            hoveredId: info.target\n          })\n        };\n      });\n    };\n\n    this.onUnhoverShape = function (info) {\n      setTimeout(function () {\n        if (_this.getState().appState.hoveredId === info.target) {\n          _this.setState(function (data) {\n            return {\n              appState: _extends({}, data.appState, {\n                hoveredId: undefined\n              })\n            };\n          });\n        }\n      }, 10);\n    };\n\n    this.onPointBounds = function (info) {\n      _this.setStatus('pointingBounds');\n    };\n\n    this.onDoubleClickBounds = function () {// TODO\n    };\n\n    this.onRightPointBounds = function () {// TODO\n    };\n\n    this.onDragBounds = function (info) {// Unused\n    };\n\n    this.onHoverBounds = function () {// TODO\n    };\n\n    this.onUnhoverBounds = function () {// TODO\n    };\n\n    this.onReleaseBounds = function (info) {\n      switch (_this.status.current) {\n        case 'translating':\n          {\n            _this.completeSession(_this.getPagePoint(info.point));\n\n            break;\n          }\n\n        case 'brushing':\n          {\n            _this.completeSession();\n\n            core.brushUpdater.clear();\n            break;\n          }\n      }\n    };\n\n    this.onPointBoundsHandle = function (info) {\n      _this.pointedBoundsHandle = info.target;\n\n      _this.setStatus('pointingBoundsHandle');\n    };\n\n    this.onDoubleClickBoundsHandle = function () {// TODO\n    };\n\n    this.onRightPointBoundsHandle = function () {// TODO\n    };\n\n    this.onDragBoundsHandle = function () {// Unused\n    };\n\n    this.onHoverBoundsHandle = function () {// TODO\n    };\n\n    this.onUnhoverBoundsHandle = function () {// TODO\n    };\n\n    this.onReleaseBoundsHandle = function () {// TODO\n    };\n\n    this.onPointHandle = function (info) {\n      _this.pointedHandle = info.target;\n\n      _this.setStatus('pointingHandle');\n    };\n\n    this.onDoubleClickHandle = function () {// TODO\n    };\n\n    this.onRightPointHandle = function () {// TODO\n    };\n\n    this.onDragHandle = function () {// TODO\n    };\n\n    this.onHoverHandle = function () {// TODO\n    };\n\n    this.onUnhoverHandle = function () {// TODO\n    };\n\n    this.onReleaseHandle = function () {// Unused\n    };\n\n    this.onChange = function (ids) {\n      var appState = _this.getAppState();\n\n      if (appState.isEmptyCanvas && ids.length > 0) {\n        _this.setState(function (data) {\n          return {\n            appState: _extends({}, data.appState, {\n              isEmptyCanvas: false\n            })\n          };\n        });\n      } else if (!appState.isEmptyCanvas && ids.length <= 0) {\n        _this.setState(function (data) {\n          return {\n            appState: _extends({}, data.appState, {\n              isEmptyCanvas: true\n            })\n          };\n        });\n      }\n    };\n\n    this.onError = function (error) {// TODO\n    };\n\n    this.onBlurEditingShape = function () {// TODO\n    };\n  }\n\n  var _proto = TLDrawState.prototype;\n\n  /* --------------------- Status --------------------- */\n  _proto.setStatus = function setStatus(status) {\n    this.status.previous = this.status.current;\n    this.status.current = status;\n    return this; // console.log(this.status.previous, ' -> ', this.status.current)\n  }\n  /* -------------------- App State ------------------- */\n  ;\n\n  _proto.pinchZoom = function pinchZoom(point, delta, zoomDelta) {\n    this.setState(function (data) {\n      var camera = data.pageState.camera;\n      var nextPoint = core.Vec.add(camera.point, core.Vec.div(delta, camera.zoom));\n      var nextZoom = TLDR.getCameraZoom(camera.zoom - zoomDelta * camera.zoom);\n      var p0 = core.Vec.sub(core.Vec.div(point, camera.zoom), nextPoint);\n      var p1 = core.Vec.sub(core.Vec.div(point, nextZoom), nextPoint);\n      return {\n        pageState: _extends({}, data.pageState, {\n          camera: _extends({}, data.pageState.camera, {\n            point: core.Vec.add(nextPoint, core.Vec.sub(p1, p0)),\n            zoom: nextZoom\n          })\n        })\n      };\n    });\n    return this;\n  };\n\n  _proto.zoomTo = function zoomTo(next) {\n    this.setState(function (data) {\n      var _TLDR$getCurrentCamer = TLDR.getCurrentCamera(data),\n          zoom = _TLDR$getCurrentCamer.zoom,\n          point = _TLDR$getCurrentCamer.point;\n\n      var center = [window.innerWidth / 2, window.innerHeight / 2];\n      var p0 = core.Vec.sub(core.Vec.div(center, zoom), point);\n      var p1 = core.Vec.sub(core.Vec.div(center, next), point);\n      return {\n        pageState: _extends({}, data.pageState, {\n          camera: _extends({}, data.pageState.camera, {\n            point: core.Vec.add(point, core.Vec.sub(p1, p0)),\n            zoom: next\n          })\n        })\n      };\n    });\n    return this;\n  };\n\n  _proto.zoom = function zoom(delta) {\n    var zoom = this.store.getState().pageState.camera.zoom;\n    var nextZoom = TLDR.getCameraZoom(zoom - delta * zoom);\n    this.zoomTo(nextZoom);\n    return this;\n  };\n\n  _proto.pan = function pan(delta) {\n    this.setState(function (data) {\n      var _TLDR$getCurrentCamer2 = TLDR.getCurrentCamera(data),\n          point = _TLDR$getCurrentCamer2.point;\n\n      return {\n        pageState: _extends({}, data.pageState, {\n          camera: _extends({}, data.pageState.camera, {\n            point: core.Vec.sub(point, delta)\n          })\n        })\n      };\n    });\n    return this;\n  }\n  /* ---------------------- Document --------------------- */\n  ;\n\n  _proto.setCurrentPageId = function setCurrentPageId(pageId) {\n    if (pageId === this.currentPageId) return this;\n    this.currentPageId = pageId;\n    this.setState({\n      page: this.pages[pageId],\n      pageState: this.pageStates[pageId]\n    });\n    return this;\n  }\n  /* -------------------- Sessions -------------------- */\n  ;\n\n  _proto.startSession = function startSession(session) {\n    var _this$_onChange;\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    this.session = session;\n    this.setState(function (data) {\n      return session.start.apply(session, [data].concat(args));\n    });\n    (_this$_onChange = this._onChange) == null ? void 0 : _this$_onChange.call(this, this, \"session:start_\" + session.id);\n    return this;\n  };\n\n  _proto.updateSession = function updateSession() {\n    var _this$_onChange2;\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    var session = this.session;\n    if (!session) return this;\n    this.setState(function (data) {\n      return session.update.apply(session, [data].concat(args));\n    });\n    (_this$_onChange2 = this._onChange) == null ? void 0 : _this$_onChange2.call(this, this, \"session:update:\" + session.id);\n    return this;\n  };\n\n  _proto.cancelSession = function cancelSession() {\n    var _this$_onChange3;\n\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    var session = this.session;\n    if (!session) return this;\n    this.setState(function (data) {\n      return session.cancel.apply(session, [data].concat(args));\n    });\n    this.setStatus('idle');\n    this.session = undefined;\n    (_this$_onChange3 = this._onChange) == null ? void 0 : _this$_onChange3.call(this, this, \"session:cancel:\" + session.id);\n    return this;\n  };\n\n  _proto.completeSession = function completeSession() {\n    var session = this.session;\n    if (!session) return this;\n    this.setStatus('idle');\n\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var result = session.complete.apply(session, [this.store.getState()].concat(args));\n\n    if ('after' in result) {\n      this[\"do\"](result);\n    } else {\n      var _this$_onChange4;\n\n      this.setState(function (data) {\n        return core.Utils.deepMerge(data, result);\n      });\n      (_this$_onChange4 = this._onChange) == null ? void 0 : _this$_onChange4.call(this, this, \"session:complete:\" + session.id);\n    }\n\n    var _this$appState = this.appState,\n        isToolLocked = _this$appState.isToolLocked,\n        activeTool = _this$appState.activeTool;\n\n    if (!isToolLocked && activeTool !== 'draw') {\n      this.selectTool('select');\n    }\n\n    this.session = undefined;\n    return this;\n  }\n  /* -------------------- Commands -------------------- */\n  ;\n\n  _proto[\"do\"] = function _do(command) {\n    var _this$_onChange5;\n\n    var history = this.history;\n\n    if (history.pointer !== history.stack.length - 1) {\n      history.stack = history.stack.slice(0, history.pointer + 1);\n    }\n\n    history.stack.push(command);\n    history.pointer = history.stack.length - 1;\n    this.setState(function (data) {\n      return core.Utils.deepMerge(data, history.stack[history.pointer].after);\n    });\n    (_this$_onChange5 = this._onChange) == null ? void 0 : _this$_onChange5.call(this, this, \"command:\" + command.id);\n    return this;\n  };\n\n  /* -------------------- Selection ------------------- */\n  _proto.setSelectedIds = function setSelectedIds(ids, push) {\n    if (push === void 0) {\n      push = false;\n    }\n\n    this.setState(function (data) {\n      return {\n        pageState: _extends({}, data.pageState, {\n          selectedIds: push ? [].concat(data.pageState.selectedIds, ids) : [].concat(ids)\n        })\n      };\n    });\n    return this;\n  };\n\n  _proto.createActiveToolShape = function createActiveToolShape(point) {\n    var id = core.Utils.uniqueId();\n    var pagePoint = core.Vec.round(this.getPagePoint(point));\n    this.setState(function (data) {\n      var _extends2;\n\n      var _data$appState = data.appState,\n          activeTool = _data$appState.activeTool,\n          activeToolType = _data$appState.activeToolType;\n      if (activeTool === 'select') return data;\n      if (!activeToolType) throw Error;\n      var utils = TLDR.getShapeUtils({\n        type: activeTool\n      });\n      var shapes = Object.values(data.page.shapes);\n      var childIndex = shapes.length === 0 ? 1 : shapes.sort(function (a, b) {\n        return b.childIndex - a.childIndex;\n      })[0].childIndex + 1;\n      return {\n        page: _extends({}, data.page, {\n          shapes: _extends({}, data.page.shapes, (_extends2 = {}, _extends2[id] = utils.create({\n            id: id,\n            parentId: data.page.id,\n            childIndex: childIndex,\n            point: pagePoint,\n            style: _extends({}, data.appState.currentStyle)\n          }), _extends2))\n        }),\n        pageState: _extends({}, data.pageState, {\n          selectedIds: [id]\n        })\n      };\n    });\n\n    var _this$getAppState = this.getAppState(),\n        activeTool = _this$getAppState.activeTool,\n        activeToolType = _this$getAppState.activeToolType;\n\n    switch (activeToolType) {\n      case 'draw':\n        {\n          this.startDrawSession(id, pagePoint);\n          break;\n        }\n\n      case 'bounds':\n        {\n          this.startTransformSession(pagePoint, core.TLBoundsCorner.BottomRight, \"create_\" + activeTool);\n          break;\n        }\n\n      case 'handle':\n        {\n          this.startHandleSession(pagePoint, 'end', \"create_\" + activeTool);\n          break;\n        }\n    }\n  }\n  /* --------------------- Events --------------------- */\n  ;\n\n  _createClass(TLDrawState, [{\n    key: \"document\",\n    get: function get() {\n      return {\n        id: this.currentDocumentId,\n        pages: this.pages,\n        pageStates: this.pageStates\n      };\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.getState();\n    }\n  }, {\n    key: \"selectedIds\",\n    get: function get() {\n      return this.pageState.selectedIds;\n    }\n  }, {\n    key: \"page\",\n    get: function get() {\n      return this.pages[this.currentPageId];\n    }\n  }, {\n    key: \"pageState\",\n    get: function get() {\n      return this.pageStates[this.currentPageId];\n    }\n  }, {\n    key: \"appState\",\n    get: function get() {\n      return this.data.appState;\n    }\n  }]);\n\n  return TLDrawState;\n}();\n\nvar hideBoundsSelector = function hideBoundsSelector(s) {\n  return s.appState.activeTool !== 'select' || s.pageState.selectedIds.length === 1 && s.pageState.selectedIds.every(function (id) {\n    return s.page.shapes[id].handles !== undefined;\n  });\n};\n\nvar pageSelector = function pageSelector(s) {\n  return s.page;\n};\n\nvar pageStateSelector = function pageStateSelector(s) {\n  return s.pageState;\n};\n\nfunction TLDraw(_ref) {\n  var document = _ref.document,\n      currentPageId = _ref.currentPageId,\n      onMount = _ref.onMount,\n      _onChange = _ref.onChange;\n\n  var _React$useState = React.useState(function () {\n    return new TLDrawState();\n  }),\n      tlstate = _React$useState[0];\n\n  var _React$useState2 = React.useState(function () {\n    return {\n      tlstate: tlstate,\n      useAppState: tlstate.store\n    };\n  }),\n      context = _React$useState2[0];\n\n  useKeyboardShortcuts(tlstate);\n  var hideBounds = context.useAppState(hideBoundsSelector);\n  var page = context.useAppState(pageSelector);\n  var pageState = context.useAppState(pageStateSelector);\n  React.useEffect(function () {\n    if (!document) return;\n    tlstate.loadDocument(document, _onChange);\n  }, [document, tlstate]);\n  React.useEffect(function () {\n    if (!currentPageId) return;\n    tlstate.setCurrentPageId(currentPageId);\n  }, [currentPageId, tlstate]);\n  React.useEffect(function () {\n    onMount == null ? void 0 : onMount(tlstate); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(TLDrawContext.Provider, {\n    value: context\n  }, React.createElement(reactId.IdProvider, null, React.createElement(Layout, null, React.createElement(ContextMenu, null, React.createElement(core.Renderer, {\n    page: page,\n    pageState: pageState,\n    shapeUtils: tldrawShapeUtils,\n    hideBounds: hideBounds,\n    onPinchStart: tlstate.onPinchStart,\n    onPinchEnd: tlstate.onPinchEnd,\n    onPinch: tlstate.onPinch,\n    onPan: tlstate.onPan,\n    onZoom: tlstate.onZoom,\n    onPointerDown: tlstate.onPointerDown,\n    onPointerMove: tlstate.onPointerMove,\n    onPointerUp: tlstate.onPointerUp,\n    onPointCanvas: tlstate.onPointCanvas,\n    onDoubleClickCanvas: tlstate.onDoubleClickCanvas,\n    onRightPointCanvas: tlstate.onRightPointCanvas,\n    onDragCanvas: tlstate.onDragCanvas,\n    onReleaseCanvas: tlstate.onReleaseCanvas,\n    onPointShape: tlstate.onPointShape,\n    onDoubleClickShape: tlstate.onDoubleClickShape,\n    onRightPointShape: tlstate.onRightPointShape,\n    onDragShape: tlstate.onDragShape,\n    onHoverShape: tlstate.onHoverShape,\n    onUnhoverShape: tlstate.onUnhoverShape,\n    onReleaseShape: tlstate.onReleaseShape,\n    onPointBounds: tlstate.onPointBounds,\n    onDoubleClickBounds: tlstate.onDoubleClickBounds,\n    onRightPointBounds: tlstate.onRightPointBounds,\n    onDragBounds: tlstate.onDragBounds,\n    onHoverBounds: tlstate.onHoverBounds,\n    onUnhoverBounds: tlstate.onUnhoverBounds,\n    onReleaseBounds: tlstate.onReleaseBounds,\n    onPointBoundsHandle: tlstate.onPointBoundsHandle,\n    onDoubleClickBoundsHandle: tlstate.onDoubleClickBoundsHandle,\n    onRightPointBoundsHandle: tlstate.onRightPointBoundsHandle,\n    onDragBoundsHandle: tlstate.onDragBoundsHandle,\n    onHoverBoundsHandle: tlstate.onHoverBoundsHandle,\n    onUnhoverBoundsHandle: tlstate.onUnhoverBoundsHandle,\n    onReleaseBoundsHandle: tlstate.onReleaseBoundsHandle,\n    onPointHandle: tlstate.onPointHandle,\n    onDoubleClickHandle: tlstate.onDoubleClickHandle,\n    onRightPointHandle: tlstate.onRightPointHandle,\n    onDragHandle: tlstate.onDragHandle,\n    onHoverHandle: tlstate.onHoverHandle,\n    onUnhoverHandle: tlstate.onUnhoverHandle,\n    onReleaseHandle: tlstate.onReleaseHandle,\n    onChange: tlstate.onChange,\n    onError: tlstate.onError,\n    onBlurEditingShape: tlstate.onBlurEditingShape\n  })), React.createElement(Spacer, null), React.createElement(StylePanel, null), React.createElement(ToolsPanel, null))));\n}\nvar Spacer = /*#__PURE__*/styled('div', {\n  flexGrow: 2\n}); // const MenuButtons = styled('div', {\n//   display: 'flex',\n//   gap: 8,\n// })\n\nvar Layout = /*#__PURE__*/styled('main', {\n  position: 'fixed',\n  overflow: 'hidden',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  height: '100%',\n  width: '100%',\n  padding: '8px 8px 0 8px',\n  zIndex: 200,\n  display: 'flex',\n  alignItems: 'flex-start',\n  justifyContent: 'flex-start',\n  boxSizing: 'border-box',\n  outline: 'none',\n  pointerEvents: 'none',\n  '& > *': {\n    pointerEvents: 'all'\n  },\n  '& .tl-container': {\n    position: 'absolute',\n    top: 0,\n    left: 0\n  }\n});\n\nexports.TLDraw = TLDraw;\nexports.TLDrawShapeUtil = TLDrawShapeUtil;\nexports.TLDrawState = TLDrawState;\nexports.createShape = createShape;\nexports.defaultStyle = defaultStyle;\nexports.fills = fills;\nexports.getFontSize = getFontSize;\nexports.getFontStyle = getFontStyle;\nexports.getPerfectDashProps = getPerfectDashProps;\nexports.getShapeStyle = getShapeStyle;\nexports.getShapeUtils = getShapeUtils;\nexports.getStrokeWidth = getStrokeWidth;\nexports.strokes = strokes;\nexports.tldrawShapeUtils = tldrawShapeUtils;\n//# sourceMappingURL=tldraw.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../packages/tldraw/dist/tldraw.cjs.development.js\n");

/***/ })

};
;