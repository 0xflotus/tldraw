import { TLBoundsCorner, TLBoundsEdge, TLBoundsEventHandler, TLBoundsHandleEventHandler, TLCallbacks, TLCanvasEventHandler, TLKeyboardInfo, TLPage, TLPageState, TLPinchEventHandler, TLPointerEventHandler, TLWheelEventHandler } from '@tldraw/core';
import { ShapeStyles, TLDrawShape, TLDrawShapeType, TLDrawToolType } from '../shape';
import type { Data, Session, Command, History, TLDrawStatus, ParametersExceptFirst } from './state-types';
import { TLDrawDocument, AlignType, StretchType, DistributeType } from '../types';
export declare class TLDrawState implements TLCallbacks {
    store: import("zustand").UseStore<Data>;
    history: History;
    clipboard?: TLDrawShape[];
    session?: Session;
    status: {
        current: TLDrawStatus;
        previous: TLDrawStatus;
    };
    pointedId?: string;
    pointedHandle?: string;
    editingId?: string;
    pointedBoundsHandle?: TLBoundsCorner | TLBoundsEdge | 'rotate';
    currentDocumentId: string;
    currentPageId: string;
    pages: Record<string, TLPage<TLDrawShape>>;
    pageStates: Record<string, TLPageState>;
    _onChange?: (state: TLDrawState, reason: string) => void;
    getState: import("zustand").GetState<Data>;
    setState: <T extends keyof Data>(data: Partial<Data> | ((data: Data) => Partial<Data>)) => this;
    getShape: <T extends TLDrawShape = TLDrawShape>(id: string) => T;
    getPage: (id?: string) => TLPage<TLDrawShape>;
    getPageState: (id?: string) => TLPageState;
    getAppState: (id?: string) => {
        selectedStyle: ShapeStyles;
        currentStyle: ShapeStyles;
        currentPageId: string;
        pages: Pick<TLPage<TLDrawShape>, "id" | "childIndex" | "name">[];
        hoveredId?: string | undefined;
        activeTool: TLDrawShapeType | "select";
        activeToolType?: TLDrawToolType | "select" | undefined;
        isToolLocked: boolean;
        isStyleOpen: boolean;
        isEmptyCanvas: boolean;
    };
    getPagePoint: (point: number[]) => number[];
    toggleStylePanel: () => this;
    togglePenMode: () => this;
    toggleDarkMode: () => this;
    setStatus(status: TLDrawStatus): this;
    reset: () => this;
    selectTool: (tool: TLDrawShapeType | 'select') => this;
    toggleToolLock: () => this;
    zoomIn: () => this;
    zoomOut: () => this;
    zoomToFit: () => this;
    zoomToSelection: () => this;
    resetCamera: () => this;
    zoomToContent: () => this;
    zoomToActual: () => this;
    zoomTo(next: number): this;
    zoom: (delta: number) => this;
    pan: (delta: number[]) => this;
    pinchZoom: (point: number[], delta: number[], zoomDelta: number) => this;
    loadDocument: (document: TLDrawDocument, onChange?: TLDrawState['_onChange']) => this;
    setCurrentPageId(pageId: string): this;
    startSession<T extends Session>(session: T, ...args: ParametersExceptFirst<T['start']>): this;
    updateSession<T extends Session>(...args: ParametersExceptFirst<T['update']>): this;
    cancelSession<T extends Session>(...args: ParametersExceptFirst<T['cancel']>): this;
    completeSession<T extends Session>(...args: ParametersExceptFirst<T['complete']>): this;
    do(command: Command): this;
    undo: () => this;
    redo: () => this;
    setSelectedIds(ids: string[], push?: boolean): this;
    select: (...ids: string[]) => this;
    selectAll: () => this;
    deselectAll: () => this;
    style: (style: Partial<ShapeStyles>, ids?: string[] | undefined) => this;
    align: (type: AlignType, ids?: string[] | undefined) => this;
    distribute: (type: DistributeType, ids?: string[] | undefined) => this;
    stretch: (type: StretchType, ids?: string[] | undefined) => this;
    flipHorizontal: (ids?: string[] | undefined) => this;
    flipVertical: (ids?: string[] | undefined) => this;
    moveToBack: (ids?: string[] | undefined) => this;
    moveBackward: (ids?: string[] | undefined) => this;
    moveForward: (ids?: string[] | undefined) => this;
    moveToFront: (ids?: string[] | undefined) => this;
    nudge: (delta: number[], isMajor?: boolean, ids?: string[] | undefined) => this;
    duplicate: (ids?: string[] | undefined) => this;
    toggleHidden: (ids?: string[] | undefined) => this;
    toggleLocked: (ids?: string[] | undefined) => this;
    toggleAspectRatioLocked: (ids?: string[] | undefined) => this;
    rotate: (delta?: number, ids?: string[] | undefined) => this;
    group: (ids?: string[] | undefined) => this;
    create: (...shapes: TLDrawShape[]) => this;
    delete: (ids?: string[] | undefined) => this;
    clear: () => this;
    cancel: () => this;
    copy: (ids?: string[] | undefined) => this;
    paste: (string?: string | undefined) => this;
    copyAsSvg: () => string;
    copyAsJson: () => {};
    save: () => this;
    startBrushSession: (point: number[]) => this;
    updateBrushSession: (point: number[], metaKey?: boolean) => this;
    startTranslateSession: (point: number[]) => this;
    updateTranslateSession: (point: number[], shiftKey?: boolean, altKey?: boolean) => this;
    startTransformSession: (point: number[], handle: TLBoundsCorner | TLBoundsEdge | 'rotate', commandId?: string | undefined) => this;
    updateTransformSession: (point: number[], shiftKey?: boolean, altKey?: boolean) => this;
    startTextSession: (id?: string | undefined) => this;
    updateTextSession: (text: string) => this;
    startDrawSession: (id: string, point: number[]) => this;
    updateDrawSession: (point: number[], pressure: number, shiftKey?: boolean) => this;
    startHandleSession: (point: number[], handleId: string, commandId?: string | undefined) => this;
    updateHandleSession: (point: number[], shiftKey?: boolean, altKey?: boolean, metaKey?: boolean) => this;
    updateSessionsOnPointerMove: TLPointerEventHandler;
    createActiveToolShape(point: number[]): void;
    onKeyDown: (key: string, info: TLKeyboardInfo) => void;
    onKeyUp: (key: string, info: TLKeyboardInfo) => void;
    onPinchStart: TLPinchEventHandler;
    onPinchEnd: TLPinchEventHandler;
    onPinch: TLPinchEventHandler;
    onPan: TLWheelEventHandler;
    onZoom: TLWheelEventHandler;
    onPointerDown: TLPointerEventHandler;
    onPointerMove: TLPointerEventHandler;
    onPointerUp: TLPointerEventHandler;
    onPointCanvas: TLCanvasEventHandler;
    onDoubleClickCanvas: TLCanvasEventHandler;
    onRightPointCanvas: TLCanvasEventHandler;
    onDragCanvas: TLCanvasEventHandler;
    onReleaseCanvas: TLCanvasEventHandler;
    onPointShape: TLPointerEventHandler;
    onReleaseShape: TLPointerEventHandler;
    onDoubleClickShape: TLPointerEventHandler;
    onRightPointShape: TLPointerEventHandler;
    onDragShape: TLPointerEventHandler;
    onHoverShape: TLPointerEventHandler;
    onUnhoverShape: TLPointerEventHandler;
    onPointBounds: TLBoundsEventHandler;
    onDoubleClickBounds: TLBoundsEventHandler;
    onRightPointBounds: TLBoundsEventHandler;
    onDragBounds: TLBoundsEventHandler;
    onHoverBounds: TLBoundsEventHandler;
    onUnhoverBounds: TLBoundsEventHandler;
    onReleaseBounds: TLBoundsEventHandler;
    onPointBoundsHandle: TLBoundsHandleEventHandler;
    onDoubleClickBoundsHandle: TLBoundsHandleEventHandler;
    onRightPointBoundsHandle: TLBoundsHandleEventHandler;
    onDragBoundsHandle: TLBoundsHandleEventHandler;
    onHoverBoundsHandle: TLBoundsHandleEventHandler;
    onUnhoverBoundsHandle: TLBoundsHandleEventHandler;
    onReleaseBoundsHandle: TLBoundsHandleEventHandler;
    onPointHandle: TLPointerEventHandler;
    onDoubleClickHandle: TLPointerEventHandler;
    onRightPointHandle: TLPointerEventHandler;
    onDragHandle: TLPointerEventHandler;
    onHoverHandle: TLPointerEventHandler;
    onUnhoverHandle: TLPointerEventHandler;
    onReleaseHandle: TLPointerEventHandler;
    onTextChange: (_id: string, text: string) => void;
    onTextBlur: (_id: string) => void;
    onTextFocus: (_id: string) => void;
    onTextKeyDown: (_id: string, key: string) => void;
    onTextKeyUp: (_id: string, key: string) => void;
    onChange: (ids: string[]) => void;
    onError: (error: Error) => void;
    onBlurEditingShape: () => void;
    get document(): TLDrawDocument;
    get data(): Data;
    get selectedIds(): string[];
    get page(): TLPage<TLDrawShape>;
    get pageState(): TLPageState;
    get appState(): {
        selectedStyle: ShapeStyles;
        currentStyle: ShapeStyles;
        currentPageId: string;
        pages: Pick<TLPage<TLDrawShape>, "id" | "childIndex" | "name">[];
        hoveredId?: string | undefined;
        activeTool: TLDrawShapeType | "select";
        activeToolType?: TLDrawToolType | "select" | undefined;
        isToolLocked: boolean;
        isStyleOpen: boolean;
        isEmptyCanvas: boolean;
    };
}
